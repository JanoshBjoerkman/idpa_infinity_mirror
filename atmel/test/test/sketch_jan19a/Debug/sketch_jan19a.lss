
sketch_jan19a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007c14  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000074  00007c14  00007c14  00017c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000110  20000000  00007c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000008d4  20000110  00007d98  00020110  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
  6 .debug_info   00042158  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000567e  00000000  00000000  000622e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006326  00000000  00000000  00067967  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010b8  00000000  00000000  0006dc8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f88  00000000  00000000  0006ed45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001df16  00000000  00000000  0006fccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014258  00000000  00000000  0008dbe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c7c4  00000000  00000000  000a1e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003e5c  00000000  00000000  0012e600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__text_start__>:
       0:	20008000 	.word	0x20008000
       4:	00001621 	.word	0x00001621
       8:	00001619 	.word	0x00001619
       c:	00001619 	.word	0x00001619
	...
      2c:	00001619 	.word	0x00001619
	...
      38:	00001619 	.word	0x00001619
      3c:	000016a5 	.word	0x000016a5
      40:	00001619 	.word	0x00001619
      44:	00001619 	.word	0x00001619
      48:	00001619 	.word	0x00001619
      4c:	00001619 	.word	0x00001619
      50:	00001619 	.word	0x00001619
      54:	00001619 	.word	0x00001619
      58:	00001619 	.word	0x00001619
      5c:	000016bd 	.word	0x000016bd
      60:	00001619 	.word	0x00001619
      64:	00005459 	.word	0x00005459
      68:	00001619 	.word	0x00001619
      6c:	00001619 	.word	0x00001619
      70:	00001619 	.word	0x00001619
      74:	00001619 	.word	0x00001619
      78:	00005471 	.word	0x00005471
      7c:	00001619 	.word	0x00001619
      80:	00001619 	.word	0x00001619
      84:	00001619 	.word	0x00001619
      88:	00001619 	.word	0x00001619
      8c:	00001619 	.word	0x00001619
      90:	00000000 	.word	0x00000000
      94:	00001619 	.word	0x00001619
      98:	00001619 	.word	0x00001619
      9c:	00001619 	.word	0x00001619
      a0:	00001619 	.word	0x00001619
      a4:	00001619 	.word	0x00001619
      a8:	00001619 	.word	0x00001619
      ac:	00001619 	.word	0x00001619
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000110 	.word	0x20000110
      d4:	00000000 	.word	0x00000000
      d8:	00007c10 	.word	0x00007c10

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000114 	.word	0x20000114
     108:	00007c10 	.word	0x00007c10
     10c:	2000010c 	.word	0x2000010c
     110:	00000000 	.word	0x00000000

00000114 <_ZN14CLEDControllerC1Ev>:
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     114:	b580      	push	{r7, lr}
     116:	b086      	sub	sp, #24
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
     11c:	4a25      	ldr	r2, [pc, #148]	; (1b4 <_ZN14CLEDControllerC1Ev+0xa0>)
     11e:	687b      	ldr	r3, [r7, #4]
     120:	601a      	str	r2, [r3, #0]
     122:	687b      	ldr	r3, [r7, #4]
     124:	2200      	movs	r2, #0
     126:	605a      	str	r2, [r3, #4]
     128:	687b      	ldr	r3, [r7, #4]
     12a:	330c      	adds	r3, #12
     12c:	617b      	str	r3, [r7, #20]
     12e:	4b22      	ldr	r3, [pc, #136]	; (1b8 <_ZN14CLEDControllerC1Ev+0xa4>)
     130:	60bb      	str	r3, [r7, #8]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     132:	68bb      	ldr	r3, [r7, #8]
     134:	141b      	asrs	r3, r3, #16
     136:	b2da      	uxtb	r2, r3
     138:	697b      	ldr	r3, [r7, #20]
     13a:	701a      	strb	r2, [r3, #0]
     13c:	68bb      	ldr	r3, [r7, #8]
     13e:	121b      	asrs	r3, r3, #8
     140:	b2da      	uxtb	r2, r3
     142:	697b      	ldr	r3, [r7, #20]
     144:	705a      	strb	r2, [r3, #1]
     146:	68bb      	ldr	r3, [r7, #8]
     148:	b2da      	uxtb	r2, r3
     14a:	697b      	ldr	r3, [r7, #20]
     14c:	709a      	strb	r2, [r3, #2]
     14e:	687b      	ldr	r3, [r7, #4]
     150:	330f      	adds	r3, #15
     152:	613b      	str	r3, [r7, #16]
     154:	4b18      	ldr	r3, [pc, #96]	; (1b8 <_ZN14CLEDControllerC1Ev+0xa4>)
     156:	60fb      	str	r3, [r7, #12]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     158:	68fb      	ldr	r3, [r7, #12]
     15a:	141b      	asrs	r3, r3, #16
     15c:	b2da      	uxtb	r2, r3
     15e:	693b      	ldr	r3, [r7, #16]
     160:	701a      	strb	r2, [r3, #0]
     162:	68fb      	ldr	r3, [r7, #12]
     164:	121b      	asrs	r3, r3, #8
     166:	b2da      	uxtb	r2, r3
     168:	693b      	ldr	r3, [r7, #16]
     16a:	705a      	strb	r2, [r3, #1]
     16c:	68fb      	ldr	r3, [r7, #12]
     16e:	b2da      	uxtb	r2, r3
     170:	693b      	ldr	r3, [r7, #16]
     172:	709a      	strb	r2, [r3, #2]
     174:	687b      	ldr	r3, [r7, #4]
     176:	2201      	movs	r2, #1
     178:	749a      	strb	r2, [r3, #18]
     17a:	687b      	ldr	r3, [r7, #4]
     17c:	2200      	movs	r2, #0
     17e:	615a      	str	r2, [r3, #20]
        m_pNext = NULL;
     180:	687b      	ldr	r3, [r7, #4]
     182:	2200      	movs	r2, #0
     184:	609a      	str	r2, [r3, #8]
        if(m_pHead==NULL) { m_pHead = this; }
     186:	4b0d      	ldr	r3, [pc, #52]	; (1bc <_ZN14CLEDControllerC1Ev+0xa8>)
     188:	681b      	ldr	r3, [r3, #0]
     18a:	2b00      	cmp	r3, #0
     18c:	d102      	bne.n	194 <_ZN14CLEDControllerC1Ev+0x80>
     18e:	4b0b      	ldr	r3, [pc, #44]	; (1bc <_ZN14CLEDControllerC1Ev+0xa8>)
     190:	687a      	ldr	r2, [r7, #4]
     192:	601a      	str	r2, [r3, #0]
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     194:	4b0a      	ldr	r3, [pc, #40]	; (1c0 <_ZN14CLEDControllerC1Ev+0xac>)
     196:	681b      	ldr	r3, [r3, #0]
     198:	2b00      	cmp	r3, #0
     19a:	d003      	beq.n	1a4 <_ZN14CLEDControllerC1Ev+0x90>
     19c:	4b08      	ldr	r3, [pc, #32]	; (1c0 <_ZN14CLEDControllerC1Ev+0xac>)
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	687a      	ldr	r2, [r7, #4]
     1a2:	609a      	str	r2, [r3, #8]
        m_pTail = this;
     1a4:	4b06      	ldr	r3, [pc, #24]	; (1c0 <_ZN14CLEDControllerC1Ev+0xac>)
     1a6:	687a      	ldr	r2, [r7, #4]
     1a8:	601a      	str	r2, [r3, #0]
    }
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	0018      	movs	r0, r3
     1ae:	46bd      	mov	sp, r7
     1b0:	b006      	add	sp, #24
     1b2:	bd80      	pop	{r7, pc}
     1b4:	000075f8 	.word	0x000075f8
     1b8:	00ffffff 	.word	0x00ffffff
     1bc:	200007f4 	.word	0x200007f4
     1c0:	200007f8 	.word	0x200007f8

000001c4 <_ZN14CLEDController9clearLedsEi>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     1c4:	b580      	push	{r7, lr}
     1c6:	b084      	sub	sp, #16
     1c8:	af00      	add	r7, sp, #0
     1ca:	6078      	str	r0, [r7, #4]
     1cc:	6039      	str	r1, [r7, #0]
     1ce:	2300      	movs	r3, #0
     1d0:	60fb      	str	r3, [r7, #12]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     1d2:	68fb      	ldr	r3, [r7, #12]
     1d4:	0c1b      	lsrs	r3, r3, #16
     1d6:	b2da      	uxtb	r2, r3
     1d8:	2308      	movs	r3, #8
     1da:	18fb      	adds	r3, r7, r3
     1dc:	701a      	strb	r2, [r3, #0]
     1de:	68fb      	ldr	r3, [r7, #12]
     1e0:	0a1b      	lsrs	r3, r3, #8
     1e2:	b2da      	uxtb	r2, r3
     1e4:	2308      	movs	r3, #8
     1e6:	18fb      	adds	r3, r7, r3
     1e8:	705a      	strb	r2, [r3, #1]
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	b2da      	uxtb	r2, r3
     1ee:	2308      	movs	r3, #8
     1f0:	18fb      	adds	r3, r7, r3
     1f2:	709a      	strb	r2, [r3, #2]
     1f4:	683a      	ldr	r2, [r7, #0]
     1f6:	2308      	movs	r3, #8
     1f8:	18f9      	adds	r1, r7, r3
     1fa:	6878      	ldr	r0, [r7, #4]
     1fc:	2300      	movs	r3, #0
     1fe:	f000 f805 	bl	20c <_ZN14CLEDController9showColorERK4CRGBih>
     202:	46c0      	nop			; (mov r8, r8)
     204:	46bd      	mov	sp, r7
     206:	b004      	add	sp, #16
     208:	bd80      	pop	{r7, pc}
     20a:	46c0      	nop			; (mov r8, r8)

0000020c <_ZN14CLEDController9showColorERK4CRGBih>:
    void show(const struct CRGB *data, int nLeds, uint8_t brightness) {
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
     20c:	b590      	push	{r4, r7, lr}
     20e:	b087      	sub	sp, #28
     210:	af00      	add	r7, sp, #0
     212:	60f8      	str	r0, [r7, #12]
     214:	60b9      	str	r1, [r7, #8]
     216:	607a      	str	r2, [r7, #4]
     218:	001a      	movs	r2, r3
     21a:	1cfb      	adds	r3, r7, #3
     21c:	701a      	strb	r2, [r3, #0]
        showColor(data, nLeds, getAdjustment(brightness));
     21e:	68fb      	ldr	r3, [r7, #12]
     220:	681b      	ldr	r3, [r3, #0]
     222:	681c      	ldr	r4, [r3, #0]
     224:	2314      	movs	r3, #20
     226:	18f8      	adds	r0, r7, r3
     228:	1cfb      	adds	r3, r7, #3
     22a:	781a      	ldrb	r2, [r3, #0]
     22c:	68fb      	ldr	r3, [r7, #12]
     22e:	0019      	movs	r1, r3
     230:	f000 f83c 	bl	2ac <_ZN14CLEDController13getAdjustmentEh>
     234:	2314      	movs	r3, #20
     236:	18fb      	adds	r3, r7, r3
     238:	687a      	ldr	r2, [r7, #4]
     23a:	68b9      	ldr	r1, [r7, #8]
     23c:	68f8      	ldr	r0, [r7, #12]
     23e:	47a0      	blx	r4
    }
     240:	46c0      	nop			; (mov r8, r8)
     242:	46bd      	mov	sp, r7
     244:	b007      	add	sp, #28
     246:	bd90      	pop	{r4, r7, pc}

00000248 <_ZN14CLEDController4sizeEv>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     248:	b580      	push	{r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af00      	add	r7, sp, #0
     24e:	6078      	str	r0, [r7, #4]
     250:	687b      	ldr	r3, [r7, #4]
     252:	695b      	ldr	r3, [r3, #20]
     254:	0018      	movs	r0, r3
     256:	46bd      	mov	sp, r7
     258:	b002      	add	sp, #8
     25a:	bd80      	pop	{r7, pc}

0000025c <_ZN14CLEDController9getDitherEv>:
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    /// get the dithering option currently set for this controller
    inline uint8_t getDither() { return m_DitherMode; }
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
     264:	687b      	ldr	r3, [r7, #4]
     266:	7c9b      	ldrb	r3, [r3, #18]
     268:	0018      	movs	r0, r3
     26a:	46bd      	mov	sp, r7
     26c:	b002      	add	sp, #8
     26e:	bd80      	pop	{r7, pc}

00000270 <_ZN14CLEDController13setCorrectionE18LEDColorCorrection>:

	/// the the color corrction to use for this controller, expressed as an rgb object
    CLEDController & setCorrection(CRGB correction) { m_ColorCorrection = correction; return *this; }
    /// set the color correction to use for this controller
    CLEDController & setCorrection(LEDColorCorrection correction) { m_ColorCorrection = correction; return *this; }
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
     276:	6078      	str	r0, [r7, #4]
     278:	6039      	str	r1, [r7, #0]
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	330c      	adds	r3, #12
     27e:	60fb      	str	r3, [r7, #12]
     280:	683b      	ldr	r3, [r7, #0]
     282:	60bb      	str	r3, [r7, #8]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     284:	68bb      	ldr	r3, [r7, #8]
     286:	0c1b      	lsrs	r3, r3, #16
     288:	b2da      	uxtb	r2, r3
     28a:	68fb      	ldr	r3, [r7, #12]
     28c:	701a      	strb	r2, [r3, #0]
        g = (colorcode >>  8) & 0xFF;
     28e:	68bb      	ldr	r3, [r7, #8]
     290:	0a1b      	lsrs	r3, r3, #8
     292:	b2da      	uxtb	r2, r3
     294:	68fb      	ldr	r3, [r7, #12]
     296:	705a      	strb	r2, [r3, #1]
        b = (colorcode >>  0) & 0xFF;
     298:	68bb      	ldr	r3, [r7, #8]
     29a:	b2da      	uxtb	r2, r3
     29c:	68fb      	ldr	r3, [r7, #12]
     29e:	709a      	strb	r2, [r3, #2]
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	0018      	movs	r0, r3
     2a4:	46bd      	mov	sp, r7
     2a6:	b004      	add	sp, #16
     2a8:	bd80      	pop	{r7, pc}
     2aa:	46c0      	nop			; (mov r8, r8)

000002ac <_ZN14CLEDController13getAdjustmentEh>:
    CLEDController & setTemperature(ColorTemperature temperature) { m_ColorTemperature = temperature; return *this; }
    /// get the color temperature, aka whipe point, for this controller
    CRGB getTemperature() { return m_ColorTemperature; }

	/// Get the combined brightness/color adjustment for this controller
    CRGB getAdjustment(uint8_t scale) {
     2ac:	b590      	push	{r4, r7, lr}
     2ae:	b085      	sub	sp, #20
     2b0:	af00      	add	r7, sp, #0
     2b2:	60f8      	str	r0, [r7, #12]
     2b4:	60b9      	str	r1, [r7, #8]
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	701a      	strb	r2, [r3, #0]
        return computeAdjustment(scale, m_ColorCorrection, m_ColorTemperature);
     2ba:	68bb      	ldr	r3, [r7, #8]
     2bc:	330c      	adds	r3, #12
     2be:	001a      	movs	r2, r3
     2c0:	68bb      	ldr	r3, [r7, #8]
     2c2:	330f      	adds	r3, #15
     2c4:	001c      	movs	r4, r3
     2c6:	68f8      	ldr	r0, [r7, #12]
     2c8:	1dfb      	adds	r3, r7, #7
     2ca:	7819      	ldrb	r1, [r3, #0]
     2cc:	0023      	movs	r3, r4
     2ce:	f000 f805 	bl	2dc <_ZN14CLEDController17computeAdjustmentEhRK4CRGBS2_>
    }
     2d2:	68f8      	ldr	r0, [r7, #12]
     2d4:	46bd      	mov	sp, r7
     2d6:	b005      	add	sp, #20
     2d8:	bd90      	pop	{r4, r7, pc}
     2da:	46c0      	nop			; (mov r8, r8)

000002dc <_ZN14CLEDController17computeAdjustmentEhRK4CRGBS2_>:

    static CRGB computeAdjustment(uint8_t scale, const CRGB & colorCorrection, const CRGB & colorTemperature) {
     2dc:	b580      	push	{r7, lr}
     2de:	b088      	sub	sp, #32
     2e0:	af00      	add	r7, sp, #0
     2e2:	60f8      	str	r0, [r7, #12]
     2e4:	607a      	str	r2, [r7, #4]
     2e6:	603b      	str	r3, [r7, #0]
     2e8:	230b      	movs	r3, #11
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	1c0a      	adds	r2, r1, #0
     2ee:	701a      	strb	r2, [r3, #0]
     2f0:	68fb      	ldr	r3, [r7, #12]
     2f2:	617b      	str	r3, [r7, #20]
     2f4:	2313      	movs	r3, #19
     2f6:	18fb      	adds	r3, r7, r3
     2f8:	2200      	movs	r2, #0
     2fa:	701a      	strb	r2, [r3, #0]
     2fc:	2312      	movs	r3, #18
     2fe:	18fb      	adds	r3, r7, r3
     300:	2200      	movs	r2, #0
     302:	701a      	strb	r2, [r3, #0]
     304:	2311      	movs	r3, #17
     306:	18fb      	adds	r3, r7, r3
     308:	2200      	movs	r2, #0
     30a:	701a      	strb	r2, [r3, #0]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     30c:	697b      	ldr	r3, [r7, #20]
     30e:	2213      	movs	r2, #19
     310:	18ba      	adds	r2, r7, r2
     312:	7812      	ldrb	r2, [r2, #0]
     314:	701a      	strb	r2, [r3, #0]
     316:	697b      	ldr	r3, [r7, #20]
     318:	2212      	movs	r2, #18
     31a:	18ba      	adds	r2, r7, r2
     31c:	7812      	ldrb	r2, [r2, #0]
     31e:	705a      	strb	r2, [r3, #1]
     320:	697b      	ldr	r3, [r7, #20]
     322:	2211      	movs	r2, #17
     324:	18ba      	adds	r2, r7, r2
     326:	7812      	ldrb	r2, [r2, #0]
     328:	709a      	strb	r2, [r3, #2]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
     32a:	230b      	movs	r3, #11
     32c:	18fb      	adds	r3, r7, r3
     32e:	781b      	ldrb	r3, [r3, #0]
     330:	2b00      	cmp	r3, #0
     332:	d042      	beq.n	3ba <_ZN14CLEDController17computeAdjustmentEhRK4CRGBS2_+0xde>
                  for(uint8_t i = 0; i < 3; i++) {
     334:	231f      	movs	r3, #31
     336:	18fb      	adds	r3, r7, r3
     338:	2200      	movs	r2, #0
     33a:	701a      	strb	r2, [r3, #0]
     33c:	231f      	movs	r3, #31
     33e:	18fb      	adds	r3, r7, r3
     340:	781b      	ldrb	r3, [r3, #0]
     342:	2b02      	cmp	r3, #2
     344:	d839      	bhi.n	3ba <_ZN14CLEDController17computeAdjustmentEhRK4CRGBS2_+0xde>
                      uint8_t cc = colorCorrection.raw[i];
     346:	231f      	movs	r3, #31
     348:	18fb      	adds	r3, r7, r3
     34a:	781a      	ldrb	r2, [r3, #0]
     34c:	231e      	movs	r3, #30
     34e:	18fb      	adds	r3, r7, r3
     350:	6879      	ldr	r1, [r7, #4]
     352:	5c8a      	ldrb	r2, [r1, r2]
     354:	701a      	strb	r2, [r3, #0]
                      uint8_t ct = colorTemperature.raw[i];
     356:	231f      	movs	r3, #31
     358:	18fb      	adds	r3, r7, r3
     35a:	781a      	ldrb	r2, [r3, #0]
     35c:	231d      	movs	r3, #29
     35e:	18fb      	adds	r3, r7, r3
     360:	6839      	ldr	r1, [r7, #0]
     362:	5c8a      	ldrb	r2, [r1, r2]
     364:	701a      	strb	r2, [r3, #0]
                      if(cc > 0 && ct > 0) {
     366:	231e      	movs	r3, #30
     368:	18fb      	adds	r3, r7, r3
     36a:	781b      	ldrb	r3, [r3, #0]
     36c:	2b00      	cmp	r3, #0
     36e:	d01c      	beq.n	3aa <_ZN14CLEDController17computeAdjustmentEhRK4CRGBS2_+0xce>
     370:	231d      	movs	r3, #29
     372:	18fb      	adds	r3, r7, r3
     374:	781b      	ldrb	r3, [r3, #0]
     376:	2b00      	cmp	r3, #0
     378:	d017      	beq.n	3aa <_ZN14CLEDController17computeAdjustmentEhRK4CRGBS2_+0xce>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
     37a:	231e      	movs	r3, #30
     37c:	18fb      	adds	r3, r7, r3
     37e:	781b      	ldrb	r3, [r3, #0]
     380:	3301      	adds	r3, #1
     382:	221d      	movs	r2, #29
     384:	18ba      	adds	r2, r7, r2
     386:	7812      	ldrb	r2, [r2, #0]
     388:	3201      	adds	r2, #1
     38a:	4353      	muls	r3, r2
     38c:	220b      	movs	r2, #11
     38e:	18ba      	adds	r2, r7, r2
     390:	7812      	ldrb	r2, [r2, #0]
     392:	4353      	muls	r3, r2
     394:	61bb      	str	r3, [r7, #24]
                          work /= 0x10000L;
     396:	69bb      	ldr	r3, [r7, #24]
     398:	0c1b      	lsrs	r3, r3, #16
     39a:	61bb      	str	r3, [r7, #24]
                          adj.raw[i] = work & 0xFF;
     39c:	231f      	movs	r3, #31
     39e:	18fb      	adds	r3, r7, r3
     3a0:	781b      	ldrb	r3, [r3, #0]
     3a2:	69ba      	ldr	r2, [r7, #24]
     3a4:	b2d1      	uxtb	r1, r2
     3a6:	68fa      	ldr	r2, [r7, #12]
     3a8:	54d1      	strb	r1, [r2, r3]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
     3aa:	231f      	movs	r3, #31
     3ac:	18fb      	adds	r3, r7, r3
     3ae:	781a      	ldrb	r2, [r3, #0]
     3b0:	231f      	movs	r3, #31
     3b2:	18fb      	adds	r3, r7, r3
     3b4:	3201      	adds	r2, #1
     3b6:	701a      	strb	r2, [r3, #0]
     3b8:	e7c0      	b.n	33c <_ZN14CLEDController17computeAdjustmentEhRK4CRGBS2_+0x60>
                          adj.raw[i] = work & 0xFF;
                      }
                  }
              }

              return adj;
     3ba:	46c0      	nop			; (mov r8, r8)
      #endif
    }
     3bc:	68f8      	ldr	r0, [r7, #12]
     3be:	46bd      	mov	sp, r7
     3c0:	b008      	add	sp, #32
     3c2:	bd80      	pop	{r7, pc}

000003c4 <_ZNK14CLEDController17getMaxRefreshRateEv>:
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     3c4:	b580      	push	{r7, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	af00      	add	r7, sp, #0
     3ca:	6078      	str	r0, [r7, #4]
     3cc:	2300      	movs	r3, #0
     3ce:	0018      	movs	r0, r3
     3d0:	46bd      	mov	sp, r7
     3d2:	b002      	add	sp, #8
     3d4:	bd80      	pop	{r7, pc}
     3d6:	46c0      	nop			; (mov r8, r8)

000003d8 <_ZN8CFastLED13setBrightnessEh>:
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     3d8:	b580      	push	{r7, lr}
     3da:	b082      	sub	sp, #8
     3dc:	af00      	add	r7, sp, #0
     3de:	6078      	str	r0, [r7, #4]
     3e0:	000a      	movs	r2, r1
     3e2:	1cfb      	adds	r3, r7, #3
     3e4:	701a      	strb	r2, [r3, #0]
     3e6:	687b      	ldr	r3, [r7, #4]
     3e8:	1cfa      	adds	r2, r7, #3
     3ea:	7812      	ldrb	r2, [r2, #0]
     3ec:	701a      	strb	r2, [r3, #0]
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	46bd      	mov	sp, r7
     3f2:	b002      	add	sp, #8
     3f4:	bd80      	pop	{r7, pc}
     3f6:	46c0      	nop			; (mov r8, r8)

000003f8 <_ZN8CFastLED30setMaxPowerInVoltsAndMilliampsEhm>:
	uint8_t getBrightness() { return m_Scale; }

	/// Set the maximum power to be used, given in volts and milliamps.
	/// @param volts - how many volts the leds are being driven at (usually 5)
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }
     3f8:	b580      	push	{r7, lr}
     3fa:	b084      	sub	sp, #16
     3fc:	af00      	add	r7, sp, #0
     3fe:	60f8      	str	r0, [r7, #12]
     400:	607a      	str	r2, [r7, #4]
     402:	230b      	movs	r3, #11
     404:	18fb      	adds	r3, r7, r3
     406:	1c0a      	adds	r2, r1, #0
     408:	701a      	strb	r2, [r3, #0]
     40a:	230b      	movs	r3, #11
     40c:	18fb      	adds	r3, r7, r3
     40e:	781b      	ldrb	r3, [r3, #0]
     410:	687a      	ldr	r2, [r7, #4]
     412:	435a      	muls	r2, r3
     414:	68fb      	ldr	r3, [r7, #12]
     416:	0011      	movs	r1, r2
     418:	0018      	movs	r0, r3
     41a:	f000 f805 	bl	428 <_ZN8CFastLED23setMaxPowerInMilliWattsEm>
     41e:	46c0      	nop			; (mov r8, r8)
     420:	46bd      	mov	sp, r7
     422:	b004      	add	sp, #16
     424:	bd80      	pop	{r7, pc}
     426:	46c0      	nop			; (mov r8, r8)

00000428 <_ZN8CFastLED23setMaxPowerInMilliWattsEm>:

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     428:	b580      	push	{r7, lr}
     42a:	b082      	sub	sp, #8
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
     430:	6039      	str	r1, [r7, #0]
     432:	687b      	ldr	r3, [r7, #4]
     434:	4a04      	ldr	r2, [pc, #16]	; (448 <_ZN8CFastLED23setMaxPowerInMilliWattsEm+0x20>)
     436:	60da      	str	r2, [r3, #12]
     438:	687b      	ldr	r3, [r7, #4]
     43a:	683a      	ldr	r2, [r7, #0]
     43c:	609a      	str	r2, [r3, #8]
     43e:	46c0      	nop			; (mov r8, r8)
     440:	46bd      	mov	sp, r7
     442:	b002      	add	sp, #8
     444:	bd80      	pop	{r7, pc}
     446:	46c0      	nop			; (mov r8, r8)
     448:	00005305 	.word	0x00005305

0000044c <_ZN8CFastLED4showEv>:
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     44c:	b580      	push	{r7, lr}
     44e:	b082      	sub	sp, #8
     450:	af00      	add	r7, sp, #0
     452:	6078      	str	r0, [r7, #4]
     454:	687b      	ldr	r3, [r7, #4]
     456:	781a      	ldrb	r2, [r3, #0]
     458:	687b      	ldr	r3, [r7, #4]
     45a:	0011      	movs	r1, r2
     45c:	0018      	movs	r0, r3
     45e:	f004 fb1f 	bl	4aa0 <_ZN8CFastLED4showEh>
     462:	46c0      	nop			; (mov r8, r8)
     464:	46bd      	mov	sp, r7
     466:	b002      	add	sp, #8
     468:	bd80      	pop	{r7, pc}
     46a:	46c0      	nop			; (mov r8, r8)

0000046c <_ZNSt5arrayI4CRGBLj60EEC1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
     46c:	b580      	push	{r7, lr}
     46e:	b084      	sub	sp, #16
     470:	af00      	add	r7, sp, #0
     472:	6078      	str	r0, [r7, #4]
     474:	687a      	ldr	r2, [r7, #4]
     476:	233b      	movs	r3, #59	; 0x3b
     478:	1c59      	adds	r1, r3, #1
     47a:	d003      	beq.n	484 <_ZNSt5arrayI4CRGBLj60EEC1Ev+0x18>
     47c:	60fa      	str	r2, [r7, #12]
     47e:	3203      	adds	r2, #3
     480:	3b01      	subs	r3, #1
     482:	e7f9      	b.n	478 <_ZNSt5arrayI4CRGBLj60EEC1Ev+0xc>
     484:	687b      	ldr	r3, [r7, #4]
     486:	0018      	movs	r0, r3
     488:	46bd      	mov	sp, r7
     48a:	b004      	add	sp, #16
     48c:	bd80      	pop	{r7, pc}
     48e:	46c0      	nop			; (mov r8, r8)

00000490 <setup>:
constexpr static EOrder COLOR_ORDER = BGR;
constexpr static int NUM_LEDS = 60;
// led array
std::array<CRGB, NUM_LEDS> leds;

void setup() {
     490:	b5b0      	push	{r4, r5, r7, lr}
     492:	b084      	sub	sp, #16
     494:	af00      	add	r7, sp, #0
  // setup code
  FastLED.addLeds<DOTSTAR, PIN_LED_DATA, PIN_LED_CLOCK, COLOR_ORDER>(leds.data(), leds.size()).setCorrection( TypicalLEDStrip );
     496:	4b2c      	ldr	r3, [pc, #176]	; (548 <setup+0xb8>)
     498:	0018      	movs	r0, r3
     49a:	f000 f8f7 	bl	68c <_ZNSt5arrayI4CRGBLj60EE4dataEv>
     49e:	0004      	movs	r4, r0
     4a0:	4b29      	ldr	r3, [pc, #164]	; (548 <setup+0xb8>)
     4a2:	0018      	movs	r0, r3
     4a4:	f000 f900 	bl	6a8 <_ZNKSt5arrayI4CRGBLj60EE4sizeEv>
     4a8:	0003      	movs	r3, r0
     4aa:	2200      	movs	r2, #0
     4ac:	0019      	movs	r1, r3
     4ae:	0020      	movs	r0, r4
     4b0:	f000 f904 	bl	6bc <_ZN8CFastLED7addLedsIL12ESPIChipsets7ELh6ELh9EL6EOrder136EEER14CLEDControllerP4CRGBii>
     4b4:	0002      	movs	r2, r0
     4b6:	4b25      	ldr	r3, [pc, #148]	; (54c <setup+0xbc>)
     4b8:	0019      	movs	r1, r3
     4ba:	0010      	movs	r0, r2
     4bc:	f7ff fed8 	bl	270 <_ZN14CLEDController13setCorrectionE18LEDColorCorrection>
  FastLED.setBrightness(  255 );
     4c0:	4b23      	ldr	r3, [pc, #140]	; (550 <setup+0xc0>)
     4c2:	21ff      	movs	r1, #255	; 0xff
     4c4:	0018      	movs	r0, r3
     4c6:	f7ff ff87 	bl	3d8 <_ZN8CFastLED13setBrightnessEh>
  // keine ahnung obs auswirkung hat, meine PowerBank hat 2.1A darum hab ich mal 2A max eingestellt. Sollte die Helligkeit automatisch regeln wenn zuviele Leds zu hell eingestellt sind
  FastLED.setMaxPowerInVoltsAndMilliamps(5, 2000);
     4ca:	23fa      	movs	r3, #250	; 0xfa
     4cc:	00da      	lsls	r2, r3, #3
     4ce:	4b20      	ldr	r3, [pc, #128]	; (550 <setup+0xc0>)
     4d0:	2105      	movs	r1, #5
     4d2:	0018      	movs	r0, r3
     4d4:	f7ff ff90 	bl	3f8 <_ZN8CFastLED30setMaxPowerInVoltsAndMilliampsEhm>
     4d8:	230f      	movs	r3, #15
     4da:	18fb      	adds	r3, r7, r3
     4dc:	2200      	movs	r2, #0
     4de:	701a      	strb	r2, [r3, #0]
     4e0:	230e      	movs	r3, #14
     4e2:	18fb      	adds	r3, r7, r3
     4e4:	2200      	movs	r2, #0
     4e6:	701a      	strb	r2, [r3, #0]
     4e8:	230d      	movs	r3, #13
     4ea:	18fb      	adds	r3, r7, r3
     4ec:	2200      	movs	r2, #0
     4ee:	701a      	strb	r2, [r3, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     4f0:	1d3b      	adds	r3, r7, #4
     4f2:	220f      	movs	r2, #15
     4f4:	18ba      	adds	r2, r7, r2
     4f6:	7812      	ldrb	r2, [r2, #0]
     4f8:	701a      	strb	r2, [r3, #0]
     4fa:	1d3b      	adds	r3, r7, #4
     4fc:	220e      	movs	r2, #14
     4fe:	18ba      	adds	r2, r7, r2
     500:	7812      	ldrb	r2, [r2, #0]
     502:	705a      	strb	r2, [r3, #1]
     504:	1d3b      	adds	r3, r7, #4
     506:	220d      	movs	r2, #13
     508:	18ba      	adds	r2, r7, r2
     50a:	7812      	ldrb	r2, [r2, #0]
     50c:	709a      	strb	r2, [r3, #2]

  // alle leds gleiche farbe
  CHSV color(0, 0, 0) ; // rot
  fill_solid(leds.data(), leds.size(), color);
     50e:	4b0e      	ldr	r3, [pc, #56]	; (548 <setup+0xb8>)
     510:	0018      	movs	r0, r3
     512:	f000 f8bb 	bl	68c <_ZNSt5arrayI4CRGBLj60EE4dataEv>
     516:	0004      	movs	r4, r0
     518:	4b0b      	ldr	r3, [pc, #44]	; (548 <setup+0xb8>)
     51a:	0018      	movs	r0, r3
     51c:	f000 f8c4 	bl	6a8 <_ZNKSt5arrayI4CRGBLj60EE4sizeEv>
     520:	0003      	movs	r3, r0
     522:	001d      	movs	r5, r3
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     524:	2308      	movs	r3, #8
     526:	18fa      	adds	r2, r7, r3
     528:	1d3b      	adds	r3, r7, #4
     52a:	0011      	movs	r1, r2
     52c:	0018      	movs	r0, r3
     52e:	f004 fbbb 	bl	4ca8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
     532:	2308      	movs	r3, #8
     534:	18fb      	adds	r3, r7, r3
     536:	001a      	movs	r2, r3
     538:	0029      	movs	r1, r5
     53a:	0020      	movs	r0, r4
     53c:	f004 f9dc 	bl	48f8 <_Z10fill_solidP4CRGBiRKS_>
  
  
}
     540:	46c0      	nop			; (mov r8, r8)
     542:	46bd      	mov	sp, r7
     544:	b004      	add	sp, #16
     546:	bdb0      	pop	{r4, r5, r7, pc}
     548:	2000012c 	.word	0x2000012c
     54c:	00ffb0f0 	.word	0x00ffb0f0
     550:	200007e4 	.word	0x200007e4

00000554 <loop>:

int counter = 0;
bool color_flag = true;
void loop() {
     554:	b590      	push	{r4, r7, lr}
     556:	b08b      	sub	sp, #44	; 0x2c
     558:	af00      	add	r7, sp, #0
  
    for(int i = 0; i < 30; i++)
     55a:	2300      	movs	r3, #0
     55c:	627b      	str	r3, [r7, #36]	; 0x24
     55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     560:	2b1d      	cmp	r3, #29
     562:	dc4d      	bgt.n	600 <loop+0xac>
    {
        double col = 255/30 * i;
     564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     566:	00db      	lsls	r3, r3, #3
     568:	0018      	movs	r0, r3
     56a:	f006 fe93 	bl	7294 <__aeabi_i2d>
     56e:	0003      	movs	r3, r0
     570:	000c      	movs	r4, r1
     572:	61bb      	str	r3, [r7, #24]
     574:	61fc      	str	r4, [r7, #28]
        CHSV color(static_cast<uint8_t>(col), 255, counter);
     576:	69b8      	ldr	r0, [r7, #24]
     578:	69f9      	ldr	r1, [r7, #28]
     57a:	f006 f9d5 	bl	6928 <__aeabi_d2uiz>
     57e:	0003      	movs	r3, r0
     580:	b2d9      	uxtb	r1, r3
     582:	4b39      	ldr	r3, [pc, #228]	; (668 <loop+0x114>)
     584:	681b      	ldr	r3, [r3, #0]
     586:	b2da      	uxtb	r2, r3
     588:	2317      	movs	r3, #23
     58a:	18fb      	adds	r3, r7, r3
     58c:	7019      	strb	r1, [r3, #0]
     58e:	230b      	movs	r3, #11
     590:	18fb      	adds	r3, r7, r3
     592:	21ff      	movs	r1, #255	; 0xff
     594:	7019      	strb	r1, [r3, #0]
     596:	230a      	movs	r3, #10
     598:	18fb      	adds	r3, r7, r3
     59a:	701a      	strb	r2, [r3, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     59c:	1d3b      	adds	r3, r7, #4
     59e:	2217      	movs	r2, #23
     5a0:	18ba      	adds	r2, r7, r2
     5a2:	7812      	ldrb	r2, [r2, #0]
     5a4:	701a      	strb	r2, [r3, #0]
     5a6:	1d3b      	adds	r3, r7, #4
     5a8:	220b      	movs	r2, #11
     5aa:	18ba      	adds	r2, r7, r2
     5ac:	7812      	ldrb	r2, [r2, #0]
     5ae:	705a      	strb	r2, [r3, #1]
     5b0:	1d3b      	adds	r3, r7, #4
     5b2:	220a      	movs	r2, #10
     5b4:	18ba      	adds	r2, r7, r2
     5b6:	7812      	ldrb	r2, [r2, #0]
     5b8:	709a      	strb	r2, [r3, #2]
        leds[i] = color;
     5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     5bc:	4b2b      	ldr	r3, [pc, #172]	; (66c <loop+0x118>)
     5be:	0011      	movs	r1, r2
     5c0:	0018      	movs	r0, r3
     5c2:	f000 f8ad 	bl	720 <_ZNSt5arrayI4CRGBLj60EEixEj>
     5c6:	0003      	movs	r3, r0
     5c8:	613b      	str	r3, [r7, #16]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     5ca:	693a      	ldr	r2, [r7, #16]
     5cc:	1d3b      	adds	r3, r7, #4
     5ce:	0011      	movs	r1, r2
     5d0:	0018      	movs	r0, r3
     5d2:	f004 fb69 	bl	4ca8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
        leds[59-i] = color;  
     5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     5d8:	223b      	movs	r2, #59	; 0x3b
     5da:	1ad3      	subs	r3, r2, r3
     5dc:	001a      	movs	r2, r3
     5de:	4b23      	ldr	r3, [pc, #140]	; (66c <loop+0x118>)
     5e0:	0011      	movs	r1, r2
     5e2:	0018      	movs	r0, r3
     5e4:	f000 f89c 	bl	720 <_ZNSt5arrayI4CRGBLj60EEixEj>
     5e8:	0003      	movs	r3, r0
     5ea:	60fb      	str	r3, [r7, #12]
     5ec:	68fa      	ldr	r2, [r7, #12]
     5ee:	1d3b      	adds	r3, r7, #4
     5f0:	0011      	movs	r1, r2
     5f2:	0018      	movs	r0, r3
     5f4:	f004 fb58 	bl	4ca8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>

int counter = 0;
bool color_flag = true;
void loop() {
  
    for(int i = 0; i < 30; i++)
     5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     5fa:	3301      	adds	r3, #1
     5fc:	627b      	str	r3, [r7, #36]	; 0x24
     5fe:	e7ae      	b.n	55e <loop+0xa>
        double col = 255/30 * i;
        CHSV color(static_cast<uint8_t>(col), 255, counter);
        leds[i] = color;
        leds[59-i] = color;  
    }
    FastLED.show();
     600:	4b1b      	ldr	r3, [pc, #108]	; (670 <loop+0x11c>)
     602:	0018      	movs	r0, r3
     604:	f7ff ff22 	bl	44c <_ZN8CFastLED4showEv>
    if(color_flag)
     608:	4b1a      	ldr	r3, [pc, #104]	; (674 <loop+0x120>)
     60a:	781b      	ldrb	r3, [r3, #0]
     60c:	2b00      	cmp	r3, #0
     60e:	d012      	beq.n	636 <loop+0xe2>
    {
      if(counter < 255)
     610:	4b15      	ldr	r3, [pc, #84]	; (668 <loop+0x114>)
     612:	681b      	ldr	r3, [r3, #0]
     614:	2bfe      	cmp	r3, #254	; 0xfe
     616:	dc05      	bgt.n	624 <loop+0xd0>
      {
        //Serial.println(counter);
        counter++;
     618:	4b13      	ldr	r3, [pc, #76]	; (668 <loop+0x114>)
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	1c5a      	adds	r2, r3, #1
     61e:	4b12      	ldr	r3, [pc, #72]	; (668 <loop+0x114>)
     620:	601a      	str	r2, [r3, #0]
     622:	e01a      	b.n	65a <loop+0x106>
      }
      else
      {
        color_flag = false;
     624:	4b13      	ldr	r3, [pc, #76]	; (674 <loop+0x120>)
     626:	2200      	movs	r2, #0
     628:	701a      	strb	r2, [r3, #0]
        counter--;
     62a:	4b0f      	ldr	r3, [pc, #60]	; (668 <loop+0x114>)
     62c:	681b      	ldr	r3, [r3, #0]
     62e:	1e5a      	subs	r2, r3, #1
     630:	4b0d      	ldr	r3, [pc, #52]	; (668 <loop+0x114>)
     632:	601a      	str	r2, [r3, #0]
     634:	e011      	b.n	65a <loop+0x106>
      } 
    }
    else
    {
      if(counter > 0)
     636:	4b0c      	ldr	r3, [pc, #48]	; (668 <loop+0x114>)
     638:	681b      	ldr	r3, [r3, #0]
     63a:	2b00      	cmp	r3, #0
     63c:	dd05      	ble.n	64a <loop+0xf6>
      {
        counter--;
     63e:	4b0a      	ldr	r3, [pc, #40]	; (668 <loop+0x114>)
     640:	681b      	ldr	r3, [r3, #0]
     642:	1e5a      	subs	r2, r3, #1
     644:	4b08      	ldr	r3, [pc, #32]	; (668 <loop+0x114>)
     646:	601a      	str	r2, [r3, #0]
     648:	e007      	b.n	65a <loop+0x106>
      }
      else
      {
        color_flag = true;
     64a:	4b0a      	ldr	r3, [pc, #40]	; (674 <loop+0x120>)
     64c:	2201      	movs	r2, #1
     64e:	701a      	strb	r2, [r3, #0]
        counter++;
     650:	4b05      	ldr	r3, [pc, #20]	; (668 <loop+0x114>)
     652:	681b      	ldr	r3, [r3, #0]
     654:	1c5a      	adds	r2, r3, #1
     656:	4b04      	ldr	r3, [pc, #16]	; (668 <loop+0x114>)
     658:	601a      	str	r2, [r3, #0]
      } 
    }
    delay(10);
     65a:	200a      	movs	r0, #10
     65c:	f001 f8a2 	bl	17a4 <delay>
}
     660:	46c0      	nop			; (mov r8, r8)
     662:	46bd      	mov	sp, r7
     664:	b00b      	add	sp, #44	; 0x2c
     666:	bd90      	pop	{r4, r7, pc}
     668:	200001e0 	.word	0x200001e0
     66c:	2000012c 	.word	0x2000012c
     670:	200007e4 	.word	0x200007e4
     674:	20000004 	.word	0x20000004

00000678 <_ZNSt14__array_traitsI4CRGBLj60EE6_S_ptrERA60_KS0_>:
      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
     678:	b580      	push	{r7, lr}
     67a:	b082      	sub	sp, #8
     67c:	af00      	add	r7, sp, #0
     67e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
     680:	687b      	ldr	r3, [r7, #4]
     682:	0018      	movs	r0, r3
     684:	46bd      	mov	sp, r7
     686:	b002      	add	sp, #8
     688:	bd80      	pop	{r7, pc}
     68a:	46c0      	nop			; (mov r8, r8)

0000068c <_ZNSt5arrayI4CRGBLj60EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1) 
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      pointer
      data() noexcept
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
     694:	687b      	ldr	r3, [r7, #4]
     696:	0018      	movs	r0, r3
     698:	f7ff ffee 	bl	678 <_ZNSt14__array_traitsI4CRGBLj60EE6_S_ptrERA60_KS0_>
     69c:	0003      	movs	r3, r0
     69e:	0018      	movs	r0, r3
     6a0:	46bd      	mov	sp, r7
     6a2:	b002      	add	sp, #8
     6a4:	bd80      	pop	{r7, pc}
     6a6:	46c0      	nop			; (mov r8, r8)

000006a8 <_ZNKSt5arrayI4CRGBLj60EE4sizeEv>:
      crend() const noexcept
      { return const_reverse_iterator(begin()); }

      // Capacity.
      constexpr size_type 
      size() const noexcept { return _Nm; }
     6a8:	b580      	push	{r7, lr}
     6aa:	b082      	sub	sp, #8
     6ac:	af00      	add	r7, sp, #0
     6ae:	6078      	str	r0, [r7, #4]
     6b0:	233c      	movs	r3, #60	; 0x3c
     6b2:	0018      	movs	r0, r3
     6b4:	46bd      	mov	sp, r7
     6b6:	b002      	add	sp, #8
     6b8:	bd80      	pop	{r7, pc}
     6ba:	46c0      	nop			; (mov r8, r8)

000006bc <_ZN8CFastLED7addLedsIL12ESPIChipsets7ELh6ELh9EL6EOrder136EEER14CLEDControllerP4CRGBii>:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SK9822: { static SK9822Controller<DATA_PIN, CLOCK_PIN> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
		}
	}

	template<ESPIChipsets CHIPSET,  uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER > static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
     6bc:	b580      	push	{r7, lr}
     6be:	b084      	sub	sp, #16
     6c0:	af00      	add	r7, sp, #0
     6c2:	60f8      	str	r0, [r7, #12]
     6c4:	60b9      	str	r1, [r7, #8]
     6c6:	607a      	str	r2, [r7, #4]
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     6c8:	4b0b      	ldr	r3, [pc, #44]	; (6f8 <_ZN8CFastLED7addLedsIL12ESPIChipsets7ELh6ELh9EL6EOrder136EEER14CLEDControllerP4CRGBii+0x3c>)
     6ca:	681b      	ldr	r3, [r3, #0]
     6cc:	2201      	movs	r2, #1
     6ce:	4013      	ands	r3, r2
     6d0:	d106      	bne.n	6e0 <_ZN8CFastLED7addLedsIL12ESPIChipsets7ELh6ELh9EL6EOrder136EEER14CLEDControllerP4CRGBii+0x24>
     6d2:	4b0a      	ldr	r3, [pc, #40]	; (6fc <_ZN8CFastLED7addLedsIL12ESPIChipsets7ELh6ELh9EL6EOrder136EEER14CLEDControllerP4CRGBii+0x40>)
     6d4:	0018      	movs	r0, r3
     6d6:	f000 f841 	bl	75c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EEC1Ev>
     6da:	4b07      	ldr	r3, [pc, #28]	; (6f8 <_ZN8CFastLED7addLedsIL12ESPIChipsets7ELh6ELh9EL6EOrder136EEER14CLEDControllerP4CRGBii+0x3c>)
     6dc:	2201      	movs	r2, #1
     6de:	601a      	str	r2, [r3, #0]
     6e0:	687b      	ldr	r3, [r7, #4]
     6e2:	68ba      	ldr	r2, [r7, #8]
     6e4:	68f9      	ldr	r1, [r7, #12]
     6e6:	4805      	ldr	r0, [pc, #20]	; (6fc <_ZN8CFastLED7addLedsIL12ESPIChipsets7ELh6ELh9EL6EOrder136EEER14CLEDControllerP4CRGBii+0x40>)
     6e8:	f004 f99e 	bl	4a28 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
     6ec:	0003      	movs	r3, r0
			case SK9822: { static SK9822Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
		}
	}
     6ee:	0018      	movs	r0, r3
     6f0:	46bd      	mov	sp, r7
     6f2:	b004      	add	sp, #16
     6f4:	bd80      	pop	{r7, pc}
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	20000200 	.word	0x20000200
     6fc:	200001e4 	.word	0x200001e4

00000700 <_ZNSt14__array_traitsI4CRGBLj60EE6_S_refERA60_KS0_j>:
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
     700:	b580      	push	{r7, lr}
     702:	b082      	sub	sp, #8
     704:	af00      	add	r7, sp, #0
     706:	6078      	str	r0, [r7, #4]
     708:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
     70a:	683a      	ldr	r2, [r7, #0]
     70c:	0013      	movs	r3, r2
     70e:	005b      	lsls	r3, r3, #1
     710:	189b      	adds	r3, r3, r2
     712:	687a      	ldr	r2, [r7, #4]
     714:	18d3      	adds	r3, r2, r3
     716:	0018      	movs	r0, r3
     718:	46bd      	mov	sp, r7
     71a:	b002      	add	sp, #8
     71c:	bd80      	pop	{r7, pc}
     71e:	46c0      	nop			; (mov r8, r8)

00000720 <_ZNSt5arrayI4CRGBLj60EEixEj>:
      constexpr bool 
      empty() const noexcept { return size() == 0; }

      // Element access.
      reference
      operator[](size_type __n) noexcept
     720:	b580      	push	{r7, lr}
     722:	b082      	sub	sp, #8
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
     728:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	683a      	ldr	r2, [r7, #0]
     72e:	0011      	movs	r1, r2
     730:	0018      	movs	r0, r3
     732:	f7ff ffe5 	bl	700 <_ZNSt14__array_traitsI4CRGBLj60EE6_S_refERA60_KS0_j>
     736:	0003      	movs	r3, r0
     738:	0018      	movs	r0, r3
     73a:	46bd      	mov	sp, r7
     73c:	b002      	add	sp, #8
     73e:	bd80      	pop	{r7, pc}

00000740 <_ZN9SPIOutputILh6ELh9ELh4EEC1Ev>:
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if !defined(FASTLED_ALL_PINS_HARDWARE_SPI)
template<uint8_t _DATA_PIN, uint8_t _CLOCK_PIN, uint8_t _SPI_CLOCK_DIVIDER>
class SPIOutput : public AVRSoftwareSPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};
     740:	b580      	push	{r7, lr}
     742:	b082      	sub	sp, #8
     744:	af00      	add	r7, sp, #0
     746:	6078      	str	r0, [r7, #4]
     748:	687b      	ldr	r3, [r7, #4]
     74a:	0018      	movs	r0, r3
     74c:	f000 f830 	bl	7b0 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EEC1Ev>
     750:	687b      	ldr	r3, [r7, #4]
     752:	0018      	movs	r0, r3
     754:	46bd      	mov	sp, r7
     756:	b002      	add	sp, #8
     758:	bd80      	pop	{r7, pc}
     75a:	46c0      	nop			; (mov r8, r8)

0000075c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EEC1Ev>:
	inline void writeLed(uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((always_inline)) {
		mSPI.writeByte(0xFF); mSPI.writeByte(b0); mSPI.writeByte(b1); mSPI.writeByte(b2);
	}

public:
	APA102Controller() {}
     75c:	b580      	push	{r7, lr}
     75e:	b082      	sub	sp, #8
     760:	af00      	add	r7, sp, #0
     762:	6078      	str	r0, [r7, #4]
     764:	687b      	ldr	r3, [r7, #4]
     766:	0018      	movs	r0, r3
     768:	f000 f810 	bl	78c <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EEC1Ev>
     76c:	4a06      	ldr	r2, [pc, #24]	; (788 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EEC1Ev+0x2c>)
     76e:	687b      	ldr	r3, [r7, #4]
     770:	601a      	str	r2, [r3, #0]
     772:	687b      	ldr	r3, [r7, #4]
     774:	3318      	adds	r3, #24
     776:	0018      	movs	r0, r3
     778:	f7ff ffe2 	bl	740 <_ZN9SPIOutputILh6ELh9ELh4EEC1Ev>
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	0018      	movs	r0, r3
     780:	46bd      	mov	sp, r7
     782:	b002      	add	sp, #8
     784:	bd80      	pop	{r7, pc}
     786:	46c0      	nop			; (mov r8, r8)
     788:	000075b0 	.word	0x000075b0

0000078c <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EEC1Ev>:
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }

public:
  CPixelLEDController() : CLEDController() {}
     78c:	b580      	push	{r7, lr}
     78e:	b082      	sub	sp, #8
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	687b      	ldr	r3, [r7, #4]
     796:	0018      	movs	r0, r3
     798:	f7ff fcbc 	bl	114 <_ZN14CLEDControllerC1Ev>
     79c:	4a03      	ldr	r2, [pc, #12]	; (7ac <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EEC1Ev+0x20>)
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	601a      	str	r2, [r3, #0]
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	0018      	movs	r0, r3
     7a6:	46bd      	mov	sp, r7
     7a8:	b002      	add	sp, #8
     7aa:	bd80      	pop	{r7, pc}
     7ac:	000075d4 	.word	0x000075d4

000007b0 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EEC1Ev>:
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
     7b0:	b580      	push	{r7, lr}
     7b2:	b082      	sub	sp, #8
     7b4:	af00      	add	r7, sp, #0
     7b6:	6078      	str	r0, [r7, #4]
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	2200      	movs	r2, #0
     7bc:	601a      	str	r2, [r3, #0]
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	0018      	movs	r0, r3
     7c2:	46bd      	mov	sp, r7
     7c4:	b002      	add	sp, #8
     7c6:	bd80      	pop	{r7, pc}

000007c8 <_Z41__static_initialization_and_destruction_0ii>:
     7c8:	b580      	push	{r7, lr}
     7ca:	b082      	sub	sp, #8
     7cc:	af00      	add	r7, sp, #0
     7ce:	6078      	str	r0, [r7, #4]
     7d0:	6039      	str	r1, [r7, #0]
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	2b01      	cmp	r3, #1
     7d6:	d107      	bne.n	7e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
     7d8:	683b      	ldr	r3, [r7, #0]
     7da:	4a05      	ldr	r2, [pc, #20]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     7dc:	4293      	cmp	r3, r2
     7de:	d103      	bne.n	7e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
constexpr static unsigned char PIN_LED_CLOCK = 9;
constexpr static unsigned char PIN_LED_DATA = 6;
constexpr static EOrder COLOR_ORDER = BGR;
constexpr static int NUM_LEDS = 60;
// led array
std::array<CRGB, NUM_LEDS> leds;
     7e0:	4b04      	ldr	r3, [pc, #16]	; (7f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     7e2:	0018      	movs	r0, r3
     7e4:	f7ff fe42 	bl	46c <_ZNSt5arrayI4CRGBLj60EEC1Ev>
        color_flag = true;
        counter++;
      } 
    }
    delay(10);
}
     7e8:	46c0      	nop			; (mov r8, r8)
     7ea:	46bd      	mov	sp, r7
     7ec:	b002      	add	sp, #8
     7ee:	bd80      	pop	{r7, pc}
     7f0:	0000ffff 	.word	0x0000ffff
     7f4:	2000012c 	.word	0x2000012c

000007f8 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     7f8:	b590      	push	{r4, r7, lr}
     7fa:	b08f      	sub	sp, #60	; 0x3c
     7fc:	af02      	add	r7, sp, #8
     7fe:	60f8      	str	r0, [r7, #12]
     800:	60b9      	str	r1, [r7, #8]
     802:	607a      	str	r2, [r7, #4]
     804:	603b      	str	r3, [r7, #0]
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
     806:	68fb      	ldr	r3, [r7, #12]
     808:	0018      	movs	r0, r3
     80a:	f7ff fd27 	bl	25c <_ZN14CLEDController9getDitherEv>
     80e:	0003      	movs	r3, r0
     810:	001c      	movs	r4, r3
     812:	683b      	ldr	r3, [r7, #0]
     814:	687a      	ldr	r2, [r7, #4]
     816:	68b9      	ldr	r1, [r7, #8]
     818:	2014      	movs	r0, #20
     81a:	1838      	adds	r0, r7, r0
     81c:	9400      	str	r4, [sp, #0]
     81e:	f000 f9c5 	bl	bac <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EEC1ERK4CRGBiRS2_h>
    showPixels(pixels);
     822:	68fb      	ldr	r3, [r7, #12]
     824:	681b      	ldr	r3, [r3, #0]
     826:	3318      	adds	r3, #24
     828:	681b      	ldr	r3, [r3, #0]
     82a:	2214      	movs	r2, #20
     82c:	18b9      	adds	r1, r7, r2
     82e:	68fa      	ldr	r2, [r7, #12]
     830:	0010      	movs	r0, r2
     832:	4798      	blx	r3
  }
     834:	46c0      	nop			; (mov r8, r8)
     836:	46bd      	mov	sp, r7
     838:	b00d      	add	sp, #52	; 0x34
     83a:	bd90      	pop	{r4, r7, pc}

0000083c <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     83c:	b590      	push	{r4, r7, lr}
     83e:	b08f      	sub	sp, #60	; 0x3c
     840:	af02      	add	r7, sp, #8
     842:	60f8      	str	r0, [r7, #12]
     844:	60b9      	str	r1, [r7, #8]
     846:	607a      	str	r2, [r7, #4]
     848:	603b      	str	r3, [r7, #0]
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	0018      	movs	r0, r3
     84e:	f7ff fd05 	bl	25c <_ZN14CLEDController9getDitherEv>
     852:	0003      	movs	r3, r0
     854:	001c      	movs	r4, r3
     856:	683b      	ldr	r3, [r7, #0]
     858:	687a      	ldr	r2, [r7, #4]
     85a:	68b9      	ldr	r1, [r7, #8]
     85c:	2014      	movs	r0, #20
     85e:	1838      	adds	r0, r7, r0
     860:	9400      	str	r4, [sp, #0]
     862:	f000 f9db 	bl	c1c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EEC1EPK4CRGBiRS2_h>
    showPixels(pixels);
     866:	68fb      	ldr	r3, [r7, #12]
     868:	681b      	ldr	r3, [r3, #0]
     86a:	3318      	adds	r3, #24
     86c:	681b      	ldr	r3, [r3, #0]
     86e:	2214      	movs	r2, #20
     870:	18b9      	adds	r1, r7, r2
     872:	68fa      	ldr	r2, [r7, #12]
     874:	0010      	movs	r0, r2
     876:	4798      	blx	r3
  }
     878:	46c0      	nop			; (mov r8, r8)
     87a:	46bd      	mov	sp, r7
     87c:	b00d      	add	sp, #52	; 0x34
     87e:	bd90      	pop	{r4, r7, pc}

00000880 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv>:

	virtual void init() {
     880:	b580      	push	{r7, lr}
     882:	b082      	sub	sp, #8
     884:	af00      	add	r7, sp, #0
     886:	6078      	str	r0, [r7, #4]
		mSPI.init();
     888:	687b      	ldr	r3, [r7, #4]
     88a:	3318      	adds	r3, #24
     88c:	0018      	movs	r0, r3
     88e:	f000 f9fd 	bl	c8c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE4initEv>
	}
     892:	46c0      	nop			; (mov r8, r8)
     894:	46bd      	mov	sp, r7
     896:	b002      	add	sp, #8
     898:	bd80      	pop	{r7, pc}
     89a:	46c0      	nop			; (mov r8, r8)

0000089c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE>:

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     89c:	b580      	push	{r7, lr}
     89e:	b0a2      	sub	sp, #136	; 0x88
     8a0:	af00      	add	r7, sp, #0
     8a2:	6078      	str	r0, [r7, #4]
     8a4:	6039      	str	r1, [r7, #0]
		mSPI.select();
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	3318      	adds	r3, #24
     8aa:	0018      	movs	r0, r3
     8ac:	f000 f9fe 	bl	cac <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE6selectEv>

		startBoundary();
     8b0:	687b      	ldr	r3, [r7, #4]
     8b2:	0018      	movs	r0, r3
     8b4:	f000 fa0e 	bl	cd4 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE13startBoundaryEv>
     8b8:	683b      	ldr	r3, [r7, #0]
     8ba:	663b      	str	r3, [r7, #96]	; 0x60
     8bc:	2301      	movs	r3, #1
     8be:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif
        }

        // Do we have n pixels left to process?
        __attribute__((always_inline)) inline bool has(int n) {
            return mLenRemaining >= n;
     8c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     8c2:	689a      	ldr	r2, [r3, #8]
     8c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     8c6:	0fd8      	lsrs	r0, r3, #31
     8c8:	17d1      	asrs	r1, r2, #31
     8ca:	429a      	cmp	r2, r3
     8cc:	4148      	adcs	r0, r1
     8ce:	0003      	movs	r3, r0
     8d0:	b2db      	uxtb	r3, r3
		while(pixels.has(1)) {
     8d2:	2b00      	cmp	r3, #0
     8d4:	d100      	bne.n	8d8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x3c>
     8d6:	e155      	b.n	b84 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x2e8>
     8d8:	683b      	ldr	r3, [r7, #0]
     8da:	67fb      	str	r3, [r7, #124]	; 0x7c
     8dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     8de:	623b      	str	r3, [r7, #32]
     8e0:	6a3b      	ldr	r3, [r7, #32]
     8e2:	61fb      	str	r3, [r7, #28]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     8e4:	69fb      	ldr	r3, [r7, #28]
     8e6:	681b      	ldr	r3, [r3, #0]
     8e8:	3302      	adds	r3, #2
     8ea:	781a      	ldrb	r2, [r3, #0]
     8ec:	6a3b      	ldr	r3, [r7, #32]
     8ee:	61bb      	str	r3, [r7, #24]
     8f0:	2317      	movs	r3, #23
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	701a      	strb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     8f6:	2317      	movs	r3, #23
     8f8:	18fb      	adds	r3, r7, r3
     8fa:	781b      	ldrb	r3, [r3, #0]
     8fc:	2b00      	cmp	r3, #0
     8fe:	d01b      	beq.n	938 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x9c>
     900:	69bb      	ldr	r3, [r7, #24]
     902:	7b99      	ldrb	r1, [r3, #14]
     904:	2316      	movs	r3, #22
     906:	18fb      	adds	r3, r7, r3
     908:	2217      	movs	r2, #23
     90a:	18ba      	adds	r2, r7, r2
     90c:	7812      	ldrb	r2, [r2, #0]
     90e:	701a      	strb	r2, [r3, #0]
     910:	2315      	movs	r3, #21
     912:	18fb      	adds	r3, r7, r3
     914:	1c0a      	adds	r2, r1, #0
     916:	701a      	strb	r2, [r3, #0]
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     918:	2316      	movs	r3, #22
     91a:	18fb      	adds	r3, r7, r3
     91c:	781a      	ldrb	r2, [r3, #0]
     91e:	2315      	movs	r3, #21
     920:	18fb      	adds	r3, r7, r3
     922:	781b      	ldrb	r3, [r3, #0]
     924:	18d3      	adds	r3, r2, r3
     926:	613b      	str	r3, [r7, #16]
    if( t > 255) t = 255;
     928:	693b      	ldr	r3, [r7, #16]
     92a:	2bff      	cmp	r3, #255	; 0xff
     92c:	d901      	bls.n	932 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x96>
     92e:	23ff      	movs	r3, #255	; 0xff
     930:	613b      	str	r3, [r7, #16]
    return t;
     932:	693b      	ldr	r3, [r7, #16]
     934:	b2da      	uxtb	r2, r3
     936:	e000      	b.n	93a <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x9e>
     938:	2200      	movs	r2, #0
     93a:	6a3b      	ldr	r3, [r7, #32]
     93c:	60fb      	str	r3, [r7, #12]
     93e:	230b      	movs	r3, #11
     940:	18fb      	adds	r3, r7, r3
     942:	701a      	strb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }
     944:	68fb      	ldr	r3, [r7, #12]
     946:	7d19      	ldrb	r1, [r3, #20]
     948:	230a      	movs	r3, #10
     94a:	18fb      	adds	r3, r7, r3
     94c:	220b      	movs	r2, #11
     94e:	18ba      	adds	r2, r7, r2
     950:	7812      	ldrb	r2, [r2, #0]
     952:	701a      	strb	r2, [r3, #0]
     954:	2309      	movs	r3, #9
     956:	18fb      	adds	r3, r7, r3
     958:	1c0a      	adds	r2, r1, #0
     95a:	701a      	strb	r2, [r3, #0]
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     95c:	230a      	movs	r3, #10
     95e:	18fb      	adds	r3, r7, r3
     960:	781b      	ldrb	r3, [r3, #0]
     962:	2209      	movs	r2, #9
     964:	18ba      	adds	r2, r7, r2
     966:	7812      	ldrb	r2, [r2, #0]
     968:	3201      	adds	r2, #1
     96a:	4353      	muls	r3, r2
     96c:	121b      	asrs	r3, r3, #8
     96e:	b2db      	uxtb	r3, r3
			mSPI.writeByte(0xFF);
			mSPI.writeByte(pixels.loadAndScale0());
			mSPI.writeByte(pixels.loadAndScale1());
			mSPI.writeByte(pixels.loadAndScale2());
#else
			uint16_t b = 0xFF00 | (uint16_t)pixels.loadAndScale0();
     970:	b29a      	uxth	r2, r3
     972:	2382      	movs	r3, #130	; 0x82
     974:	18fb      	adds	r3, r7, r3
     976:	498c      	ldr	r1, [pc, #560]	; (ba8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x30c>)
     978:	430a      	orrs	r2, r1
     97a:	801a      	strh	r2, [r3, #0]
     97c:	237a      	movs	r3, #122	; 0x7a
     97e:	18fb      	adds	r3, r7, r3
     980:	2282      	movs	r2, #130	; 0x82
     982:	18ba      	adds	r2, r7, r2
     984:	8812      	ldrh	r2, [r2, #0]
     986:	801a      	strh	r2, [r3, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     988:	237a      	movs	r3, #122	; 0x7a
     98a:	18fb      	adds	r3, r7, r3
     98c:	881b      	ldrh	r3, [r3, #0]
     98e:	121b      	asrs	r3, r3, #8
     990:	b2db      	uxtb	r3, r3
     992:	0018      	movs	r0, r3
     994:	f000 fa72 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     998:	237a      	movs	r3, #122	; 0x7a
     99a:	18fb      	adds	r3, r7, r3
     99c:	881b      	ldrh	r3, [r3, #0]
     99e:	b2db      	uxtb	r3, r3
     9a0:	0018      	movs	r0, r3
     9a2:	f000 fa6b 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     9a6:	683b      	ldr	r3, [r7, #0]
     9a8:	677b      	str	r3, [r7, #116]	; 0x74
     9aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
     9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     9b0:	63bb      	str	r3, [r7, #56]	; 0x38
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9b4:	681b      	ldr	r3, [r3, #0]
     9b6:	3301      	adds	r3, #1
     9b8:	781a      	ldrb	r2, [r3, #0]
     9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     9bc:	637b      	str	r3, [r7, #52]	; 0x34
     9be:	2333      	movs	r3, #51	; 0x33
     9c0:	18fb      	adds	r3, r7, r3
     9c2:	701a      	strb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     9c4:	2333      	movs	r3, #51	; 0x33
     9c6:	18fb      	adds	r3, r7, r3
     9c8:	781b      	ldrb	r3, [r3, #0]
     9ca:	2b00      	cmp	r3, #0
     9cc:	d01b      	beq.n	a06 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x16a>
     9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     9d0:	7b59      	ldrb	r1, [r3, #13]
     9d2:	2332      	movs	r3, #50	; 0x32
     9d4:	18fb      	adds	r3, r7, r3
     9d6:	2233      	movs	r2, #51	; 0x33
     9d8:	18ba      	adds	r2, r7, r2
     9da:	7812      	ldrb	r2, [r2, #0]
     9dc:	701a      	strb	r2, [r3, #0]
     9de:	2331      	movs	r3, #49	; 0x31
     9e0:	18fb      	adds	r3, r7, r3
     9e2:	1c0a      	adds	r2, r1, #0
     9e4:	701a      	strb	r2, [r3, #0]
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     9e6:	2332      	movs	r3, #50	; 0x32
     9e8:	18fb      	adds	r3, r7, r3
     9ea:	781a      	ldrb	r2, [r3, #0]
     9ec:	2331      	movs	r3, #49	; 0x31
     9ee:	18fb      	adds	r3, r7, r3
     9f0:	781b      	ldrb	r3, [r3, #0]
     9f2:	18d3      	adds	r3, r2, r3
     9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( t > 255) t = 255;
     9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9f8:	2bff      	cmp	r3, #255	; 0xff
     9fa:	d901      	bls.n	a00 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x164>
     9fc:	23ff      	movs	r3, #255	; 0xff
     9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return t;
     a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a02:	b2da      	uxtb	r2, r3
     a04:	e000      	b.n	a08 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x16c>
     a06:	2200      	movs	r2, #0
     a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a0a:	62bb      	str	r3, [r7, #40]	; 0x28
     a0c:	2327      	movs	r3, #39	; 0x27
     a0e:	18fb      	adds	r3, r7, r3
     a10:	701a      	strb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }
     a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a14:	7cd9      	ldrb	r1, [r3, #19]
     a16:	2326      	movs	r3, #38	; 0x26
     a18:	18fb      	adds	r3, r7, r3
     a1a:	2227      	movs	r2, #39	; 0x27
     a1c:	18ba      	adds	r2, r7, r2
     a1e:	7812      	ldrb	r2, [r2, #0]
     a20:	701a      	strb	r2, [r3, #0]
     a22:	2325      	movs	r3, #37	; 0x25
     a24:	18fb      	adds	r3, r7, r3
     a26:	1c0a      	adds	r2, r1, #0
     a28:	701a      	strb	r2, [r3, #0]
     a2a:	2326      	movs	r3, #38	; 0x26
     a2c:	18fb      	adds	r3, r7, r3
     a2e:	781b      	ldrb	r3, [r3, #0]
     a30:	2225      	movs	r2, #37	; 0x25
     a32:	18ba      	adds	r2, r7, r2
     a34:	7812      	ldrb	r2, [r2, #0]
     a36:	3201      	adds	r2, #1
     a38:	4353      	muls	r3, r2
     a3a:	121b      	asrs	r3, r3, #8
     a3c:	b2db      	uxtb	r3, r3
			mSPI.writeWord(b);
			uint16_t w = pixels.loadAndScale1() << 8;
     a3e:	b29a      	uxth	r2, r3
     a40:	2378      	movs	r3, #120	; 0x78
     a42:	18fb      	adds	r3, r7, r3
     a44:	0212      	lsls	r2, r2, #8
     a46:	801a      	strh	r2, [r3, #0]
     a48:	683b      	ldr	r3, [r7, #0]
     a4a:	673b      	str	r3, [r7, #112]	; 0x70
     a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     a4e:	65bb      	str	r3, [r7, #88]	; 0x58
     a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     a52:	657b      	str	r3, [r7, #84]	; 0x54
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     a56:	681b      	ldr	r3, [r3, #0]
     a58:	781a      	ldrb	r2, [r3, #0]
     a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     a5c:	653b      	str	r3, [r7, #80]	; 0x50
     a5e:	234f      	movs	r3, #79	; 0x4f
     a60:	18fb      	adds	r3, r7, r3
     a62:	701a      	strb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     a64:	234f      	movs	r3, #79	; 0x4f
     a66:	18fb      	adds	r3, r7, r3
     a68:	781b      	ldrb	r3, [r3, #0]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d01b      	beq.n	aa6 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x20a>
     a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     a70:	7b19      	ldrb	r1, [r3, #12]
     a72:	234e      	movs	r3, #78	; 0x4e
     a74:	18fb      	adds	r3, r7, r3
     a76:	224f      	movs	r2, #79	; 0x4f
     a78:	18ba      	adds	r2, r7, r2
     a7a:	7812      	ldrb	r2, [r2, #0]
     a7c:	701a      	strb	r2, [r3, #0]
     a7e:	234d      	movs	r3, #77	; 0x4d
     a80:	18fb      	adds	r3, r7, r3
     a82:	1c0a      	adds	r2, r1, #0
     a84:	701a      	strb	r2, [r3, #0]
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     a86:	234e      	movs	r3, #78	; 0x4e
     a88:	18fb      	adds	r3, r7, r3
     a8a:	781a      	ldrb	r2, [r3, #0]
     a8c:	234d      	movs	r3, #77	; 0x4d
     a8e:	18fb      	adds	r3, r7, r3
     a90:	781b      	ldrb	r3, [r3, #0]
     a92:	18d3      	adds	r3, r2, r3
     a94:	64bb      	str	r3, [r7, #72]	; 0x48
    if( t > 255) t = 255;
     a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     a98:	2bff      	cmp	r3, #255	; 0xff
     a9a:	d901      	bls.n	aa0 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x204>
     a9c:	23ff      	movs	r3, #255	; 0xff
     a9e:	64bb      	str	r3, [r7, #72]	; 0x48
    return t;
     aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     aa2:	b2da      	uxtb	r2, r3
     aa4:	e000      	b.n	aa8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x20c>
     aa6:	2200      	movs	r2, #0
     aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     aaa:	647b      	str	r3, [r7, #68]	; 0x44
     aac:	2343      	movs	r3, #67	; 0x43
     aae:	18fb      	adds	r3, r7, r3
     ab0:	701a      	strb	r2, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }
     ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ab4:	7c99      	ldrb	r1, [r3, #18]
     ab6:	2342      	movs	r3, #66	; 0x42
     ab8:	18fb      	adds	r3, r7, r3
     aba:	2243      	movs	r2, #67	; 0x43
     abc:	18ba      	adds	r2, r7, r2
     abe:	7812      	ldrb	r2, [r2, #0]
     ac0:	701a      	strb	r2, [r3, #0]
     ac2:	2341      	movs	r3, #65	; 0x41
     ac4:	18fb      	adds	r3, r7, r3
     ac6:	1c0a      	adds	r2, r1, #0
     ac8:	701a      	strb	r2, [r3, #0]
     aca:	2342      	movs	r3, #66	; 0x42
     acc:	18fb      	adds	r3, r7, r3
     ace:	781b      	ldrb	r3, [r3, #0]
     ad0:	2241      	movs	r2, #65	; 0x41
     ad2:	18ba      	adds	r2, r7, r2
     ad4:	7812      	ldrb	r2, [r2, #0]
     ad6:	3201      	adds	r2, #1
     ad8:	4353      	muls	r3, r2
     ada:	121b      	asrs	r3, r3, #8
     adc:	b2db      	uxtb	r3, r3
			w |= pixels.loadAndScale2();
     ade:	b299      	uxth	r1, r3
     ae0:	2378      	movs	r3, #120	; 0x78
     ae2:	18fb      	adds	r3, r7, r3
     ae4:	2278      	movs	r2, #120	; 0x78
     ae6:	18ba      	adds	r2, r7, r2
     ae8:	8812      	ldrh	r2, [r2, #0]
     aea:	430a      	orrs	r2, r1
     aec:	801a      	strh	r2, [r3, #0]
     aee:	236e      	movs	r3, #110	; 0x6e
     af0:	18fb      	adds	r3, r7, r3
     af2:	2278      	movs	r2, #120	; 0x78
     af4:	18ba      	adds	r2, r7, r2
     af6:	8812      	ldrh	r2, [r2, #0]
     af8:	801a      	strh	r2, [r3, #0]
     afa:	236e      	movs	r3, #110	; 0x6e
     afc:	18fb      	adds	r3, r7, r3
     afe:	881b      	ldrh	r3, [r3, #0]
     b00:	121b      	asrs	r3, r3, #8
     b02:	b2db      	uxtb	r3, r3
     b04:	0018      	movs	r0, r3
     b06:	f000 f9b9 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     b0a:	236e      	movs	r3, #110	; 0x6e
     b0c:	18fb      	adds	r3, r7, r3
     b0e:	881b      	ldrh	r3, [r3, #0]
     b10:	b2db      	uxtb	r3, r3
     b12:	0018      	movs	r0, r3
     b14:	f000 f9b2 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     b18:	683b      	ldr	r3, [r7, #0]
     b1a:	66bb      	str	r3, [r7, #104]	; 0x68

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b1e:	7bda      	ldrb	r2, [r3, #15]
     b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b22:	7b1b      	ldrb	r3, [r3, #12]
     b24:	1ad3      	subs	r3, r2, r3
     b26:	b2da      	uxtb	r2, r3
     b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b2a:	731a      	strb	r2, [r3, #12]
                d[1] = e[1] - d[1];
     b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b2e:	7c1a      	ldrb	r2, [r3, #16]
     b30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b32:	7b5b      	ldrb	r3, [r3, #13]
     b34:	1ad3      	subs	r3, r2, r3
     b36:	b2da      	uxtb	r2, r3
     b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b3a:	735a      	strb	r2, [r3, #13]
                d[2] = e[2] - d[2];
     b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b3e:	7c5a      	ldrb	r2, [r3, #17]
     b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b42:	7b9b      	ldrb	r3, [r3, #14]
     b44:	1ad3      	subs	r3, r2, r3
     b46:	b2da      	uxtb	r2, r3
     b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b4a:	739a      	strb	r2, [r3, #14]
     b4c:	683b      	ldr	r3, [r7, #0]
     b4e:	2284      	movs	r2, #132	; 0x84
     b50:	18ba      	adds	r2, r7, r2
     b52:	6013      	str	r3, [r2, #0]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b54:	2384      	movs	r3, #132	; 0x84
     b56:	18fb      	adds	r3, r7, r3
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	2284      	movs	r2, #132	; 0x84
     b5e:	18ba      	adds	r2, r7, r2
     b60:	6812      	ldr	r2, [r2, #0]
     b62:	7d52      	ldrb	r2, [r2, #21]
     b64:	b252      	sxtb	r2, r2
     b66:	189a      	adds	r2, r3, r2
     b68:	2384      	movs	r3, #132	; 0x84
     b6a:	18fb      	adds	r3, r7, r3
     b6c:	681b      	ldr	r3, [r3, #0]
     b6e:	601a      	str	r2, [r3, #0]
     b70:	2384      	movs	r3, #132	; 0x84
     b72:	18fb      	adds	r3, r7, r3
     b74:	681b      	ldr	r3, [r3, #0]
     b76:	689b      	ldr	r3, [r3, #8]
     b78:	1e5a      	subs	r2, r3, #1
     b7a:	2384      	movs	r3, #132	; 0x84
     b7c:	18fb      	adds	r3, r7, r3
     b7e:	681b      	ldr	r3, [r3, #0]
     b80:	609a      	str	r2, [r3, #8]

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
		mSPI.select();

		startBoundary();
		while(pixels.has(1)) {
     b82:	e699      	b.n	8b8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x1c>
     b84:	683b      	ldr	r3, [r7, #0]
     b86:	667b      	str	r3, [r7, #100]	; 0x64
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     b8a:	685a      	ldr	r2, [r3, #4]
			mSPI.writeWord(w);
#endif
			pixels.stepDithering();
			pixels.advanceData();
		}
		endBoundary(pixels.size());
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	0011      	movs	r1, r2
     b90:	0018      	movs	r0, r3
     b92:	f000 f8cd 	bl	d30 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE11endBoundaryEi>
		mSPI.waitFully();
		mSPI.release();
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	3318      	adds	r3, #24
     b9a:	0018      	movs	r0, r3
     b9c:	f000 f8ec 	bl	d78 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE7releaseEv>
	}
     ba0:	46c0      	nop			; (mov r8, r8)
     ba2:	46bd      	mov	sp, r7
     ba4:	b022      	add	sp, #136	; 0x88
     ba6:	bd80      	pop	{r7, pc}
     ba8:	ffffff00 	.word	0xffffff00

00000bac <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EEC1ERK4CRGBiRS2_h>:
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     bac:	b580      	push	{r7, lr}
     bae:	b086      	sub	sp, #24
     bb0:	af00      	add	r7, sp, #0
     bb2:	60f8      	str	r0, [r7, #12]
     bb4:	60b9      	str	r1, [r7, #8]
     bb6:	607a      	str	r2, [r7, #4]
     bb8:	603b      	str	r3, [r7, #0]
     bba:	68fb      	ldr	r3, [r7, #12]
     bbc:	68ba      	ldr	r2, [r7, #8]
     bbe:	601a      	str	r2, [r3, #0]
     bc0:	68fb      	ldr	r3, [r7, #12]
     bc2:	687a      	ldr	r2, [r7, #4]
     bc4:	605a      	str	r2, [r3, #4]
     bc6:	68fb      	ldr	r3, [r7, #12]
     bc8:	687a      	ldr	r2, [r7, #4]
     bca:	609a      	str	r2, [r3, #8]
     bcc:	68fb      	ldr	r3, [r7, #12]
     bce:	3312      	adds	r3, #18
     bd0:	617b      	str	r3, [r7, #20]
     bd2:	683b      	ldr	r3, [r7, #0]
     bd4:	613b      	str	r3, [r7, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bd6:	693b      	ldr	r3, [r7, #16]
     bd8:	781a      	ldrb	r2, [r3, #0]
     bda:	697b      	ldr	r3, [r7, #20]
     bdc:	701a      	strb	r2, [r3, #0]
        g = rhs.g;
     bde:	693b      	ldr	r3, [r7, #16]
     be0:	785a      	ldrb	r2, [r3, #1]
     be2:	697b      	ldr	r3, [r7, #20]
     be4:	705a      	strb	r2, [r3, #1]
        b = rhs.b;
     be6:	693b      	ldr	r3, [r7, #16]
     be8:	789a      	ldrb	r2, [r3, #2]
     bea:	697b      	ldr	r3, [r7, #20]
     bec:	709a      	strb	r2, [r3, #2]
            enable_dithering(dither);
     bee:	2320      	movs	r3, #32
     bf0:	18fb      	adds	r3, r7, r3
     bf2:	781a      	ldrb	r2, [r3, #0]
     bf4:	68fb      	ldr	r3, [r7, #12]
     bf6:	0011      	movs	r1, r2
     bf8:	0018      	movs	r0, r3
     bfa:	f000 f8d3 	bl	da4 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE16enable_ditheringEh>
            mAdvance = 0;
     bfe:	68fb      	ldr	r3, [r7, #12]
     c00:	2200      	movs	r2, #0
     c02:	755a      	strb	r2, [r3, #21]
            initOffsets(len);
     c04:	687a      	ldr	r2, [r7, #4]
     c06:	68fb      	ldr	r3, [r7, #12]
     c08:	0011      	movs	r1, r2
     c0a:	0018      	movs	r0, r3
     c0c:	f000 f8f6 	bl	dfc <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE11initOffsetsEi>
        }
     c10:	68fb      	ldr	r3, [r7, #12]
     c12:	0018      	movs	r0, r3
     c14:	46bd      	mov	sp, r7
     c16:	b006      	add	sp, #24
     c18:	bd80      	pop	{r7, pc}
     c1a:	46c0      	nop			; (mov r8, r8)

00000c1c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EEC1EPK4CRGBiRS2_h>:
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     c1c:	b580      	push	{r7, lr}
     c1e:	b086      	sub	sp, #24
     c20:	af00      	add	r7, sp, #0
     c22:	60f8      	str	r0, [r7, #12]
     c24:	60b9      	str	r1, [r7, #8]
     c26:	607a      	str	r2, [r7, #4]
     c28:	603b      	str	r3, [r7, #0]
     c2a:	68fb      	ldr	r3, [r7, #12]
     c2c:	68ba      	ldr	r2, [r7, #8]
     c2e:	601a      	str	r2, [r3, #0]
     c30:	68fb      	ldr	r3, [r7, #12]
     c32:	687a      	ldr	r2, [r7, #4]
     c34:	605a      	str	r2, [r3, #4]
     c36:	68fb      	ldr	r3, [r7, #12]
     c38:	687a      	ldr	r2, [r7, #4]
     c3a:	609a      	str	r2, [r3, #8]
     c3c:	68fb      	ldr	r3, [r7, #12]
     c3e:	3312      	adds	r3, #18
     c40:	617b      	str	r3, [r7, #20]
     c42:	683b      	ldr	r3, [r7, #0]
     c44:	613b      	str	r3, [r7, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c46:	693b      	ldr	r3, [r7, #16]
     c48:	781a      	ldrb	r2, [r3, #0]
     c4a:	697b      	ldr	r3, [r7, #20]
     c4c:	701a      	strb	r2, [r3, #0]
        g = rhs.g;
     c4e:	693b      	ldr	r3, [r7, #16]
     c50:	785a      	ldrb	r2, [r3, #1]
     c52:	697b      	ldr	r3, [r7, #20]
     c54:	705a      	strb	r2, [r3, #1]
        b = rhs.b;
     c56:	693b      	ldr	r3, [r7, #16]
     c58:	789a      	ldrb	r2, [r3, #2]
     c5a:	697b      	ldr	r3, [r7, #20]
     c5c:	709a      	strb	r2, [r3, #2]
            enable_dithering(dither);
     c5e:	2320      	movs	r3, #32
     c60:	18fb      	adds	r3, r7, r3
     c62:	781a      	ldrb	r2, [r3, #0]
     c64:	68fb      	ldr	r3, [r7, #12]
     c66:	0011      	movs	r1, r2
     c68:	0018      	movs	r0, r3
     c6a:	f000 f89b 	bl	da4 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE16enable_ditheringEh>
            mAdvance = 3;
     c6e:	68fb      	ldr	r3, [r7, #12]
     c70:	2203      	movs	r2, #3
     c72:	755a      	strb	r2, [r3, #21]
            initOffsets(len);
     c74:	687a      	ldr	r2, [r7, #4]
     c76:	68fb      	ldr	r3, [r7, #12]
     c78:	0011      	movs	r1, r2
     c7a:	0018      	movs	r0, r3
     c7c:	f000 f8be 	bl	dfc <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE11initOffsetsEi>
        }
     c80:	68fb      	ldr	r3, [r7, #12]
     c82:	0018      	movs	r0, r3
     c84:	46bd      	mov	sp, r7
     c86:	b006      	add	sp, #24
     c88:	bd80      	pop	{r7, pc}
     c8a:	46c0      	nop			; (mov r8, r8)

00000c8c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE4initEv>:
public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
	AVRSoftwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }
	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }

	void init() {
     c8c:	b580      	push	{r7, lr}
     c8e:	b082      	sub	sp, #8
     c90:	af00      	add	r7, sp, #0
     c92:	6078      	str	r0, [r7, #4]
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
     c94:	f000 f8da 	bl	e4c <_ZN7FastPinILh6EE9setOutputEv>
		FastPin<CLOCK_PIN>::setOutput();
     c98:	f000 f8e4 	bl	e64 <_ZN7FastPinILh9EE9setOutputEv>
		release();
     c9c:	687b      	ldr	r3, [r7, #4]
     c9e:	0018      	movs	r0, r3
     ca0:	f000 f86a 	bl	d78 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE7releaseEv>
	}
     ca4:	46c0      	nop			; (mov r8, r8)
     ca6:	46bd      	mov	sp, r7
     ca8:	b002      	add	sp, #8
     caa:	bd80      	pop	{r7, pc}

00000cac <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE6selectEv>:
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     cac:	b580      	push	{r7, lr}
     cae:	b082      	sub	sp, #8
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	2b00      	cmp	r3, #0
     cba:	d007      	beq.n	ccc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE6selectEv+0x20>
     cbc:	687b      	ldr	r3, [r7, #4]
     cbe:	681b      	ldr	r3, [r3, #0]
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	681a      	ldr	r2, [r3, #0]
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	681b      	ldr	r3, [r3, #0]
     cc8:	0018      	movs	r0, r3
     cca:	4790      	blx	r2
     ccc:	46c0      	nop			; (mov r8, r8)
     cce:	46bd      	mov	sp, r7
     cd0:	b002      	add	sp, #8
     cd2:	bd80      	pop	{r7, pc}

00000cd4 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE13startBoundaryEv>:
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint8_t SPI_SPEED = DATA_RATE_MHZ(12)>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
     cd4:	b580      	push	{r7, lr}
     cd6:	b084      	sub	sp, #16
     cd8:	af00      	add	r7, sp, #0
     cda:	6078      	str	r0, [r7, #4]
     cdc:	230e      	movs	r3, #14
     cde:	18fb      	adds	r3, r7, r3
     ce0:	2200      	movs	r2, #0
     ce2:	801a      	strh	r2, [r3, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     ce4:	230e      	movs	r3, #14
     ce6:	18fb      	adds	r3, r7, r3
     ce8:	881b      	ldrh	r3, [r3, #0]
     cea:	121b      	asrs	r3, r3, #8
     cec:	b2db      	uxtb	r3, r3
     cee:	0018      	movs	r0, r3
     cf0:	f000 f8c4 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     cf4:	230e      	movs	r3, #14
     cf6:	18fb      	adds	r3, r7, r3
     cf8:	881b      	ldrh	r3, [r3, #0]
     cfa:	b2db      	uxtb	r3, r3
     cfc:	0018      	movs	r0, r3
     cfe:	f000 f8bd 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     d02:	230c      	movs	r3, #12
     d04:	18fb      	adds	r3, r7, r3
     d06:	2200      	movs	r2, #0
     d08:	801a      	strh	r2, [r3, #0]
     d0a:	230c      	movs	r3, #12
     d0c:	18fb      	adds	r3, r7, r3
     d0e:	881b      	ldrh	r3, [r3, #0]
     d10:	121b      	asrs	r3, r3, #8
     d12:	b2db      	uxtb	r3, r3
     d14:	0018      	movs	r0, r3
     d16:	f000 f8b1 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     d1a:	230c      	movs	r3, #12
     d1c:	18fb      	adds	r3, r7, r3
     d1e:	881b      	ldrh	r3, [r3, #0]
     d20:	b2db      	uxtb	r3, r3
     d22:	0018      	movs	r0, r3
     d24:	f000 f8aa 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     d28:	46c0      	nop			; (mov r8, r8)
     d2a:	46bd      	mov	sp, r7
     d2c:	b004      	add	sp, #16
     d2e:	bd80      	pop	{r7, pc}

00000d30 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE11endBoundaryEi>:
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     d30:	b580      	push	{r7, lr}
     d32:	b084      	sub	sp, #16
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
     d38:	6039      	str	r1, [r7, #0]
     d3a:	683b      	ldr	r3, [r7, #0]
     d3c:	2b00      	cmp	r3, #0
     d3e:	da00      	bge.n	d42 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE11endBoundaryEi+0x12>
     d40:	331f      	adds	r3, #31
     d42:	115b      	asrs	r3, r3, #5
     d44:	60fb      	str	r3, [r7, #12]
     d46:	20ff      	movs	r0, #255	; 0xff
     d48:	f000 f898 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     d4c:	2000      	movs	r0, #0
     d4e:	f000 f895 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     d52:	2000      	movs	r0, #0
     d54:	f000 f892 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     d58:	2000      	movs	r0, #0
     d5a:	f000 f88f 	bl	e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     d5e:	68fb      	ldr	r3, [r7, #12]
     d60:	1e5a      	subs	r2, r3, #1
     d62:	60fa      	str	r2, [r7, #12]
     d64:	1e5a      	subs	r2, r3, #1
     d66:	4193      	sbcs	r3, r2
     d68:	b2db      	uxtb	r3, r3
     d6a:	2b00      	cmp	r3, #0
     d6c:	d000      	beq.n	d70 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE11endBoundaryEi+0x40>
     d6e:	e7ea      	b.n	d46 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE11endBoundaryEi+0x16>
     d70:	46c0      	nop			; (mov r8, r8)
     d72:	46bd      	mov	sp, r7
     d74:	b004      	add	sp, #16
     d76:	bd80      	pop	{r7, pc}

00000d78 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE7releaseEv>:
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     d78:	b580      	push	{r7, lr}
     d7a:	b082      	sub	sp, #8
     d7c:	af00      	add	r7, sp, #0
     d7e:	6078      	str	r0, [r7, #4]
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	681b      	ldr	r3, [r3, #0]
     d84:	2b00      	cmp	r3, #0
     d86:	d008      	beq.n	d9a <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE7releaseEv+0x22>
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	681b      	ldr	r3, [r3, #0]
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	3304      	adds	r3, #4
     d90:	681a      	ldr	r2, [r3, #0]
     d92:	687b      	ldr	r3, [r7, #4]
     d94:	681b      	ldr	r3, [r3, #0]
     d96:	0018      	movs	r0, r3
     d98:	4790      	blx	r2
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	46bd      	mov	sp, r7
     d9e:	b002      	add	sp, #8
     da0:	bd80      	pop	{r7, pc}
     da2:	46c0      	nop			; (mov r8, r8)

00000da4 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE16enable_ditheringEh>:
        __attribute__((always_inline)) inline bool has(int n) {
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
     da4:	b580      	push	{r7, lr}
     da6:	b082      	sub	sp, #8
     da8:	af00      	add	r7, sp, #0
     daa:	6078      	str	r0, [r7, #4]
     dac:	000a      	movs	r2, r1
     dae:	1cfb      	adds	r3, r7, #3
     db0:	701a      	strb	r2, [r3, #0]
            switch(dither) {
     db2:	1cfb      	adds	r3, r7, #3
     db4:	781b      	ldrb	r3, [r3, #0]
     db6:	2b01      	cmp	r3, #1
     db8:	d104      	bne.n	dc4 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE16enable_ditheringEh+0x20>
                case BINARY_DITHER: init_binary_dithering(); break;
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	0018      	movs	r0, r3
     dbe:	f000 fa9f 	bl	1300 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv>
     dc2:	e017      	b.n	df4 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE16enable_ditheringEh+0x50>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	2200      	movs	r2, #0
     dc8:	745a      	strb	r2, [r3, #17]
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	7c5a      	ldrb	r2, [r3, #17]
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	741a      	strb	r2, [r3, #16]
     dd2:	687b      	ldr	r3, [r7, #4]
     dd4:	7c1a      	ldrb	r2, [r3, #16]
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	73da      	strb	r2, [r3, #15]
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	7bda      	ldrb	r2, [r3, #15]
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	739a      	strb	r2, [r3, #14]
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	7b9a      	ldrb	r2, [r3, #14]
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	735a      	strb	r2, [r3, #13]
     dea:	687b      	ldr	r3, [r7, #4]
     dec:	7b5a      	ldrb	r2, [r3, #13]
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	731a      	strb	r2, [r3, #12]
     df2:	46c0      	nop			; (mov r8, r8)
            }
        }
     df4:	46c0      	nop			; (mov r8, r8)
     df6:	46bd      	mov	sp, r7
     df8:	b002      	add	sp, #8
     dfa:	bd80      	pop	{r7, pc}

00000dfc <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE11initOffsetsEi>:
            mLenRemaining = mLen = other.mLen;
            for(int i = 0; i < LANES; i++) { mOffsets[i] = other.mOffsets[i]; }

        }

        void initOffsets(int len) {
     dfc:	b580      	push	{r7, lr}
     dfe:	b084      	sub	sp, #16
     e00:	af00      	add	r7, sp, #0
     e02:	6078      	str	r0, [r7, #4]
     e04:	6039      	str	r1, [r7, #0]
          int nOffset = 0;
     e06:	2300      	movs	r3, #0
     e08:	60fb      	str	r3, [r7, #12]
          for(int i = 0; i < LANES; i++) {
     e0a:	2300      	movs	r3, #0
     e0c:	60bb      	str	r3, [r7, #8]
     e0e:	68bb      	ldr	r3, [r7, #8]
     e10:	2b00      	cmp	r3, #0
     e12:	dc17      	bgt.n	e44 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE11initOffsetsEi+0x48>
            mOffsets[i] = nOffset;
     e14:	687b      	ldr	r3, [r7, #4]
     e16:	68ba      	ldr	r2, [r7, #8]
     e18:	3206      	adds	r2, #6
     e1a:	0092      	lsls	r2, r2, #2
     e1c:	68f9      	ldr	r1, [r7, #12]
     e1e:	50d1      	str	r1, [r2, r3]
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     e20:	2201      	movs	r2, #1
     e22:	68bb      	ldr	r3, [r7, #8]
     e24:	409a      	lsls	r2, r3
     e26:	1e13      	subs	r3, r2, #0
     e28:	d008      	beq.n	e3c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE11initOffsetsEi+0x40>
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	7d5b      	ldrb	r3, [r3, #21]
     e2e:	b25b      	sxtb	r3, r3
     e30:	001a      	movs	r2, r3
     e32:	683b      	ldr	r3, [r7, #0]
     e34:	4353      	muls	r3, r2
     e36:	68fa      	ldr	r2, [r7, #12]
     e38:	18d3      	adds	r3, r2, r3
     e3a:	60fb      	str	r3, [r7, #12]

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     e3c:	68bb      	ldr	r3, [r7, #8]
     e3e:	3301      	adds	r3, #1
     e40:	60bb      	str	r3, [r7, #8]
     e42:	e7e4      	b.n	e0e <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE11initOffsetsEi+0x12>
            mOffsets[i] = nOffset;
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
          }
        }
     e44:	46c0      	nop			; (mov r8, r8)
     e46:	46bd      	mov	sp, r7
     e48:	b004      	add	sp, #16
     e4a:	bd80      	pop	{r7, pc}

00000e4c <_ZN7FastPinILh6EE9setOutputEv>:
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     e4c:	b580      	push	{r7, lr}
     e4e:	af00      	add	r7, sp, #0
     e50:	f000 fb76 	bl	1540 <_ZN7FastPinILh6EE5_initEv>
     e54:	2101      	movs	r1, #1
     e56:	2006      	movs	r0, #6
     e58:	f003 fa64 	bl	4324 <pinMode>
     e5c:	46c0      	nop			; (mov r8, r8)
     e5e:	46bd      	mov	sp, r7
     e60:	bd80      	pop	{r7, pc}
     e62:	46c0      	nop			; (mov r8, r8)

00000e64 <_ZN7FastPinILh9EE9setOutputEv>:
     e64:	b580      	push	{r7, lr}
     e66:	af00      	add	r7, sp, #0
     e68:	f000 fb98 	bl	159c <_ZN7FastPinILh9EE5_initEv>
     e6c:	2101      	movs	r1, #1
     e6e:	2009      	movs	r0, #9
     e70:	f003 fa58 	bl	4324 <pinMode>
     e74:	46c0      	nop			; (mov r8, r8)
     e76:	46bd      	mov	sp, r7
     e78:	bd80      	pop	{r7, pc}
     e7a:	46c0      	nop			; (mov r8, r8)

00000e7c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
     e7c:	b580      	push	{r7, lr}
     e7e:	b084      	sub	sp, #16
     e80:	af00      	add	r7, sp, #0
     e82:	0002      	movs	r2, r0
     e84:	1dfb      	adds	r3, r7, #7
     e86:	701a      	strb	r2, [r3, #0]
     e88:	230f      	movs	r3, #15
     e8a:	18fb      	adds	r3, r7, r3
     e8c:	1dfa      	adds	r2, r7, #7
     e8e:	7812      	ldrb	r2, [r2, #0]
     e90:	701a      	strb	r2, [r3, #0]
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     e92:	230f      	movs	r3, #15
     e94:	18fb      	adds	r3, r7, r3
     e96:	781b      	ldrb	r3, [r3, #0]
     e98:	b25b      	sxtb	r3, r3
     e9a:	2b00      	cmp	r3, #0
     e9c:	da1c      	bge.n	ed8 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x5c>
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     e9e:	4bdd      	ldr	r3, [pc, #884]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
     ea0:	6819      	ldr	r1, [r3, #0]
     ea2:	4bdd      	ldr	r3, [pc, #884]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     ea4:	681b      	ldr	r3, [r3, #0]
     ea6:	4adc      	ldr	r2, [pc, #880]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     ea8:	6812      	ldr	r2, [r2, #0]
     eaa:	6812      	ldr	r2, [r2, #0]
     eac:	430a      	orrs	r2, r1
     eae:	601a      	str	r2, [r3, #0]
     eb0:	4bda      	ldr	r3, [pc, #872]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
     eb2:	6819      	ldr	r1, [r3, #0]
     eb4:	4bda      	ldr	r3, [pc, #872]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     eb6:	681b      	ldr	r3, [r3, #0]
     eb8:	4ad9      	ldr	r2, [pc, #868]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     eba:	6812      	ldr	r2, [r2, #0]
     ebc:	6812      	ldr	r2, [r2, #0]
     ebe:	430a      	orrs	r2, r1
     ec0:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     ec2:	4bd6      	ldr	r3, [pc, #856]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
     ec4:	681b      	ldr	r3, [r3, #0]
     ec6:	43d9      	mvns	r1, r3
     ec8:	4bd5      	ldr	r3, [pc, #852]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	4ad4      	ldr	r2, [pc, #848]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     ece:	6812      	ldr	r2, [r2, #0]
     ed0:	6812      	ldr	r2, [r2, #0]
     ed2:	400a      	ands	r2, r1
     ed4:	601a      	str	r2, [r3, #0]
     ed6:	e01c      	b.n	f12 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x96>
     ed8:	4bce      	ldr	r3, [pc, #824]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	43d9      	mvns	r1, r3
     ede:	4bce      	ldr	r3, [pc, #824]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     ee0:	681b      	ldr	r3, [r3, #0]
     ee2:	4acd      	ldr	r2, [pc, #820]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     ee4:	6812      	ldr	r2, [r2, #0]
     ee6:	6812      	ldr	r2, [r2, #0]
     ee8:	400a      	ands	r2, r1
     eea:	601a      	str	r2, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     eec:	4bcb      	ldr	r3, [pc, #812]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
     eee:	6819      	ldr	r1, [r3, #0]
     ef0:	4bcb      	ldr	r3, [pc, #812]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	4aca      	ldr	r2, [pc, #808]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     ef6:	6812      	ldr	r2, [r2, #0]
     ef8:	6812      	ldr	r2, [r2, #0]
     efa:	430a      	orrs	r2, r1
     efc:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     efe:	4bc7      	ldr	r3, [pc, #796]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
     f00:	681b      	ldr	r3, [r3, #0]
     f02:	43d9      	mvns	r1, r3
     f04:	4bc6      	ldr	r3, [pc, #792]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     f06:	681b      	ldr	r3, [r3, #0]
     f08:	4ac5      	ldr	r2, [pc, #788]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     f0a:	6812      	ldr	r2, [r2, #0]
     f0c:	6812      	ldr	r2, [r2, #0]
     f0e:	400a      	ands	r2, r1
     f10:	601a      	str	r2, [r3, #0]
     f12:	230e      	movs	r3, #14
     f14:	18fb      	adds	r3, r7, r3
     f16:	1dfa      	adds	r2, r7, #7
     f18:	7812      	ldrb	r2, [r2, #0]
     f1a:	701a      	strb	r2, [r3, #0]
     f1c:	230e      	movs	r3, #14
     f1e:	18fb      	adds	r3, r7, r3
     f20:	781b      	ldrb	r3, [r3, #0]
     f22:	2240      	movs	r2, #64	; 0x40
     f24:	4013      	ands	r3, r2
     f26:	d01c      	beq.n	f62 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xe6>
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     f28:	4bba      	ldr	r3, [pc, #744]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
     f2a:	6819      	ldr	r1, [r3, #0]
     f2c:	4bba      	ldr	r3, [pc, #744]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     f2e:	681b      	ldr	r3, [r3, #0]
     f30:	4ab9      	ldr	r2, [pc, #740]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     f32:	6812      	ldr	r2, [r2, #0]
     f34:	6812      	ldr	r2, [r2, #0]
     f36:	430a      	orrs	r2, r1
     f38:	601a      	str	r2, [r3, #0]
     f3a:	4bb8      	ldr	r3, [pc, #736]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
     f3c:	6819      	ldr	r1, [r3, #0]
     f3e:	4bb8      	ldr	r3, [pc, #736]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     f40:	681b      	ldr	r3, [r3, #0]
     f42:	4ab7      	ldr	r2, [pc, #732]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     f44:	6812      	ldr	r2, [r2, #0]
     f46:	6812      	ldr	r2, [r2, #0]
     f48:	430a      	orrs	r2, r1
     f4a:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     f4c:	4bb3      	ldr	r3, [pc, #716]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
     f4e:	681b      	ldr	r3, [r3, #0]
     f50:	43d9      	mvns	r1, r3
     f52:	4bb3      	ldr	r3, [pc, #716]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     f54:	681b      	ldr	r3, [r3, #0]
     f56:	4ab2      	ldr	r2, [pc, #712]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     f58:	6812      	ldr	r2, [r2, #0]
     f5a:	6812      	ldr	r2, [r2, #0]
     f5c:	400a      	ands	r2, r1
     f5e:	601a      	str	r2, [r3, #0]
     f60:	e01c      	b.n	f9c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x120>
     f62:	4bac      	ldr	r3, [pc, #688]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
     f64:	681b      	ldr	r3, [r3, #0]
     f66:	43d9      	mvns	r1, r3
     f68:	4bab      	ldr	r3, [pc, #684]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     f6a:	681b      	ldr	r3, [r3, #0]
     f6c:	4aaa      	ldr	r2, [pc, #680]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     f6e:	6812      	ldr	r2, [r2, #0]
     f70:	6812      	ldr	r2, [r2, #0]
     f72:	400a      	ands	r2, r1
     f74:	601a      	str	r2, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     f76:	4ba9      	ldr	r3, [pc, #676]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
     f78:	6819      	ldr	r1, [r3, #0]
     f7a:	4ba9      	ldr	r3, [pc, #676]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     f7c:	681b      	ldr	r3, [r3, #0]
     f7e:	4aa8      	ldr	r2, [pc, #672]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     f80:	6812      	ldr	r2, [r2, #0]
     f82:	6812      	ldr	r2, [r2, #0]
     f84:	430a      	orrs	r2, r1
     f86:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     f88:	4ba4      	ldr	r3, [pc, #656]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
     f8a:	681b      	ldr	r3, [r3, #0]
     f8c:	43d9      	mvns	r1, r3
     f8e:	4ba4      	ldr	r3, [pc, #656]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	4aa3      	ldr	r2, [pc, #652]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     f94:	6812      	ldr	r2, [r2, #0]
     f96:	6812      	ldr	r2, [r2, #0]
     f98:	400a      	ands	r2, r1
     f9a:	601a      	str	r2, [r3, #0]
     f9c:	230d      	movs	r3, #13
     f9e:	18fb      	adds	r3, r7, r3
     fa0:	1dfa      	adds	r2, r7, #7
     fa2:	7812      	ldrb	r2, [r2, #0]
     fa4:	701a      	strb	r2, [r3, #0]
     fa6:	230d      	movs	r3, #13
     fa8:	18fb      	adds	r3, r7, r3
     faa:	781b      	ldrb	r3, [r3, #0]
     fac:	2220      	movs	r2, #32
     fae:	4013      	ands	r3, r2
     fb0:	d01c      	beq.n	fec <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x170>
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     fb2:	4b98      	ldr	r3, [pc, #608]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
     fb4:	6819      	ldr	r1, [r3, #0]
     fb6:	4b98      	ldr	r3, [pc, #608]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     fb8:	681b      	ldr	r3, [r3, #0]
     fba:	4a97      	ldr	r2, [pc, #604]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     fbc:	6812      	ldr	r2, [r2, #0]
     fbe:	6812      	ldr	r2, [r2, #0]
     fc0:	430a      	orrs	r2, r1
     fc2:	601a      	str	r2, [r3, #0]
     fc4:	4b95      	ldr	r3, [pc, #596]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
     fc6:	6819      	ldr	r1, [r3, #0]
     fc8:	4b95      	ldr	r3, [pc, #596]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     fca:	681b      	ldr	r3, [r3, #0]
     fcc:	4a94      	ldr	r2, [pc, #592]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     fce:	6812      	ldr	r2, [r2, #0]
     fd0:	6812      	ldr	r2, [r2, #0]
     fd2:	430a      	orrs	r2, r1
     fd4:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     fd6:	4b91      	ldr	r3, [pc, #580]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	43d9      	mvns	r1, r3
     fdc:	4b90      	ldr	r3, [pc, #576]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     fde:	681b      	ldr	r3, [r3, #0]
     fe0:	4a8f      	ldr	r2, [pc, #572]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
     fe2:	6812      	ldr	r2, [r2, #0]
     fe4:	6812      	ldr	r2, [r2, #0]
     fe6:	400a      	ands	r2, r1
     fe8:	601a      	str	r2, [r3, #0]
     fea:	e01c      	b.n	1026 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x1aa>
     fec:	4b89      	ldr	r3, [pc, #548]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
     fee:	681b      	ldr	r3, [r3, #0]
     ff0:	43d9      	mvns	r1, r3
     ff2:	4b89      	ldr	r3, [pc, #548]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     ff4:	681b      	ldr	r3, [r3, #0]
     ff6:	4a88      	ldr	r2, [pc, #544]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
     ff8:	6812      	ldr	r2, [r2, #0]
     ffa:	6812      	ldr	r2, [r2, #0]
     ffc:	400a      	ands	r2, r1
     ffe:	601a      	str	r2, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1000:	4b86      	ldr	r3, [pc, #536]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    1002:	6819      	ldr	r1, [r3, #0]
    1004:	4b86      	ldr	r3, [pc, #536]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    1006:	681b      	ldr	r3, [r3, #0]
    1008:	4a85      	ldr	r2, [pc, #532]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    100a:	6812      	ldr	r2, [r2, #0]
    100c:	6812      	ldr	r2, [r2, #0]
    100e:	430a      	orrs	r2, r1
    1010:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1012:	4b82      	ldr	r3, [pc, #520]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    1014:	681b      	ldr	r3, [r3, #0]
    1016:	43d9      	mvns	r1, r3
    1018:	4b81      	ldr	r3, [pc, #516]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    101a:	681b      	ldr	r3, [r3, #0]
    101c:	4a80      	ldr	r2, [pc, #512]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    101e:	6812      	ldr	r2, [r2, #0]
    1020:	6812      	ldr	r2, [r2, #0]
    1022:	400a      	ands	r2, r1
    1024:	601a      	str	r2, [r3, #0]
    1026:	230c      	movs	r3, #12
    1028:	18fb      	adds	r3, r7, r3
    102a:	1dfa      	adds	r2, r7, #7
    102c:	7812      	ldrb	r2, [r2, #0]
    102e:	701a      	strb	r2, [r3, #0]
    1030:	230c      	movs	r3, #12
    1032:	18fb      	adds	r3, r7, r3
    1034:	781b      	ldrb	r3, [r3, #0]
    1036:	2210      	movs	r2, #16
    1038:	4013      	ands	r3, r2
    103a:	d01c      	beq.n	1076 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x1fa>
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    103c:	4b75      	ldr	r3, [pc, #468]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
    103e:	6819      	ldr	r1, [r3, #0]
    1040:	4b75      	ldr	r3, [pc, #468]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    1042:	681b      	ldr	r3, [r3, #0]
    1044:	4a74      	ldr	r2, [pc, #464]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    1046:	6812      	ldr	r2, [r2, #0]
    1048:	6812      	ldr	r2, [r2, #0]
    104a:	430a      	orrs	r2, r1
    104c:	601a      	str	r2, [r3, #0]
    104e:	4b73      	ldr	r3, [pc, #460]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    1050:	6819      	ldr	r1, [r3, #0]
    1052:	4b73      	ldr	r3, [pc, #460]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    1054:	681b      	ldr	r3, [r3, #0]
    1056:	4a72      	ldr	r2, [pc, #456]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    1058:	6812      	ldr	r2, [r2, #0]
    105a:	6812      	ldr	r2, [r2, #0]
    105c:	430a      	orrs	r2, r1
    105e:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1060:	4b6e      	ldr	r3, [pc, #440]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	43d9      	mvns	r1, r3
    1066:	4b6e      	ldr	r3, [pc, #440]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	4a6d      	ldr	r2, [pc, #436]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    106c:	6812      	ldr	r2, [r2, #0]
    106e:	6812      	ldr	r2, [r2, #0]
    1070:	400a      	ands	r2, r1
    1072:	601a      	str	r2, [r3, #0]
    1074:	e01c      	b.n	10b0 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x234>
    1076:	4b67      	ldr	r3, [pc, #412]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	43d9      	mvns	r1, r3
    107c:	4b66      	ldr	r3, [pc, #408]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    107e:	681b      	ldr	r3, [r3, #0]
    1080:	4a65      	ldr	r2, [pc, #404]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    1082:	6812      	ldr	r2, [r2, #0]
    1084:	6812      	ldr	r2, [r2, #0]
    1086:	400a      	ands	r2, r1
    1088:	601a      	str	r2, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    108a:	4b64      	ldr	r3, [pc, #400]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    108c:	6819      	ldr	r1, [r3, #0]
    108e:	4b64      	ldr	r3, [pc, #400]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    1090:	681b      	ldr	r3, [r3, #0]
    1092:	4a63      	ldr	r2, [pc, #396]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    1094:	6812      	ldr	r2, [r2, #0]
    1096:	6812      	ldr	r2, [r2, #0]
    1098:	430a      	orrs	r2, r1
    109a:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    109c:	4b5f      	ldr	r3, [pc, #380]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    109e:	681b      	ldr	r3, [r3, #0]
    10a0:	43d9      	mvns	r1, r3
    10a2:	4b5f      	ldr	r3, [pc, #380]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    10a4:	681b      	ldr	r3, [r3, #0]
    10a6:	4a5e      	ldr	r2, [pc, #376]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    10a8:	6812      	ldr	r2, [r2, #0]
    10aa:	6812      	ldr	r2, [r2, #0]
    10ac:	400a      	ands	r2, r1
    10ae:	601a      	str	r2, [r3, #0]
    10b0:	230b      	movs	r3, #11
    10b2:	18fb      	adds	r3, r7, r3
    10b4:	1dfa      	adds	r2, r7, #7
    10b6:	7812      	ldrb	r2, [r2, #0]
    10b8:	701a      	strb	r2, [r3, #0]
    10ba:	230b      	movs	r3, #11
    10bc:	18fb      	adds	r3, r7, r3
    10be:	781b      	ldrb	r3, [r3, #0]
    10c0:	2208      	movs	r2, #8
    10c2:	4013      	ands	r3, r2
    10c4:	d01c      	beq.n	1100 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x284>
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    10c6:	4b53      	ldr	r3, [pc, #332]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
    10c8:	6819      	ldr	r1, [r3, #0]
    10ca:	4b53      	ldr	r3, [pc, #332]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    10cc:	681b      	ldr	r3, [r3, #0]
    10ce:	4a52      	ldr	r2, [pc, #328]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    10d0:	6812      	ldr	r2, [r2, #0]
    10d2:	6812      	ldr	r2, [r2, #0]
    10d4:	430a      	orrs	r2, r1
    10d6:	601a      	str	r2, [r3, #0]
    10d8:	4b50      	ldr	r3, [pc, #320]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    10da:	6819      	ldr	r1, [r3, #0]
    10dc:	4b50      	ldr	r3, [pc, #320]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    10de:	681b      	ldr	r3, [r3, #0]
    10e0:	4a4f      	ldr	r2, [pc, #316]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    10e2:	6812      	ldr	r2, [r2, #0]
    10e4:	6812      	ldr	r2, [r2, #0]
    10e6:	430a      	orrs	r2, r1
    10e8:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    10ea:	4b4c      	ldr	r3, [pc, #304]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    10ec:	681b      	ldr	r3, [r3, #0]
    10ee:	43d9      	mvns	r1, r3
    10f0:	4b4b      	ldr	r3, [pc, #300]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    10f2:	681b      	ldr	r3, [r3, #0]
    10f4:	4a4a      	ldr	r2, [pc, #296]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    10f6:	6812      	ldr	r2, [r2, #0]
    10f8:	6812      	ldr	r2, [r2, #0]
    10fa:	400a      	ands	r2, r1
    10fc:	601a      	str	r2, [r3, #0]
    10fe:	e01c      	b.n	113a <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x2be>
    1100:	4b44      	ldr	r3, [pc, #272]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
    1102:	681b      	ldr	r3, [r3, #0]
    1104:	43d9      	mvns	r1, r3
    1106:	4b44      	ldr	r3, [pc, #272]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    1108:	681b      	ldr	r3, [r3, #0]
    110a:	4a43      	ldr	r2, [pc, #268]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    110c:	6812      	ldr	r2, [r2, #0]
    110e:	6812      	ldr	r2, [r2, #0]
    1110:	400a      	ands	r2, r1
    1112:	601a      	str	r2, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1114:	4b41      	ldr	r3, [pc, #260]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    1116:	6819      	ldr	r1, [r3, #0]
    1118:	4b41      	ldr	r3, [pc, #260]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    111a:	681b      	ldr	r3, [r3, #0]
    111c:	4a40      	ldr	r2, [pc, #256]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    111e:	6812      	ldr	r2, [r2, #0]
    1120:	6812      	ldr	r2, [r2, #0]
    1122:	430a      	orrs	r2, r1
    1124:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1126:	4b3d      	ldr	r3, [pc, #244]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    1128:	681b      	ldr	r3, [r3, #0]
    112a:	43d9      	mvns	r1, r3
    112c:	4b3c      	ldr	r3, [pc, #240]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    112e:	681b      	ldr	r3, [r3, #0]
    1130:	4a3b      	ldr	r2, [pc, #236]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    1132:	6812      	ldr	r2, [r2, #0]
    1134:	6812      	ldr	r2, [r2, #0]
    1136:	400a      	ands	r2, r1
    1138:	601a      	str	r2, [r3, #0]
    113a:	230a      	movs	r3, #10
    113c:	18fb      	adds	r3, r7, r3
    113e:	1dfa      	adds	r2, r7, #7
    1140:	7812      	ldrb	r2, [r2, #0]
    1142:	701a      	strb	r2, [r3, #0]
    1144:	230a      	movs	r3, #10
    1146:	18fb      	adds	r3, r7, r3
    1148:	781b      	ldrb	r3, [r3, #0]
    114a:	2204      	movs	r2, #4
    114c:	4013      	ands	r3, r2
    114e:	d01c      	beq.n	118a <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x30e>
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1150:	4b30      	ldr	r3, [pc, #192]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
    1152:	6819      	ldr	r1, [r3, #0]
    1154:	4b30      	ldr	r3, [pc, #192]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	4a2f      	ldr	r2, [pc, #188]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    115a:	6812      	ldr	r2, [r2, #0]
    115c:	6812      	ldr	r2, [r2, #0]
    115e:	430a      	orrs	r2, r1
    1160:	601a      	str	r2, [r3, #0]
    1162:	4b2e      	ldr	r3, [pc, #184]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    1164:	6819      	ldr	r1, [r3, #0]
    1166:	4b2e      	ldr	r3, [pc, #184]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    1168:	681b      	ldr	r3, [r3, #0]
    116a:	4a2d      	ldr	r2, [pc, #180]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    116c:	6812      	ldr	r2, [r2, #0]
    116e:	6812      	ldr	r2, [r2, #0]
    1170:	430a      	orrs	r2, r1
    1172:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1174:	4b29      	ldr	r3, [pc, #164]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	43d9      	mvns	r1, r3
    117a:	4b29      	ldr	r3, [pc, #164]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    117c:	681b      	ldr	r3, [r3, #0]
    117e:	4a28      	ldr	r2, [pc, #160]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    1180:	6812      	ldr	r2, [r2, #0]
    1182:	6812      	ldr	r2, [r2, #0]
    1184:	400a      	ands	r2, r1
    1186:	601a      	str	r2, [r3, #0]
    1188:	e01c      	b.n	11c4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x348>
    118a:	4b22      	ldr	r3, [pc, #136]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
    118c:	681b      	ldr	r3, [r3, #0]
    118e:	43d9      	mvns	r1, r3
    1190:	4b21      	ldr	r3, [pc, #132]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    1192:	681b      	ldr	r3, [r3, #0]
    1194:	4a20      	ldr	r2, [pc, #128]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    1196:	6812      	ldr	r2, [r2, #0]
    1198:	6812      	ldr	r2, [r2, #0]
    119a:	400a      	ands	r2, r1
    119c:	601a      	str	r2, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    119e:	4b1f      	ldr	r3, [pc, #124]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    11a0:	6819      	ldr	r1, [r3, #0]
    11a2:	4b1f      	ldr	r3, [pc, #124]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    11a4:	681b      	ldr	r3, [r3, #0]
    11a6:	4a1e      	ldr	r2, [pc, #120]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    11a8:	6812      	ldr	r2, [r2, #0]
    11aa:	6812      	ldr	r2, [r2, #0]
    11ac:	430a      	orrs	r2, r1
    11ae:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    11b0:	4b1a      	ldr	r3, [pc, #104]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    11b2:	681b      	ldr	r3, [r3, #0]
    11b4:	43d9      	mvns	r1, r3
    11b6:	4b1a      	ldr	r3, [pc, #104]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    11b8:	681b      	ldr	r3, [r3, #0]
    11ba:	4a19      	ldr	r2, [pc, #100]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    11bc:	6812      	ldr	r2, [r2, #0]
    11be:	6812      	ldr	r2, [r2, #0]
    11c0:	400a      	ands	r2, r1
    11c2:	601a      	str	r2, [r3, #0]
    11c4:	2309      	movs	r3, #9
    11c6:	18fb      	adds	r3, r7, r3
    11c8:	1dfa      	adds	r2, r7, #7
    11ca:	7812      	ldrb	r2, [r2, #0]
    11cc:	701a      	strb	r2, [r3, #0]
    11ce:	2309      	movs	r3, #9
    11d0:	18fb      	adds	r3, r7, r3
    11d2:	781b      	ldrb	r3, [r3, #0]
    11d4:	2202      	movs	r2, #2
    11d6:	4013      	ands	r3, r2
    11d8:	d024      	beq.n	1224 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a8>
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    11da:	4b0e      	ldr	r3, [pc, #56]	; (1214 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x398>)
    11dc:	6819      	ldr	r1, [r3, #0]
    11de:	4b0e      	ldr	r3, [pc, #56]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    11e0:	681b      	ldr	r3, [r3, #0]
    11e2:	4a0d      	ldr	r2, [pc, #52]	; (1218 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x39c>)
    11e4:	6812      	ldr	r2, [r2, #0]
    11e6:	6812      	ldr	r2, [r2, #0]
    11e8:	430a      	orrs	r2, r1
    11ea:	601a      	str	r2, [r3, #0]
    11ec:	4b0b      	ldr	r3, [pc, #44]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    11ee:	6819      	ldr	r1, [r3, #0]
    11f0:	4b0b      	ldr	r3, [pc, #44]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    11f2:	681b      	ldr	r3, [r3, #0]
    11f4:	4a0a      	ldr	r2, [pc, #40]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    11f6:	6812      	ldr	r2, [r2, #0]
    11f8:	6812      	ldr	r2, [r2, #0]
    11fa:	430a      	orrs	r2, r1
    11fc:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    11fe:	4b07      	ldr	r3, [pc, #28]	; (121c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a0>)
    1200:	681b      	ldr	r3, [r3, #0]
    1202:	43d9      	mvns	r1, r3
    1204:	4b06      	ldr	r3, [pc, #24]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    1206:	681b      	ldr	r3, [r3, #0]
    1208:	4a05      	ldr	r2, [pc, #20]	; (1220 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3a4>)
    120a:	6812      	ldr	r2, [r2, #0]
    120c:	6812      	ldr	r2, [r2, #0]
    120e:	400a      	ands	r2, r1
    1210:	601a      	str	r2, [r3, #0]
    1212:	e024      	b.n	125e <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x3e2>
    1214:	20000204 	.word	0x20000204
    1218:	20000208 	.word	0x20000208
    121c:	20000210 	.word	0x20000210
    1220:	20000214 	.word	0x20000214
    1224:	4b32      	ldr	r3, [pc, #200]	; (12f0 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x474>)
    1226:	681b      	ldr	r3, [r3, #0]
    1228:	43d9      	mvns	r1, r3
    122a:	4b32      	ldr	r3, [pc, #200]	; (12f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x478>)
    122c:	681b      	ldr	r3, [r3, #0]
    122e:	4a31      	ldr	r2, [pc, #196]	; (12f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x478>)
    1230:	6812      	ldr	r2, [r2, #0]
    1232:	6812      	ldr	r2, [r2, #0]
    1234:	400a      	ands	r2, r1
    1236:	601a      	str	r2, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1238:	4b2f      	ldr	r3, [pc, #188]	; (12f8 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x47c>)
    123a:	6819      	ldr	r1, [r3, #0]
    123c:	4b2f      	ldr	r3, [pc, #188]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	4a2e      	ldr	r2, [pc, #184]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    1242:	6812      	ldr	r2, [r2, #0]
    1244:	6812      	ldr	r2, [r2, #0]
    1246:	430a      	orrs	r2, r1
    1248:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    124a:	4b2b      	ldr	r3, [pc, #172]	; (12f8 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x47c>)
    124c:	681b      	ldr	r3, [r3, #0]
    124e:	43d9      	mvns	r1, r3
    1250:	4b2a      	ldr	r3, [pc, #168]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	4a29      	ldr	r2, [pc, #164]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    1256:	6812      	ldr	r2, [r2, #0]
    1258:	6812      	ldr	r2, [r2, #0]
    125a:	400a      	ands	r2, r1
    125c:	601a      	str	r2, [r3, #0]
    125e:	2308      	movs	r3, #8
    1260:	18fb      	adds	r3, r7, r3
    1262:	1dfa      	adds	r2, r7, #7
    1264:	7812      	ldrb	r2, [r2, #0]
    1266:	701a      	strb	r2, [r3, #0]
    1268:	2308      	movs	r3, #8
    126a:	18fb      	adds	r3, r7, r3
    126c:	781b      	ldrb	r3, [r3, #0]
    126e:	2201      	movs	r2, #1
    1270:	4013      	ands	r3, r2
    1272:	d01c      	beq.n	12ae <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x432>
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1274:	4b1e      	ldr	r3, [pc, #120]	; (12f0 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x474>)
    1276:	6819      	ldr	r1, [r3, #0]
    1278:	4b1e      	ldr	r3, [pc, #120]	; (12f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x478>)
    127a:	681b      	ldr	r3, [r3, #0]
    127c:	4a1d      	ldr	r2, [pc, #116]	; (12f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x478>)
    127e:	6812      	ldr	r2, [r2, #0]
    1280:	6812      	ldr	r2, [r2, #0]
    1282:	430a      	orrs	r2, r1
    1284:	601a      	str	r2, [r3, #0]
    1286:	4b1c      	ldr	r3, [pc, #112]	; (12f8 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x47c>)
    1288:	6819      	ldr	r1, [r3, #0]
    128a:	4b1c      	ldr	r3, [pc, #112]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    128c:	681b      	ldr	r3, [r3, #0]
    128e:	4a1b      	ldr	r2, [pc, #108]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    1290:	6812      	ldr	r2, [r2, #0]
    1292:	6812      	ldr	r2, [r2, #0]
    1294:	430a      	orrs	r2, r1
    1296:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1298:	4b17      	ldr	r3, [pc, #92]	; (12f8 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x47c>)
    129a:	681b      	ldr	r3, [r3, #0]
    129c:	43d9      	mvns	r1, r3
    129e:	4b17      	ldr	r3, [pc, #92]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    12a0:	681b      	ldr	r3, [r3, #0]
    12a2:	4a16      	ldr	r2, [pc, #88]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    12a4:	6812      	ldr	r2, [r2, #0]
    12a6:	6812      	ldr	r2, [r2, #0]
    12a8:	400a      	ands	r2, r1
    12aa:	601a      	str	r2, [r3, #0]
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    12ac:	e01c      	b.n	12e8 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x46c>
    12ae:	4b10      	ldr	r3, [pc, #64]	; (12f0 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x474>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	43d9      	mvns	r1, r3
    12b4:	4b0f      	ldr	r3, [pc, #60]	; (12f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x478>)
    12b6:	681b      	ldr	r3, [r3, #0]
    12b8:	4a0e      	ldr	r2, [pc, #56]	; (12f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x478>)
    12ba:	6812      	ldr	r2, [r2, #0]
    12bc:	6812      	ldr	r2, [r2, #0]
    12be:	400a      	ands	r2, r1
    12c0:	601a      	str	r2, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    12c2:	4b0d      	ldr	r3, [pc, #52]	; (12f8 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x47c>)
    12c4:	6819      	ldr	r1, [r3, #0]
    12c6:	4b0d      	ldr	r3, [pc, #52]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    12c8:	681b      	ldr	r3, [r3, #0]
    12ca:	4a0c      	ldr	r2, [pc, #48]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    12cc:	6812      	ldr	r2, [r2, #0]
    12ce:	6812      	ldr	r2, [r2, #0]
    12d0:	430a      	orrs	r2, r1
    12d2:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    12d4:	4b08      	ldr	r3, [pc, #32]	; (12f8 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x47c>)
    12d6:	681b      	ldr	r3, [r3, #0]
    12d8:	43d9      	mvns	r1, r3
    12da:	4b08      	ldr	r3, [pc, #32]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    12dc:	681b      	ldr	r3, [r3, #0]
    12de:	4a07      	ldr	r2, [pc, #28]	; (12fc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x480>)
    12e0:	6812      	ldr	r2, [r2, #0]
    12e2:	6812      	ldr	r2, [r2, #0]
    12e4:	400a      	ands	r2, r1
    12e6:	601a      	str	r2, [r3, #0]
    12e8:	46c0      	nop			; (mov r8, r8)
    12ea:	46bd      	mov	sp, r7
    12ec:	b004      	add	sp, #16
    12ee:	bd80      	pop	{r7, pc}
    12f0:	20000204 	.word	0x20000204
    12f4:	20000208 	.word	0x20000208
    12f8:	20000210 	.word	0x20000210
    12fc:	20000214 	.word	0x20000214

00001300 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv>:
            enable_dithering(dither);
            mAdvance = 0;
            initOffsets(len);
        }

        void init_binary_dithering() {
    1300:	b580      	push	{r7, lr}
    1302:	b086      	sub	sp, #24
    1304:	af00      	add	r7, sp, #0
    1306:	6078      	str	r0, [r7, #4]
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static byte R = 0;
            R++;
    1308:	4b8c      	ldr	r3, [pc, #560]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	3301      	adds	r3, #1
    130e:	b2da      	uxtb	r2, r3
    1310:	4b8a      	ldr	r3, [pc, #552]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    1312:	701a      	strb	r2, [r3, #0]

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
    1314:	230f      	movs	r3, #15
    1316:	18fb      	adds	r3, r7, r3
    1318:	2203      	movs	r2, #3
    131a:	701a      	strb	r2, [r3, #0]
            R &= (0x01 << ditherBits) - 1;
    131c:	230f      	movs	r3, #15
    131e:	18fb      	adds	r3, r7, r3
    1320:	781b      	ldrb	r3, [r3, #0]
    1322:	2201      	movs	r2, #1
    1324:	409a      	lsls	r2, r3
    1326:	0013      	movs	r3, r2
    1328:	b2db      	uxtb	r3, r3
    132a:	3b01      	subs	r3, #1
    132c:	b2db      	uxtb	r3, r3
    132e:	b25b      	sxtb	r3, r3
    1330:	4a82      	ldr	r2, [pc, #520]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    1332:	7812      	ldrb	r2, [r2, #0]
    1334:	b252      	sxtb	r2, r2
    1336:	4013      	ands	r3, r2
    1338:	b25b      	sxtb	r3, r3
    133a:	b2da      	uxtb	r2, r3
    133c:	4b7f      	ldr	r3, [pc, #508]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    133e:	701a      	strb	r2, [r3, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;
    1340:	2317      	movs	r3, #23
    1342:	18fb      	adds	r3, r7, r3
    1344:	2200      	movs	r2, #0
    1346:	701a      	strb	r2, [r3, #0]

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
    1348:	4b7c      	ldr	r3, [pc, #496]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    134a:	781b      	ldrb	r3, [r3, #0]
    134c:	001a      	movs	r2, r3
    134e:	2301      	movs	r3, #1
    1350:	4013      	ands	r3, r2
    1352:	d008      	beq.n	1366 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x66>
    1354:	2317      	movs	r3, #23
    1356:	18fb      	adds	r3, r7, r3
    1358:	2217      	movs	r2, #23
    135a:	18ba      	adds	r2, r7, r2
    135c:	7812      	ldrb	r2, [r2, #0]
    135e:	2180      	movs	r1, #128	; 0x80
    1360:	4249      	negs	r1, r1
    1362:	430a      	orrs	r2, r1
    1364:	701a      	strb	r2, [r3, #0]
                if(R & 0x02) { Q |= 0x40; }
    1366:	4b75      	ldr	r3, [pc, #468]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    1368:	781b      	ldrb	r3, [r3, #0]
    136a:	001a      	movs	r2, r3
    136c:	2302      	movs	r3, #2
    136e:	4013      	ands	r3, r2
    1370:	d007      	beq.n	1382 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x82>
    1372:	2317      	movs	r3, #23
    1374:	18fb      	adds	r3, r7, r3
    1376:	2217      	movs	r2, #23
    1378:	18ba      	adds	r2, r7, r2
    137a:	7812      	ldrb	r2, [r2, #0]
    137c:	2140      	movs	r1, #64	; 0x40
    137e:	430a      	orrs	r2, r1
    1380:	701a      	strb	r2, [r3, #0]
                if(R & 0x04) { Q |= 0x20; }
    1382:	4b6e      	ldr	r3, [pc, #440]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    1384:	781b      	ldrb	r3, [r3, #0]
    1386:	001a      	movs	r2, r3
    1388:	2304      	movs	r3, #4
    138a:	4013      	ands	r3, r2
    138c:	d007      	beq.n	139e <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x9e>
    138e:	2317      	movs	r3, #23
    1390:	18fb      	adds	r3, r7, r3
    1392:	2217      	movs	r2, #23
    1394:	18ba      	adds	r2, r7, r2
    1396:	7812      	ldrb	r2, [r2, #0]
    1398:	2120      	movs	r1, #32
    139a:	430a      	orrs	r2, r1
    139c:	701a      	strb	r2, [r3, #0]
                if(R & 0x08) { Q |= 0x10; }
    139e:	4b67      	ldr	r3, [pc, #412]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    13a0:	781b      	ldrb	r3, [r3, #0]
    13a2:	001a      	movs	r2, r3
    13a4:	2308      	movs	r3, #8
    13a6:	4013      	ands	r3, r2
    13a8:	d007      	beq.n	13ba <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0xba>
    13aa:	2317      	movs	r3, #23
    13ac:	18fb      	adds	r3, r7, r3
    13ae:	2217      	movs	r2, #23
    13b0:	18ba      	adds	r2, r7, r2
    13b2:	7812      	ldrb	r2, [r2, #0]
    13b4:	2110      	movs	r1, #16
    13b6:	430a      	orrs	r2, r1
    13b8:	701a      	strb	r2, [r3, #0]
                if(R & 0x10) { Q |= 0x08; }
    13ba:	4b60      	ldr	r3, [pc, #384]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    13bc:	781b      	ldrb	r3, [r3, #0]
    13be:	001a      	movs	r2, r3
    13c0:	2310      	movs	r3, #16
    13c2:	4013      	ands	r3, r2
    13c4:	d007      	beq.n	13d6 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0xd6>
    13c6:	2317      	movs	r3, #23
    13c8:	18fb      	adds	r3, r7, r3
    13ca:	2217      	movs	r2, #23
    13cc:	18ba      	adds	r2, r7, r2
    13ce:	7812      	ldrb	r2, [r2, #0]
    13d0:	2108      	movs	r1, #8
    13d2:	430a      	orrs	r2, r1
    13d4:	701a      	strb	r2, [r3, #0]
                if(R & 0x20) { Q |= 0x04; }
    13d6:	4b59      	ldr	r3, [pc, #356]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    13d8:	781b      	ldrb	r3, [r3, #0]
    13da:	001a      	movs	r2, r3
    13dc:	2320      	movs	r3, #32
    13de:	4013      	ands	r3, r2
    13e0:	d007      	beq.n	13f2 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0xf2>
    13e2:	2317      	movs	r3, #23
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	2217      	movs	r2, #23
    13e8:	18ba      	adds	r2, r7, r2
    13ea:	7812      	ldrb	r2, [r2, #0]
    13ec:	2104      	movs	r1, #4
    13ee:	430a      	orrs	r2, r1
    13f0:	701a      	strb	r2, [r3, #0]
                if(R & 0x40) { Q |= 0x02; }
    13f2:	4b52      	ldr	r3, [pc, #328]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    13f4:	781b      	ldrb	r3, [r3, #0]
    13f6:	001a      	movs	r2, r3
    13f8:	2340      	movs	r3, #64	; 0x40
    13fa:	4013      	ands	r3, r2
    13fc:	d007      	beq.n	140e <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x10e>
    13fe:	2317      	movs	r3, #23
    1400:	18fb      	adds	r3, r7, r3
    1402:	2217      	movs	r2, #23
    1404:	18ba      	adds	r2, r7, r2
    1406:	7812      	ldrb	r2, [r2, #0]
    1408:	2102      	movs	r1, #2
    140a:	430a      	orrs	r2, r1
    140c:	701a      	strb	r2, [r3, #0]
                if(R & 0x80) { Q |= 0x01; }
    140e:	4b4b      	ldr	r3, [pc, #300]	; (153c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x23c>)
    1410:	781b      	ldrb	r3, [r3, #0]
    1412:	b25b      	sxtb	r3, r3
    1414:	2b00      	cmp	r3, #0
    1416:	da07      	bge.n	1428 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x128>
    1418:	2317      	movs	r3, #23
    141a:	18fb      	adds	r3, r7, r3
    141c:	2217      	movs	r2, #23
    141e:	18ba      	adds	r2, r7, r2
    1420:	7812      	ldrb	r2, [r2, #0]
    1422:	2101      	movs	r1, #1
    1424:	430a      	orrs	r2, r1
    1426:	701a      	strb	r2, [r3, #0]

            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
    1428:	230f      	movs	r3, #15
    142a:	18fb      	adds	r3, r7, r3
    142c:	781b      	ldrb	r3, [r3, #0]
    142e:	2b07      	cmp	r3, #7
    1430:	d80f      	bhi.n	1452 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x152>
                Q += 0x01 << (7 - ditherBits);
    1432:	230f      	movs	r3, #15
    1434:	18fb      	adds	r3, r7, r3
    1436:	781b      	ldrb	r3, [r3, #0]
    1438:	2207      	movs	r2, #7
    143a:	1ad3      	subs	r3, r2, r3
    143c:	2201      	movs	r2, #1
    143e:	409a      	lsls	r2, r3
    1440:	0013      	movs	r3, r2
    1442:	b2d9      	uxtb	r1, r3
    1444:	2317      	movs	r3, #23
    1446:	18fb      	adds	r3, r7, r3
    1448:	2217      	movs	r2, #23
    144a:	18ba      	adds	r2, r7, r2
    144c:	7812      	ldrb	r2, [r2, #0]
    144e:	188a      	adds	r2, r1, r2
    1450:	701a      	strb	r2, [r3, #0]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1452:	2300      	movs	r3, #0
    1454:	613b      	str	r3, [r7, #16]
    1456:	693b      	ldr	r3, [r7, #16]
    1458:	2b02      	cmp	r3, #2
    145a:	dc6b      	bgt.n	1534 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x234>
                    byte s = mScale.raw[i];
    145c:	230e      	movs	r3, #14
    145e:	18fb      	adds	r3, r7, r3
    1460:	6879      	ldr	r1, [r7, #4]
    1462:	693a      	ldr	r2, [r7, #16]
    1464:	188a      	adds	r2, r1, r2
    1466:	3212      	adds	r2, #18
    1468:	7812      	ldrb	r2, [r2, #0]
    146a:	701a      	strb	r2, [r3, #0]
                    e[i] = s ? (256/s) + 1 : 0;
    146c:	230e      	movs	r3, #14
    146e:	18fb      	adds	r3, r7, r3
    1470:	781b      	ldrb	r3, [r3, #0]
    1472:	2b00      	cmp	r3, #0
    1474:	d00c      	beq.n	1490 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x190>
    1476:	230e      	movs	r3, #14
    1478:	18fb      	adds	r3, r7, r3
    147a:	781b      	ldrb	r3, [r3, #0]
    147c:	0019      	movs	r1, r3
    147e:	2380      	movs	r3, #128	; 0x80
    1480:	0058      	lsls	r0, r3, #1
    1482:	f005 f927 	bl	66d4 <__aeabi_idiv>
    1486:	0003      	movs	r3, r0
    1488:	b2db      	uxtb	r3, r3
    148a:	3301      	adds	r3, #1
    148c:	b2d9      	uxtb	r1, r3
    148e:	e000      	b.n	1492 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x192>
    1490:	2100      	movs	r1, #0
    1492:	687a      	ldr	r2, [r7, #4]
    1494:	693b      	ldr	r3, [r7, #16]
    1496:	18d3      	adds	r3, r2, r3
    1498:	330f      	adds	r3, #15
    149a:	1c0a      	adds	r2, r1, #0
    149c:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    149e:	687a      	ldr	r2, [r7, #4]
    14a0:	693b      	ldr	r3, [r7, #16]
    14a2:	18d3      	adds	r3, r2, r3
    14a4:	330f      	adds	r3, #15
    14a6:	7819      	ldrb	r1, [r3, #0]
    14a8:	230d      	movs	r3, #13
    14aa:	18fb      	adds	r3, r7, r3
    14ac:	2217      	movs	r2, #23
    14ae:	18ba      	adds	r2, r7, r2
    14b0:	7812      	ldrb	r2, [r2, #0]
    14b2:	701a      	strb	r2, [r3, #0]
    14b4:	230c      	movs	r3, #12
    14b6:	18fb      	adds	r3, r7, r3
    14b8:	1c0a      	adds	r2, r1, #0
    14ba:	701a      	strb	r2, [r3, #0]
    14bc:	230d      	movs	r3, #13
    14be:	18fb      	adds	r3, r7, r3
    14c0:	781b      	ldrb	r3, [r3, #0]
    14c2:	220c      	movs	r2, #12
    14c4:	18ba      	adds	r2, r7, r2
    14c6:	7812      	ldrb	r2, [r2, #0]
    14c8:	3201      	adds	r2, #1
    14ca:	4353      	muls	r3, r2
    14cc:	121b      	asrs	r3, r3, #8
    14ce:	b2d9      	uxtb	r1, r3
    14d0:	687a      	ldr	r2, [r7, #4]
    14d2:	693b      	ldr	r3, [r7, #16]
    14d4:	18d3      	adds	r3, r2, r3
    14d6:	330c      	adds	r3, #12
    14d8:	1c0a      	adds	r2, r1, #0
    14da:	701a      	strb	r2, [r3, #0]
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    14dc:	687a      	ldr	r2, [r7, #4]
    14de:	693b      	ldr	r3, [r7, #16]
    14e0:	18d3      	adds	r3, r2, r3
    14e2:	330c      	adds	r3, #12
    14e4:	781b      	ldrb	r3, [r3, #0]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d00c      	beq.n	1504 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x204>
    14ea:	687a      	ldr	r2, [r7, #4]
    14ec:	693b      	ldr	r3, [r7, #16]
    14ee:	18d3      	adds	r3, r2, r3
    14f0:	330c      	adds	r3, #12
    14f2:	781b      	ldrb	r3, [r3, #0]
    14f4:	3b01      	subs	r3, #1
    14f6:	b2d9      	uxtb	r1, r3
    14f8:	687a      	ldr	r2, [r7, #4]
    14fa:	693b      	ldr	r3, [r7, #16]
    14fc:	18d3      	adds	r3, r2, r3
    14fe:	330c      	adds	r3, #12
    1500:	1c0a      	adds	r2, r1, #0
    1502:	701a      	strb	r2, [r3, #0]
#endif
                    if(e[i]) e[i]--;
    1504:	687a      	ldr	r2, [r7, #4]
    1506:	693b      	ldr	r3, [r7, #16]
    1508:	18d3      	adds	r3, r2, r3
    150a:	330f      	adds	r3, #15
    150c:	781b      	ldrb	r3, [r3, #0]
    150e:	2b00      	cmp	r3, #0
    1510:	d00c      	beq.n	152c <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x22c>
    1512:	687a      	ldr	r2, [r7, #4]
    1514:	693b      	ldr	r3, [r7, #16]
    1516:	18d3      	adds	r3, r2, r3
    1518:	330f      	adds	r3, #15
    151a:	781b      	ldrb	r3, [r3, #0]
    151c:	3b01      	subs	r3, #1
    151e:	b2d9      	uxtb	r1, r3
    1520:	687a      	ldr	r2, [r7, #4]
    1522:	693b      	ldr	r3, [r7, #16]
    1524:	18d3      	adds	r3, r2, r3
    1526:	330f      	adds	r3, #15
    1528:	1c0a      	adds	r2, r1, #0
    152a:	701a      	strb	r2, [r3, #0]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    152c:	693b      	ldr	r3, [r7, #16]
    152e:	3301      	adds	r3, #1
    1530:	613b      	str	r3, [r7, #16]
    1532:	e790      	b.n	1456 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x156>
                    if(d[i]) (d[i]--);
#endif
                    if(e[i]) e[i]--;
            }
#endif
        }
    1534:	46c0      	nop			; (mov r8, r8)
    1536:	46bd      	mov	sp, r7
    1538:	b006      	add	sp, #24
    153a:	bd80      	pop	{r7, pc}
    153c:	2000021c 	.word	0x2000021c

00001540 <_ZN7FastPinILh6EE5_initEv>:
#ifdef FASTLED_FORCE_SOFTWARE_PINS
template<uint8_t PIN> class FastPin {
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
    1540:	b580      	push	{r7, lr}
    1542:	af00      	add	r7, sp, #0
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
    1544:	4b10      	ldr	r3, [pc, #64]	; (1588 <_ZN7FastPinILh6EE5_initEv+0x48>)
    1546:	2294      	movs	r2, #148	; 0x94
    1548:	589b      	ldr	r3, [r3, r2]
    154a:	2201      	movs	r2, #1
    154c:	409a      	lsls	r2, r3
    154e:	0013      	movs	r3, r2
    1550:	001a      	movs	r2, r3
    1552:	4b0e      	ldr	r3, [pc, #56]	; (158c <_ZN7FastPinILh6EE5_initEv+0x4c>)
    1554:	601a      	str	r2, [r3, #0]
		sPort = portOutputRegister(digitalPinToPort(PIN));
    1556:	4b0c      	ldr	r3, [pc, #48]	; (1588 <_ZN7FastPinILh6EE5_initEv+0x48>)
    1558:	2290      	movs	r2, #144	; 0x90
    155a:	569b      	ldrsb	r3, [r3, r2]
    155c:	01db      	lsls	r3, r3, #7
    155e:	4a0c      	ldr	r2, [pc, #48]	; (1590 <_ZN7FastPinILh6EE5_initEv+0x50>)
    1560:	4694      	mov	ip, r2
    1562:	4463      	add	r3, ip
    1564:	3310      	adds	r3, #16
    1566:	001a      	movs	r2, r3
    1568:	4b0a      	ldr	r3, [pc, #40]	; (1594 <_ZN7FastPinILh6EE5_initEv+0x54>)
    156a:	601a      	str	r2, [r3, #0]
		sInPort = portInputRegister(digitalPinToPort(PIN));
    156c:	4b06      	ldr	r3, [pc, #24]	; (1588 <_ZN7FastPinILh6EE5_initEv+0x48>)
    156e:	2290      	movs	r2, #144	; 0x90
    1570:	569b      	ldrsb	r3, [r3, r2]
    1572:	01db      	lsls	r3, r3, #7
    1574:	4a06      	ldr	r2, [pc, #24]	; (1590 <_ZN7FastPinILh6EE5_initEv+0x50>)
    1576:	4694      	mov	ip, r2
    1578:	4463      	add	r3, ip
    157a:	3320      	adds	r3, #32
    157c:	001a      	movs	r2, r3
    157e:	4b06      	ldr	r3, [pc, #24]	; (1598 <_ZN7FastPinILh6EE5_initEv+0x58>)
    1580:	601a      	str	r2, [r3, #0]
#endif
	}
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	46bd      	mov	sp, r7
    1586:	bd80      	pop	{r7, pc}
    1588:	000076f8 	.word	0x000076f8
    158c:	20000204 	.word	0x20000204
    1590:	41004400 	.word	0x41004400
    1594:	20000208 	.word	0x20000208
    1598:	2000020c 	.word	0x2000020c

0000159c <_ZN7FastPinILh9EE5_initEv>:
#ifdef FASTLED_FORCE_SOFTWARE_PINS
template<uint8_t PIN> class FastPin {
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
    159c:	b580      	push	{r7, lr}
    159e:	af00      	add	r7, sp, #0
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
    15a0:	4b10      	ldr	r3, [pc, #64]	; (15e4 <_ZN7FastPinILh9EE5_initEv+0x48>)
    15a2:	22dc      	movs	r2, #220	; 0xdc
    15a4:	589b      	ldr	r3, [r3, r2]
    15a6:	2201      	movs	r2, #1
    15a8:	409a      	lsls	r2, r3
    15aa:	0013      	movs	r3, r2
    15ac:	001a      	movs	r2, r3
    15ae:	4b0e      	ldr	r3, [pc, #56]	; (15e8 <_ZN7FastPinILh9EE5_initEv+0x4c>)
    15b0:	601a      	str	r2, [r3, #0]
		sPort = portOutputRegister(digitalPinToPort(PIN));
    15b2:	4b0c      	ldr	r3, [pc, #48]	; (15e4 <_ZN7FastPinILh9EE5_initEv+0x48>)
    15b4:	22d8      	movs	r2, #216	; 0xd8
    15b6:	569b      	ldrsb	r3, [r3, r2]
    15b8:	01db      	lsls	r3, r3, #7
    15ba:	4a0c      	ldr	r2, [pc, #48]	; (15ec <_ZN7FastPinILh9EE5_initEv+0x50>)
    15bc:	4694      	mov	ip, r2
    15be:	4463      	add	r3, ip
    15c0:	3310      	adds	r3, #16
    15c2:	001a      	movs	r2, r3
    15c4:	4b0a      	ldr	r3, [pc, #40]	; (15f0 <_ZN7FastPinILh9EE5_initEv+0x54>)
    15c6:	601a      	str	r2, [r3, #0]
		sInPort = portInputRegister(digitalPinToPort(PIN));
    15c8:	4b06      	ldr	r3, [pc, #24]	; (15e4 <_ZN7FastPinILh9EE5_initEv+0x48>)
    15ca:	22d8      	movs	r2, #216	; 0xd8
    15cc:	569b      	ldrsb	r3, [r3, r2]
    15ce:	01db      	lsls	r3, r3, #7
    15d0:	4a06      	ldr	r2, [pc, #24]	; (15ec <_ZN7FastPinILh9EE5_initEv+0x50>)
    15d2:	4694      	mov	ip, r2
    15d4:	4463      	add	r3, ip
    15d6:	3320      	adds	r3, #32
    15d8:	001a      	movs	r2, r3
    15da:	4b06      	ldr	r3, [pc, #24]	; (15f4 <_ZN7FastPinILh9EE5_initEv+0x58>)
    15dc:	601a      	str	r2, [r3, #0]
#endif
	}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	46bd      	mov	sp, r7
    15e2:	bd80      	pop	{r7, pc}
    15e4:	000076f8 	.word	0x000076f8
    15e8:	20000210 	.word	0x20000210
    15ec:	41004400 	.word	0x41004400
    15f0:	20000214 	.word	0x20000214
    15f4:	20000218 	.word	0x20000218

000015f8 <_GLOBAL__sub_I_leds>:
    15f8:	b580      	push	{r7, lr}
    15fa:	af00      	add	r7, sp, #0
    15fc:	4b03      	ldr	r3, [pc, #12]	; (160c <_GLOBAL__sub_I_leds+0x14>)
    15fe:	0019      	movs	r1, r3
    1600:	2001      	movs	r0, #1
    1602:	f7ff f8e1 	bl	7c8 <_Z41__static_initialization_and_destruction_0ii>
    1606:	46bd      	mov	sp, r7
    1608:	bd80      	pop	{r7, pc}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	0000ffff 	.word	0x0000ffff

00001610 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    1610:	b580      	push	{r7, lr}
    1612:	af00      	add	r7, sp, #0
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  while (1)
    1614:	e7fe      	b.n	1614 <__cxa_pure_virtual+0x4>
    1616:	46c0      	nop			; (mov r8, r8)

00001618 <Dummy_Handler>:
extern void pendSVHook(void);
extern int sysTickHook(void);

/* Default empty handler */
void Dummy_Handler(void)
{
    1618:	b580      	push	{r7, lr}
    161a:	af00      	add	r7, sp, #0
#if defined DEBUG
  __BKPT(3);
    161c:	be03      	bkpt	0x0003
#endif
  for (;;) { }
    161e:	e7fe      	b.n	161e <Dummy_Handler+0x6>

00001620 <Reset_Handler>:

extern int main(void);

/* This is called on processor reset to initialize the device and call main() */
void Reset_Handler(void)
{
    1620:	b580      	push	{r7, lr}
    1622:	b082      	sub	sp, #8
    1624:	af00      	add	r7, sp, #0
  uint32_t *pSrc, *pDest;

  /* Initialize the initialized data section */
  pSrc = &__etext;
    1626:	4b1a      	ldr	r3, [pc, #104]	; (1690 <Reset_Handler+0x70>)
    1628:	607b      	str	r3, [r7, #4]
  pDest = &__data_start__;
    162a:	4b1a      	ldr	r3, [pc, #104]	; (1694 <Reset_Handler+0x74>)
    162c:	603b      	str	r3, [r7, #0]

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    162e:	4a19      	ldr	r2, [pc, #100]	; (1694 <Reset_Handler+0x74>)
    1630:	4b19      	ldr	r3, [pc, #100]	; (1698 <Reset_Handler+0x78>)
    1632:	429a      	cmp	r2, r3
    1634:	d012      	beq.n	165c <Reset_Handler+0x3c>
    1636:	687a      	ldr	r2, [r7, #4]
    1638:	683b      	ldr	r3, [r7, #0]
    163a:	429a      	cmp	r2, r3
    163c:	d00e      	beq.n	165c <Reset_Handler+0x3c>
    for (; pDest < &__data_end__; pDest++, pSrc++)
    163e:	e009      	b.n	1654 <Reset_Handler+0x34>
      *pDest = *pSrc;
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	681a      	ldr	r2, [r3, #0]
    1644:	683b      	ldr	r3, [r7, #0]
    1646:	601a      	str	r2, [r3, #0]
  /* Initialize the initialized data section */
  pSrc = &__etext;
  pDest = &__data_start__;

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    for (; pDest < &__data_end__; pDest++, pSrc++)
    1648:	683b      	ldr	r3, [r7, #0]
    164a:	3304      	adds	r3, #4
    164c:	603b      	str	r3, [r7, #0]
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	3304      	adds	r3, #4
    1652:	607b      	str	r3, [r7, #4]
    1654:	683a      	ldr	r2, [r7, #0]
    1656:	4b10      	ldr	r3, [pc, #64]	; (1698 <Reset_Handler+0x78>)
    1658:	429a      	cmp	r2, r3
    165a:	d3f1      	bcc.n	1640 <Reset_Handler+0x20>
      *pDest = *pSrc;
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    165c:	4a0d      	ldr	r2, [pc, #52]	; (1694 <Reset_Handler+0x74>)
    165e:	4b0e      	ldr	r3, [pc, #56]	; (1698 <Reset_Handler+0x78>)
    1660:	429a      	cmp	r2, r3
    1662:	d010      	beq.n	1686 <Reset_Handler+0x66>
    1664:	687a      	ldr	r2, [r7, #4]
    1666:	683b      	ldr	r3, [r7, #0]
    1668:	429a      	cmp	r2, r3
    166a:	d00c      	beq.n	1686 <Reset_Handler+0x66>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    166c:	4b0b      	ldr	r3, [pc, #44]	; (169c <Reset_Handler+0x7c>)
    166e:	603b      	str	r3, [r7, #0]
    1670:	e005      	b.n	167e <Reset_Handler+0x5e>
      *pDest = 0;
    1672:	683b      	ldr	r3, [r7, #0]
    1674:	2200      	movs	r2, #0
    1676:	601a      	str	r2, [r3, #0]
      *pDest = *pSrc;
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    1678:	683b      	ldr	r3, [r7, #0]
    167a:	3304      	adds	r3, #4
    167c:	603b      	str	r3, [r7, #0]
    167e:	683a      	ldr	r2, [r7, #0]
    1680:	4b07      	ldr	r3, [pc, #28]	; (16a0 <Reset_Handler+0x80>)
    1682:	429a      	cmp	r2, r3
    1684:	d3f5      	bcc.n	1672 <Reset_Handler+0x52>
      *pDest = 0;
  }

  SystemInit();
    1686:	f000 f93b 	bl	1900 <SystemInit>

  main();
    168a:	f000 f8c5 	bl	1818 <main>

  while (1)
    ;
    168e:	e7fe      	b.n	168e <Reset_Handler+0x6e>
    1690:	00007c88 	.word	0x00007c88
    1694:	20000000 	.word	0x20000000
    1698:	20000110 	.word	0x20000110
    169c:	20000110 	.word	0x20000110
    16a0:	200009e4 	.word	0x200009e4

000016a4 <SysTick_Handler>:

/* Default Arduino systick handler */
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
    16a4:	b580      	push	{r7, lr}
    16a6:	af00      	add	r7, sp, #0
  if (sysTickHook())
    16a8:	f000 f8aa 	bl	1800 <sysTickHook>
    16ac:	1e03      	subs	r3, r0, #0
    16ae:	d102      	bne.n	16b6 <SysTick_Handler+0x12>
    return;
  SysTick_DefaultHandler();
    16b0:	f000 f892 	bl	17d8 <SysTick_DefaultHandler>
    16b4:	e000      	b.n	16b8 <SysTick_Handler+0x14>
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
  if (sysTickHook())
    return;
    16b6:	46c0      	nop			; (mov r8, r8)
  SysTick_DefaultHandler();
}
    16b8:	46bd      	mov	sp, r7
    16ba:	bd80      	pop	{r7, pc}

000016bc <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
    16bc:	b580      	push	{r7, lr}
    16be:	af00      	add	r7, sp, #0
  if (usb_isr)
    16c0:	4b04      	ldr	r3, [pc, #16]	; (16d4 <USB_Handler+0x18>)
    16c2:	681b      	ldr	r3, [r3, #0]
    16c4:	2b00      	cmp	r3, #0
    16c6:	d002      	beq.n	16ce <USB_Handler+0x12>
    usb_isr();
    16c8:	4b02      	ldr	r3, [pc, #8]	; (16d4 <USB_Handler+0x18>)
    16ca:	681b      	ldr	r3, [r3, #0]
    16cc:	4798      	blx	r3
}
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	46bd      	mov	sp, r7
    16d2:	bd80      	pop	{r7, pc}
    16d4:	20000220 	.word	0x20000220

000016d8 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
    16d8:	b580      	push	{r7, lr}
    16da:	b082      	sub	sp, #8
    16dc:	af00      	add	r7, sp, #0
    16de:	6078      	str	r0, [r7, #4]
  usb_isr = new_usb_isr;
    16e0:	4b03      	ldr	r3, [pc, #12]	; (16f0 <USB_SetHandler+0x18>)
    16e2:	687a      	ldr	r2, [r7, #4]
    16e4:	601a      	str	r2, [r3, #0]
}
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	46bd      	mov	sp, r7
    16ea:	b002      	add	sp, #8
    16ec:	bd80      	pop	{r7, pc}
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	20000220 	.word	0x20000220

000016f4 <millis>:

/** Tick Counter united by ms */
static volatile uint32_t _ulTickCount=0 ;

uint32_t millis( void )
{
    16f4:	b580      	push	{r7, lr}
    16f6:	af00      	add	r7, sp, #0
// todo: ensure no interrupts
  return _ulTickCount ;
    16f8:	4b02      	ldr	r3, [pc, #8]	; (1704 <millis+0x10>)
    16fa:	681b      	ldr	r3, [r3, #0]
}
    16fc:	0018      	movs	r0, r3
    16fe:	46bd      	mov	sp, r7
    1700:	bd80      	pop	{r7, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	20000224 	.word	0x20000224

00001708 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
uint32_t micros( void )
{
    1708:	b580      	push	{r7, lr}
    170a:	b086      	sub	sp, #24
    170c:	af00      	add	r7, sp, #0
  uint32_t ticks, ticks2;
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
    170e:	4b21      	ldr	r3, [pc, #132]	; (1794 <micros+0x8c>)
    1710:	689b      	ldr	r3, [r3, #8]
    1712:	617b      	str	r3, [r7, #20]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    1714:	4b20      	ldr	r3, [pc, #128]	; (1798 <micros+0x90>)
    1716:	685a      	ldr	r2, [r3, #4]
    1718:	2380      	movs	r3, #128	; 0x80
    171a:	04db      	lsls	r3, r3, #19
    171c:	4013      	ands	r3, r2
    171e:	1e5a      	subs	r2, r3, #1
    1720:	4193      	sbcs	r3, r2
    1722:	b2db      	uxtb	r3, r3
    1724:	613b      	str	r3, [r7, #16]
  count2  = _ulTickCount ;
    1726:	4b1d      	ldr	r3, [pc, #116]	; (179c <micros+0x94>)
    1728:	681b      	ldr	r3, [r3, #0]
    172a:	60fb      	str	r3, [r7, #12]

  do
  {
    ticks=ticks2;
    172c:	697b      	ldr	r3, [r7, #20]
    172e:	60bb      	str	r3, [r7, #8]
    pend=pend2;
    1730:	693b      	ldr	r3, [r7, #16]
    1732:	607b      	str	r3, [r7, #4]
    count=count2;
    1734:	68fb      	ldr	r3, [r7, #12]
    1736:	603b      	str	r3, [r7, #0]
    ticks2  = SysTick->VAL;
    1738:	4b16      	ldr	r3, [pc, #88]	; (1794 <micros+0x8c>)
    173a:	689b      	ldr	r3, [r3, #8]
    173c:	617b      	str	r3, [r7, #20]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    173e:	4b16      	ldr	r3, [pc, #88]	; (1798 <micros+0x90>)
    1740:	685a      	ldr	r2, [r3, #4]
    1742:	2380      	movs	r3, #128	; 0x80
    1744:	04db      	lsls	r3, r3, #19
    1746:	4013      	ands	r3, r2
    1748:	1e5a      	subs	r2, r3, #1
    174a:	4193      	sbcs	r3, r2
    174c:	b2db      	uxtb	r3, r3
    174e:	613b      	str	r3, [r7, #16]
    count2  = _ulTickCount ;
    1750:	4b12      	ldr	r3, [pc, #72]	; (179c <micros+0x94>)
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	60fb      	str	r3, [r7, #12]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    1756:	687a      	ldr	r2, [r7, #4]
    1758:	693b      	ldr	r3, [r7, #16]
    175a:	429a      	cmp	r2, r3
    175c:	d1e6      	bne.n	172c <micros+0x24>
    175e:	683a      	ldr	r2, [r7, #0]
    1760:	68fb      	ldr	r3, [r7, #12]
    1762:	429a      	cmp	r2, r3
    1764:	d1e2      	bne.n	172c <micros+0x24>
    1766:	68ba      	ldr	r2, [r7, #8]
    1768:	697b      	ldr	r3, [r7, #20]
    176a:	429a      	cmp	r2, r3
    176c:	d3de      	bcc.n	172c <micros+0x24>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    176e:	683a      	ldr	r2, [r7, #0]
    1770:	687b      	ldr	r3, [r7, #4]
    1772:	18d3      	adds	r3, r2, r3
    1774:	22fa      	movs	r2, #250	; 0xfa
    1776:	0092      	lsls	r2, r2, #2
    1778:	435a      	muls	r2, r3
    177a:	4b06      	ldr	r3, [pc, #24]	; (1794 <micros+0x8c>)
    177c:	6859      	ldr	r1, [r3, #4]
    177e:	68bb      	ldr	r3, [r7, #8]
    1780:	1acb      	subs	r3, r1, r3
    1782:	4907      	ldr	r1, [pc, #28]	; (17a0 <micros+0x98>)
    1784:	434b      	muls	r3, r1
    1786:	0d1b      	lsrs	r3, r3, #20
    1788:	18d3      	adds	r3, r2, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    178a:	0018      	movs	r0, r3
    178c:	46bd      	mov	sp, r7
    178e:	b006      	add	sp, #24
    1790:	bd80      	pop	{r7, pc}
    1792:	46c0      	nop			; (mov r8, r8)
    1794:	e000e010 	.word	0xe000e010
    1798:	e000ed00 	.word	0xe000ed00
    179c:	20000224 	.word	0x20000224
    17a0:	00005555 	.word	0x00005555

000017a4 <delay>:

void delay( uint32_t ms )
{
    17a4:	b580      	push	{r7, lr}
    17a6:	b084      	sub	sp, #16
    17a8:	af00      	add	r7, sp, #0
    17aa:	6078      	str	r0, [r7, #4]
  if ( ms == 0 )
    17ac:	687b      	ldr	r3, [r7, #4]
    17ae:	2b00      	cmp	r3, #0
    17b0:	d00c      	beq.n	17cc <delay+0x28>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
    17b2:	4b08      	ldr	r3, [pc, #32]	; (17d4 <delay+0x30>)
    17b4:	681b      	ldr	r3, [r3, #0]
    17b6:	60fb      	str	r3, [r7, #12]

  do
  {
    yield() ;
    17b8:	f000 f81c 	bl	17f4 <yield>
  } while ( _ulTickCount - start < ms ) ;
    17bc:	4b05      	ldr	r3, [pc, #20]	; (17d4 <delay+0x30>)
    17be:	681a      	ldr	r2, [r3, #0]
    17c0:	68fb      	ldr	r3, [r7, #12]
    17c2:	1ad2      	subs	r2, r2, r3
    17c4:	687b      	ldr	r3, [r7, #4]
    17c6:	429a      	cmp	r2, r3
    17c8:	d3f6      	bcc.n	17b8 <delay+0x14>
    17ca:	e000      	b.n	17ce <delay+0x2a>

void delay( uint32_t ms )
{
  if ( ms == 0 )
  {
    return ;
    17cc:	46c0      	nop			; (mov r8, r8)

  do
  {
    yield() ;
  } while ( _ulTickCount - start < ms ) ;
}
    17ce:	46bd      	mov	sp, r7
    17d0:	b004      	add	sp, #16
    17d2:	bd80      	pop	{r7, pc}
    17d4:	20000224 	.word	0x20000224

000017d8 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    17d8:	b580      	push	{r7, lr}
    17da:	af00      	add	r7, sp, #0
  // Increment tick count each ms
  _ulTickCount++;
    17dc:	4b04      	ldr	r3, [pc, #16]	; (17f0 <SysTick_DefaultHandler+0x18>)
    17de:	681b      	ldr	r3, [r3, #0]
    17e0:	1c5a      	adds	r2, r3, #1
    17e2:	4b03      	ldr	r3, [pc, #12]	; (17f0 <SysTick_DefaultHandler+0x18>)
    17e4:	601a      	str	r2, [r3, #0]
  tickReset();
    17e6:	f000 f871 	bl	18cc <tickReset>
}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	46bd      	mov	sp, r7
    17ee:	bd80      	pop	{r7, pc}
    17f0:	20000224 	.word	0x20000224

000017f4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    17f4:	b580      	push	{r7, lr}
    17f6:	af00      	add	r7, sp, #0
	// Empty
}
    17f8:	46c0      	nop			; (mov r8, r8)
    17fa:	46bd      	mov	sp, r7
    17fc:	bd80      	pop	{r7, pc}
    17fe:	46c0      	nop			; (mov r8, r8)

00001800 <sysTickHook>:
 * SysTick hook
 *
 * This function is called from SysTick handler, before the default
 * handler provided by Arduino.
 */
static int __false() {
    1800:	b580      	push	{r7, lr}
    1802:	af00      	add	r7, sp, #0
	// Return false
	return 0;
    1804:	2300      	movs	r3, #0
}
    1806:	0018      	movs	r0, r3
    1808:	46bd      	mov	sp, r7
    180a:	bd80      	pop	{r7, pc}

0000180c <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    180c:	b580      	push	{r7, lr}
    180e:	af00      	add	r7, sp, #0
    1810:	46c0      	nop			; (mov r8, r8)
    1812:	46bd      	mov	sp, r7
    1814:	bd80      	pop	{r7, pc}
    1816:	46c0      	nop			; (mov r8, r8)

00001818 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    1818:	b580      	push	{r7, lr}
    181a:	af00      	add	r7, sp, #0
  init();
    181c:	f002 fc92 	bl	4144 <init>

  __libc_init_array();
    1820:	f005 fda6 	bl	7370 <__libc_init_array>

  initVariant();
    1824:	f7ff fff2 	bl	180c <_Z11initVariantv>

  delay(1);
    1828:	2001      	movs	r0, #1
    182a:	f7ff ffbb 	bl	17a4 <delay>
#if defined(USBCON)
  USBDevice.init();
    182e:	4b09      	ldr	r3, [pc, #36]	; (1854 <main+0x3c>)
    1830:	0018      	movs	r0, r3
    1832:	f001 fc4b 	bl	30cc <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    1836:	4b07      	ldr	r3, [pc, #28]	; (1854 <main+0x3c>)
    1838:	0018      	movs	r0, r3
    183a:	f001 fce1 	bl	3200 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    183e:	f7fe fe27 	bl	490 <setup>

  for (;;)
  {
    loop();
    1842:	f7fe fe87 	bl	554 <loop>
    if (serialEventRun) serialEventRun();
    1846:	4b04      	ldr	r3, [pc, #16]	; (1858 <main+0x40>)
    1848:	2b00      	cmp	r3, #0
    184a:	d0fa      	beq.n	1842 <main+0x2a>
    184c:	e000      	b.n	1850 <main+0x38>
    184e:	bf00      	nop
  USBDevice.attach();
#endif

  setup();

  for (;;)
    1850:	e7f7      	b.n	1842 <main+0x2a>
    1852:	46c0      	nop			; (mov r8, r8)
    1854:	200007e0 	.word	0x200007e0
    1858:	00000000 	.word	0x00000000

0000185c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    185c:	b580      	push	{r7, lr}
    185e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1860:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    1864:	4b02      	ldr	r3, [pc, #8]	; (1870 <NVIC_SystemReset+0x14>)
                 SCB_AIRCR_SYSRESETREQ_Msk);
    1866:	4a03      	ldr	r2, [pc, #12]	; (1874 <NVIC_SystemReset+0x18>)
    1868:	60da      	str	r2, [r3, #12]
    186a:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    186e:	e7fe      	b.n	186e <NVIC_SystemReset+0x12>
    1870:	e000ed00 	.word	0xe000ed00
    1874:	05fa0004 	.word	0x05fa0004

00001878 <nvmReady>:

#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
    1878:	b580      	push	{r7, lr}
    187a:	af00      	add	r7, sp, #0
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    187c:	4b05      	ldr	r3, [pc, #20]	; (1894 <nvmReady+0x1c>)
    187e:	7d1b      	ldrb	r3, [r3, #20]
    1880:	b2db      	uxtb	r3, r3
    1882:	001a      	movs	r2, r3
    1884:	2301      	movs	r3, #1
    1886:	4013      	ands	r3, r2
    1888:	1e5a      	subs	r2, r3, #1
    188a:	4193      	sbcs	r3, r2
    188c:	b2db      	uxtb	r3, r3
}
    188e:	0018      	movs	r0, r3
    1890:	46bd      	mov	sp, r7
    1892:	bd80      	pop	{r7, pc}
    1894:	41004000 	.word	0x41004000

00001898 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
    1898:	b580      	push	{r7, lr}
    189a:	b082      	sub	sp, #8
    189c:	af00      	add	r7, sp, #0
    189e:	6078      	str	r0, [r7, #4]
	ticks = _ticks;
    18a0:	4b03      	ldr	r3, [pc, #12]	; (18b0 <initiateReset+0x18>)
    18a2:	687a      	ldr	r2, [r7, #4]
    18a4:	601a      	str	r2, [r3, #0]
}
    18a6:	46c0      	nop			; (mov r8, r8)
    18a8:	46bd      	mov	sp, r7
    18aa:	b002      	add	sp, #8
    18ac:	bd80      	pop	{r7, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	20000008 	.word	0x20000008

000018b4 <cancelReset>:

void cancelReset() {
    18b4:	b580      	push	{r7, lr}
    18b6:	af00      	add	r7, sp, #0
	ticks = -1;
    18b8:	4b03      	ldr	r3, [pc, #12]	; (18c8 <cancelReset+0x14>)
    18ba:	2201      	movs	r2, #1
    18bc:	4252      	negs	r2, r2
    18be:	601a      	str	r2, [r3, #0]
}
    18c0:	46c0      	nop			; (mov r8, r8)
    18c2:	46bd      	mov	sp, r7
    18c4:	bd80      	pop	{r7, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	20000008 	.word	0x20000008

000018cc <tickReset>:

void tickReset() {
    18cc:	b580      	push	{r7, lr}
    18ce:	af00      	add	r7, sp, #0
	if (ticks == -1)
    18d0:	4b09      	ldr	r3, [pc, #36]	; (18f8 <tickReset+0x2c>)
    18d2:	681b      	ldr	r3, [r3, #0]
    18d4:	3301      	adds	r3, #1
    18d6:	d00b      	beq.n	18f0 <tickReset+0x24>
		return;
	ticks--;
    18d8:	4b07      	ldr	r3, [pc, #28]	; (18f8 <tickReset+0x2c>)
    18da:	681b      	ldr	r3, [r3, #0]
    18dc:	1e5a      	subs	r2, r3, #1
    18de:	4b06      	ldr	r3, [pc, #24]	; (18f8 <tickReset+0x2c>)
    18e0:	601a      	str	r2, [r3, #0]
	if (ticks == 0)
    18e2:	4b05      	ldr	r3, [pc, #20]	; (18f8 <tickReset+0x2c>)
    18e4:	681b      	ldr	r3, [r3, #0]
    18e6:	2b00      	cmp	r3, #0
    18e8:	d103      	bne.n	18f2 <tickReset+0x26>
		banzai();
    18ea:	4b04      	ldr	r3, [pc, #16]	; (18fc <tickReset+0x30>)
    18ec:	4798      	blx	r3
    18ee:	e000      	b.n	18f2 <tickReset+0x26>
	ticks = -1;
}

void tickReset() {
	if (ticks == -1)
		return;
    18f0:	46c0      	nop			; (mov r8, r8)
	ticks--;
	if (ticks == 0)
		banzai();
}
    18f2:	46bd      	mov	sp, r7
    18f4:	bd80      	pop	{r7, pc}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	20000008 	.word	0x20000008
    18fc:	00007c15 	.word	0x00007c15

00001900 <SystemInit>:
#define GENERIC_CLOCK_GENERATOR_OSC8M     (3u)
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
    1900:	b580      	push	{r7, lr}
    1902:	b082      	sub	sp, #8
    1904:	af00      	add	r7, sp, #0
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    1906:	4a75      	ldr	r2, [pc, #468]	; (1adc <SystemInit+0x1dc>)
    1908:	6853      	ldr	r3, [r2, #4]
    190a:	211e      	movs	r1, #30
    190c:	438b      	bics	r3, r1
    190e:	2102      	movs	r1, #2
    1910:	430b      	orrs	r3, r1
    1912:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    1914:	4b72      	ldr	r3, [pc, #456]	; (1ae0 <SystemInit+0x1e0>)
    1916:	4a72      	ldr	r2, [pc, #456]	; (1ae0 <SystemInit+0x1e0>)
    1918:	6992      	ldr	r2, [r2, #24]
    191a:	2108      	movs	r1, #8
    191c:	430a      	orrs	r2, r1
    191e:	619a      	str	r2, [r3, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    1920:	4b70      	ldr	r3, [pc, #448]	; (1ae4 <SystemInit+0x1e4>)
    1922:	4a71      	ldr	r2, [pc, #452]	; (1ae8 <SystemInit+0x1e8>)
    1924:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    1926:	4a6f      	ldr	r2, [pc, #444]	; (1ae4 <SystemInit+0x1e4>)
    1928:	8a93      	ldrh	r3, [r2, #20]
    192a:	2102      	movs	r1, #2
    192c:	430b      	orrs	r3, r1
    192e:	8293      	strh	r3, [r2, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    1930:	46c0      	nop			; (mov r8, r8)
    1932:	4b6c      	ldr	r3, [pc, #432]	; (1ae4 <SystemInit+0x1e4>)
    1934:	68db      	ldr	r3, [r3, #12]
    1936:	2202      	movs	r2, #2
    1938:	4013      	ands	r3, r2
    193a:	d0fa      	beq.n	1932 <SystemInit+0x32>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    193c:	4b6b      	ldr	r3, [pc, #428]	; (1aec <SystemInit+0x1ec>)
    193e:	2201      	movs	r2, #1
    1940:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    1942:	46c0      	nop			; (mov r8, r8)
    1944:	4b69      	ldr	r3, [pc, #420]	; (1aec <SystemInit+0x1ec>)
    1946:	781b      	ldrb	r3, [r3, #0]
    1948:	b2db      	uxtb	r3, r3
    194a:	001a      	movs	r2, r3
    194c:	2301      	movs	r3, #1
    194e:	4013      	ands	r3, r2
    1950:	d005      	beq.n	195e <SystemInit+0x5e>
    1952:	4b66      	ldr	r3, [pc, #408]	; (1aec <SystemInit+0x1ec>)
    1954:	785b      	ldrb	r3, [r3, #1]
    1956:	b2db      	uxtb	r3, r3
    1958:	b25b      	sxtb	r3, r3
    195a:	2b00      	cmp	r3, #0
    195c:	dbf2      	blt.n	1944 <SystemInit+0x44>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    195e:	4b63      	ldr	r3, [pc, #396]	; (1aec <SystemInit+0x1ec>)
    1960:	2201      	movs	r2, #1
    1962:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1964:	46c0      	nop			; (mov r8, r8)
    1966:	4b61      	ldr	r3, [pc, #388]	; (1aec <SystemInit+0x1ec>)
    1968:	785b      	ldrb	r3, [r3, #1]
    196a:	b2db      	uxtb	r3, r3
    196c:	b25b      	sxtb	r3, r3
    196e:	2b00      	cmp	r3, #0
    1970:	dbf9      	blt.n	1966 <SystemInit+0x66>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    1972:	4b5e      	ldr	r3, [pc, #376]	; (1aec <SystemInit+0x1ec>)
    1974:	4a5e      	ldr	r2, [pc, #376]	; (1af0 <SystemInit+0x1f0>)
    1976:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1978:	46c0      	nop			; (mov r8, r8)
    197a:	4b5c      	ldr	r3, [pc, #368]	; (1aec <SystemInit+0x1ec>)
    197c:	785b      	ldrb	r3, [r3, #1]
    197e:	b2db      	uxtb	r3, r3
    1980:	b25b      	sxtb	r3, r3
    1982:	2b00      	cmp	r3, #0
    1984:	dbf9      	blt.n	197a <SystemInit+0x7a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    1986:	4b59      	ldr	r3, [pc, #356]	; (1aec <SystemInit+0x1ec>)
    1988:	2282      	movs	r2, #130	; 0x82
    198a:	01d2      	lsls	r2, r2, #7
    198c:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	4b56      	ldr	r3, [pc, #344]	; (1aec <SystemInit+0x1ec>)
    1992:	785b      	ldrb	r3, [r3, #1]
    1994:	b2db      	uxtb	r3, r3
    1996:	b25b      	sxtb	r3, r3
    1998:	2b00      	cmp	r3, #0
    199a:	dbf9      	blt.n	1990 <SystemInit+0x90>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    199c:	4b51      	ldr	r3, [pc, #324]	; (1ae4 <SystemInit+0x1e4>)
    199e:	2202      	movs	r2, #2
    19a0:	849a      	strh	r2, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	4b4f      	ldr	r3, [pc, #316]	; (1ae4 <SystemInit+0x1e4>)
    19a6:	68db      	ldr	r3, [r3, #12]
    19a8:	2210      	movs	r2, #16
    19aa:	4013      	ands	r3, r2
    19ac:	d0fa      	beq.n	19a4 <SystemInit+0xa4>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    19ae:	4b4d      	ldr	r3, [pc, #308]	; (1ae4 <SystemInit+0x1e4>)
    19b0:	4a50      	ldr	r2, [pc, #320]	; (1af4 <SystemInit+0x1f4>)
    19b2:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    19b4:	46c0      	nop			; (mov r8, r8)
    19b6:	4b4b      	ldr	r3, [pc, #300]	; (1ae4 <SystemInit+0x1e4>)
    19b8:	68db      	ldr	r3, [r3, #12]
    19ba:	2210      	movs	r2, #16
    19bc:	4013      	ands	r3, r2
    19be:	d0fa      	beq.n	19b6 <SystemInit+0xb6>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    19c0:	4a48      	ldr	r2, [pc, #288]	; (1ae4 <SystemInit+0x1e4>)
    19c2:	4b48      	ldr	r3, [pc, #288]	; (1ae4 <SystemInit+0x1e4>)
    19c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    19c6:	b29b      	uxth	r3, r3
    19c8:	494b      	ldr	r1, [pc, #300]	; (1af8 <SystemInit+0x1f8>)
    19ca:	430b      	orrs	r3, r1
    19cc:	b29b      	uxth	r3, r3
    19ce:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    19d0:	46c0      	nop			; (mov r8, r8)
    19d2:	4b44      	ldr	r3, [pc, #272]	; (1ae4 <SystemInit+0x1e4>)
    19d4:	68db      	ldr	r3, [r3, #12]
    19d6:	2210      	movs	r2, #16
    19d8:	4013      	ands	r3, r2
    19da:	d0fa      	beq.n	19d2 <SystemInit+0xd2>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    19dc:	4a41      	ldr	r2, [pc, #260]	; (1ae4 <SystemInit+0x1e4>)
    19de:	4b41      	ldr	r3, [pc, #260]	; (1ae4 <SystemInit+0x1e4>)
    19e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    19e2:	b29b      	uxth	r3, r3
    19e4:	2102      	movs	r1, #2
    19e6:	430b      	orrs	r3, r1
    19e8:	b29b      	uxth	r3, r3
    19ea:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    19ec:	46c0      	nop			; (mov r8, r8)
    19ee:	4b3d      	ldr	r3, [pc, #244]	; (1ae4 <SystemInit+0x1e4>)
    19f0:	68db      	ldr	r3, [r3, #12]
    19f2:	2280      	movs	r2, #128	; 0x80
    19f4:	4013      	ands	r3, r2
    19f6:	d0fa      	beq.n	19ee <SystemInit+0xee>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    19f8:	4b3a      	ldr	r3, [pc, #232]	; (1ae4 <SystemInit+0x1e4>)
    19fa:	68db      	ldr	r3, [r3, #12]
    19fc:	2240      	movs	r2, #64	; 0x40
    19fe:	4013      	ands	r3, r2
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    1a00:	d0f5      	beq.n	19ee <SystemInit+0xee>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	4b37      	ldr	r3, [pc, #220]	; (1ae4 <SystemInit+0x1e4>)
    1a06:	68db      	ldr	r3, [r3, #12]
    1a08:	2210      	movs	r2, #16
    1a0a:	4013      	ands	r3, r2
    1a0c:	d0fa      	beq.n	1a04 <SystemInit+0x104>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    1a0e:	4b37      	ldr	r3, [pc, #220]	; (1aec <SystemInit+0x1ec>)
    1a10:	2200      	movs	r2, #0
    1a12:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1a14:	46c0      	nop			; (mov r8, r8)
    1a16:	4b35      	ldr	r3, [pc, #212]	; (1aec <SystemInit+0x1ec>)
    1a18:	785b      	ldrb	r3, [r3, #1]
    1a1a:	b2db      	uxtb	r3, r3
    1a1c:	b25b      	sxtb	r3, r3
    1a1e:	2b00      	cmp	r3, #0
    1a20:	dbf9      	blt.n	1a16 <SystemInit+0x116>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    1a22:	4b32      	ldr	r3, [pc, #200]	; (1aec <SystemInit+0x1ec>)
    1a24:	4a35      	ldr	r2, [pc, #212]	; (1afc <SystemInit+0x1fc>)
    1a26:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1a28:	46c0      	nop			; (mov r8, r8)
    1a2a:	4b30      	ldr	r3, [pc, #192]	; (1aec <SystemInit+0x1ec>)
    1a2c:	785b      	ldrb	r3, [r3, #1]
    1a2e:	b2db      	uxtb	r3, r3
    1a30:	b25b      	sxtb	r3, r3
    1a32:	2b00      	cmp	r3, #0
    1a34:	dbf9      	blt.n	1a2a <SystemInit+0x12a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    1a36:	4a2b      	ldr	r2, [pc, #172]	; (1ae4 <SystemInit+0x1e4>)
    1a38:	6a13      	ldr	r3, [r2, #32]
    1a3a:	4931      	ldr	r1, [pc, #196]	; (1b00 <SystemInit+0x200>)
    1a3c:	400b      	ands	r3, r1
    1a3e:	6213      	str	r3, [r2, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    1a40:	4a28      	ldr	r2, [pc, #160]	; (1ae4 <SystemInit+0x1e4>)
    1a42:	6a13      	ldr	r3, [r2, #32]
    1a44:	2180      	movs	r1, #128	; 0x80
    1a46:	438b      	bics	r3, r1
    1a48:	6213      	str	r3, [r2, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    1a4a:	4b28      	ldr	r3, [pc, #160]	; (1aec <SystemInit+0x1ec>)
    1a4c:	2203      	movs	r2, #3
    1a4e:	609a      	str	r2, [r3, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    1a50:	4b26      	ldr	r3, [pc, #152]	; (1aec <SystemInit+0x1ec>)
    1a52:	4a2c      	ldr	r2, [pc, #176]	; (1b04 <SystemInit+0x204>)
    1a54:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	4b24      	ldr	r3, [pc, #144]	; (1aec <SystemInit+0x1ec>)
    1a5a:	785b      	ldrb	r3, [r3, #1]
    1a5c:	b2db      	uxtb	r3, r3
    1a5e:	b25b      	sxtb	r3, r3
    1a60:	2b00      	cmp	r3, #0
    1a62:	dbf9      	blt.n	1a58 <SystemInit+0x158>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    1a64:	4b1e      	ldr	r3, [pc, #120]	; (1ae0 <SystemInit+0x1e0>)
    1a66:	2200      	movs	r2, #0
    1a68:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    1a6a:	4b1d      	ldr	r3, [pc, #116]	; (1ae0 <SystemInit+0x1e0>)
    1a6c:	2200      	movs	r2, #0
    1a6e:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    1a70:	4b1b      	ldr	r3, [pc, #108]	; (1ae0 <SystemInit+0x1e0>)
    1a72:	2200      	movs	r2, #0
    1a74:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    1a76:	4b1a      	ldr	r3, [pc, #104]	; (1ae0 <SystemInit+0x1e0>)
    1a78:	2200      	movs	r2, #0
    1a7a:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=VARIANT_MCK ;
    1a7c:	4b22      	ldr	r3, [pc, #136]	; (1b08 <SystemInit+0x208>)
    1a7e:	4a23      	ldr	r2, [pc, #140]	; (1b0c <SystemInit+0x20c>)
    1a80:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    1a82:	4b23      	ldr	r3, [pc, #140]	; (1b10 <SystemInit+0x210>)
    1a84:	681b      	ldr	r3, [r3, #0]
    1a86:	08db      	lsrs	r3, r3, #3
    1a88:	2207      	movs	r2, #7
    1a8a:	4013      	ands	r3, r2
    1a8c:	607b      	str	r3, [r7, #4]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    1a8e:	4b21      	ldr	r3, [pc, #132]	; (1b14 <SystemInit+0x214>)
    1a90:	681b      	ldr	r3, [r3, #0]
    1a92:	0edb      	lsrs	r3, r3, #27
    1a94:	603b      	str	r3, [r7, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    1a96:	4b1e      	ldr	r3, [pc, #120]	; (1b10 <SystemInit+0x210>)
    1a98:	681b      	ldr	r3, [r3, #0]
    1a9a:	015b      	lsls	r3, r3, #5
    1a9c:	22ff      	movs	r2, #255	; 0xff
    1a9e:	4013      	ands	r3, r2
    1aa0:	683a      	ldr	r2, [r7, #0]
    1aa2:	4313      	orrs	r3, r2
    1aa4:	603b      	str	r3, [r7, #0]

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    1aa6:	491c      	ldr	r1, [pc, #112]	; (1b18 <SystemInit+0x218>)
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	b29b      	uxth	r3, r3
    1aac:	021b      	lsls	r3, r3, #8
    1aae:	b29a      	uxth	r2, r3
    1ab0:	23e0      	movs	r3, #224	; 0xe0
    1ab2:	00db      	lsls	r3, r3, #3
    1ab4:	4013      	ands	r3, r2
    1ab6:	b29a      	uxth	r2, r3
    1ab8:	683b      	ldr	r3, [r7, #0]
    1aba:	b29b      	uxth	r3, r3
    1abc:	20ff      	movs	r0, #255	; 0xff
    1abe:	4003      	ands	r3, r0
    1ac0:	b29b      	uxth	r3, r3
    1ac2:	4313      	orrs	r3, r2
    1ac4:	b29b      	uxth	r3, r3
    1ac6:	850b      	strh	r3, [r1, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    1ac8:	4a04      	ldr	r2, [pc, #16]	; (1adc <SystemInit+0x1dc>)
    1aca:	6853      	ldr	r3, [r2, #4]
    1acc:	2180      	movs	r1, #128	; 0x80
    1ace:	430b      	orrs	r3, r1
    1ad0:	6053      	str	r3, [r2, #4]
}
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	46bd      	mov	sp, r7
    1ad6:	b002      	add	sp, #8
    1ad8:	bd80      	pop	{r7, pc}
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	41004000 	.word	0x41004000
    1ae0:	40000400 	.word	0x40000400
    1ae4:	40000800 	.word	0x40000800
    1ae8:	0000060c 	.word	0x0000060c
    1aec:	40000c00 	.word	0x40000c00
    1af0:	00010501 	.word	0x00010501
    1af4:	7dff05b8 	.word	0x7dff05b8
    1af8:	00000a04 	.word	0x00000a04
    1afc:	00030700 	.word	0x00030700
    1b00:	fffffcff 	.word	0xfffffcff
    1b04:	00010603 	.word	0x00010603
    1b08:	20000034 	.word	0x20000034
    1b0c:	02dc6c00 	.word	0x02dc6c00
    1b10:	00806024 	.word	0x00806024
    1b14:	00806020 	.word	0x00806020
    1b18:	42004000 	.word	0x42004000

00001b1c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1b1c:	b580      	push	{r7, lr}
    1b1e:	b082      	sub	sp, #8
    1b20:	af00      	add	r7, sp, #0
    1b22:	0002      	movs	r2, r0
    1b24:	1dfb      	adds	r3, r7, #7
    1b26:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1b28:	4b06      	ldr	r3, [pc, #24]	; (1b44 <NVIC_EnableIRQ+0x28>)
    1b2a:	1dfa      	adds	r2, r7, #7
    1b2c:	7812      	ldrb	r2, [r2, #0]
    1b2e:	0011      	movs	r1, r2
    1b30:	221f      	movs	r2, #31
    1b32:	400a      	ands	r2, r1
    1b34:	2101      	movs	r1, #1
    1b36:	4091      	lsls	r1, r2
    1b38:	000a      	movs	r2, r1
    1b3a:	601a      	str	r2, [r3, #0]
}
    1b3c:	46c0      	nop			; (mov r8, r8)
    1b3e:	46bd      	mov	sp, r7
    1b40:	b002      	add	sp, #8
    1b42:	bd80      	pop	{r7, pc}
    1b44:	e000e100 	.word	0xe000e100

00001b48 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1b48:	b5b0      	push	{r4, r5, r7, lr}
    1b4a:	b082      	sub	sp, #8
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	0002      	movs	r2, r0
    1b50:	6039      	str	r1, [r7, #0]
    1b52:	1dfb      	adds	r3, r7, #7
    1b54:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    1b56:	1dfb      	adds	r3, r7, #7
    1b58:	781b      	ldrb	r3, [r3, #0]
    1b5a:	2b7f      	cmp	r3, #127	; 0x7f
    1b5c:	d932      	bls.n	1bc4 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1b5e:	4c2f      	ldr	r4, [pc, #188]	; (1c1c <NVIC_SetPriority+0xd4>)
    1b60:	1dfb      	adds	r3, r7, #7
    1b62:	781b      	ldrb	r3, [r3, #0]
    1b64:	001a      	movs	r2, r3
    1b66:	230f      	movs	r3, #15
    1b68:	4013      	ands	r3, r2
    1b6a:	3b08      	subs	r3, #8
    1b6c:	0899      	lsrs	r1, r3, #2
    1b6e:	4a2b      	ldr	r2, [pc, #172]	; (1c1c <NVIC_SetPriority+0xd4>)
    1b70:	1dfb      	adds	r3, r7, #7
    1b72:	781b      	ldrb	r3, [r3, #0]
    1b74:	0018      	movs	r0, r3
    1b76:	230f      	movs	r3, #15
    1b78:	4003      	ands	r3, r0
    1b7a:	3b08      	subs	r3, #8
    1b7c:	089b      	lsrs	r3, r3, #2
    1b7e:	3306      	adds	r3, #6
    1b80:	009b      	lsls	r3, r3, #2
    1b82:	18d3      	adds	r3, r2, r3
    1b84:	3304      	adds	r3, #4
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	1dfa      	adds	r2, r7, #7
    1b8a:	7812      	ldrb	r2, [r2, #0]
    1b8c:	0010      	movs	r0, r2
    1b8e:	2203      	movs	r2, #3
    1b90:	4002      	ands	r2, r0
    1b92:	00d2      	lsls	r2, r2, #3
    1b94:	20ff      	movs	r0, #255	; 0xff
    1b96:	4090      	lsls	r0, r2
    1b98:	0002      	movs	r2, r0
    1b9a:	43d2      	mvns	r2, r2
    1b9c:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1b9e:	683b      	ldr	r3, [r7, #0]
    1ba0:	019b      	lsls	r3, r3, #6
    1ba2:	20ff      	movs	r0, #255	; 0xff
    1ba4:	4018      	ands	r0, r3
    1ba6:	1dfb      	adds	r3, r7, #7
    1ba8:	781b      	ldrb	r3, [r3, #0]
    1baa:	001d      	movs	r5, r3
    1bac:	2303      	movs	r3, #3
    1bae:	402b      	ands	r3, r5
    1bb0:	00db      	lsls	r3, r3, #3
    1bb2:	4098      	lsls	r0, r3
    1bb4:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1bb6:	431a      	orrs	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1bb8:	1d8b      	adds	r3, r1, #6
    1bba:	009b      	lsls	r3, r3, #2
    1bbc:	18e3      	adds	r3, r4, r3
    1bbe:	3304      	adds	r3, #4
    1bc0:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    1bc2:	e027      	b.n	1c14 <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1bc4:	4c16      	ldr	r4, [pc, #88]	; (1c20 <NVIC_SetPriority+0xd8>)
    1bc6:	1dfb      	adds	r3, r7, #7
    1bc8:	781b      	ldrb	r3, [r3, #0]
    1bca:	b25b      	sxtb	r3, r3
    1bcc:	089b      	lsrs	r3, r3, #2
    1bce:	4914      	ldr	r1, [pc, #80]	; (1c20 <NVIC_SetPriority+0xd8>)
    1bd0:	1dfa      	adds	r2, r7, #7
    1bd2:	7812      	ldrb	r2, [r2, #0]
    1bd4:	b252      	sxtb	r2, r2
    1bd6:	0892      	lsrs	r2, r2, #2
    1bd8:	32c0      	adds	r2, #192	; 0xc0
    1bda:	0092      	lsls	r2, r2, #2
    1bdc:	5852      	ldr	r2, [r2, r1]
    1bde:	1df9      	adds	r1, r7, #7
    1be0:	7809      	ldrb	r1, [r1, #0]
    1be2:	0008      	movs	r0, r1
    1be4:	2103      	movs	r1, #3
    1be6:	4001      	ands	r1, r0
    1be8:	00c9      	lsls	r1, r1, #3
    1bea:	20ff      	movs	r0, #255	; 0xff
    1bec:	4088      	lsls	r0, r1
    1bee:	0001      	movs	r1, r0
    1bf0:	43c9      	mvns	r1, r1
    1bf2:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1bf4:	683a      	ldr	r2, [r7, #0]
    1bf6:	0192      	lsls	r2, r2, #6
    1bf8:	20ff      	movs	r0, #255	; 0xff
    1bfa:	4010      	ands	r0, r2
    1bfc:	1dfa      	adds	r2, r7, #7
    1bfe:	7812      	ldrb	r2, [r2, #0]
    1c00:	0015      	movs	r5, r2
    1c02:	2203      	movs	r2, #3
    1c04:	402a      	ands	r2, r5
    1c06:	00d2      	lsls	r2, r2, #3
    1c08:	4090      	lsls	r0, r2
    1c0a:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1c0c:	430a      	orrs	r2, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1c0e:	33c0      	adds	r3, #192	; 0xc0
    1c10:	009b      	lsls	r3, r3, #2
    1c12:	511a      	str	r2, [r3, r4]
}
    1c14:	46c0      	nop			; (mov r8, r8)
    1c16:	46bd      	mov	sp, r7
    1c18:	b002      	add	sp, #8
    1c1a:	bdb0      	pop	{r4, r5, r7, pc}
    1c1c:	e000ed00 	.word	0xe000ed00
    1c20:	e000e100 	.word	0xe000e100

00001c24 <_ZN14USBDeviceClassC1Ev>:
	uint16_t wLength;
} USBSetup;

class USBDeviceClass {
public:
	USBDeviceClass() {};
    1c24:	b580      	push	{r7, lr}
    1c26:	b082      	sub	sp, #8
    1c28:	af00      	add	r7, sp, #0
    1c2a:	6078      	str	r0, [r7, #4]
    1c2c:	687b      	ldr	r3, [r7, #4]
    1c2e:	0018      	movs	r0, r3
    1c30:	46bd      	mov	sp, r7
    1c32:	b002      	add	sp, #8
    1c34:	bd80      	pop	{r7, pc}
    1c36:	46c0      	nop			; (mov r8, r8)

00001c38 <_ZN17UsbDeviceDescBankC1Ev>:
  __IO USB_DEVICE_ADDR_Type      ADDR;        /**< \brief Offset: 0x000 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Adress of Data Buffer */
  __IO USB_DEVICE_PCKSIZE_Type   PCKSIZE;     /**< \brief Offset: 0x004 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Packet Size */
  __IO USB_DEVICE_EXTREG_Type    EXTREG;      /**< \brief Offset: 0x008 (R/W 16) DEVICE_DESC_BANK Endpoint Bank, Extended */
  __IO USB_DEVICE_STATUS_BK_Type STATUS_BK;   /**< \brief Offset: 0x00A (R/W  8) DEVICE_DESC_BANK Enpoint Bank, Status of Bank */
       RoReg8                    Reserved1[0x5];
} UsbDeviceDescBank;
    1c38:	b580      	push	{r7, lr}
    1c3a:	b082      	sub	sp, #8
    1c3c:	af00      	add	r7, sp, #0
    1c3e:	6078      	str	r0, [r7, #4]
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	0018      	movs	r0, r3
    1c44:	46bd      	mov	sp, r7
    1c46:	b002      	add	sp, #8
    1c48:	bd80      	pop	{r7, pc}
    1c4a:	46c0      	nop			; (mov r8, r8)

00001c4c <_ZN19UsbDeviceDescriptorC1Ev>:

/** \brief USB_DEVICE Descriptor SRAM registers */
#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
typedef struct { /* USB is Device */
       UsbDeviceDescBank         DeviceDescBank[2]; /**< \brief Offset: 0x000 UsbDeviceDescBank groups */
} UsbDeviceDescriptor;
    1c4c:	b5b0      	push	{r4, r5, r7, lr}
    1c4e:	b082      	sub	sp, #8
    1c50:	af00      	add	r7, sp, #0
    1c52:	6078      	str	r0, [r7, #4]
    1c54:	687b      	ldr	r3, [r7, #4]
    1c56:	2401      	movs	r4, #1
    1c58:	001d      	movs	r5, r3
    1c5a:	1c63      	adds	r3, r4, #1
    1c5c:	d005      	beq.n	1c6a <_ZN19UsbDeviceDescriptorC1Ev+0x1e>
    1c5e:	0028      	movs	r0, r5
    1c60:	f7ff ffea 	bl	1c38 <_ZN17UsbDeviceDescBankC1Ev>
    1c64:	3510      	adds	r5, #16
    1c66:	3c01      	subs	r4, #1
    1c68:	e7f7      	b.n	1c5a <_ZN19UsbDeviceDescriptorC1Ev+0xe>
    1c6a:	687b      	ldr	r3, [r7, #4]
    1c6c:	0018      	movs	r0, r3
    1c6e:	46bd      	mov	sp, r7
    1c70:	b002      	add	sp, #8
    1c72:	bdb0      	pop	{r4, r5, r7, pc}

00001c74 <_ZN20USBDevice_SAMD21G18xC1Ev>:

typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1c74:	b5b0      	push	{r4, r5, r7, lr}
    1c76:	b082      	sub	sp, #8
    1c78:	af00      	add	r7, sp, #0
    1c7a:	6078      	str	r0, [r7, #4]
    1c7c:	687b      	ldr	r3, [r7, #4]
    1c7e:	4a09      	ldr	r2, [pc, #36]	; (1ca4 <_ZN20USBDevice_SAMD21G18xC1Ev+0x30>)
    1c80:	601a      	str	r2, [r3, #0]
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	3304      	adds	r3, #4
    1c86:	2407      	movs	r4, #7
    1c88:	001d      	movs	r5, r3
    1c8a:	1c63      	adds	r3, r4, #1
    1c8c:	d005      	beq.n	1c9a <_ZN20USBDevice_SAMD21G18xC1Ev+0x26>
    1c8e:	0028      	movs	r0, r5
    1c90:	f7ff ffdc 	bl	1c4c <_ZN19UsbDeviceDescriptorC1Ev>
    1c94:	3520      	adds	r5, #32
    1c96:	3c01      	subs	r4, #1
    1c98:	e7f7      	b.n	1c8a <_ZN20USBDevice_SAMD21G18xC1Ev+0x16>
		// Empty
	}
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	0018      	movs	r0, r3
    1c9e:	46bd      	mov	sp, r7
    1ca0:	b002      	add	sp, #8
    1ca2:	bdb0      	pop	{r4, r5, r7, pc}
    1ca4:	41005000 	.word	0x41005000

00001ca8 <_ZN20USBDevice_SAMD21G18x6enableEv>:

	// Reset USB Device
	void reset();

	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    1ca8:	b580      	push	{r7, lr}
    1caa:	b082      	sub	sp, #8
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	681a      	ldr	r2, [r3, #0]
    1cb4:	7813      	ldrb	r3, [r2, #0]
    1cb6:	2102      	movs	r1, #2
    1cb8:	430b      	orrs	r3, r1
    1cba:	7013      	strb	r3, [r2, #0]
    1cbc:	46c0      	nop			; (mov r8, r8)
    1cbe:	46bd      	mov	sp, r7
    1cc0:	b002      	add	sp, #8
    1cc2:	bd80      	pop	{r7, pc}

00001cc4 <_ZN20USBDevice_SAMD21G18x16setUSBDeviceModeEv>:
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    1cc4:	b580      	push	{r7, lr}
    1cc6:	b082      	sub	sp, #8
    1cc8:	af00      	add	r7, sp, #0
    1cca:	6078      	str	r0, [r7, #4]
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	681a      	ldr	r2, [r3, #0]
    1cd0:	7813      	ldrb	r3, [r2, #0]
    1cd2:	217f      	movs	r1, #127	; 0x7f
    1cd4:	400b      	ands	r3, r1
    1cd6:	7013      	strb	r3, [r2, #0]
    1cd8:	46c0      	nop			; (mov r8, r8)
    1cda:	46bd      	mov	sp, r7
    1cdc:	b002      	add	sp, #8
    1cde:	bd80      	pop	{r7, pc}

00001ce0 <_ZN20USBDevice_SAMD21G18x12runInStandbyEv>:
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    1ce0:	b580      	push	{r7, lr}
    1ce2:	b082      	sub	sp, #8
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	6078      	str	r0, [r7, #4]
    1ce8:	687b      	ldr	r3, [r7, #4]
    1cea:	681a      	ldr	r2, [r3, #0]
    1cec:	7813      	ldrb	r3, [r2, #0]
    1cee:	2104      	movs	r1, #4
    1cf0:	430b      	orrs	r3, r1
    1cf2:	7013      	strb	r3, [r2, #0]
    1cf4:	46c0      	nop			; (mov r8, r8)
    1cf6:	46bd      	mov	sp, r7
    1cf8:	b002      	add	sp, #8
    1cfa:	bd80      	pop	{r7, pc}

00001cfc <_ZN20USBDevice_SAMD21G18x12setFullSpeedEv>:
	inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }
	inline void wakeupHost()     { usb.CTRLB.bit.UPRSM = 1; }

	// USB speed
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    1cfc:	b580      	push	{r7, lr}
    1cfe:	b082      	sub	sp, #8
    1d00:	af00      	add	r7, sp, #0
    1d02:	6078      	str	r0, [r7, #4]
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	681a      	ldr	r2, [r3, #0]
    1d08:	8913      	ldrh	r3, [r2, #8]
    1d0a:	210c      	movs	r1, #12
    1d0c:	438b      	bics	r3, r1
    1d0e:	8113      	strh	r3, [r2, #8]
    1d10:	46c0      	nop			; (mov r8, r8)
    1d12:	46bd      	mov	sp, r7
    1d14:	b002      	add	sp, #8
    1d16:	bd80      	pop	{r7, pc}

00001d18 <_ZN20USBDevice_SAMD21G18x6attachEv>:
	inline void setLowSpeed()        { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;   }
	inline void setHiSpeed()         { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HS_Val;   }
	inline void setHiSpeedTestMode() { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HSTM_Val; }

	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    1d18:	b580      	push	{r7, lr}
    1d1a:	b082      	sub	sp, #8
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
    1d20:	687b      	ldr	r3, [r7, #4]
    1d22:	681a      	ldr	r2, [r3, #0]
    1d24:	8913      	ldrh	r3, [r2, #8]
    1d26:	2101      	movs	r1, #1
    1d28:	438b      	bics	r3, r1
    1d2a:	8113      	strh	r3, [r2, #8]
    1d2c:	46c0      	nop			; (mov r8, r8)
    1d2e:	46bd      	mov	sp, r7
    1d30:	b002      	add	sp, #8
    1d32:	bd80      	pop	{r7, pc}

00001d34 <_ZN20USBDevice_SAMD21G18x21isEndOfResetInterruptEv>:
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    1d34:	b580      	push	{r7, lr}
    1d36:	b082      	sub	sp, #8
    1d38:	af00      	add	r7, sp, #0
    1d3a:	6078      	str	r0, [r7, #4]
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	681b      	ldr	r3, [r3, #0]
    1d40:	8b9b      	ldrh	r3, [r3, #28]
    1d42:	071b      	lsls	r3, r3, #28
    1d44:	0fdb      	lsrs	r3, r3, #31
    1d46:	b2db      	uxtb	r3, r3
    1d48:	0018      	movs	r0, r3
    1d4a:	46bd      	mov	sp, r7
    1d4c:	b002      	add	sp, #8
    1d4e:	bd80      	pop	{r7, pc}

00001d50 <_ZN20USBDevice_SAMD21G18x22ackEndOfResetInterruptEv>:
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    1d50:	b580      	push	{r7, lr}
    1d52:	b082      	sub	sp, #8
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	687b      	ldr	r3, [r7, #4]
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	2208      	movs	r2, #8
    1d5e:	839a      	strh	r2, [r3, #28]
    1d60:	46c0      	nop			; (mov r8, r8)
    1d62:	46bd      	mov	sp, r7
    1d64:	b002      	add	sp, #8
    1d66:	bd80      	pop	{r7, pc}

00001d68 <_ZN20USBDevice_SAMD21G18x25enableEndOfResetInterruptEv>:
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    1d68:	b580      	push	{r7, lr}
    1d6a:	b082      	sub	sp, #8
    1d6c:	af00      	add	r7, sp, #0
    1d6e:	6078      	str	r0, [r7, #4]
    1d70:	687b      	ldr	r3, [r7, #4]
    1d72:	681a      	ldr	r2, [r3, #0]
    1d74:	8b13      	ldrh	r3, [r2, #24]
    1d76:	2108      	movs	r1, #8
    1d78:	430b      	orrs	r3, r1
    1d7a:	8313      	strh	r3, [r2, #24]
    1d7c:	46c0      	nop			; (mov r8, r8)
    1d7e:	46bd      	mov	sp, r7
    1d80:	b002      	add	sp, #8
    1d82:	bd80      	pop	{r7, pc}

00001d84 <_ZN20USBDevice_SAMD21G18x23isStartOfFrameInterruptEv>:
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1d84:	b580      	push	{r7, lr}
    1d86:	b082      	sub	sp, #8
    1d88:	af00      	add	r7, sp, #0
    1d8a:	6078      	str	r0, [r7, #4]
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	681b      	ldr	r3, [r3, #0]
    1d90:	8b9b      	ldrh	r3, [r3, #28]
    1d92:	075b      	lsls	r3, r3, #29
    1d94:	0fdb      	lsrs	r3, r3, #31
    1d96:	b2db      	uxtb	r3, r3
    1d98:	0018      	movs	r0, r3
    1d9a:	46bd      	mov	sp, r7
    1d9c:	b002      	add	sp, #8
    1d9e:	bd80      	pop	{r7, pc}

00001da0 <_ZN20USBDevice_SAMD21G18x24ackStartOfFrameInterruptEv>:
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    1da0:	b580      	push	{r7, lr}
    1da2:	b082      	sub	sp, #8
    1da4:	af00      	add	r7, sp, #0
    1da6:	6078      	str	r0, [r7, #4]
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	681b      	ldr	r3, [r3, #0]
    1dac:	2204      	movs	r2, #4
    1dae:	839a      	strh	r2, [r3, #28]
    1db0:	46c0      	nop			; (mov r8, r8)
    1db2:	46bd      	mov	sp, r7
    1db4:	b002      	add	sp, #8
    1db6:	bd80      	pop	{r7, pc}

00001db8 <_ZN20USBDevice_SAMD21G18x27enableStartOfFrameInterruptEv>:
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    1db8:	b580      	push	{r7, lr}
    1dba:	b082      	sub	sp, #8
    1dbc:	af00      	add	r7, sp, #0
    1dbe:	6078      	str	r0, [r7, #4]
    1dc0:	687b      	ldr	r3, [r7, #4]
    1dc2:	681a      	ldr	r2, [r3, #0]
    1dc4:	8b13      	ldrh	r3, [r2, #24]
    1dc6:	2104      	movs	r1, #4
    1dc8:	430b      	orrs	r3, r1
    1dca:	8313      	strh	r3, [r2, #24]
    1dcc:	46c0      	nop			; (mov r8, r8)
    1dce:	46bd      	mov	sp, r7
    1dd0:	b002      	add	sp, #8
    1dd2:	bd80      	pop	{r7, pc}

00001dd4 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>:

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    1dd4:	b590      	push	{r4, r7, lr}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	0008      	movs	r0, r1
    1dde:	0011      	movs	r1, r2
    1de0:	1cfb      	adds	r3, r7, #3
    1de2:	1c02      	adds	r2, r0, #0
    1de4:	701a      	strb	r2, [r3, #0]
    1de6:	1cbb      	adds	r3, r7, #2
    1de8:	1c0a      	adds	r2, r1, #0
    1dea:	701a      	strb	r2, [r3, #0]
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	681a      	ldr	r2, [r3, #0]
    1df0:	1cfb      	adds	r3, r7, #3
    1df2:	781b      	ldrb	r3, [r3, #0]
    1df4:	1cb9      	adds	r1, r7, #2
    1df6:	7809      	ldrb	r1, [r1, #0]
    1df8:	2007      	movs	r0, #7
    1dfa:	4001      	ands	r1, r0
    1dfc:	b2c8      	uxtb	r0, r1
    1dfe:	3308      	adds	r3, #8
    1e00:	0159      	lsls	r1, r3, #5
    1e02:	5c8b      	ldrb	r3, [r1, r2]
    1e04:	2407      	movs	r4, #7
    1e06:	4004      	ands	r4, r0
    1e08:	2007      	movs	r0, #7
    1e0a:	4383      	bics	r3, r0
    1e0c:	1c18      	adds	r0, r3, #0
    1e0e:	1c23      	adds	r3, r4, #0
    1e10:	4303      	orrs	r3, r0
    1e12:	548b      	strb	r3, [r1, r2]
    1e14:	46c0      	nop			; (mov r8, r8)
    1e16:	46bd      	mov	sp, r7
    1e18:	b003      	add	sp, #12
    1e1a:	bd90      	pop	{r4, r7, pc}

00001e1c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>:
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1e1c:	b590      	push	{r4, r7, lr}
    1e1e:	b083      	sub	sp, #12
    1e20:	af00      	add	r7, sp, #0
    1e22:	6078      	str	r0, [r7, #4]
    1e24:	0008      	movs	r0, r1
    1e26:	0011      	movs	r1, r2
    1e28:	1cfb      	adds	r3, r7, #3
    1e2a:	1c02      	adds	r2, r0, #0
    1e2c:	701a      	strb	r2, [r3, #0]
    1e2e:	1cbb      	adds	r3, r7, #2
    1e30:	1c0a      	adds	r2, r1, #0
    1e32:	701a      	strb	r2, [r3, #0]
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	681a      	ldr	r2, [r3, #0]
    1e38:	1cfb      	adds	r3, r7, #3
    1e3a:	781b      	ldrb	r3, [r3, #0]
    1e3c:	1cb9      	adds	r1, r7, #2
    1e3e:	7809      	ldrb	r1, [r1, #0]
    1e40:	2007      	movs	r0, #7
    1e42:	4001      	ands	r1, r0
    1e44:	b2c8      	uxtb	r0, r1
    1e46:	3308      	adds	r3, #8
    1e48:	0159      	lsls	r1, r3, #5
    1e4a:	5c8b      	ldrb	r3, [r1, r2]
    1e4c:	2407      	movs	r4, #7
    1e4e:	4020      	ands	r0, r4
    1e50:	0104      	lsls	r4, r0, #4
    1e52:	2070      	movs	r0, #112	; 0x70
    1e54:	4383      	bics	r3, r0
    1e56:	1c18      	adds	r0, r3, #0
    1e58:	1c23      	adds	r3, r4, #0
    1e5a:	4303      	orrs	r3, r0
    1e5c:	548b      	strb	r3, [r1, r2]
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	46bd      	mov	sp, r7
    1e62:	b003      	add	sp, #12
    1e64:	bd90      	pop	{r4, r7, pc}
    1e66:	46c0      	nop			; (mov r8, r8)

00001e68 <_ZN20USBDevice_SAMD21G18x18epInterruptSummaryEv>:

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    1e68:	b580      	push	{r7, lr}
    1e6a:	b082      	sub	sp, #8
    1e6c:	af00      	add	r7, sp, #0
    1e6e:	6078      	str	r0, [r7, #4]
    1e70:	687b      	ldr	r3, [r7, #4]
    1e72:	681b      	ldr	r3, [r3, #0]
    1e74:	8c1b      	ldrh	r3, [r3, #32]
    1e76:	b29b      	uxth	r3, r3
    1e78:	0018      	movs	r0, r3
    1e7a:	46bd      	mov	sp, r7
    1e7c:	b002      	add	sp, #8
    1e7e:	bd80      	pop	{r7, pc}

00001e80 <_ZN20USBDevice_SAMD21G18x22epBank0IsSetupReceivedEh>:

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1e80:	b580      	push	{r7, lr}
    1e82:	b082      	sub	sp, #8
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
    1e88:	000a      	movs	r2, r1
    1e8a:	1cfb      	adds	r3, r7, #3
    1e8c:	701a      	strb	r2, [r3, #0]
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	681a      	ldr	r2, [r3, #0]
    1e92:	1cfb      	adds	r3, r7, #3
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	3308      	adds	r3, #8
    1e98:	015b      	lsls	r3, r3, #5
    1e9a:	18d3      	adds	r3, r2, r3
    1e9c:	79db      	ldrb	r3, [r3, #7]
    1e9e:	06db      	lsls	r3, r3, #27
    1ea0:	0fdb      	lsrs	r3, r3, #31
    1ea2:	b2db      	uxtb	r3, r3
    1ea4:	0018      	movs	r0, r3
    1ea6:	46bd      	mov	sp, r7
    1ea8:	b002      	add	sp, #8
    1eaa:	bd80      	pop	{r7, pc}

00001eac <_ZN20USBDevice_SAMD21G18x16epBank1IsStalledEh>:
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    1eac:	b580      	push	{r7, lr}
    1eae:	b082      	sub	sp, #8
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	6078      	str	r0, [r7, #4]
    1eb4:	000a      	movs	r2, r1
    1eb6:	1cfb      	adds	r3, r7, #3
    1eb8:	701a      	strb	r2, [r3, #0]
    1eba:	687b      	ldr	r3, [r7, #4]
    1ebc:	681a      	ldr	r2, [r3, #0]
    1ebe:	1cfb      	adds	r3, r7, #3
    1ec0:	781b      	ldrb	r3, [r3, #0]
    1ec2:	3308      	adds	r3, #8
    1ec4:	015b      	lsls	r3, r3, #5
    1ec6:	18d3      	adds	r3, r2, r3
    1ec8:	79db      	ldrb	r3, [r3, #7]
    1eca:	065b      	lsls	r3, r3, #25
    1ecc:	0fdb      	lsrs	r3, r3, #31
    1ece:	b2db      	uxtb	r3, r3
    1ed0:	0018      	movs	r0, r3
    1ed2:	46bd      	mov	sp, r7
    1ed4:	b002      	add	sp, #8
    1ed6:	bd80      	pop	{r7, pc}

00001ed8 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>:
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1ed8:	b580      	push	{r7, lr}
    1eda:	b082      	sub	sp, #8
    1edc:	af00      	add	r7, sp, #0
    1ede:	6078      	str	r0, [r7, #4]
    1ee0:	000a      	movs	r2, r1
    1ee2:	1cfb      	adds	r3, r7, #3
    1ee4:	701a      	strb	r2, [r3, #0]
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	681a      	ldr	r2, [r3, #0]
    1eea:	1cfb      	adds	r3, r7, #3
    1eec:	781b      	ldrb	r3, [r3, #0]
    1eee:	3308      	adds	r3, #8
    1ef0:	015b      	lsls	r3, r3, #5
    1ef2:	18d3      	adds	r3, r2, r3
    1ef4:	79db      	ldrb	r3, [r3, #7]
    1ef6:	07db      	lsls	r3, r3, #31
    1ef8:	0fdb      	lsrs	r3, r3, #31
    1efa:	b2db      	uxtb	r3, r3
    1efc:	0018      	movs	r0, r3
    1efe:	46bd      	mov	sp, r7
    1f00:	b002      	add	sp, #8
    1f02:	bd80      	pop	{r7, pc}

00001f04 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>:
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1f04:	b580      	push	{r7, lr}
    1f06:	b082      	sub	sp, #8
    1f08:	af00      	add	r7, sp, #0
    1f0a:	6078      	str	r0, [r7, #4]
    1f0c:	000a      	movs	r2, r1
    1f0e:	1cfb      	adds	r3, r7, #3
    1f10:	701a      	strb	r2, [r3, #0]
    1f12:	687b      	ldr	r3, [r7, #4]
    1f14:	681a      	ldr	r2, [r3, #0]
    1f16:	1cfb      	adds	r3, r7, #3
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	3308      	adds	r3, #8
    1f1c:	015b      	lsls	r3, r3, #5
    1f1e:	18d3      	adds	r3, r2, r3
    1f20:	79db      	ldrb	r3, [r3, #7]
    1f22:	079b      	lsls	r3, r3, #30
    1f24:	0fdb      	lsrs	r3, r3, #31
    1f26:	b2db      	uxtb	r3, r3
    1f28:	0018      	movs	r0, r3
    1f2a:	46bd      	mov	sp, r7
    1f2c:	b002      	add	sp, #8
    1f2e:	bd80      	pop	{r7, pc}

00001f30 <_ZN20USBDevice_SAMD21G18x23epBank0AckSetupReceivedEh>:

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    1f30:	b580      	push	{r7, lr}
    1f32:	b082      	sub	sp, #8
    1f34:	af00      	add	r7, sp, #0
    1f36:	6078      	str	r0, [r7, #4]
    1f38:	000a      	movs	r2, r1
    1f3a:	1cfb      	adds	r3, r7, #3
    1f3c:	701a      	strb	r2, [r3, #0]
    1f3e:	687b      	ldr	r3, [r7, #4]
    1f40:	681a      	ldr	r2, [r3, #0]
    1f42:	1cfb      	adds	r3, r7, #3
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	3308      	adds	r3, #8
    1f48:	015b      	lsls	r3, r3, #5
    1f4a:	18d3      	adds	r3, r2, r3
    1f4c:	3307      	adds	r3, #7
    1f4e:	2210      	movs	r2, #16
    1f50:	701a      	strb	r2, [r3, #0]
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	46bd      	mov	sp, r7
    1f56:	b002      	add	sp, #8
    1f58:	bd80      	pop	{r7, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)

00001f5c <_ZN20USBDevice_SAMD21G18x17epBank1AckStalledEh>:
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b082      	sub	sp, #8
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
    1f64:	000a      	movs	r2, r1
    1f66:	1cfb      	adds	r3, r7, #3
    1f68:	701a      	strb	r2, [r3, #0]
    1f6a:	687b      	ldr	r3, [r7, #4]
    1f6c:	681a      	ldr	r2, [r3, #0]
    1f6e:	1cfb      	adds	r3, r7, #3
    1f70:	781b      	ldrb	r3, [r3, #0]
    1f72:	3308      	adds	r3, #8
    1f74:	015b      	lsls	r3, r3, #5
    1f76:	18d3      	adds	r3, r2, r3
    1f78:	3307      	adds	r3, #7
    1f7a:	2240      	movs	r2, #64	; 0x40
    1f7c:	701a      	strb	r2, [r3, #0]
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	46bd      	mov	sp, r7
    1f82:	b002      	add	sp, #8
    1f84:	bd80      	pop	{r7, pc}
    1f86:	46c0      	nop			; (mov r8, r8)

00001f88 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>:
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    1f88:	b580      	push	{r7, lr}
    1f8a:	b082      	sub	sp, #8
    1f8c:	af00      	add	r7, sp, #0
    1f8e:	6078      	str	r0, [r7, #4]
    1f90:	000a      	movs	r2, r1
    1f92:	1cfb      	adds	r3, r7, #3
    1f94:	701a      	strb	r2, [r3, #0]
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	681a      	ldr	r2, [r3, #0]
    1f9a:	1cfb      	adds	r3, r7, #3
    1f9c:	781b      	ldrb	r3, [r3, #0]
    1f9e:	3308      	adds	r3, #8
    1fa0:	015b      	lsls	r3, r3, #5
    1fa2:	18d3      	adds	r3, r2, r3
    1fa4:	3307      	adds	r3, #7
    1fa6:	2201      	movs	r2, #1
    1fa8:	701a      	strb	r2, [r3, #0]
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	46bd      	mov	sp, r7
    1fae:	b002      	add	sp, #8
    1fb0:	bd80      	pop	{r7, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)

00001fb4 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>:
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1fb4:	b580      	push	{r7, lr}
    1fb6:	b082      	sub	sp, #8
    1fb8:	af00      	add	r7, sp, #0
    1fba:	6078      	str	r0, [r7, #4]
    1fbc:	000a      	movs	r2, r1
    1fbe:	1cfb      	adds	r3, r7, #3
    1fc0:	701a      	strb	r2, [r3, #0]
    1fc2:	687b      	ldr	r3, [r7, #4]
    1fc4:	681a      	ldr	r2, [r3, #0]
    1fc6:	1cfb      	adds	r3, r7, #3
    1fc8:	781b      	ldrb	r3, [r3, #0]
    1fca:	3308      	adds	r3, #8
    1fcc:	015b      	lsls	r3, r3, #5
    1fce:	18d3      	adds	r3, r2, r3
    1fd0:	3307      	adds	r3, #7
    1fd2:	2202      	movs	r2, #2
    1fd4:	701a      	strb	r2, [r3, #0]
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	46bd      	mov	sp, r7
    1fda:	b002      	add	sp, #8
    1fdc:	bd80      	pop	{r7, pc}
    1fde:	46c0      	nop			; (mov r8, r8)

00001fe0 <_ZN20USBDevice_SAMD21G18x26epBank0EnableSetupReceivedEh>:

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1fe0:	b580      	push	{r7, lr}
    1fe2:	b082      	sub	sp, #8
    1fe4:	af00      	add	r7, sp, #0
    1fe6:	6078      	str	r0, [r7, #4]
    1fe8:	000a      	movs	r2, r1
    1fea:	1cfb      	adds	r3, r7, #3
    1fec:	701a      	strb	r2, [r3, #0]
    1fee:	687b      	ldr	r3, [r7, #4]
    1ff0:	6819      	ldr	r1, [r3, #0]
    1ff2:	1cfb      	adds	r3, r7, #3
    1ff4:	781a      	ldrb	r2, [r3, #0]
    1ff6:	2384      	movs	r3, #132	; 0x84
    1ff8:	005b      	lsls	r3, r3, #1
    1ffa:	0152      	lsls	r2, r2, #5
    1ffc:	188a      	adds	r2, r1, r2
    1ffe:	18d2      	adds	r2, r2, r3
    2000:	7853      	ldrb	r3, [r2, #1]
    2002:	2110      	movs	r1, #16
    2004:	430b      	orrs	r3, r1
    2006:	7053      	strb	r3, [r2, #1]
    2008:	46c0      	nop			; (mov r8, r8)
    200a:	46bd      	mov	sp, r7
    200c:	b002      	add	sp, #8
    200e:	bd80      	pop	{r7, pc}

00002010 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>:
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2010:	b580      	push	{r7, lr}
    2012:	b082      	sub	sp, #8
    2014:	af00      	add	r7, sp, #0
    2016:	6078      	str	r0, [r7, #4]
    2018:	000a      	movs	r2, r1
    201a:	1cfb      	adds	r3, r7, #3
    201c:	701a      	strb	r2, [r3, #0]
    201e:	687b      	ldr	r3, [r7, #4]
    2020:	6819      	ldr	r1, [r3, #0]
    2022:	1cfb      	adds	r3, r7, #3
    2024:	781a      	ldrb	r2, [r3, #0]
    2026:	2384      	movs	r3, #132	; 0x84
    2028:	005b      	lsls	r3, r3, #1
    202a:	0152      	lsls	r2, r2, #5
    202c:	188a      	adds	r2, r1, r2
    202e:	18d2      	adds	r2, r2, r3
    2030:	7853      	ldrb	r3, [r2, #1]
    2032:	2101      	movs	r1, #1
    2034:	430b      	orrs	r3, r1
    2036:	7053      	strb	r3, [r2, #1]
    2038:	46c0      	nop			; (mov r8, r8)
    203a:	46bd      	mov	sp, r7
    203c:	b002      	add	sp, #8
    203e:	bd80      	pop	{r7, pc}

00002040 <_ZN20USBDevice_SAMD21G18x29epBank1EnableTransferCompleteEh>:
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    2040:	b580      	push	{r7, lr}
    2042:	b082      	sub	sp, #8
    2044:	af00      	add	r7, sp, #0
    2046:	6078      	str	r0, [r7, #4]
    2048:	000a      	movs	r2, r1
    204a:	1cfb      	adds	r3, r7, #3
    204c:	701a      	strb	r2, [r3, #0]
    204e:	687b      	ldr	r3, [r7, #4]
    2050:	6819      	ldr	r1, [r3, #0]
    2052:	1cfb      	adds	r3, r7, #3
    2054:	781a      	ldrb	r2, [r3, #0]
    2056:	2384      	movs	r3, #132	; 0x84
    2058:	005b      	lsls	r3, r3, #1
    205a:	0152      	lsls	r2, r2, #5
    205c:	188a      	adds	r2, r1, r2
    205e:	18d2      	adds	r2, r2, r3
    2060:	7853      	ldrb	r3, [r2, #1]
    2062:	2102      	movs	r1, #2
    2064:	430b      	orrs	r3, r1
    2066:	7053      	strb	r3, [r2, #1]
    2068:	46c0      	nop			; (mov r8, r8)
    206a:	46bd      	mov	sp, r7
    206c:	b002      	add	sp, #8
    206e:	bd80      	pop	{r7, pc}

00002070 <_ZN20USBDevice_SAMD21G18x21epBank1DisableStalledEh>:

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    2070:	b580      	push	{r7, lr}
    2072:	b082      	sub	sp, #8
    2074:	af00      	add	r7, sp, #0
    2076:	6078      	str	r0, [r7, #4]
    2078:	000a      	movs	r2, r1
    207a:	1cfb      	adds	r3, r7, #3
    207c:	701a      	strb	r2, [r3, #0]
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	6819      	ldr	r1, [r3, #0]
    2082:	1cfb      	adds	r3, r7, #3
    2084:	781a      	ldrb	r2, [r3, #0]
    2086:	2384      	movs	r3, #132	; 0x84
    2088:	005b      	lsls	r3, r3, #1
    208a:	0152      	lsls	r2, r2, #5
    208c:	188a      	adds	r2, r1, r2
    208e:	18d2      	adds	r2, r2, r3
    2090:	7813      	ldrb	r3, [r2, #0]
    2092:	2140      	movs	r1, #64	; 0x40
    2094:	430b      	orrs	r3, r1
    2096:	7013      	strb	r3, [r2, #0]
    2098:	46c0      	nop			; (mov r8, r8)
    209a:	46bd      	mov	sp, r7
    209c:	b002      	add	sp, #8
    209e:	bd80      	pop	{r7, pc}

000020a0 <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>:
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    20a0:	b580      	push	{r7, lr}
    20a2:	b082      	sub	sp, #8
    20a4:	af00      	add	r7, sp, #0
    20a6:	6078      	str	r0, [r7, #4]
    20a8:	000a      	movs	r2, r1
    20aa:	1cfb      	adds	r3, r7, #3
    20ac:	701a      	strb	r2, [r3, #0]
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	6819      	ldr	r1, [r3, #0]
    20b2:	1cfb      	adds	r3, r7, #3
    20b4:	781a      	ldrb	r2, [r3, #0]
    20b6:	2384      	movs	r3, #132	; 0x84
    20b8:	005b      	lsls	r3, r3, #1
    20ba:	0152      	lsls	r2, r2, #5
    20bc:	188a      	adds	r2, r1, r2
    20be:	18d2      	adds	r2, r2, r3
    20c0:	7813      	ldrb	r3, [r2, #0]
    20c2:	2101      	movs	r1, #1
    20c4:	430b      	orrs	r3, r1
    20c6:	7013      	strb	r3, [r2, #0]
    20c8:	46c0      	nop			; (mov r8, r8)
    20ca:	46bd      	mov	sp, r7
    20cc:	b002      	add	sp, #8
    20ce:	bd80      	pop	{r7, pc}

000020d0 <_ZN20USBDevice_SAMD21G18x14epBank0IsReadyEh>:
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    20d0:	b580      	push	{r7, lr}
    20d2:	b082      	sub	sp, #8
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
    20d8:	000a      	movs	r2, r1
    20da:	1cfb      	adds	r3, r7, #3
    20dc:	701a      	strb	r2, [r3, #0]
    20de:	687b      	ldr	r3, [r7, #4]
    20e0:	681a      	ldr	r2, [r3, #0]
    20e2:	1cfb      	adds	r3, r7, #3
    20e4:	781b      	ldrb	r3, [r3, #0]
    20e6:	3308      	adds	r3, #8
    20e8:	015b      	lsls	r3, r3, #5
    20ea:	18d3      	adds	r3, r2, r3
    20ec:	799b      	ldrb	r3, [r3, #6]
    20ee:	065b      	lsls	r3, r3, #25
    20f0:	0fdb      	lsrs	r3, r3, #31
    20f2:	b2db      	uxtb	r3, r3
    20f4:	0018      	movs	r0, r3
    20f6:	46bd      	mov	sp, r7
    20f8:	b002      	add	sp, #8
    20fa:	bd80      	pop	{r7, pc}

000020fc <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>:
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    20fc:	b580      	push	{r7, lr}
    20fe:	b082      	sub	sp, #8
    2100:	af00      	add	r7, sp, #0
    2102:	6078      	str	r0, [r7, #4]
    2104:	000a      	movs	r2, r1
    2106:	1cfb      	adds	r3, r7, #3
    2108:	701a      	strb	r2, [r3, #0]
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	681a      	ldr	r2, [r3, #0]
    210e:	1cfb      	adds	r3, r7, #3
    2110:	781b      	ldrb	r3, [r3, #0]
    2112:	3308      	adds	r3, #8
    2114:	015b      	lsls	r3, r3, #5
    2116:	18d3      	adds	r3, r2, r3
    2118:	799b      	ldrb	r3, [r3, #6]
    211a:	061b      	lsls	r3, r3, #24
    211c:	0fdb      	lsrs	r3, r3, #31
    211e:	b2db      	uxtb	r3, r3
    2120:	0018      	movs	r0, r3
    2122:	46bd      	mov	sp, r7
    2124:	b002      	add	sp, #8
    2126:	bd80      	pop	{r7, pc}

00002128 <_ZN20USBDevice_SAMD21G18x15epBank0SetReadyEh>:
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    2128:	b580      	push	{r7, lr}
    212a:	b082      	sub	sp, #8
    212c:	af00      	add	r7, sp, #0
    212e:	6078      	str	r0, [r7, #4]
    2130:	000a      	movs	r2, r1
    2132:	1cfb      	adds	r3, r7, #3
    2134:	701a      	strb	r2, [r3, #0]
    2136:	687b      	ldr	r3, [r7, #4]
    2138:	681a      	ldr	r2, [r3, #0]
    213a:	1cfb      	adds	r3, r7, #3
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	3308      	adds	r3, #8
    2140:	015b      	lsls	r3, r3, #5
    2142:	18d2      	adds	r2, r2, r3
    2144:	7953      	ldrb	r3, [r2, #5]
    2146:	2140      	movs	r1, #64	; 0x40
    2148:	430b      	orrs	r3, r1
    214a:	7153      	strb	r3, [r2, #5]
    214c:	46c0      	nop			; (mov r8, r8)
    214e:	46bd      	mov	sp, r7
    2150:	b002      	add	sp, #8
    2152:	bd80      	pop	{r7, pc}

00002154 <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>:
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2154:	b580      	push	{r7, lr}
    2156:	b082      	sub	sp, #8
    2158:	af00      	add	r7, sp, #0
    215a:	6078      	str	r0, [r7, #4]
    215c:	000a      	movs	r2, r1
    215e:	1cfb      	adds	r3, r7, #3
    2160:	701a      	strb	r2, [r3, #0]
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	681a      	ldr	r2, [r3, #0]
    2166:	1cfb      	adds	r3, r7, #3
    2168:	781b      	ldrb	r3, [r3, #0]
    216a:	3308      	adds	r3, #8
    216c:	015b      	lsls	r3, r3, #5
    216e:	18d2      	adds	r2, r2, r3
    2170:	7953      	ldrb	r3, [r2, #5]
    2172:	2180      	movs	r1, #128	; 0x80
    2174:	4249      	negs	r1, r1
    2176:	430b      	orrs	r3, r1
    2178:	7153      	strb	r3, [r2, #5]
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	46bd      	mov	sp, r7
    217e:	b002      	add	sp, #8
    2180:	bd80      	pop	{r7, pc}
    2182:	46c0      	nop			; (mov r8, r8)

00002184 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>:
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2184:	b580      	push	{r7, lr}
    2186:	b082      	sub	sp, #8
    2188:	af00      	add	r7, sp, #0
    218a:	6078      	str	r0, [r7, #4]
    218c:	000a      	movs	r2, r1
    218e:	1cfb      	adds	r3, r7, #3
    2190:	701a      	strb	r2, [r3, #0]
    2192:	687b      	ldr	r3, [r7, #4]
    2194:	681a      	ldr	r2, [r3, #0]
    2196:	1cfb      	adds	r3, r7, #3
    2198:	781b      	ldrb	r3, [r3, #0]
    219a:	3308      	adds	r3, #8
    219c:	015b      	lsls	r3, r3, #5
    219e:	18d2      	adds	r2, r2, r3
    21a0:	7913      	ldrb	r3, [r2, #4]
    21a2:	2140      	movs	r1, #64	; 0x40
    21a4:	430b      	orrs	r3, r1
    21a6:	7113      	strb	r3, [r2, #4]
    21a8:	46c0      	nop			; (mov r8, r8)
    21aa:	46bd      	mov	sp, r7
    21ac:	b002      	add	sp, #8
    21ae:	bd80      	pop	{r7, pc}

000021b0 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>:
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    21b0:	b580      	push	{r7, lr}
    21b2:	b082      	sub	sp, #8
    21b4:	af00      	add	r7, sp, #0
    21b6:	6078      	str	r0, [r7, #4]
    21b8:	000a      	movs	r2, r1
    21ba:	1cfb      	adds	r3, r7, #3
    21bc:	701a      	strb	r2, [r3, #0]
    21be:	687b      	ldr	r3, [r7, #4]
    21c0:	681a      	ldr	r2, [r3, #0]
    21c2:	1cfb      	adds	r3, r7, #3
    21c4:	781b      	ldrb	r3, [r3, #0]
    21c6:	3308      	adds	r3, #8
    21c8:	015b      	lsls	r3, r3, #5
    21ca:	18d2      	adds	r2, r2, r3
    21cc:	7913      	ldrb	r3, [r2, #4]
    21ce:	2180      	movs	r1, #128	; 0x80
    21d0:	4249      	negs	r1, r1
    21d2:	430b      	orrs	r3, r1
    21d4:	7113      	strb	r3, [r2, #4]
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	46bd      	mov	sp, r7
    21da:	b002      	add	sp, #8
    21dc:	bd80      	pop	{r7, pc}
    21de:	46c0      	nop			; (mov r8, r8)

000021e0 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>:
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    21e0:	b580      	push	{r7, lr}
    21e2:	b082      	sub	sp, #8
    21e4:	af00      	add	r7, sp, #0
    21e6:	6078      	str	r0, [r7, #4]
    21e8:	000a      	movs	r2, r1
    21ea:	1cfb      	adds	r3, r7, #3
    21ec:	701a      	strb	r2, [r3, #0]
    21ee:	1cfb      	adds	r3, r7, #3
    21f0:	781b      	ldrb	r3, [r3, #0]
    21f2:	687a      	ldr	r2, [r7, #4]
    21f4:	015b      	lsls	r3, r3, #5
    21f6:	18d3      	adds	r3, r2, r3
    21f8:	689b      	ldr	r3, [r3, #8]
    21fa:	049b      	lsls	r3, r3, #18
    21fc:	0c9b      	lsrs	r3, r3, #18
    21fe:	b29b      	uxth	r3, r3
    2200:	0018      	movs	r0, r3
    2202:	46bd      	mov	sp, r7
    2204:	b002      	add	sp, #8
    2206:	bd80      	pop	{r7, pc}

00002208 <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>:
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2208:	b580      	push	{r7, lr}
    220a:	b082      	sub	sp, #8
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
    2210:	0008      	movs	r0, r1
    2212:	0011      	movs	r1, r2
    2214:	1cfb      	adds	r3, r7, #3
    2216:	1c02      	adds	r2, r0, #0
    2218:	701a      	strb	r2, [r3, #0]
    221a:	003b      	movs	r3, r7
    221c:	1c0a      	adds	r2, r1, #0
    221e:	801a      	strh	r2, [r3, #0]
    2220:	1cfb      	adds	r3, r7, #3
    2222:	781b      	ldrb	r3, [r3, #0]
    2224:	003a      	movs	r2, r7
    2226:	8812      	ldrh	r2, [r2, #0]
    2228:	0492      	lsls	r2, r2, #18
    222a:	0c92      	lsrs	r2, r2, #18
    222c:	b291      	uxth	r1, r2
    222e:	687a      	ldr	r2, [r7, #4]
    2230:	015b      	lsls	r3, r3, #5
    2232:	18d3      	adds	r3, r2, r3
    2234:	689a      	ldr	r2, [r3, #8]
    2236:	0489      	lsls	r1, r1, #18
    2238:	0c89      	lsrs	r1, r1, #18
    223a:	0b92      	lsrs	r2, r2, #14
    223c:	0392      	lsls	r2, r2, #14
    223e:	430a      	orrs	r2, r1
    2240:	609a      	str	r2, [r3, #8]
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	46bd      	mov	sp, r7
    2246:	b002      	add	sp, #8
    2248:	bd80      	pop	{r7, pc}
    224a:	46c0      	nop			; (mov r8, r8)

0000224c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>:
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    224c:	b580      	push	{r7, lr}
    224e:	b082      	sub	sp, #8
    2250:	af00      	add	r7, sp, #0
    2252:	6078      	str	r0, [r7, #4]
    2254:	0008      	movs	r0, r1
    2256:	0011      	movs	r1, r2
    2258:	1cfb      	adds	r3, r7, #3
    225a:	1c02      	adds	r2, r0, #0
    225c:	701a      	strb	r2, [r3, #0]
    225e:	003b      	movs	r3, r7
    2260:	1c0a      	adds	r2, r1, #0
    2262:	801a      	strh	r2, [r3, #0]
    2264:	1cfb      	adds	r3, r7, #3
    2266:	781b      	ldrb	r3, [r3, #0]
    2268:	003a      	movs	r2, r7
    226a:	8812      	ldrh	r2, [r2, #0]
    226c:	0492      	lsls	r2, r2, #18
    226e:	0c92      	lsrs	r2, r2, #18
    2270:	b291      	uxth	r1, r2
    2272:	687a      	ldr	r2, [r7, #4]
    2274:	015b      	lsls	r3, r3, #5
    2276:	18d3      	adds	r3, r2, r3
    2278:	3310      	adds	r3, #16
    227a:	689a      	ldr	r2, [r3, #8]
    227c:	0489      	lsls	r1, r1, #18
    227e:	0c89      	lsrs	r1, r1, #18
    2280:	0b92      	lsrs	r2, r2, #14
    2282:	0392      	lsls	r2, r2, #14
    2284:	430a      	orrs	r2, r1
    2286:	609a      	str	r2, [r3, #8]
    2288:	46c0      	nop			; (mov r8, r8)
    228a:	46bd      	mov	sp, r7
    228c:	b002      	add	sp, #8
    228e:	bd80      	pop	{r7, pc}

00002290 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>:
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2290:	b580      	push	{r7, lr}
    2292:	b082      	sub	sp, #8
    2294:	af00      	add	r7, sp, #0
    2296:	6078      	str	r0, [r7, #4]
    2298:	0008      	movs	r0, r1
    229a:	0011      	movs	r1, r2
    229c:	1cfb      	adds	r3, r7, #3
    229e:	1c02      	adds	r2, r0, #0
    22a0:	701a      	strb	r2, [r3, #0]
    22a2:	003b      	movs	r3, r7
    22a4:	1c0a      	adds	r2, r1, #0
    22a6:	801a      	strh	r2, [r3, #0]
    22a8:	1cfb      	adds	r3, r7, #3
    22aa:	781b      	ldrb	r3, [r3, #0]
    22ac:	003a      	movs	r2, r7
    22ae:	8812      	ldrh	r2, [r2, #0]
    22b0:	0492      	lsls	r2, r2, #18
    22b2:	0c92      	lsrs	r2, r2, #18
    22b4:	b291      	uxth	r1, r2
    22b6:	687a      	ldr	r2, [r7, #4]
    22b8:	015b      	lsls	r3, r3, #5
    22ba:	18d3      	adds	r3, r2, r3
    22bc:	689a      	ldr	r2, [r3, #8]
    22be:	0489      	lsls	r1, r1, #18
    22c0:	0c89      	lsrs	r1, r1, #18
    22c2:	0389      	lsls	r1, r1, #14
    22c4:	4803      	ldr	r0, [pc, #12]	; (22d4 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht+0x44>)
    22c6:	4002      	ands	r2, r0
    22c8:	430a      	orrs	r2, r1
    22ca:	609a      	str	r2, [r3, #8]
    22cc:	46c0      	nop			; (mov r8, r8)
    22ce:	46bd      	mov	sp, r7
    22d0:	b002      	add	sp, #8
    22d2:	bd80      	pop	{r7, pc}
    22d4:	f0003fff 	.word	0xf0003fff

000022d8 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht>:
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    22d8:	b580      	push	{r7, lr}
    22da:	b082      	sub	sp, #8
    22dc:	af00      	add	r7, sp, #0
    22de:	6078      	str	r0, [r7, #4]
    22e0:	0008      	movs	r0, r1
    22e2:	0011      	movs	r1, r2
    22e4:	1cfb      	adds	r3, r7, #3
    22e6:	1c02      	adds	r2, r0, #0
    22e8:	701a      	strb	r2, [r3, #0]
    22ea:	003b      	movs	r3, r7
    22ec:	1c0a      	adds	r2, r1, #0
    22ee:	801a      	strh	r2, [r3, #0]
    22f0:	1cfb      	adds	r3, r7, #3
    22f2:	781b      	ldrb	r3, [r3, #0]
    22f4:	003a      	movs	r2, r7
    22f6:	8812      	ldrh	r2, [r2, #0]
    22f8:	0492      	lsls	r2, r2, #18
    22fa:	0c92      	lsrs	r2, r2, #18
    22fc:	b291      	uxth	r1, r2
    22fe:	687a      	ldr	r2, [r7, #4]
    2300:	015b      	lsls	r3, r3, #5
    2302:	18d3      	adds	r3, r2, r3
    2304:	3310      	adds	r3, #16
    2306:	689a      	ldr	r2, [r3, #8]
    2308:	0489      	lsls	r1, r1, #18
    230a:	0c89      	lsrs	r1, r1, #18
    230c:	0389      	lsls	r1, r1, #14
    230e:	4804      	ldr	r0, [pc, #16]	; (2320 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht+0x48>)
    2310:	4002      	ands	r2, r0
    2312:	430a      	orrs	r2, r1
    2314:	609a      	str	r2, [r3, #8]
    2316:	46c0      	nop			; (mov r8, r8)
    2318:	46bd      	mov	sp, r7
    231a:	b002      	add	sp, #8
    231c:	bd80      	pop	{r7, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	f0003fff 	.word	0xf0003fff

00002324 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>:

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2324:	b580      	push	{r7, lr}
    2326:	b084      	sub	sp, #16
    2328:	af00      	add	r7, sp, #0
    232a:	60f8      	str	r0, [r7, #12]
    232c:	607a      	str	r2, [r7, #4]
    232e:	230b      	movs	r3, #11
    2330:	18fb      	adds	r3, r7, r3
    2332:	1c0a      	adds	r2, r1, #0
    2334:	701a      	strb	r2, [r3, #0]
    2336:	230b      	movs	r3, #11
    2338:	18fb      	adds	r3, r7, r3
    233a:	781b      	ldrb	r3, [r3, #0]
    233c:	687a      	ldr	r2, [r7, #4]
    233e:	68f9      	ldr	r1, [r7, #12]
    2340:	015b      	lsls	r3, r3, #5
    2342:	18cb      	adds	r3, r1, r3
    2344:	3304      	adds	r3, #4
    2346:	601a      	str	r2, [r3, #0]
    2348:	46c0      	nop			; (mov r8, r8)
    234a:	46bd      	mov	sp, r7
    234c:	b004      	add	sp, #16
    234e:	bd80      	pop	{r7, pc}

00002350 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>:
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2350:	b580      	push	{r7, lr}
    2352:	b084      	sub	sp, #16
    2354:	af00      	add	r7, sp, #0
    2356:	60f8      	str	r0, [r7, #12]
    2358:	607a      	str	r2, [r7, #4]
    235a:	230b      	movs	r3, #11
    235c:	18fb      	adds	r3, r7, r3
    235e:	1c0a      	adds	r2, r1, #0
    2360:	701a      	strb	r2, [r3, #0]
    2362:	230b      	movs	r3, #11
    2364:	18fb      	adds	r3, r7, r3
    2366:	781b      	ldrb	r3, [r3, #0]
    2368:	687a      	ldr	r2, [r7, #4]
    236a:	68f9      	ldr	r1, [r7, #12]
    236c:	015b      	lsls	r3, r3, #5
    236e:	18cb      	adds	r3, r1, r3
    2370:	3314      	adds	r3, #20
    2372:	601a      	str	r2, [r3, #0]
    2374:	46c0      	nop			; (mov r8, r8)
    2376:	46bd      	mov	sp, r7
    2378:	b004      	add	sp, #16
    237a:	bd80      	pop	{r7, pc}

0000237c <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>:
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    237c:	b590      	push	{r4, r7, lr}
    237e:	b083      	sub	sp, #12
    2380:	af00      	add	r7, sp, #0
    2382:	6078      	str	r0, [r7, #4]
    2384:	0008      	movs	r0, r1
    2386:	0011      	movs	r1, r2
    2388:	1cfb      	adds	r3, r7, #3
    238a:	1c02      	adds	r2, r0, #0
    238c:	701a      	strb	r2, [r3, #0]
    238e:	003b      	movs	r3, r7
    2390:	1c0a      	adds	r2, r1, #0
    2392:	801a      	strh	r2, [r3, #0]
    2394:	1cfb      	adds	r3, r7, #3
    2396:	781c      	ldrb	r4, [r3, #0]
    2398:	003b      	movs	r3, r7
    239a:	881a      	ldrh	r2, [r3, #0]
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	0011      	movs	r1, r2
    23a0:	0018      	movs	r0, r3
    23a2:	f000 f843 	bl	242c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>
    23a6:	0003      	movs	r3, r0
    23a8:	1c1a      	adds	r2, r3, #0
    23aa:	2307      	movs	r3, #7
    23ac:	4013      	ands	r3, r2
    23ae:	b2d9      	uxtb	r1, r3
    23b0:	687a      	ldr	r2, [r7, #4]
    23b2:	0163      	lsls	r3, r4, #5
    23b4:	18d3      	adds	r3, r2, r3
    23b6:	689a      	ldr	r2, [r3, #8]
    23b8:	2007      	movs	r0, #7
    23ba:	4001      	ands	r1, r0
    23bc:	0709      	lsls	r1, r1, #28
    23be:	4804      	ldr	r0, [pc, #16]	; (23d0 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht+0x54>)
    23c0:	4002      	ands	r2, r0
    23c2:	430a      	orrs	r2, r1
    23c4:	609a      	str	r2, [r3, #8]
    23c6:	46c0      	nop			; (mov r8, r8)
    23c8:	46bd      	mov	sp, r7
    23ca:	b003      	add	sp, #12
    23cc:	bd90      	pop	{r4, r7, pc}
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	8fffffff 	.word	0x8fffffff

000023d4 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>:
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    23d4:	b590      	push	{r4, r7, lr}
    23d6:	b083      	sub	sp, #12
    23d8:	af00      	add	r7, sp, #0
    23da:	6078      	str	r0, [r7, #4]
    23dc:	0008      	movs	r0, r1
    23de:	0011      	movs	r1, r2
    23e0:	1cfb      	adds	r3, r7, #3
    23e2:	1c02      	adds	r2, r0, #0
    23e4:	701a      	strb	r2, [r3, #0]
    23e6:	003b      	movs	r3, r7
    23e8:	1c0a      	adds	r2, r1, #0
    23ea:	801a      	strh	r2, [r3, #0]
    23ec:	1cfb      	adds	r3, r7, #3
    23ee:	781c      	ldrb	r4, [r3, #0]
    23f0:	003b      	movs	r3, r7
    23f2:	881a      	ldrh	r2, [r3, #0]
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	0011      	movs	r1, r2
    23f8:	0018      	movs	r0, r3
    23fa:	f000 f817 	bl	242c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>
    23fe:	0003      	movs	r3, r0
    2400:	1c1a      	adds	r2, r3, #0
    2402:	2307      	movs	r3, #7
    2404:	4013      	ands	r3, r2
    2406:	b2d9      	uxtb	r1, r3
    2408:	687a      	ldr	r2, [r7, #4]
    240a:	0163      	lsls	r3, r4, #5
    240c:	18d3      	adds	r3, r2, r3
    240e:	3310      	adds	r3, #16
    2410:	689a      	ldr	r2, [r3, #8]
    2412:	2007      	movs	r0, #7
    2414:	4001      	ands	r1, r0
    2416:	0709      	lsls	r1, r1, #28
    2418:	4803      	ldr	r0, [pc, #12]	; (2428 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht+0x54>)
    241a:	4002      	ands	r2, r0
    241c:	430a      	orrs	r2, r1
    241e:	609a      	str	r2, [r3, #8]
    2420:	46c0      	nop			; (mov r8, r8)
    2422:	46bd      	mov	sp, r7
    2424:	b003      	add	sp, #12
    2426:	bd90      	pop	{r4, r7, pc}
    2428:	8fffffff 	.word	0x8fffffff

0000242c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>:
	inline uint8_t EP_PCKSIZE_SIZE(uint16_t size) {
    242c:	b580      	push	{r7, lr}
    242e:	b082      	sub	sp, #8
    2430:	af00      	add	r7, sp, #0
    2432:	6078      	str	r0, [r7, #4]
    2434:	000a      	movs	r2, r1
    2436:	1cbb      	adds	r3, r7, #2
    2438:	801a      	strh	r2, [r3, #0]
		switch (size) {
    243a:	1cbb      	adds	r3, r7, #2
    243c:	881b      	ldrh	r3, [r3, #0]
    243e:	2b40      	cmp	r3, #64	; 0x40
    2440:	d020      	beq.n	2484 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x58>
    2442:	dc06      	bgt.n	2452 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x26>
    2444:	2b10      	cmp	r3, #16
    2446:	d019      	beq.n	247c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x50>
    2448:	2b20      	cmp	r3, #32
    244a:	d019      	beq.n	2480 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x54>
    244c:	2b08      	cmp	r3, #8
    244e:	d013      	beq.n	2478 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x4c>
    2450:	e022      	b.n	2498 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
    2452:	2280      	movs	r2, #128	; 0x80
    2454:	0052      	lsls	r2, r2, #1
    2456:	4293      	cmp	r3, r2
    2458:	d018      	beq.n	248c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x60>
    245a:	2280      	movs	r2, #128	; 0x80
    245c:	0052      	lsls	r2, r2, #1
    245e:	4293      	cmp	r3, r2
    2460:	dc02      	bgt.n	2468 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x3c>
    2462:	2b80      	cmp	r3, #128	; 0x80
    2464:	d010      	beq.n	2488 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x5c>
    2466:	e017      	b.n	2498 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
    2468:	2280      	movs	r2, #128	; 0x80
    246a:	0092      	lsls	r2, r2, #2
    246c:	4293      	cmp	r3, r2
    246e:	d00f      	beq.n	2490 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x64>
    2470:	4a0c      	ldr	r2, [pc, #48]	; (24a4 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x78>)
    2472:	4293      	cmp	r3, r2
    2474:	d00e      	beq.n	2494 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x68>
    2476:	e00f      	b.n	2498 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
		case 8:    return 0;
    2478:	2300      	movs	r3, #0
    247a:	e00e      	b.n	249a <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 16:   return 1;
    247c:	2301      	movs	r3, #1
    247e:	e00c      	b.n	249a <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 32:   return 2;
    2480:	2302      	movs	r3, #2
    2482:	e00a      	b.n	249a <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 64:   return 3;
    2484:	2303      	movs	r3, #3
    2486:	e008      	b.n	249a <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 128:  return 4;
    2488:	2304      	movs	r3, #4
    248a:	e006      	b.n	249a <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 256:  return 5;
    248c:	2305      	movs	r3, #5
    248e:	e004      	b.n	249a <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 512:  return 6;
    2490:	2306      	movs	r3, #6
    2492:	e002      	b.n	249a <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 1023: return 7;
    2494:	2307      	movs	r3, #7
    2496:	e000      	b.n	249a <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		default:   return 0;
    2498:	2300      	movs	r3, #0
		}
	}
    249a:	0018      	movs	r0, r3
    249c:	46bd      	mov	sp, r7
    249e:	b002      	add	sp, #8
    24a0:	bd80      	pop	{r7, pc}
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	000003ff 	.word	0x000003ff

000024a8 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    24a8:	b580      	push	{r7, lr}
    24aa:	b082      	sub	sp, #8
    24ac:	af00      	add	r7, sp, #0
    24ae:	6078      	str	r0, [r7, #4]
	usb.CTRLA.bit.SWRST = 1;
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	681a      	ldr	r2, [r3, #0]
    24b4:	7813      	ldrb	r3, [r2, #0]
    24b6:	2101      	movs	r1, #1
    24b8:	430b      	orrs	r3, r1
    24ba:	7013      	strb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
    24bc:	687b      	ldr	r3, [r7, #4]
    24be:	1d18      	adds	r0, r3, #4
    24c0:	2380      	movs	r3, #128	; 0x80
    24c2:	005b      	lsls	r3, r3, #1
    24c4:	001a      	movs	r2, r3
    24c6:	2100      	movs	r1, #0
    24c8:	f004 ff95 	bl	73f6 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    24cc:	687b      	ldr	r3, [r7, #4]
    24ce:	681b      	ldr	r3, [r3, #0]
    24d0:	789b      	ldrb	r3, [r3, #2]
    24d2:	07db      	lsls	r3, r3, #31
    24d4:	0fdb      	lsrs	r3, r3, #31
    24d6:	b2db      	uxtb	r3, r3
    24d8:	2b00      	cmp	r3, #0
    24da:	d000      	beq.n	24de <_ZN20USBDevice_SAMD21G18x5resetEv+0x36>
    24dc:	e7f6      	b.n	24cc <_ZN20USBDevice_SAMD21G18x5resetEv+0x24>
	usb.DESCADD.reg = (uint32_t)(&EP);
    24de:	687b      	ldr	r3, [r7, #4]
    24e0:	681b      	ldr	r3, [r3, #0]
    24e2:	687a      	ldr	r2, [r7, #4]
    24e4:	3204      	adds	r2, #4
    24e6:	625a      	str	r2, [r3, #36]	; 0x24
}
    24e8:	46c0      	nop			; (mov r8, r8)
    24ea:	46bd      	mov	sp, r7
    24ec:	b002      	add	sp, #8
    24ee:	bd80      	pop	{r7, pc}

000024f0 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:

void USBDevice_SAMD21G18x::calibrate() {
    24f0:	b580      	push	{r7, lr}
    24f2:	b088      	sub	sp, #32
    24f4:	af00      	add	r7, sp, #0
    24f6:	6078      	str	r0, [r7, #4]
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
    24f8:	4b31      	ldr	r3, [pc, #196]	; (25c0 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    24fa:	613b      	str	r3, [r7, #16]
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
    24fc:	4b30      	ldr	r3, [pc, #192]	; (25c0 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    24fe:	60fb      	str	r3, [r7, #12]
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;
    2500:	4b2f      	ldr	r3, [pc, #188]	; (25c0 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    2502:	60bb      	str	r3, [r7, #8]

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    2504:	693b      	ldr	r3, [r7, #16]
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	0b5b      	lsrs	r3, r3, #13
    250a:	221f      	movs	r2, #31
    250c:	4013      	ands	r3, r2
    250e:	61fb      	str	r3, [r7, #28]
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    2510:	68fb      	ldr	r3, [r7, #12]
    2512:	681b      	ldr	r3, [r3, #0]
    2514:	0c9b      	lsrs	r3, r3, #18
    2516:	221f      	movs	r2, #31
    2518:	4013      	ands	r3, r2
    251a:	61bb      	str	r3, [r7, #24]
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    251c:	68bb      	ldr	r3, [r7, #8]
    251e:	681b      	ldr	r3, [r3, #0]
    2520:	0ddb      	lsrs	r3, r3, #23
    2522:	2207      	movs	r2, #7
    2524:	4013      	ands	r3, r2
    2526:	617b      	str	r3, [r7, #20]

	if (pad_transn == 0x1F)  // maximum value (31)
    2528:	69fb      	ldr	r3, [r7, #28]
    252a:	2b1f      	cmp	r3, #31
    252c:	d101      	bne.n	2532 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x42>
		pad_transn = 5;
    252e:	2305      	movs	r3, #5
    2530:	61fb      	str	r3, [r7, #28]
	if (pad_transp == 0x1F)  // maximum value (31)
    2532:	69bb      	ldr	r3, [r7, #24]
    2534:	2b1f      	cmp	r3, #31
    2536:	d101      	bne.n	253c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x4c>
		pad_transp = 29;
    2538:	231d      	movs	r3, #29
    253a:	61bb      	str	r3, [r7, #24]
	if (pad_trim == 0x7)     // maximum value (7)
    253c:	697b      	ldr	r3, [r7, #20]
    253e:	2b07      	cmp	r3, #7
    2540:	d101      	bne.n	2546 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x56>
		pad_trim = 3;
    2542:	2303      	movs	r3, #3
    2544:	617b      	str	r3, [r7, #20]

	usb.PADCAL.bit.TRANSN = pad_transn;
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	681a      	ldr	r2, [r3, #0]
    254a:	69fb      	ldr	r3, [r7, #28]
    254c:	b2db      	uxtb	r3, r3
    254e:	1c19      	adds	r1, r3, #0
    2550:	231f      	movs	r3, #31
    2552:	400b      	ands	r3, r1
    2554:	b2d9      	uxtb	r1, r3
    2556:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2558:	1c08      	adds	r0, r1, #0
    255a:	211f      	movs	r1, #31
    255c:	4001      	ands	r1, r0
    255e:	0188      	lsls	r0, r1, #6
    2560:	4918      	ldr	r1, [pc, #96]	; (25c4 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd4>)
    2562:	400b      	ands	r3, r1
    2564:	1c19      	adds	r1, r3, #0
    2566:	1c03      	adds	r3, r0, #0
    2568:	430b      	orrs	r3, r1
    256a:	8513      	strh	r3, [r2, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	681a      	ldr	r2, [r3, #0]
    2570:	69bb      	ldr	r3, [r7, #24]
    2572:	b2db      	uxtb	r3, r3
    2574:	1c19      	adds	r1, r3, #0
    2576:	231f      	movs	r3, #31
    2578:	400b      	ands	r3, r1
    257a:	b2d9      	uxtb	r1, r3
    257c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    257e:	1c08      	adds	r0, r1, #0
    2580:	211f      	movs	r1, #31
    2582:	4008      	ands	r0, r1
    2584:	211f      	movs	r1, #31
    2586:	438b      	bics	r3, r1
    2588:	1c19      	adds	r1, r3, #0
    258a:	1c03      	adds	r3, r0, #0
    258c:	430b      	orrs	r3, r1
    258e:	8513      	strh	r3, [r2, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    2590:	687b      	ldr	r3, [r7, #4]
    2592:	681a      	ldr	r2, [r3, #0]
    2594:	697b      	ldr	r3, [r7, #20]
    2596:	b2db      	uxtb	r3, r3
    2598:	1c19      	adds	r1, r3, #0
    259a:	2307      	movs	r3, #7
    259c:	400b      	ands	r3, r1
    259e:	b2d9      	uxtb	r1, r3
    25a0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    25a2:	1c08      	adds	r0, r1, #0
    25a4:	2107      	movs	r1, #7
    25a6:	4001      	ands	r1, r0
    25a8:	0308      	lsls	r0, r1, #12
    25aa:	4907      	ldr	r1, [pc, #28]	; (25c8 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd8>)
    25ac:	400b      	ands	r3, r1
    25ae:	1c19      	adds	r1, r3, #0
    25b0:	1c03      	adds	r3, r0, #0
    25b2:	430b      	orrs	r3, r1
    25b4:	8513      	strh	r3, [r2, #40]	; 0x28
}
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	46bd      	mov	sp, r7
    25ba:	b008      	add	sp, #32
    25bc:	bd80      	pop	{r7, pc}
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	00806024 	.word	0x00806024
    25c4:	fffff83f 	.word	0xfffff83f
    25c8:	ffff8fff 	.word	0xffff8fff

000025cc <_ZN7__GuardC1Ev>:
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    25cc:	b580      	push	{r7, lr}
    25ce:	b084      	sub	sp, #16
    25d0:	af00      	add	r7, sp, #0
    25d2:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    25d4:	f3ef 8310 	mrs	r3, PRIMASK
    25d8:	60fb      	str	r3, [r7, #12]
  return(result);
    25da:	68fa      	ldr	r2, [r7, #12]
    25dc:	687b      	ldr	r3, [r7, #4]
    25de:	601a      	str	r2, [r3, #0]
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	2201      	movs	r2, #1
    25e4:	605a      	str	r2, [r3, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    25e6:	b672      	cpsid	i
		__disable_irq();
	}
    25e8:	687b      	ldr	r3, [r7, #4]
    25ea:	0018      	movs	r0, r3
    25ec:	46bd      	mov	sp, r7
    25ee:	b004      	add	sp, #16
    25f0:	bd80      	pop	{r7, pc}
    25f2:	46c0      	nop			; (mov r8, r8)

000025f4 <_ZN7__GuardD1Ev>:
	~__Guard() {
    25f4:	b580      	push	{r7, lr}
    25f6:	b082      	sub	sp, #8
    25f8:	af00      	add	r7, sp, #0
    25fa:	6078      	str	r0, [r7, #4]
		if (primask == 0) {
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	681b      	ldr	r3, [r3, #0]
    2600:	2b00      	cmp	r3, #0
    2602:	d102      	bne.n	260a <_ZN7__GuardD1Ev+0x16>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2604:	b662      	cpsie	i
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
    2606:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	0018      	movs	r0, r3
    260e:	46bd      	mov	sp, r7
    2610:	b002      	add	sp, #8
    2612:	bd80      	pop	{r7, pc}

00002614 <_ZN7__Guard5enterEv>:
	uint32_t enter() { return loops--; }
    2614:	b580      	push	{r7, lr}
    2616:	b082      	sub	sp, #8
    2618:	af00      	add	r7, sp, #0
    261a:	6078      	str	r0, [r7, #4]
    261c:	687b      	ldr	r3, [r7, #4]
    261e:	685a      	ldr	r2, [r3, #4]
    2620:	1e51      	subs	r1, r2, #1
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	6059      	str	r1, [r3, #4]
    2626:	0013      	movs	r3, r2
    2628:	0018      	movs	r0, r3
    262a:	46bd      	mov	sp, r7
    262c:	b002      	add	sp, #8
    262e:	bd80      	pop	{r7, pc}

00002630 <_ZN9EPHandlerC1Ev>:

/*
 * USB EP generic handlers.
 */

class EPHandler {
    2630:	b580      	push	{r7, lr}
    2632:	b082      	sub	sp, #8
    2634:	af00      	add	r7, sp, #0
    2636:	6078      	str	r0, [r7, #4]
    2638:	4a03      	ldr	r2, [pc, #12]	; (2648 <_ZN9EPHandlerC1Ev+0x18>)
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	601a      	str	r2, [r3, #0]
    263e:	687b      	ldr	r3, [r7, #4]
    2640:	0018      	movs	r0, r3
    2642:	46bd      	mov	sp, r7
    2644:	b002      	add	sp, #8
    2646:	bd80      	pop	{r7, pc}
    2648:	000076a0 	.word	0x000076a0

0000264c <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm>:
	virtual uint32_t available() const = 0;
};

class DoubleBufferedEPOutHandler : public EPHandler {
public:
	DoubleBufferedEPOutHandler(USBDevice_SAMD21G18x &usbDev, uint32_t endPoint, uint32_t bufferSize) :
    264c:	b580      	push	{r7, lr}
    264e:	b084      	sub	sp, #16
    2650:	af00      	add	r7, sp, #0
    2652:	60f8      	str	r0, [r7, #12]
    2654:	60b9      	str	r1, [r7, #8]
    2656:	607a      	str	r2, [r7, #4]
    2658:	603b      	str	r3, [r7, #0]
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    265a:	68fb      	ldr	r3, [r7, #12]
    265c:	0018      	movs	r0, r3
    265e:	f7ff ffe7 	bl	2630 <_ZN9EPHandlerC1Ev>
    2662:	4a30      	ldr	r2, [pc, #192]	; (2724 <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm+0xd8>)
    2664:	68fb      	ldr	r3, [r7, #12]
    2666:	601a      	str	r2, [r3, #0]
    2668:	68fb      	ldr	r3, [r7, #12]
    266a:	68ba      	ldr	r2, [r7, #8]
    266c:	605a      	str	r2, [r3, #4]
    266e:	68fb      	ldr	r3, [r7, #12]
    2670:	687a      	ldr	r2, [r7, #4]
    2672:	609a      	str	r2, [r3, #8]
    2674:	68fb      	ldr	r3, [r7, #12]
    2676:	683a      	ldr	r2, [r7, #0]
    2678:	60da      	str	r2, [r3, #12]
    267a:	68fb      	ldr	r3, [r7, #12]
    267c:	2200      	movs	r2, #0
    267e:	611a      	str	r2, [r3, #16]
    2680:	68fb      	ldr	r3, [r7, #12]
    2682:	2200      	movs	r2, #0
    2684:	615a      	str	r2, [r3, #20]
    2686:	68fb      	ldr	r3, [r7, #12]
    2688:	2200      	movs	r2, #0
    268a:	61da      	str	r2, [r3, #28]
    268c:	68fb      	ldr	r3, [r7, #12]
    268e:	2200      	movs	r2, #0
    2690:	621a      	str	r2, [r3, #32]
    2692:	68fb      	ldr	r3, [r7, #12]
    2694:	2224      	movs	r2, #36	; 0x24
    2696:	2100      	movs	r1, #0
    2698:	5499      	strb	r1, [r3, r2]
    269a:	68fb      	ldr	r3, [r7, #12]
    269c:	2200      	movs	r2, #0
    269e:	62da      	str	r2, [r3, #44]	; 0x2c
    26a0:	68fb      	ldr	r3, [r7, #12]
    26a2:	2200      	movs	r2, #0
    26a4:	631a      	str	r2, [r3, #48]	; 0x30
    26a6:	68fb      	ldr	r3, [r7, #12]
    26a8:	2234      	movs	r2, #52	; 0x34
    26aa:	2100      	movs	r1, #0
    26ac:	5499      	strb	r1, [r3, r2]
    26ae:	68fb      	ldr	r3, [r7, #12]
    26b0:	2235      	movs	r2, #53	; 0x35
    26b2:	2100      	movs	r1, #0
    26b4:	5499      	strb	r1, [r3, r2]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    26b6:	68fb      	ldr	r3, [r7, #12]
    26b8:	68db      	ldr	r3, [r3, #12]
    26ba:	0018      	movs	r0, r3
    26bc:	f004 fe7e 	bl	73bc <malloc>
    26c0:	0003      	movs	r3, r0
    26c2:	001a      	movs	r2, r3
    26c4:	68fb      	ldr	r3, [r7, #12]
    26c6:	619a      	str	r2, [r3, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    26c8:	68fb      	ldr	r3, [r7, #12]
    26ca:	68db      	ldr	r3, [r3, #12]
    26cc:	0018      	movs	r0, r3
    26ce:	f004 fe75 	bl	73bc <malloc>
    26d2:	0003      	movs	r3, r0
    26d4:	001a      	movs	r2, r3
    26d6:	68fb      	ldr	r3, [r7, #12]
    26d8:	629a      	str	r2, [r3, #40]	; 0x28

		usbd.epBank0SetSize(ep, 64);
    26da:	68fb      	ldr	r3, [r7, #12]
    26dc:	6858      	ldr	r0, [r3, #4]
    26de:	68fb      	ldr	r3, [r7, #12]
    26e0:	689b      	ldr	r3, [r3, #8]
    26e2:	b2db      	uxtb	r3, r3
    26e4:	2240      	movs	r2, #64	; 0x40
    26e6:	0019      	movs	r1, r3
    26e8:	f7ff fe48 	bl	237c <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>
		usbd.epBank0SetType(ep, 3); // BULK OUT
    26ec:	68fb      	ldr	r3, [r7, #12]
    26ee:	6858      	ldr	r0, [r3, #4]
    26f0:	68fb      	ldr	r3, [r7, #12]
    26f2:	689b      	ldr	r3, [r3, #8]
    26f4:	b2db      	uxtb	r3, r3
    26f6:	2203      	movs	r2, #3
    26f8:	0019      	movs	r1, r3
    26fa:	f7ff fb6b 	bl	1dd4 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    26fe:	68fb      	ldr	r3, [r7, #12]
    2700:	6858      	ldr	r0, [r3, #4]
    2702:	68fb      	ldr	r3, [r7, #12]
    2704:	689b      	ldr	r3, [r3, #8]
    2706:	b2d9      	uxtb	r1, r3
    2708:	68fb      	ldr	r3, [r7, #12]
    270a:	699b      	ldr	r3, [r3, #24]
    270c:	001a      	movs	r2, r3
    270e:	f7ff fe09 	bl	2324 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>

		release();
    2712:	68fb      	ldr	r3, [r7, #12]
    2714:	0018      	movs	r0, r3
    2716:	f000 fa39 	bl	2b8c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	}
    271a:	68fb      	ldr	r3, [r7, #12]
    271c:	0018      	movs	r0, r3
    271e:	46bd      	mov	sp, r7
    2720:	b004      	add	sp, #16
    2722:	bd80      	pop	{r7, pc}
    2724:	0000768c 	.word	0x0000768c

00002728 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:

	virtual uint32_t recv(void *_data, uint32_t len)
    2728:	b5b0      	push	{r4, r5, r7, lr}
    272a:	b090      	sub	sp, #64	; 0x40
    272c:	af00      	add	r7, sp, #0
    272e:	60f8      	str	r0, [r7, #12]
    2730:	60b9      	str	r1, [r7, #8]
    2732:	607a      	str	r2, [r7, #4]
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);
    2734:	68bb      	ldr	r3, [r7, #8]
    2736:	637b      	str	r3, [r7, #52]	; 0x34

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    2738:	68fb      	ldr	r3, [r7, #12]
    273a:	691b      	ldr	r3, [r3, #16]
    273c:	2b00      	cmp	r3, #0
    273e:	d000      	beq.n	2742 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
    2740:	e082      	b.n	2848 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x120>
			synchronized {
    2742:	232c      	movs	r3, #44	; 0x2c
    2744:	18fb      	adds	r3, r7, r3
    2746:	0018      	movs	r0, r3
    2748:	f7ff ff40 	bl	25cc <_ZN7__GuardC1Ev>
    274c:	232c      	movs	r3, #44	; 0x2c
    274e:	18fb      	adds	r3, r7, r3
    2750:	0018      	movs	r0, r3
    2752:	f7ff ff5f 	bl	2614 <_ZN7__Guard5enterEv>
    2756:	0003      	movs	r3, r0
    2758:	1e5a      	subs	r2, r3, #1
    275a:	4193      	sbcs	r3, r2
    275c:	b2db      	uxtb	r3, r3
    275e:	2b00      	cmp	r3, #0
    2760:	d00b      	beq.n	277a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x52>
				if (!ready0) {
    2762:	68fb      	ldr	r3, [r7, #12]
    2764:	2224      	movs	r2, #36	; 0x24
    2766:	5c9b      	ldrb	r3, [r3, r2]
    2768:	b2db      	uxtb	r3, r3
    276a:	2201      	movs	r2, #1
    276c:	4053      	eors	r3, r2
    276e:	b2db      	uxtb	r3, r3
    2770:	2b00      	cmp	r3, #0
    2772:	d0eb      	beq.n	274c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x24>
					return 0;
    2774:	2400      	movs	r4, #0
    2776:	2500      	movs	r5, #0
    2778:	e000      	b.n	277c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x54>
    277a:	2501      	movs	r5, #1
    277c:	232c      	movs	r3, #44	; 0x2c
    277e:	18fb      	adds	r3, r7, r3
    2780:	0018      	movs	r0, r3
    2782:	f7ff ff37 	bl	25f4 <_ZN7__GuardD1Ev>
    2786:	2d01      	cmp	r5, #1
    2788:	d000      	beq.n	278c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x64>
    278a:	e0de      	b.n	294a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
    278c:	46c0      	nop			; (mov r8, r8)
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    278e:	2300      	movs	r3, #0
    2790:	63fb      	str	r3, [r7, #60]	; 0x3c
    2792:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2794:	687b      	ldr	r3, [r7, #4]
    2796:	429a      	cmp	r2, r3
    2798:	d207      	bcs.n	27aa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    279a:	68fb      	ldr	r3, [r7, #12]
    279c:	69da      	ldr	r2, [r3, #28]
    279e:	68fb      	ldr	r3, [r7, #12]
    27a0:	6a1b      	ldr	r3, [r3, #32]
    27a2:	429a      	cmp	r2, r3
    27a4:	d201      	bcs.n	27aa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    27a6:	2301      	movs	r3, #1
    27a8:	e000      	b.n	27ac <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x84>
    27aa:	2300      	movs	r3, #0
    27ac:	2b00      	cmp	r3, #0
    27ae:	d011      	beq.n	27d4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xac>
				data[i] = data0[first0++];
    27b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    27b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    27b4:	18d1      	adds	r1, r2, r3
    27b6:	68fb      	ldr	r3, [r7, #12]
    27b8:	6998      	ldr	r0, [r3, #24]
    27ba:	68fb      	ldr	r3, [r7, #12]
    27bc:	69db      	ldr	r3, [r3, #28]
    27be:	1c5c      	adds	r4, r3, #1
    27c0:	68fa      	ldr	r2, [r7, #12]
    27c2:	61d4      	str	r4, [r2, #28]
    27c4:	18c3      	adds	r3, r0, r3
    27c6:	781b      	ldrb	r3, [r3, #0]
    27c8:	b2db      	uxtb	r3, r3
    27ca:	700b      	strb	r3, [r1, #0]
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    27cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    27ce:	3301      	adds	r3, #1
    27d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    27d2:	e7de      	b.n	2792 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6a>
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
    27d4:	68fb      	ldr	r3, [r7, #12]
    27d6:	69da      	ldr	r2, [r3, #28]
    27d8:	68fb      	ldr	r3, [r7, #12]
    27da:	6a1b      	ldr	r3, [r3, #32]
    27dc:	1ad3      	subs	r3, r2, r3
    27de:	425a      	negs	r2, r3
    27e0:	4153      	adcs	r3, r2
    27e2:	b2db      	uxtb	r3, r3
    27e4:	2b00      	cmp	r3, #0
    27e6:	d02d      	beq.n	2844 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x11c>
				first0 = 0;
    27e8:	68fb      	ldr	r3, [r7, #12]
    27ea:	2200      	movs	r2, #0
    27ec:	61da      	str	r2, [r3, #28]
				current = 1;
    27ee:	68fb      	ldr	r3, [r7, #12]
    27f0:	2201      	movs	r2, #1
    27f2:	611a      	str	r2, [r3, #16]
				synchronized {
    27f4:	2324      	movs	r3, #36	; 0x24
    27f6:	18fb      	adds	r3, r7, r3
    27f8:	0018      	movs	r0, r3
    27fa:	f7ff fee7 	bl	25cc <_ZN7__GuardC1Ev>
    27fe:	2324      	movs	r3, #36	; 0x24
    2800:	18fb      	adds	r3, r7, r3
    2802:	0018      	movs	r0, r3
    2804:	f7ff ff06 	bl	2614 <_ZN7__Guard5enterEv>
    2808:	0003      	movs	r3, r0
    280a:	1e5a      	subs	r2, r3, #1
    280c:	4193      	sbcs	r3, r2
    280e:	b2db      	uxtb	r3, r3
    2810:	2b00      	cmp	r3, #0
    2812:	d012      	beq.n	283a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x112>
					ready0 = false;
    2814:	68fb      	ldr	r3, [r7, #12]
    2816:	2224      	movs	r2, #36	; 0x24
    2818:	2100      	movs	r1, #0
    281a:	5499      	strb	r1, [r3, r2]
					if (notify) {
    281c:	68fb      	ldr	r3, [r7, #12]
    281e:	2235      	movs	r2, #53	; 0x35
    2820:	5c9b      	ldrb	r3, [r3, r2]
    2822:	b2db      	uxtb	r3, r3
    2824:	2b00      	cmp	r3, #0
    2826:	d0ea      	beq.n	27fe <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
						notify = false;
    2828:	68fb      	ldr	r3, [r7, #12]
    282a:	2235      	movs	r2, #53	; 0x35
    282c:	2100      	movs	r1, #0
    282e:	5499      	strb	r1, [r3, r2]
						release();
    2830:	68fb      	ldr	r3, [r7, #12]
    2832:	0018      	movs	r0, r3
    2834:	f000 f9aa 	bl	2b8c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
				current = 1;
				synchronized {
    2838:	e7e1      	b.n	27fe <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
    283a:	2324      	movs	r3, #36	; 0x24
    283c:	18fb      	adds	r3, r7, r3
    283e:	0018      	movs	r0, r3
    2840:	f7ff fed8 	bl	25f4 <_ZN7__GuardD1Ev>
						notify = false;
						release();
					}
				}
			}
			return i;
    2844:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    2846:	e080      	b.n	294a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
		} else {
			synchronized {
    2848:	231c      	movs	r3, #28
    284a:	18fb      	adds	r3, r7, r3
    284c:	0018      	movs	r0, r3
    284e:	f7ff febd 	bl	25cc <_ZN7__GuardC1Ev>
    2852:	231c      	movs	r3, #28
    2854:	18fb      	adds	r3, r7, r3
    2856:	0018      	movs	r0, r3
    2858:	f7ff fedc 	bl	2614 <_ZN7__Guard5enterEv>
    285c:	0003      	movs	r3, r0
    285e:	1e5a      	subs	r2, r3, #1
    2860:	4193      	sbcs	r3, r2
    2862:	b2db      	uxtb	r3, r3
    2864:	2b00      	cmp	r3, #0
    2866:	d00b      	beq.n	2880 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x158>
				if (!ready1) {
    2868:	68fb      	ldr	r3, [r7, #12]
    286a:	2234      	movs	r2, #52	; 0x34
    286c:	5c9b      	ldrb	r3, [r3, r2]
    286e:	b2db      	uxtb	r3, r3
    2870:	2201      	movs	r2, #1
    2872:	4053      	eors	r3, r2
    2874:	b2db      	uxtb	r3, r3
    2876:	2b00      	cmp	r3, #0
    2878:	d0eb      	beq.n	2852 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12a>
					return 0;
    287a:	2400      	movs	r4, #0
    287c:	2500      	movs	r5, #0
    287e:	e000      	b.n	2882 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x15a>
    2880:	2501      	movs	r5, #1
    2882:	231c      	movs	r3, #28
    2884:	18fb      	adds	r3, r7, r3
    2886:	0018      	movs	r0, r3
    2888:	f7ff feb4 	bl	25f4 <_ZN7__GuardD1Ev>
    288c:	2d01      	cmp	r5, #1
    288e:	d15c      	bne.n	294a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
					}
				}
			}
			return i;
		} else {
			synchronized {
    2890:	46c0      	nop			; (mov r8, r8)
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    2892:	2300      	movs	r3, #0
    2894:	63bb      	str	r3, [r7, #56]	; 0x38
    2896:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2898:	687b      	ldr	r3, [r7, #4]
    289a:	429a      	cmp	r2, r3
    289c:	d207      	bcs.n	28ae <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x186>
    289e:	68fb      	ldr	r3, [r7, #12]
    28a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28a2:	68fb      	ldr	r3, [r7, #12]
    28a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    28a6:	429a      	cmp	r2, r3
    28a8:	d201      	bcs.n	28ae <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x186>
    28aa:	2301      	movs	r3, #1
    28ac:	e000      	b.n	28b0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x188>
    28ae:	2300      	movs	r3, #0
    28b0:	2b00      	cmp	r3, #0
    28b2:	d011      	beq.n	28d8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1b0>
				data[i] = data1[first1++];
    28b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    28b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    28b8:	18d1      	adds	r1, r2, r3
    28ba:	68fb      	ldr	r3, [r7, #12]
    28bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    28be:	68fb      	ldr	r3, [r7, #12]
    28c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28c2:	1c5c      	adds	r4, r3, #1
    28c4:	68fa      	ldr	r2, [r7, #12]
    28c6:	62d4      	str	r4, [r2, #44]	; 0x2c
    28c8:	18c3      	adds	r3, r0, r3
    28ca:	781b      	ldrb	r3, [r3, #0]
    28cc:	b2db      	uxtb	r3, r3
    28ce:	700b      	strb	r3, [r1, #0]
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    28d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    28d2:	3301      	adds	r3, #1
    28d4:	63bb      	str	r3, [r7, #56]	; 0x38
    28d6:	e7de      	b.n	2896 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x16e>
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
    28d8:	68fb      	ldr	r3, [r7, #12]
    28da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28dc:	68fb      	ldr	r3, [r7, #12]
    28de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    28e0:	1ad3      	subs	r3, r2, r3
    28e2:	425a      	negs	r2, r3
    28e4:	4153      	adcs	r3, r2
    28e6:	b2db      	uxtb	r3, r3
    28e8:	2b00      	cmp	r3, #0
    28ea:	d02d      	beq.n	2948 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x220>
				first1 = 0;
    28ec:	68fb      	ldr	r3, [r7, #12]
    28ee:	2200      	movs	r2, #0
    28f0:	62da      	str	r2, [r3, #44]	; 0x2c
				current = 0;
    28f2:	68fb      	ldr	r3, [r7, #12]
    28f4:	2200      	movs	r2, #0
    28f6:	611a      	str	r2, [r3, #16]
				synchronized {
    28f8:	2314      	movs	r3, #20
    28fa:	18fb      	adds	r3, r7, r3
    28fc:	0018      	movs	r0, r3
    28fe:	f7ff fe65 	bl	25cc <_ZN7__GuardC1Ev>
    2902:	2314      	movs	r3, #20
    2904:	18fb      	adds	r3, r7, r3
    2906:	0018      	movs	r0, r3
    2908:	f7ff fe84 	bl	2614 <_ZN7__Guard5enterEv>
    290c:	0003      	movs	r3, r0
    290e:	1e5a      	subs	r2, r3, #1
    2910:	4193      	sbcs	r3, r2
    2912:	b2db      	uxtb	r3, r3
    2914:	2b00      	cmp	r3, #0
    2916:	d012      	beq.n	293e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x216>
					ready1 = false;
    2918:	68fb      	ldr	r3, [r7, #12]
    291a:	2234      	movs	r2, #52	; 0x34
    291c:	2100      	movs	r1, #0
    291e:	5499      	strb	r1, [r3, r2]
					if (notify) {
    2920:	68fb      	ldr	r3, [r7, #12]
    2922:	2235      	movs	r2, #53	; 0x35
    2924:	5c9b      	ldrb	r3, [r3, r2]
    2926:	b2db      	uxtb	r3, r3
    2928:	2b00      	cmp	r3, #0
    292a:	d0ea      	beq.n	2902 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1da>
						notify = false;
    292c:	68fb      	ldr	r3, [r7, #12]
    292e:	2235      	movs	r2, #53	; 0x35
    2930:	2100      	movs	r1, #0
    2932:	5499      	strb	r1, [r3, r2]
						release();
    2934:	68fb      	ldr	r3, [r7, #12]
    2936:	0018      	movs	r0, r3
    2938:	f000 f928 	bl	2b8c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
				first1 = 0;
				current = 0;
				synchronized {
    293c:	e7e1      	b.n	2902 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1da>
    293e:	2314      	movs	r3, #20
    2940:	18fb      	adds	r3, r7, r3
    2942:	0018      	movs	r0, r3
    2944:	f7ff fe56 	bl	25f4 <_ZN7__GuardD1Ev>
						notify = false;
						release();
					}
				}
			}
			return i;
    2948:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    294a:	0023      	movs	r3, r4
		}
	}
    294c:	0018      	movs	r0, r3
    294e:	46bd      	mov	sp, r7
    2950:	b010      	add	sp, #64	; 0x40
    2952:	bdb0      	pop	{r4, r5, r7, pc}

00002954 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:

	virtual void handleEndpoint()
    2954:	b590      	push	{r4, r7, lr}
    2956:	b087      	sub	sp, #28
    2958:	af00      	add	r7, sp, #0
    295a:	6078      	str	r0, [r7, #4]
	{
		// R/W : incoming, ready0/1
		//   W : last0/1, notify
		if (usbd.epBank0IsTransferComplete(ep))
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	685a      	ldr	r2, [r3, #4]
    2960:	687b      	ldr	r3, [r7, #4]
    2962:	689b      	ldr	r3, [r3, #8]
    2964:	b2db      	uxtb	r3, r3
    2966:	0019      	movs	r1, r3
    2968:	0010      	movs	r0, r2
    296a:	f7ff fab5 	bl	1ed8 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    296e:	1e03      	subs	r3, r0, #0
    2970:	d100      	bne.n	2974 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x20>
    2972:	e0a1      	b.n	2ab8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x164>
		{
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	685a      	ldr	r2, [r3, #4]
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	689b      	ldr	r3, [r3, #8]
    297c:	b2db      	uxtb	r3, r3
    297e:	0019      	movs	r1, r3
    2980:	0010      	movs	r0, r2
    2982:	f7ff fb01 	bl	1f88 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	695b      	ldr	r3, [r3, #20]
    298a:	2b00      	cmp	r3, #0
    298c:	d147      	bne.n	2a1e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xca>
				last0 = usbd.epBank0ByteCount(ep);
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	685a      	ldr	r2, [r3, #4]
    2992:	687b      	ldr	r3, [r7, #4]
    2994:	689b      	ldr	r3, [r3, #8]
    2996:	b2db      	uxtb	r3, r3
    2998:	0019      	movs	r1, r3
    299a:	0010      	movs	r0, r2
    299c:	f7ff fc20 	bl	21e0 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    29a0:	0003      	movs	r3, r0
    29a2:	001a      	movs	r2, r3
    29a4:	687b      	ldr	r3, [r7, #4]
    29a6:	621a      	str	r2, [r3, #32]
				incoming = 1;
    29a8:	687b      	ldr	r3, [r7, #4]
    29aa:	2201      	movs	r2, #1
    29ac:	615a      	str	r2, [r3, #20]
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    29ae:	687b      	ldr	r3, [r7, #4]
    29b0:	6858      	ldr	r0, [r3, #4]
    29b2:	687b      	ldr	r3, [r7, #4]
    29b4:	689b      	ldr	r3, [r3, #8]
    29b6:	b2d9      	uxtb	r1, r3
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29bc:	001a      	movs	r2, r3
    29be:	f7ff fcb1 	bl	2324 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
				ready0 = true;
    29c2:	687b      	ldr	r3, [r7, #4]
    29c4:	2224      	movs	r2, #36	; 0x24
    29c6:	2101      	movs	r1, #1
    29c8:	5499      	strb	r1, [r3, r2]
				synchronized {
    29ca:	2310      	movs	r3, #16
    29cc:	18fb      	adds	r3, r7, r3
    29ce:	0018      	movs	r0, r3
    29d0:	f7ff fdfc 	bl	25cc <_ZN7__GuardC1Ev>
    29d4:	2310      	movs	r3, #16
    29d6:	18fb      	adds	r3, r7, r3
    29d8:	0018      	movs	r0, r3
    29da:	f7ff fe1b 	bl	2614 <_ZN7__Guard5enterEv>
    29de:	0003      	movs	r3, r0
    29e0:	1e5a      	subs	r2, r3, #1
    29e2:	4193      	sbcs	r3, r2
    29e4:	b2db      	uxtb	r3, r3
    29e6:	2b00      	cmp	r3, #0
    29e8:	d010      	beq.n	2a0c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb8>
					if (ready1) {
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	2234      	movs	r2, #52	; 0x34
    29ee:	5c9b      	ldrb	r3, [r3, r2]
    29f0:	b2db      	uxtb	r3, r3
    29f2:	2b00      	cmp	r3, #0
    29f4:	d005      	beq.n	2a02 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
						notify = true;
    29f6:	687b      	ldr	r3, [r7, #4]
    29f8:	2235      	movs	r2, #53	; 0x35
    29fa:	2101      	movs	r1, #1
    29fc:	5499      	strb	r1, [r3, r2]
    29fe:	2400      	movs	r4, #0
						return;
    2a00:	e005      	b.n	2a0e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xba>
					}
					notify = false;
    2a02:	687b      	ldr	r3, [r7, #4]
    2a04:	2235      	movs	r2, #53	; 0x35
    2a06:	2100      	movs	r1, #0
    2a08:	5499      	strb	r1, [r3, r2]
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
				synchronized {
    2a0a:	e7e3      	b.n	29d4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x80>
    2a0c:	2401      	movs	r4, #1
    2a0e:	2310      	movs	r3, #16
    2a10:	18fb      	adds	r3, r7, r3
    2a12:	0018      	movs	r0, r3
    2a14:	f7ff fdee 	bl	25f4 <_ZN7__GuardD1Ev>
    2a18:	2c01      	cmp	r4, #1
    2a1a:	d048      	beq.n	2aae <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x15a>
    2a1c:	e04c      	b.n	2ab8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x164>
						return;
					}
					notify = false;
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
    2a1e:	687b      	ldr	r3, [r7, #4]
    2a20:	685a      	ldr	r2, [r3, #4]
    2a22:	687b      	ldr	r3, [r7, #4]
    2a24:	689b      	ldr	r3, [r3, #8]
    2a26:	b2db      	uxtb	r3, r3
    2a28:	0019      	movs	r1, r3
    2a2a:	0010      	movs	r0, r2
    2a2c:	f7ff fbd8 	bl	21e0 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    2a30:	0003      	movs	r3, r0
    2a32:	001a      	movs	r2, r3
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	631a      	str	r2, [r3, #48]	; 0x30
				incoming = 0;
    2a38:	687b      	ldr	r3, [r7, #4]
    2a3a:	2200      	movs	r2, #0
    2a3c:	615a      	str	r2, [r3, #20]
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    2a3e:	687b      	ldr	r3, [r7, #4]
    2a40:	6858      	ldr	r0, [r3, #4]
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	689b      	ldr	r3, [r3, #8]
    2a46:	b2d9      	uxtb	r1, r3
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	699b      	ldr	r3, [r3, #24]
    2a4c:	001a      	movs	r2, r3
    2a4e:	f7ff fc69 	bl	2324 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
				synchronized {
    2a52:	2308      	movs	r3, #8
    2a54:	18fb      	adds	r3, r7, r3
    2a56:	0018      	movs	r0, r3
    2a58:	f7ff fdb8 	bl	25cc <_ZN7__GuardC1Ev>
    2a5c:	2308      	movs	r3, #8
    2a5e:	18fb      	adds	r3, r7, r3
    2a60:	0018      	movs	r0, r3
    2a62:	f7ff fdd7 	bl	2614 <_ZN7__Guard5enterEv>
    2a66:	0003      	movs	r3, r0
    2a68:	1e5a      	subs	r2, r3, #1
    2a6a:	4193      	sbcs	r3, r2
    2a6c:	b2db      	uxtb	r3, r3
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d014      	beq.n	2a9c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x148>
					ready1 = true;
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	2234      	movs	r2, #52	; 0x34
    2a76:	2101      	movs	r1, #1
    2a78:	5499      	strb	r1, [r3, r2]
					if (ready0) {
    2a7a:	687b      	ldr	r3, [r7, #4]
    2a7c:	2224      	movs	r2, #36	; 0x24
    2a7e:	5c9b      	ldrb	r3, [r3, r2]
    2a80:	b2db      	uxtb	r3, r3
    2a82:	2b00      	cmp	r3, #0
    2a84:	d005      	beq.n	2a92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x13e>
						notify = true;
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	2235      	movs	r2, #53	; 0x35
    2a8a:	2101      	movs	r1, #1
    2a8c:	5499      	strb	r1, [r3, r2]
    2a8e:	2400      	movs	r4, #0
						return;
    2a90:	e005      	b.n	2a9e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x14a>
					}
					notify = false;
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	2235      	movs	r2, #53	; 0x35
    2a96:	2100      	movs	r1, #0
    2a98:	5499      	strb	r1, [r3, r2]
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
    2a9a:	e7df      	b.n	2a5c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x108>
    2a9c:	2401      	movs	r4, #1
    2a9e:	2308      	movs	r3, #8
    2aa0:	18fb      	adds	r3, r7, r3
    2aa2:	0018      	movs	r0, r3
    2aa4:	f7ff fda6 	bl	25f4 <_ZN7__GuardD1Ev>
    2aa8:	2c01      	cmp	r4, #1
    2aaa:	d105      	bne.n	2ab8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x164>
    2aac:	e000      	b.n	2ab0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x15c>
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
				synchronized {
    2aae:	46c0      	nop			; (mov r8, r8)
						return;
					}
					notify = false;
				}
			}
			release();
    2ab0:	687b      	ldr	r3, [r7, #4]
    2ab2:	0018      	movs	r0, r3
    2ab4:	f000 f86a 	bl	2b8c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
		}
	}
    2ab8:	46bd      	mov	sp, r7
    2aba:	b007      	add	sp, #28
    2abc:	bd90      	pop	{r4, r7, pc}
    2abe:	46c0      	nop			; (mov r8, r8)

00002ac0 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b088      	sub	sp, #32
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	6078      	str	r0, [r7, #4]
		if (current == 0) {
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	691b      	ldr	r3, [r3, #16]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d12c      	bne.n	2b2a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x6a>
			bool ready = false;
    2ad0:	231f      	movs	r3, #31
    2ad2:	18fb      	adds	r3, r7, r3
    2ad4:	2200      	movs	r2, #0
    2ad6:	701a      	strb	r2, [r3, #0]
			synchronized {
    2ad8:	2314      	movs	r3, #20
    2ada:	18fb      	adds	r3, r7, r3
    2adc:	0018      	movs	r0, r3
    2ade:	f7ff fd75 	bl	25cc <_ZN7__GuardC1Ev>
    2ae2:	2314      	movs	r3, #20
    2ae4:	18fb      	adds	r3, r7, r3
    2ae6:	0018      	movs	r0, r3
    2ae8:	f7ff fd94 	bl	2614 <_ZN7__Guard5enterEv>
    2aec:	0003      	movs	r3, r0
    2aee:	1e5a      	subs	r2, r3, #1
    2af0:	4193      	sbcs	r3, r2
    2af2:	b2db      	uxtb	r3, r3
    2af4:	2b00      	cmp	r3, #0
    2af6:	d006      	beq.n	2b06 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x46>
				ready = ready0;
    2af8:	231f      	movs	r3, #31
    2afa:	18fb      	adds	r3, r7, r3
    2afc:	687a      	ldr	r2, [r7, #4]
    2afe:	2124      	movs	r1, #36	; 0x24
    2b00:	5c52      	ldrb	r2, [r2, r1]
    2b02:	701a      	strb	r2, [r3, #0]

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
			bool ready = false;
			synchronized {
    2b04:	e7ed      	b.n	2ae2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x22>
    2b06:	2314      	movs	r3, #20
    2b08:	18fb      	adds	r3, r7, r3
    2b0a:	0018      	movs	r0, r3
    2b0c:	f7ff fd72 	bl	25f4 <_ZN7__GuardD1Ev>
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
    2b10:	231f      	movs	r3, #31
    2b12:	18fb      	adds	r3, r7, r3
    2b14:	781b      	ldrb	r3, [r3, #0]
    2b16:	2b00      	cmp	r3, #0
    2b18:	d005      	beq.n	2b26 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x66>
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	6a1a      	ldr	r2, [r3, #32]
    2b1e:	687b      	ldr	r3, [r7, #4]
    2b20:	69db      	ldr	r3, [r3, #28]
    2b22:	1ad3      	subs	r3, r2, r3
    2b24:	e02d      	b.n	2b82 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc2>
    2b26:	2300      	movs	r3, #0
    2b28:	e02b      	b.n	2b82 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc2>
		} else {
			bool ready = false;
    2b2a:	231e      	movs	r3, #30
    2b2c:	18fb      	adds	r3, r7, r3
    2b2e:	2200      	movs	r2, #0
    2b30:	701a      	strb	r2, [r3, #0]
			synchronized {
    2b32:	230c      	movs	r3, #12
    2b34:	18fb      	adds	r3, r7, r3
    2b36:	0018      	movs	r0, r3
    2b38:	f7ff fd48 	bl	25cc <_ZN7__GuardC1Ev>
    2b3c:	230c      	movs	r3, #12
    2b3e:	18fb      	adds	r3, r7, r3
    2b40:	0018      	movs	r0, r3
    2b42:	f7ff fd67 	bl	2614 <_ZN7__Guard5enterEv>
    2b46:	0003      	movs	r3, r0
    2b48:	1e5a      	subs	r2, r3, #1
    2b4a:	4193      	sbcs	r3, r2
    2b4c:	b2db      	uxtb	r3, r3
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d006      	beq.n	2b60 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xa0>
				ready = ready1;
    2b52:	231e      	movs	r3, #30
    2b54:	18fb      	adds	r3, r7, r3
    2b56:	687a      	ldr	r2, [r7, #4]
    2b58:	2134      	movs	r1, #52	; 0x34
    2b5a:	5c52      	ldrb	r2, [r2, r1]
    2b5c:	701a      	strb	r2, [r3, #0]
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
		} else {
			bool ready = false;
			synchronized {
    2b5e:	e7ed      	b.n	2b3c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x7c>
    2b60:	230c      	movs	r3, #12
    2b62:	18fb      	adds	r3, r7, r3
    2b64:	0018      	movs	r0, r3
    2b66:	f7ff fd45 	bl	25f4 <_ZN7__GuardD1Ev>
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
    2b6a:	231e      	movs	r3, #30
    2b6c:	18fb      	adds	r3, r7, r3
    2b6e:	781b      	ldrb	r3, [r3, #0]
    2b70:	2b00      	cmp	r3, #0
    2b72:	d005      	beq.n	2b80 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc0>
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2b78:	687b      	ldr	r3, [r7, #4]
    2b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b7c:	1ad3      	subs	r3, r2, r3
    2b7e:	e000      	b.n	2b82 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc2>
    2b80:	2300      	movs	r3, #0
		}
	}
    2b82:	0018      	movs	r0, r3
    2b84:	46bd      	mov	sp, r7
    2b86:	b008      	add	sp, #32
    2b88:	bd80      	pop	{r7, pc}
    2b8a:	46c0      	nop			; (mov r8, r8)

00002b8c <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    2b8c:	b580      	push	{r7, lr}
    2b8e:	b082      	sub	sp, #8
    2b90:	af00      	add	r7, sp, #0
    2b92:	6078      	str	r0, [r7, #4]
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	685a      	ldr	r2, [r3, #4]
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	689b      	ldr	r3, [r3, #8]
    2b9c:	b2db      	uxtb	r3, r3
    2b9e:	0019      	movs	r1, r3
    2ba0:	0010      	movs	r0, r2
    2ba2:	f7ff fa35 	bl	2010 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
		usbd.epBank0SetMultiPacketSize(ep, size);
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	6858      	ldr	r0, [r3, #4]
    2baa:	687b      	ldr	r3, [r7, #4]
    2bac:	689b      	ldr	r3, [r3, #8]
    2bae:	b2d9      	uxtb	r1, r3
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	68db      	ldr	r3, [r3, #12]
    2bb4:	b29b      	uxth	r3, r3
    2bb6:	001a      	movs	r2, r3
    2bb8:	f7ff fb6a 	bl	2290 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
		usbd.epBank0SetByteCount(ep, 0);
    2bbc:	687b      	ldr	r3, [r7, #4]
    2bbe:	6858      	ldr	r0, [r3, #4]
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	689b      	ldr	r3, [r3, #8]
    2bc4:	b2db      	uxtb	r3, r3
    2bc6:	2200      	movs	r2, #0
    2bc8:	0019      	movs	r1, r3
    2bca:	f7ff fb1d 	bl	2208 <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
		usbd.epBank0ResetReady(ep);
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	685a      	ldr	r2, [r3, #4]
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	689b      	ldr	r3, [r3, #8]
    2bd6:	b2db      	uxtb	r3, r3
    2bd8:	0019      	movs	r1, r3
    2bda:	0010      	movs	r0, r2
    2bdc:	f7ff fad2 	bl	2184 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>
	}
    2be0:	46c0      	nop			; (mov r8, r8)
    2be2:	46bd      	mov	sp, r7
    2be4:	b002      	add	sp, #8
    2be6:	bd80      	pop	{r7, pc}

00002be8 <UDD_Handler>:
static char isEndpointHalt = 0;

extern void (*gpf_isr)(void);

// USB_Handler ISR
extern "C" void UDD_Handler(void) {
    2be8:	b580      	push	{r7, lr}
    2bea:	af00      	add	r7, sp, #0
	USBDevice.ISRHandler();
    2bec:	4b03      	ldr	r3, [pc, #12]	; (2bfc <UDD_Handler+0x14>)
    2bee:	0018      	movs	r0, r3
    2bf0:	f001 f8b0 	bl	3d54 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    2bf4:	46c0      	nop			; (mov r8, r8)
    2bf6:	46bd      	mov	sp, r7
    2bf8:	bd80      	pop	{r7, pc}
    2bfa:	46c0      	nop			; (mov r8, r8)
    2bfc:	200007e0 	.word	0x200007e0

00002c00 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    2c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c02:	b08d      	sub	sp, #52	; 0x34
    2c04:	af00      	add	r7, sp, #0
    2c06:	61f8      	str	r0, [r7, #28]
    2c08:	61b9      	str	r1, [r7, #24]
    2c0a:	0011      	movs	r1, r2
    2c0c:	2217      	movs	r2, #23
    2c0e:	18ba      	adds	r2, r7, r2
    2c10:	7011      	strb	r1, [r2, #0]
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
    2c12:	466a      	mov	r2, sp
    2c14:	613a      	str	r2, [r7, #16]
// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
	if (maxlen < 2)
    2c16:	2217      	movs	r2, #23
    2c18:	18ba      	adds	r2, r7, r2
    2c1a:	7812      	ldrb	r2, [r2, #0]
    2c1c:	2a01      	cmp	r2, #1
    2c1e:	d801      	bhi.n	2c24 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x24>
		return false;
    2c20:	2300      	movs	r3, #0
    2c22:	e091      	b.n	2d48 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x148>

	uint8_t buffer[maxlen];
    2c24:	2217      	movs	r2, #23
    2c26:	18ba      	adds	r2, r7, r2
    2c28:	7812      	ldrb	r2, [r2, #0]
    2c2a:	3a01      	subs	r2, #1
    2c2c:	62ba      	str	r2, [r7, #40]	; 0x28
    2c2e:	0011      	movs	r1, r2
    2c30:	3101      	adds	r1, #1
    2c32:	60b9      	str	r1, [r7, #8]
    2c34:	2100      	movs	r1, #0
    2c36:	60f9      	str	r1, [r7, #12]
    2c38:	68b9      	ldr	r1, [r7, #8]
    2c3a:	0f49      	lsrs	r1, r1, #29
    2c3c:	68f8      	ldr	r0, [r7, #12]
    2c3e:	00c6      	lsls	r6, r0, #3
    2c40:	430e      	orrs	r6, r1
    2c42:	68b9      	ldr	r1, [r7, #8]
    2c44:	00cd      	lsls	r5, r1, #3
    2c46:	0011      	movs	r1, r2
    2c48:	3101      	adds	r1, #1
    2c4a:	6039      	str	r1, [r7, #0]
    2c4c:	2100      	movs	r1, #0
    2c4e:	6079      	str	r1, [r7, #4]
    2c50:	683d      	ldr	r5, [r7, #0]
    2c52:	687e      	ldr	r6, [r7, #4]
    2c54:	0029      	movs	r1, r5
    2c56:	0f49      	lsrs	r1, r1, #29
    2c58:	0030      	movs	r0, r6
    2c5a:	00c4      	lsls	r4, r0, #3
    2c5c:	430c      	orrs	r4, r1
    2c5e:	0029      	movs	r1, r5
    2c60:	00cb      	lsls	r3, r1, #3
    2c62:	0013      	movs	r3, r2
    2c64:	3301      	adds	r3, #1
    2c66:	3307      	adds	r3, #7
    2c68:	08db      	lsrs	r3, r3, #3
    2c6a:	00db      	lsls	r3, r3, #3
    2c6c:	466a      	mov	r2, sp
    2c6e:	1ad3      	subs	r3, r2, r3
    2c70:	469d      	mov	sp, r3
    2c72:	466b      	mov	r3, sp
    2c74:	3300      	adds	r3, #0
    2c76:	627b      	str	r3, [r7, #36]	; 0x24
	buffer[0] = strlen((const char*)string) * 2 + 2;
    2c78:	69bb      	ldr	r3, [r7, #24]
    2c7a:	0018      	movs	r0, r3
    2c7c:	f004 fc72 	bl	7564 <strlen>
    2c80:	0003      	movs	r3, r0
    2c82:	3301      	adds	r3, #1
    2c84:	b2db      	uxtb	r3, r3
    2c86:	18db      	adds	r3, r3, r3
    2c88:	b2da      	uxtb	r2, r3
    2c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c8c:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x03;
    2c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c90:	2203      	movs	r2, #3
    2c92:	705a      	strb	r2, [r3, #1]

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    2c94:	231f      	movs	r3, #31
    2c96:	2210      	movs	r2, #16
    2c98:	4694      	mov	ip, r2
    2c9a:	44bc      	add	ip, r7
    2c9c:	4463      	add	r3, ip
    2c9e:	2202      	movs	r2, #2
    2ca0:	701a      	strb	r2, [r3, #0]
    2ca2:	231f      	movs	r3, #31
    2ca4:	2210      	movs	r2, #16
    2ca6:	18ba      	adds	r2, r7, r2
    2ca8:	18d2      	adds	r2, r2, r3
    2caa:	2317      	movs	r3, #23
    2cac:	18fb      	adds	r3, r7, r3
    2cae:	7812      	ldrb	r2, [r2, #0]
    2cb0:	781b      	ldrb	r3, [r3, #0]
    2cb2:	429a      	cmp	r2, r3
    2cb4:	d239      	bcs.n	2d2a <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12a>
    2cb6:	69bb      	ldr	r3, [r7, #24]
    2cb8:	781b      	ldrb	r3, [r3, #0]
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d035      	beq.n	2d2a <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12a>
		buffer[i++] = *string++;
    2cbe:	231f      	movs	r3, #31
    2cc0:	2210      	movs	r2, #16
    2cc2:	4694      	mov	ip, r2
    2cc4:	44bc      	add	ip, r7
    2cc6:	4463      	add	r3, ip
    2cc8:	781b      	ldrb	r3, [r3, #0]
    2cca:	221f      	movs	r2, #31
    2ccc:	2110      	movs	r1, #16
    2cce:	468c      	mov	ip, r1
    2cd0:	44bc      	add	ip, r7
    2cd2:	4462      	add	r2, ip
    2cd4:	1c59      	adds	r1, r3, #1
    2cd6:	7011      	strb	r1, [r2, #0]
    2cd8:	0019      	movs	r1, r3
    2cda:	69bb      	ldr	r3, [r7, #24]
    2cdc:	1c5a      	adds	r2, r3, #1
    2cde:	61ba      	str	r2, [r7, #24]
    2ce0:	781a      	ldrb	r2, [r3, #0]
    2ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ce4:	545a      	strb	r2, [r3, r1]
		if (i == maxlen) break;
    2ce6:	231f      	movs	r3, #31
    2ce8:	2210      	movs	r2, #16
    2cea:	18ba      	adds	r2, r7, r2
    2cec:	18d2      	adds	r2, r2, r3
    2cee:	2317      	movs	r3, #23
    2cf0:	18fb      	adds	r3, r7, r3
    2cf2:	7812      	ldrb	r2, [r2, #0]
    2cf4:	781b      	ldrb	r3, [r3, #0]
    2cf6:	429a      	cmp	r2, r3
    2cf8:	d016      	beq.n	2d28 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x128>
		buffer[i] = 0;
    2cfa:	231f      	movs	r3, #31
    2cfc:	2210      	movs	r2, #16
    2cfe:	4694      	mov	ip, r2
    2d00:	44bc      	add	ip, r7
    2d02:	4463      	add	r3, ip
    2d04:	781b      	ldrb	r3, [r3, #0]
    2d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2d08:	2100      	movs	r1, #0
    2d0a:	54d1      	strb	r1, [r2, r3]
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    2d0c:	231f      	movs	r3, #31
    2d0e:	2210      	movs	r2, #16
    2d10:	4694      	mov	ip, r2
    2d12:	44bc      	add	ip, r7
    2d14:	4463      	add	r3, ip
    2d16:	781a      	ldrb	r2, [r3, #0]
    2d18:	231f      	movs	r3, #31
    2d1a:	2110      	movs	r1, #16
    2d1c:	468c      	mov	ip, r1
    2d1e:	44bc      	add	ip, r7
    2d20:	4463      	add	r3, ip
    2d22:	3201      	adds	r2, #1
    2d24:	701a      	strb	r2, [r3, #0]
    2d26:	e7bc      	b.n	2ca2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xa2>
		buffer[i++] = *string++;
		if (i == maxlen) break;
    2d28:	46c0      	nop			; (mov r8, r8)
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
    2d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2d2c:	231f      	movs	r3, #31
    2d2e:	2210      	movs	r2, #16
    2d30:	4694      	mov	ip, r2
    2d32:	44bc      	add	ip, r7
    2d34:	4463      	add	r3, ip
    2d36:	781a      	ldrb	r2, [r3, #0]
    2d38:	4b06      	ldr	r3, [pc, #24]	; (2d54 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x154>)
    2d3a:	0018      	movs	r0, r3
    2d3c:	f000 febe 	bl	3abc <_ZN14USBDeviceClass11sendControlEPKvm>
    2d40:	0003      	movs	r3, r0
    2d42:	1e5a      	subs	r2, r3, #1
    2d44:	4193      	sbcs	r3, r2
    2d46:	b2db      	uxtb	r3, r3
    2d48:	693a      	ldr	r2, [r7, #16]
    2d4a:	4695      	mov	sp, r2
}
    2d4c:	0018      	movs	r0, r3
    2d4e:	46bd      	mov	sp, r7
    2d50:	b00d      	add	sp, #52	; 0x34
    2d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d54:	200007e0 	.word	0x200007e0

00002d58 <_ZN14USBDeviceClass12packMessagesEb>:
bool _pack_message = false;
uint16_t _pack_size = 0;
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
    2d58:	b580      	push	{r7, lr}
    2d5a:	b082      	sub	sp, #8
    2d5c:	af00      	add	r7, sp, #0
    2d5e:	6078      	str	r0, [r7, #4]
    2d60:	000a      	movs	r2, r1
    2d62:	1cfb      	adds	r3, r7, #3
    2d64:	701a      	strb	r2, [r3, #0]
	if (val) {
    2d66:	1cfb      	adds	r3, r7, #3
    2d68:	781b      	ldrb	r3, [r3, #0]
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d006      	beq.n	2d7c <_ZN14USBDeviceClass12packMessagesEb+0x24>
		_pack_message = true;
    2d6e:	4b0b      	ldr	r3, [pc, #44]	; (2d9c <_ZN14USBDeviceClass12packMessagesEb+0x44>)
    2d70:	2201      	movs	r2, #1
    2d72:	701a      	strb	r2, [r3, #0]
		_pack_size = 0;
    2d74:	4b0a      	ldr	r3, [pc, #40]	; (2da0 <_ZN14USBDeviceClass12packMessagesEb+0x48>)
    2d76:	2200      	movs	r2, #0
    2d78:	801a      	strh	r2, [r3, #0]
	} else {
		_pack_message = false;
		sendControl(_pack_buffer, _pack_size);
	}
}
    2d7a:	e00a      	b.n	2d92 <_ZN14USBDeviceClass12packMessagesEb+0x3a>
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
	} else {
		_pack_message = false;
    2d7c:	4b07      	ldr	r3, [pc, #28]	; (2d9c <_ZN14USBDeviceClass12packMessagesEb+0x44>)
    2d7e:	2200      	movs	r2, #0
    2d80:	701a      	strb	r2, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    2d82:	4b07      	ldr	r3, [pc, #28]	; (2da0 <_ZN14USBDeviceClass12packMessagesEb+0x48>)
    2d84:	881b      	ldrh	r3, [r3, #0]
    2d86:	001a      	movs	r2, r3
    2d88:	4906      	ldr	r1, [pc, #24]	; (2da4 <_ZN14USBDeviceClass12packMessagesEb+0x4c>)
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	0018      	movs	r0, r3
    2d8e:	f000 fe95 	bl	3abc <_ZN14USBDeviceClass11sendControlEPKvm>
	}
}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	46bd      	mov	sp, r7
    2d96:	b002      	add	sp, #8
    2d98:	bd80      	pop	{r7, pc}
    2d9a:	46c0      	nop			; (mov r8, r8)
    2d9c:	200006d5 	.word	0x200006d5
    2da0:	200006d6 	.word	0x200006d6
    2da4:	200006d8 	.word	0x200006d8

00002da8 <_ZN14USBDeviceClass14SendInterfacesEPm>:

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
    2da8:	b580      	push	{r7, lr}
    2daa:	b084      	sub	sp, #16
    2dac:	af00      	add	r7, sp, #0
    2dae:	6078      	str	r0, [r7, #4]
    2db0:	6039      	str	r1, [r7, #0]
	uint8_t interfaces = 0;
    2db2:	230f      	movs	r3, #15
    2db4:	18fb      	adds	r3, r7, r3
    2db6:	2200      	movs	r2, #0
    2db8:	701a      	strb	r2, [r3, #0]

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    2dba:	230f      	movs	r3, #15
    2dbc:	18fb      	adds	r3, r7, r3
    2dbe:	0018      	movs	r0, r3
    2dc0:	f003 f938 	bl	6034 <_Z16CDC_GetInterfacePh>
    2dc4:	0002      	movs	r2, r0
    2dc6:	683b      	ldr	r3, [r7, #0]
    2dc8:	681b      	ldr	r3, [r3, #0]
    2dca:	189a      	adds	r2, r3, r2
    2dcc:	683b      	ldr	r3, [r7, #0]
    2dce:	601a      	str	r2, [r3, #0]
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
    2dd0:	f003 fb12 	bl	63f8 <_Z12PluggableUSBv>
    2dd4:	0002      	movs	r2, r0
    2dd6:	230f      	movs	r3, #15
    2dd8:	18fb      	adds	r3, r7, r3
    2dda:	0019      	movs	r1, r3
    2ddc:	0010      	movs	r0, r2
    2dde:	f003 fa79 	bl	62d4 <_ZN13PluggableUSB_12getInterfaceEPh>
    2de2:	0002      	movs	r2, r0
    2de4:	683b      	ldr	r3, [r7, #0]
    2de6:	681b      	ldr	r3, [r3, #0]
    2de8:	189a      	adds	r2, r3, r2
    2dea:	683b      	ldr	r3, [r7, #0]
    2dec:	601a      	str	r2, [r3, #0]
#endif

	return interfaces;
    2dee:	230f      	movs	r3, #15
    2df0:	18fb      	adds	r3, r7, r3
    2df2:	781b      	ldrb	r3, [r3, #0]
}
    2df4:	0018      	movs	r0, r3
    2df6:	46bd      	mov	sp, r7
    2df8:	b004      	add	sp, #16
    2dfa:	bd80      	pop	{r7, pc}

00002dfc <_ZN14USBDeviceClass17sendConfigurationEm>:

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    2dfc:	b590      	push	{r4, r7, lr}
    2dfe:	b089      	sub	sp, #36	; 0x24
    2e00:	af00      	add	r7, sp, #0
    2e02:	6078      	str	r0, [r7, #4]
    2e04:	6039      	str	r1, [r7, #0]
	uint32_t total = 0;
    2e06:	2300      	movs	r3, #0
    2e08:	61bb      	str	r3, [r7, #24]
	// Count and measure interfaces
	_dry_run = true;
    2e0a:	4b33      	ldr	r3, [pc, #204]	; (2ed8 <_ZN14USBDeviceClass17sendConfigurationEm+0xdc>)
    2e0c:	2201      	movs	r2, #1
    2e0e:	701a      	strb	r2, [r3, #0]
	uint8_t interfaces = SendInterfaces(&total);
    2e10:	231f      	movs	r3, #31
    2e12:	18fc      	adds	r4, r7, r3
    2e14:	2318      	movs	r3, #24
    2e16:	18fa      	adds	r2, r7, r3
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	0011      	movs	r1, r2
    2e1c:	0018      	movs	r0, r3
    2e1e:	f7ff ffc3 	bl	2da8 <_ZN14USBDeviceClass14SendInterfacesEPm>
    2e22:	0003      	movs	r3, r0
    2e24:	7023      	strb	r3, [r4, #0]

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    2e26:	230c      	movs	r3, #12
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	0018      	movs	r0, r3
    2e2c:	2309      	movs	r3, #9
    2e2e:	001a      	movs	r2, r3
    2e30:	2100      	movs	r1, #0
    2e32:	f004 fae0 	bl	73f6 <memset>
    2e36:	230c      	movs	r3, #12
    2e38:	18fb      	adds	r3, r7, r3
    2e3a:	2209      	movs	r2, #9
    2e3c:	701a      	strb	r2, [r3, #0]
    2e3e:	230c      	movs	r3, #12
    2e40:	18fb      	adds	r3, r7, r3
    2e42:	2202      	movs	r2, #2
    2e44:	705a      	strb	r2, [r3, #1]
    2e46:	230c      	movs	r3, #12
    2e48:	18fb      	adds	r3, r7, r3
    2e4a:	2201      	movs	r2, #1
    2e4c:	715a      	strb	r2, [r3, #5]
    2e4e:	230c      	movs	r3, #12
    2e50:	18fb      	adds	r3, r7, r3
    2e52:	22a0      	movs	r2, #160	; 0xa0
    2e54:	71da      	strb	r2, [r3, #7]
    2e56:	230c      	movs	r3, #12
    2e58:	18fb      	adds	r3, r7, r3
    2e5a:	22fa      	movs	r2, #250	; 0xfa
    2e5c:	721a      	strb	r2, [r3, #8]
    2e5e:	2209      	movs	r2, #9
    2e60:	69bb      	ldr	r3, [r7, #24]
    2e62:	b29b      	uxth	r3, r3
    2e64:	18d3      	adds	r3, r2, r3
    2e66:	b29a      	uxth	r2, r3
    2e68:	230c      	movs	r3, #12
    2e6a:	18fb      	adds	r3, r7, r3
    2e6c:	805a      	strh	r2, [r3, #2]
    2e6e:	230c      	movs	r3, #12
    2e70:	18fb      	adds	r3, r7, r3
    2e72:	221f      	movs	r2, #31
    2e74:	18ba      	adds	r2, r7, r2
    2e76:	7812      	ldrb	r2, [r2, #0]
    2e78:	711a      	strb	r2, [r3, #4]
	_Pragma("pack()")

	//	Now send them
	_dry_run = false;
    2e7a:	4b17      	ldr	r3, [pc, #92]	; (2ed8 <_ZN14USBDeviceClass17sendConfigurationEm+0xdc>)
    2e7c:	2200      	movs	r2, #0
    2e7e:	701a      	strb	r2, [r3, #0]

	if (maxlen == sizeof(ConfigDescriptor)) {
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	2b09      	cmp	r3, #9
    2e84:	d108      	bne.n	2e98 <_ZN14USBDeviceClass17sendConfigurationEm+0x9c>
		sendControl(&config, sizeof(ConfigDescriptor));
    2e86:	230c      	movs	r3, #12
    2e88:	18f9      	adds	r1, r7, r3
    2e8a:	687b      	ldr	r3, [r7, #4]
    2e8c:	2209      	movs	r2, #9
    2e8e:	0018      	movs	r0, r3
    2e90:	f000 fe14 	bl	3abc <_ZN14USBDeviceClass11sendControlEPKvm>
		return true;
    2e94:	2301      	movs	r3, #1
    2e96:	e01a      	b.n	2ece <_ZN14USBDeviceClass17sendConfigurationEm+0xd2>
	}

	total = 0;
    2e98:	2300      	movs	r3, #0
    2e9a:	61bb      	str	r3, [r7, #24]

	packMessages(true);
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	2101      	movs	r1, #1
    2ea0:	0018      	movs	r0, r3
    2ea2:	f7ff ff59 	bl	2d58 <_ZN14USBDeviceClass12packMessagesEb>
	sendControl(&config, sizeof(ConfigDescriptor));
    2ea6:	230c      	movs	r3, #12
    2ea8:	18f9      	adds	r1, r7, r3
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	2209      	movs	r2, #9
    2eae:	0018      	movs	r0, r3
    2eb0:	f000 fe04 	bl	3abc <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    2eb4:	2318      	movs	r3, #24
    2eb6:	18fa      	adds	r2, r7, r3
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	0011      	movs	r1, r2
    2ebc:	0018      	movs	r0, r3
    2ebe:	f7ff ff73 	bl	2da8 <_ZN14USBDeviceClass14SendInterfacesEPm>
	packMessages(false);
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	2100      	movs	r1, #0
    2ec6:	0018      	movs	r0, r3
    2ec8:	f7ff ff46 	bl	2d58 <_ZN14USBDeviceClass12packMessagesEb>

	return true;
    2ecc:	2301      	movs	r3, #1
}
    2ece:	0018      	movs	r0, r3
    2ed0:	46bd      	mov	sp, r7
    2ed2:	b009      	add	sp, #36	; 0x24
    2ed4:	bd90      	pop	{r4, r7, pc}
    2ed6:	46c0      	nop			; (mov r8, r8)
    2ed8:	200006d4 	.word	0x200006d4

00002edc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    2edc:	b580      	push	{r7, lr}
    2ede:	b090      	sub	sp, #64	; 0x40
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	6078      	str	r0, [r7, #4]
    2ee4:	6039      	str	r1, [r7, #0]
	uint8_t t = setup.wValueH;
    2ee6:	2337      	movs	r3, #55	; 0x37
    2ee8:	18fb      	adds	r3, r7, r3
    2eea:	683a      	ldr	r2, [r7, #0]
    2eec:	78d2      	ldrb	r2, [r2, #3]
    2eee:	701a      	strb	r2, [r3, #0]
	uint8_t desc_length = 0;
    2ef0:	233f      	movs	r3, #63	; 0x3f
    2ef2:	18fb      	adds	r3, r7, r3
    2ef4:	2200      	movs	r2, #0
    2ef6:	701a      	strb	r2, [r3, #0]
	bool _cdcComposite;
	int ret;
	const uint8_t *desc_addr = 0;
    2ef8:	2300      	movs	r3, #0
    2efa:	63bb      	str	r3, [r7, #56]	; 0x38

	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    2efc:	2337      	movs	r3, #55	; 0x37
    2efe:	18fb      	adds	r3, r7, r3
    2f00:	781b      	ldrb	r3, [r3, #0]
    2f02:	2b02      	cmp	r3, #2
    2f04:	d10c      	bne.n	2f20 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x44>
	{
		return USBDevice.sendConfiguration(setup.wLength);
    2f06:	683b      	ldr	r3, [r7, #0]
    2f08:	88db      	ldrh	r3, [r3, #6]
    2f0a:	001a      	movs	r2, r3
    2f0c:	4b54      	ldr	r3, [pc, #336]	; (3060 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x184>)
    2f0e:	0011      	movs	r1, r2
    2f10:	0018      	movs	r0, r3
    2f12:	f7ff ff73 	bl	2dfc <_ZN14USBDeviceClass17sendConfigurationEm>
    2f16:	0003      	movs	r3, r0
    2f18:	1e5a      	subs	r2, r3, #1
    2f1a:	4193      	sbcs	r3, r2
    2f1c:	b2db      	uxtb	r3, r3
    2f1e:	e09b      	b.n	3058 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x17c>
	}

#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    2f20:	f003 fa6a 	bl	63f8 <_Z12PluggableUSBv>
    2f24:	0002      	movs	r2, r0
    2f26:	683b      	ldr	r3, [r7, #0]
    2f28:	0019      	movs	r1, r3
    2f2a:	0010      	movs	r0, r2
    2f2c:	f003 f9fc 	bl	6328 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    2f30:	0003      	movs	r3, r0
    2f32:	633b      	str	r3, [r7, #48]	; 0x30
	if (ret != 0) {
    2f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2f36:	2b00      	cmp	r3, #0
    2f38:	d005      	beq.n	2f46 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x6a>
		return (ret > 0 ? true : false);
    2f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2f3c:	17da      	asrs	r2, r3, #31
    2f3e:	1ad3      	subs	r3, r2, r3
    2f40:	0fdb      	lsrs	r3, r3, #31
    2f42:	b2db      	uxtb	r3, r3
    2f44:	e088      	b.n	3058 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x17c>
	}
#endif

	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    2f46:	2337      	movs	r3, #55	; 0x37
    2f48:	18fb      	adds	r3, r7, r3
    2f4a:	781b      	ldrb	r3, [r3, #0]
    2f4c:	2b01      	cmp	r3, #1
    2f4e:	d11d      	bne.n	2f8c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb0>
	{
		if (setup.wLength == 8)
    2f50:	683b      	ldr	r3, [r7, #0]
    2f52:	88db      	ldrh	r3, [r3, #6]
    2f54:	2b08      	cmp	r3, #8
    2f56:	d103      	bne.n	2f60 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
			_cdcComposite = 1;
    2f58:	233e      	movs	r3, #62	; 0x3e
    2f5a:	18fb      	adds	r3, r7, r3
    2f5c:	2201      	movs	r2, #1
    2f5e:	701a      	strb	r2, [r3, #0]

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;
    2f60:	233e      	movs	r3, #62	; 0x3e
    2f62:	18fb      	adds	r3, r7, r3
    2f64:	781b      	ldrb	r3, [r3, #0]
    2f66:	2b00      	cmp	r3, #0
    2f68:	d001      	beq.n	2f6e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x92>
    2f6a:	4b3e      	ldr	r3, [pc, #248]	; (3064 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x188>)
    2f6c:	e000      	b.n	2f70 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
    2f6e:	4b3e      	ldr	r3, [pc, #248]	; (3068 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x18c>)
    2f70:	63bb      	str	r3, [r7, #56]	; 0x38

		if (*desc_addr > setup.wLength) {
    2f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f74:	781b      	ldrb	r3, [r3, #0]
    2f76:	b29a      	uxth	r2, r3
    2f78:	683b      	ldr	r3, [r7, #0]
    2f7a:	88db      	ldrh	r3, [r3, #6]
    2f7c:	429a      	cmp	r2, r3
    2f7e:	d953      	bls.n	3028 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x14c>
			desc_length = setup.wLength;
    2f80:	683b      	ldr	r3, [r7, #0]
    2f82:	88da      	ldrh	r2, [r3, #6]
    2f84:	233f      	movs	r3, #63	; 0x3f
    2f86:	18fb      	adds	r3, r7, r3
    2f88:	701a      	strb	r2, [r3, #0]
    2f8a:	e04d      	b.n	3028 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x14c>
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    2f8c:	2337      	movs	r3, #55	; 0x37
    2f8e:	18fb      	adds	r3, r7, r3
    2f90:	781b      	ldrb	r3, [r3, #0]
    2f92:	2b03      	cmp	r3, #3
    2f94:	d148      	bne.n	3028 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x14c>
	{
		if (setup.wValueL == 0) {
    2f96:	683b      	ldr	r3, [r7, #0]
    2f98:	789b      	ldrb	r3, [r3, #2]
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d109      	bne.n	2fb2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd6>
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
    2f9e:	4b33      	ldr	r3, [pc, #204]	; (306c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x190>)
    2fa0:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
    2fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2fa4:	781b      	ldrb	r3, [r3, #0]
    2fa6:	b29a      	uxth	r2, r3
    2fa8:	683b      	ldr	r3, [r7, #0]
    2faa:	88db      	ldrh	r3, [r3, #6]
    2fac:	429a      	cmp	r2, r3
    2fae:	d93b      	bls.n	3028 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x14c>
    2fb0:	e035      	b.n	301e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x142>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
	{
		if (setup.wValueL == 0) {
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
		}
		else if (setup.wValueL == IPRODUCT) {
    2fb2:	683b      	ldr	r3, [r7, #0]
    2fb4:	789b      	ldrb	r3, [r3, #2]
    2fb6:	2b02      	cmp	r3, #2
    2fb8:	d109      	bne.n	2fce <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xf2>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    2fba:	683b      	ldr	r3, [r7, #0]
    2fbc:	88db      	ldrh	r3, [r3, #6]
    2fbe:	b2da      	uxtb	r2, r3
    2fc0:	492b      	ldr	r1, [pc, #172]	; (3070 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x194>)
    2fc2:	687b      	ldr	r3, [r7, #4]
    2fc4:	0018      	movs	r0, r3
    2fc6:	f7ff fe1b 	bl	2c00 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    2fca:	0003      	movs	r3, r0
    2fcc:	e044      	b.n	3058 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x17c>
		}
		else if (setup.wValueL == IMANUFACTURER) {
    2fce:	683b      	ldr	r3, [r7, #0]
    2fd0:	789b      	ldrb	r3, [r3, #2]
    2fd2:	2b01      	cmp	r3, #1
    2fd4:	d109      	bne.n	2fea <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x10e>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    2fd6:	683b      	ldr	r3, [r7, #0]
    2fd8:	88db      	ldrh	r3, [r3, #6]
    2fda:	b2da      	uxtb	r2, r3
    2fdc:	4925      	ldr	r1, [pc, #148]	; (3074 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>)
    2fde:	687b      	ldr	r3, [r7, #4]
    2fe0:	0018      	movs	r0, r3
    2fe2:	f7ff fe0d 	bl	2c00 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    2fe6:	0003      	movs	r3, r0
    2fe8:	e036      	b.n	3058 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x17c>
		}
		else if (setup.wValueL == ISERIAL) {
    2fea:	683b      	ldr	r3, [r7, #0]
    2fec:	789b      	ldrb	r3, [r3, #2]
    2fee:	2b03      	cmp	r3, #3
    2ff0:	d113      	bne.n	301a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x13e>
#ifdef PLUGGABLE_USB_ENABLED
			char name[ISERIAL_MAX_LEN];
			PluggableUSB().getShortName(name);
    2ff2:	f003 fa01 	bl	63f8 <_Z12PluggableUSBv>
    2ff6:	0002      	movs	r2, r0
    2ff8:	230c      	movs	r3, #12
    2ffa:	18fb      	adds	r3, r7, r3
    2ffc:	0019      	movs	r1, r3
    2ffe:	0010      	movs	r0, r2
    3000:	f003 f9b6 	bl	6370 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    3004:	683b      	ldr	r3, [r7, #0]
    3006:	88db      	ldrh	r3, [r3, #6]
    3008:	b2da      	uxtb	r2, r3
    300a:	230c      	movs	r3, #12
    300c:	18f9      	adds	r1, r7, r3
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	0018      	movs	r0, r3
    3012:	f7ff fdf5 	bl	2c00 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    3016:	0003      	movs	r3, r0
    3018:	e01e      	b.n	3058 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x17c>
#endif
		}
		else {
			return false;
    301a:	2300      	movs	r3, #0
    301c:	e01c      	b.n	3058 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x17c>
		}
		if (*desc_addr > setup.wLength) {
			desc_length = setup.wLength;
    301e:	683b      	ldr	r3, [r7, #0]
    3020:	88da      	ldrh	r2, [r3, #6]
    3022:	233f      	movs	r3, #63	; 0x3f
    3024:	18fb      	adds	r3, r7, r3
    3026:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}

	if (desc_addr == 0) {
    3028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    302a:	2b00      	cmp	r3, #0
    302c:	d101      	bne.n	3032 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x156>
		return false;
    302e:	2300      	movs	r3, #0
    3030:	e012      	b.n	3058 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x17c>
	}

	if (desc_length == 0) {
    3032:	233f      	movs	r3, #63	; 0x3f
    3034:	18fb      	adds	r3, r7, r3
    3036:	781b      	ldrb	r3, [r3, #0]
    3038:	2b00      	cmp	r3, #0
    303a:	d104      	bne.n	3046 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x16a>
		desc_length = *desc_addr;
    303c:	233f      	movs	r3, #63	; 0x3f
    303e:	18fb      	adds	r3, r7, r3
    3040:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3042:	7812      	ldrb	r2, [r2, #0]
    3044:	701a      	strb	r2, [r3, #0]
	}

	sendControl(desc_addr, desc_length);
    3046:	233f      	movs	r3, #63	; 0x3f
    3048:	18fb      	adds	r3, r7, r3
    304a:	781a      	ldrb	r2, [r3, #0]
    304c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    304e:	687b      	ldr	r3, [r7, #4]
    3050:	0018      	movs	r0, r3
    3052:	f000 fd33 	bl	3abc <_ZN14USBDeviceClass11sendControlEPKvm>

	return true;
    3056:	2301      	movs	r3, #1
}
    3058:	0018      	movs	r0, r3
    305a:	46bd      	mov	sp, r7
    305c:	b010      	add	sp, #64	; 0x40
    305e:	bd80      	pop	{r7, pc}
    3060:	200007e0 	.word	0x200007e0
    3064:	0000762c 	.word	0x0000762c
    3068:	00007640 	.word	0x00007640
    306c:	00007610 	.word	0x00007610
    3070:	00007614 	.word	0x00007614
    3074:	00007620 	.word	0x00007620

00003078 <_ZN14USBDeviceClass14handleEndpointEh>:
	usbd.noRunInStandby();
}


void USBDeviceClass::handleEndpoint(uint8_t ep)
{
    3078:	b580      	push	{r7, lr}
    307a:	b082      	sub	sp, #8
    307c:	af00      	add	r7, sp, #0
    307e:	6078      	str	r0, [r7, #4]
    3080:	000a      	movs	r2, r1
    3082:	1cfb      	adds	r3, r7, #3
    3084:	701a      	strb	r2, [r3, #0]
#if defined(CDC_ENABLED)
	if (ep == CDC_ENDPOINT_IN)
    3086:	1cfb      	adds	r3, r7, #3
    3088:	781b      	ldrb	r3, [r3, #0]
    308a:	2b03      	cmp	r3, #3
    308c:	d109      	bne.n	30a2 <_ZN14USBDeviceClass14handleEndpointEh+0x2a>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_IN);
    308e:	4b0e      	ldr	r3, [pc, #56]	; (30c8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    3090:	2103      	movs	r1, #3
    3092:	0018      	movs	r0, r3
    3094:	f7ff f88c 	bl	21b0 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_IN);
    3098:	4b0b      	ldr	r3, [pc, #44]	; (30c8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    309a:	2103      	movs	r1, #3
    309c:	0018      	movs	r0, r3
    309e:	f7fe ff89 	bl	1fb4 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
	if (ep == CDC_ENDPOINT_ACM)
    30a2:	1cfb      	adds	r3, r7, #3
    30a4:	781b      	ldrb	r3, [r3, #0]
    30a6:	2b01      	cmp	r3, #1
    30a8:	d109      	bne.n	30be <_ZN14USBDeviceClass14handleEndpointEh+0x46>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_ACM);
    30aa:	4b07      	ldr	r3, [pc, #28]	; (30c8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    30ac:	2101      	movs	r1, #1
    30ae:	0018      	movs	r0, r3
    30b0:	f7ff f87e 	bl	21b0 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_ACM);
    30b4:	4b04      	ldr	r3, [pc, #16]	; (30c8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    30b6:	2101      	movs	r1, #1
    30b8:	0018      	movs	r0, r3
    30ba:	f7fe ff7b 	bl	1fb4 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
#endif

#if defined(PLUGGABLE_USB_ENABLED)
	// Empty
#endif
}
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	46bd      	mov	sp, r7
    30c2:	b002      	add	sp, #8
    30c4:	bd80      	pop	{r7, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	20000228 	.word	0x20000228

000030cc <_ZN14USBDeviceClass4initEv>:

void USBDeviceClass::init()
{
    30cc:	b580      	push	{r7, lr}
    30ce:	b082      	sub	sp, #8
    30d0:	af00      	add	r7, sp, #0
    30d2:	6078      	str	r0, [r7, #4]
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    30d4:	4b42      	ldr	r3, [pc, #264]	; (31e0 <_ZN14USBDeviceClass4initEv+0x114>)
    30d6:	2200      	movs	r2, #0
    30d8:	701a      	strb	r2, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    30da:	2101      	movs	r1, #1
    30dc:	201a      	movs	r0, #26
    30de:	f001 f921 	bl	4324 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    30e2:	2101      	movs	r1, #1
    30e4:	201a      	movs	r0, #26
    30e6:	f001 fa47 	bl	4578 <digitalWrite>
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    30ea:	4b3e      	ldr	r3, [pc, #248]	; (31e4 <_ZN14USBDeviceClass4initEv+0x118>)
    30ec:	2200      	movs	r2, #0
    30ee:	701a      	strb	r2, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    30f0:	2101      	movs	r1, #1
    30f2:	2019      	movs	r0, #25
    30f4:	f001 f916 	bl	4324 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    30f8:	2101      	movs	r1, #1
    30fa:	2019      	movs	r0, #25
    30fc:	f001 fa3c 	bl	4578 <digitalWrite>
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    3100:	4b39      	ldr	r3, [pc, #228]	; (31e8 <_ZN14USBDeviceClass4initEv+0x11c>)
    3102:	4a39      	ldr	r2, [pc, #228]	; (31e8 <_ZN14USBDeviceClass4initEv+0x11c>)
    3104:	69d2      	ldr	r2, [r2, #28]
    3106:	2120      	movs	r1, #32
    3108:	430a      	orrs	r2, r1
    310a:	61da      	str	r2, [r3, #28]

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    310c:	4937      	ldr	r1, [pc, #220]	; (31ec <_ZN14USBDeviceClass4initEv+0x120>)
    310e:	2258      	movs	r2, #88	; 0x58
    3110:	5c8b      	ldrb	r3, [r1, r2]
    3112:	2001      	movs	r0, #1
    3114:	4303      	orrs	r3, r0
    3116:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    3118:	4a34      	ldr	r2, [pc, #208]	; (31ec <_ZN14USBDeviceClass4initEv+0x120>)
    311a:	4934      	ldr	r1, [pc, #208]	; (31ec <_ZN14USBDeviceClass4initEv+0x120>)
    311c:	233c      	movs	r3, #60	; 0x3c
    311e:	5ccb      	ldrb	r3, [r1, r3]
    3120:	b2db      	uxtb	r3, r3
    3122:	210f      	movs	r1, #15
    3124:	438b      	bics	r3, r1
    3126:	b2d9      	uxtb	r1, r3
    3128:	233c      	movs	r3, #60	; 0x3c
    312a:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    312c:	4a2f      	ldr	r2, [pc, #188]	; (31ec <_ZN14USBDeviceClass4initEv+0x120>)
    312e:	492f      	ldr	r1, [pc, #188]	; (31ec <_ZN14USBDeviceClass4initEv+0x120>)
    3130:	233c      	movs	r3, #60	; 0x3c
    3132:	5ccb      	ldrb	r3, [r1, r3]
    3134:	b2db      	uxtb	r3, r3
    3136:	2106      	movs	r1, #6
    3138:	430b      	orrs	r3, r1
    313a:	b2d9      	uxtb	r1, r3
    313c:	233c      	movs	r3, #60	; 0x3c
    313e:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    3140:	492a      	ldr	r1, [pc, #168]	; (31ec <_ZN14USBDeviceClass4initEv+0x120>)
    3142:	2259      	movs	r2, #89	; 0x59
    3144:	5c8b      	ldrb	r3, [r1, r2]
    3146:	2001      	movs	r0, #1
    3148:	4303      	orrs	r3, r0
    314a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    314c:	4a27      	ldr	r2, [pc, #156]	; (31ec <_ZN14USBDeviceClass4initEv+0x120>)
    314e:	4927      	ldr	r1, [pc, #156]	; (31ec <_ZN14USBDeviceClass4initEv+0x120>)
    3150:	233c      	movs	r3, #60	; 0x3c
    3152:	5ccb      	ldrb	r3, [r1, r3]
    3154:	b2db      	uxtb	r3, r3
    3156:	210f      	movs	r1, #15
    3158:	400b      	ands	r3, r1
    315a:	b2d9      	uxtb	r1, r3
    315c:	233c      	movs	r3, #60	; 0x3c
    315e:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    3160:	4a22      	ldr	r2, [pc, #136]	; (31ec <_ZN14USBDeviceClass4initEv+0x120>)
    3162:	4922      	ldr	r1, [pc, #136]	; (31ec <_ZN14USBDeviceClass4initEv+0x120>)
    3164:	233c      	movs	r3, #60	; 0x3c
    3166:	5ccb      	ldrb	r3, [r1, r3]
    3168:	b2db      	uxtb	r3, r3
    316a:	2160      	movs	r1, #96	; 0x60
    316c:	430b      	orrs	r3, r1
    316e:	b2d9      	uxtb	r1, r3
    3170:	233c      	movs	r3, #60	; 0x3c
    3172:	54d1      	strb	r1, [r2, r3]

	// Put Generic Clock Generator 0 as source for Generic Clock Multiplexer 6 (USB reference)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    3174:	4b1e      	ldr	r3, [pc, #120]	; (31f0 <_ZN14USBDeviceClass4initEv+0x124>)
	                    GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
	                    GCLK_CLKCTRL_CLKEN;
    3176:	4a1f      	ldr	r2, [pc, #124]	; (31f4 <_ZN14USBDeviceClass4initEv+0x128>)
    3178:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    317a:	4b1d      	ldr	r3, [pc, #116]	; (31f0 <_ZN14USBDeviceClass4initEv+0x124>)
    317c:	785b      	ldrb	r3, [r3, #1]
    317e:	061b      	lsls	r3, r3, #24
    3180:	0fdb      	lsrs	r3, r3, #31
    3182:	b2db      	uxtb	r3, r3
    3184:	2b00      	cmp	r3, #0
    3186:	d000      	beq.n	318a <_ZN14USBDeviceClass4initEv+0xbe>
    3188:	e7f7      	b.n	317a <_ZN14USBDeviceClass4initEv+0xae>
		;

	USB_SetHandler(&UDD_Handler);
    318a:	4b1b      	ldr	r3, [pc, #108]	; (31f8 <_ZN14USBDeviceClass4initEv+0x12c>)
    318c:	0018      	movs	r0, r3
    318e:	f7fe faa3 	bl	16d8 <USB_SetHandler>

	// Reset USB Device
	usbd.reset();
    3192:	4b1a      	ldr	r3, [pc, #104]	; (31fc <_ZN14USBDeviceClass4initEv+0x130>)
    3194:	0018      	movs	r0, r3
    3196:	f7ff f987 	bl	24a8 <_ZN20USBDevice_SAMD21G18x5resetEv>

	usbd.calibrate();
    319a:	4b18      	ldr	r3, [pc, #96]	; (31fc <_ZN14USBDeviceClass4initEv+0x130>)
    319c:	0018      	movs	r0, r3
    319e:	f7ff f9a7 	bl	24f0 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	usbd.setUSBDeviceMode();
    31a2:	4b16      	ldr	r3, [pc, #88]	; (31fc <_ZN14USBDeviceClass4initEv+0x130>)
    31a4:	0018      	movs	r0, r3
    31a6:	f7fe fd8d 	bl	1cc4 <_ZN20USBDevice_SAMD21G18x16setUSBDeviceModeEv>
	usbd.runInStandby();
    31aa:	4b14      	ldr	r3, [pc, #80]	; (31fc <_ZN14USBDeviceClass4initEv+0x130>)
    31ac:	0018      	movs	r0, r3
    31ae:	f7fe fd97 	bl	1ce0 <_ZN20USBDevice_SAMD21G18x12runInStandbyEv>
	usbd.setFullSpeed();
    31b2:	4b12      	ldr	r3, [pc, #72]	; (31fc <_ZN14USBDeviceClass4initEv+0x130>)
    31b4:	0018      	movs	r0, r3
    31b6:	f7fe fda1 	bl	1cfc <_ZN20USBDevice_SAMD21G18x12setFullSpeedEv>

	// Configure interrupts
	NVIC_SetPriority((IRQn_Type) USB_IRQn, 0UL);
    31ba:	2100      	movs	r1, #0
    31bc:	2007      	movs	r0, #7
    31be:	f7fe fcc3 	bl	1b48 <NVIC_SetPriority>
	NVIC_EnableIRQ((IRQn_Type) USB_IRQn);
    31c2:	2007      	movs	r0, #7
    31c4:	f7fe fcaa 	bl	1b1c <NVIC_EnableIRQ>

	usbd.enable();
    31c8:	4b0c      	ldr	r3, [pc, #48]	; (31fc <_ZN14USBDeviceClass4initEv+0x130>)
    31ca:	0018      	movs	r0, r3
    31cc:	f7fe fd6c 	bl	1ca8 <_ZN20USBDevice_SAMD21G18x6enableEv>

	initialized = true;
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	2201      	movs	r2, #1
    31d4:	701a      	strb	r2, [r3, #0]
}
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	46bd      	mov	sp, r7
    31da:	b002      	add	sp, #8
    31dc:	bd80      	pop	{r7, pc}
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	2000032c 	.word	0x2000032c
    31e4:	2000032d 	.word	0x2000032d
    31e8:	40000400 	.word	0x40000400
    31ec:	41004400 	.word	0x41004400
    31f0:	40000c00 	.word	0x40000c00
    31f4:	00004006 	.word	0x00004006
    31f8:	00002be9 	.word	0x00002be9
    31fc:	20000228 	.word	0x20000228

00003200 <_ZN14USBDeviceClass6attachEv>:

bool USBDeviceClass::attach()
{
    3200:	b580      	push	{r7, lr}
    3202:	b082      	sub	sp, #8
    3204:	af00      	add	r7, sp, #0
    3206:	6078      	str	r0, [r7, #4]
	if (!initialized)
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	781b      	ldrb	r3, [r3, #0]
    320c:	2201      	movs	r2, #1
    320e:	4053      	eors	r3, r2
    3210:	b2db      	uxtb	r3, r3
    3212:	2b00      	cmp	r3, #0
    3214:	d001      	beq.n	321a <_ZN14USBDeviceClass6attachEv+0x1a>
		return false;
    3216:	2300      	movs	r3, #0
    3218:	e00f      	b.n	323a <_ZN14USBDeviceClass6attachEv+0x3a>

	usbd.attach();
    321a:	4b0a      	ldr	r3, [pc, #40]	; (3244 <_ZN14USBDeviceClass6attachEv+0x44>)
    321c:	0018      	movs	r0, r3
    321e:	f7fe fd7b 	bl	1d18 <_ZN20USBDevice_SAMD21G18x6attachEv>
	usbd.enableEndOfResetInterrupt();
    3222:	4b08      	ldr	r3, [pc, #32]	; (3244 <_ZN14USBDeviceClass6attachEv+0x44>)
    3224:	0018      	movs	r0, r3
    3226:	f7fe fd9f 	bl	1d68 <_ZN20USBDevice_SAMD21G18x25enableEndOfResetInterruptEv>
	usbd.enableStartOfFrameInterrupt();
    322a:	4b06      	ldr	r3, [pc, #24]	; (3244 <_ZN14USBDeviceClass6attachEv+0x44>)
    322c:	0018      	movs	r0, r3
    322e:	f7fe fdc3 	bl	1db8 <_ZN20USBDevice_SAMD21G18x27enableStartOfFrameInterruptEv>

	_usbConfiguration = 0;
    3232:	4b05      	ldr	r3, [pc, #20]	; (3248 <_ZN14USBDeviceClass6attachEv+0x48>)
    3234:	2200      	movs	r2, #0
    3236:	601a      	str	r2, [r3, #0]
	return true;
    3238:	2301      	movs	r3, #1
}
    323a:	0018      	movs	r0, r3
    323c:	46bd      	mov	sp, r7
    323e:	b002      	add	sp, #8
    3240:	bd80      	pop	{r7, pc}
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	20000228 	.word	0x20000228
    3248:	20000330 	.word	0x20000330

0000324c <_ZN14USBDeviceClass10setAddressEm>:

void USBDeviceClass::setAddress(uint32_t addr)
{
    324c:	b580      	push	{r7, lr}
    324e:	b082      	sub	sp, #8
    3250:	af00      	add	r7, sp, #0
    3252:	6078      	str	r0, [r7, #4]
    3254:	6039      	str	r1, [r7, #0]
	usbd.epBank1SetByteCount(0, 0);
    3256:	4b1b      	ldr	r3, [pc, #108]	; (32c4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    3258:	2200      	movs	r2, #0
    325a:	2100      	movs	r1, #0
    325c:	0018      	movs	r0, r3
    325e:	f7fe fff5 	bl	224c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
	usbd.epBank1AckTransferComplete(0);
    3262:	4b18      	ldr	r3, [pc, #96]	; (32c4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    3264:	2100      	movs	r1, #0
    3266:	0018      	movs	r0, r3
    3268:	f7fe fea4 	bl	1fb4 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(0);
    326c:	4b15      	ldr	r3, [pc, #84]	; (32c4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    326e:	2100      	movs	r1, #0
    3270:	0018      	movs	r0, r3
    3272:	f7fe ff6f 	bl	2154 <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	// Wait for transfer to complete
	while (!usbd.epBank1IsTransferComplete(0)) {}
    3276:	4b13      	ldr	r3, [pc, #76]	; (32c4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    3278:	2100      	movs	r1, #0
    327a:	0018      	movs	r0, r3
    327c:	f7fe fe42 	bl	1f04 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    3280:	0003      	movs	r3, r0
    3282:	001a      	movs	r2, r3
    3284:	2301      	movs	r3, #1
    3286:	4053      	eors	r3, r2
    3288:	b2db      	uxtb	r3, r3
    328a:	2b00      	cmp	r3, #0
    328c:	d000      	beq.n	3290 <_ZN14USBDeviceClass10setAddressEm+0x44>
    328e:	e7f2      	b.n	3276 <_ZN14USBDeviceClass10setAddressEm+0x2a>

	// Set USB address to addr
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    3290:	4a0d      	ldr	r2, [pc, #52]	; (32c8 <_ZN14USBDeviceClass10setAddressEm+0x7c>)
    3292:	683b      	ldr	r3, [r7, #0]
    3294:	b2db      	uxtb	r3, r3
    3296:	1c19      	adds	r1, r3, #0
    3298:	237f      	movs	r3, #127	; 0x7f
    329a:	400b      	ands	r3, r1
    329c:	b2d9      	uxtb	r1, r3
    329e:	7a93      	ldrb	r3, [r2, #10]
    32a0:	207f      	movs	r0, #127	; 0x7f
    32a2:	4008      	ands	r0, r1
    32a4:	217f      	movs	r1, #127	; 0x7f
    32a6:	438b      	bics	r3, r1
    32a8:	1c19      	adds	r1, r3, #0
    32aa:	1c03      	adds	r3, r0, #0
    32ac:	430b      	orrs	r3, r1
    32ae:	7293      	strb	r3, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    32b0:	4a05      	ldr	r2, [pc, #20]	; (32c8 <_ZN14USBDeviceClass10setAddressEm+0x7c>)
    32b2:	7a93      	ldrb	r3, [r2, #10]
    32b4:	2180      	movs	r1, #128	; 0x80
    32b6:	4249      	negs	r1, r1
    32b8:	430b      	orrs	r3, r1
    32ba:	7293      	strb	r3, [r2, #10]
}
    32bc:	46c0      	nop			; (mov r8, r8)
    32be:	46bd      	mov	sp, r7
    32c0:	b002      	add	sp, #8
    32c2:	bd80      	pop	{r7, pc}
    32c4:	20000228 	.word	0x20000228
    32c8:	41005000 	.word	0x41005000

000032cc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
    32cc:	b590      	push	{r4, r7, lr}
    32ce:	b085      	sub	sp, #20
    32d0:	af00      	add	r7, sp, #0
    32d2:	6078      	str	r0, [r7, #4]
    32d4:	6039      	str	r1, [r7, #0]
	uint8_t i = setup.wIndex;
    32d6:	683b      	ldr	r3, [r7, #0]
    32d8:	889a      	ldrh	r2, [r3, #4]
    32da:	230f      	movs	r3, #15
    32dc:	18fb      	adds	r3, r7, r3
    32de:	701a      	strb	r2, [r3, #0]

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
    32e0:	230f      	movs	r3, #15
    32e2:	18fb      	adds	r3, r7, r3
    32e4:	781b      	ldrb	r3, [r3, #0]
    32e6:	2b00      	cmp	r3, #0
    32e8:	d111      	bne.n	330e <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x42>
	{
		if (CDC_Setup(setup) == false) {
    32ea:	683b      	ldr	r3, [r7, #0]
    32ec:	0018      	movs	r0, r3
    32ee:	f002 febb 	bl	6068 <_Z9CDC_SetupR8USBSetup>
    32f2:	0003      	movs	r3, r0
    32f4:	001a      	movs	r2, r3
    32f6:	2301      	movs	r3, #1
    32f8:	4053      	eors	r3, r2
    32fa:	b2db      	uxtb	r3, r3
    32fc:	2b00      	cmp	r3, #0
    32fe:	d004      	beq.n	330a <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3e>
			sendZlp(0);
    3300:	687b      	ldr	r3, [r7, #4]
    3302:	2100      	movs	r1, #0
    3304:	0018      	movs	r0, r3
    3306:	f000 fc29 	bl	3b5c <_ZN14USBDeviceClass7sendZlpEm>
		}
		return true;
    330a:	2301      	movs	r3, #1
    330c:	e01b      	b.n	3346 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x7a>
	}
	#endif

	#if defined(PLUGGABLE_USB_ENABLED)
	bool ret = PluggableUSB().setup(setup);
    330e:	f003 f873 	bl	63f8 <_Z12PluggableUSBv>
    3312:	0002      	movs	r2, r0
    3314:	230e      	movs	r3, #14
    3316:	18fc      	adds	r4, r7, r3
    3318:	683b      	ldr	r3, [r7, #0]
    331a:	0019      	movs	r1, r3
    331c:	0010      	movs	r0, r2
    331e:	f003 f84b 	bl	63b8 <_ZN13PluggableUSB_5setupER8USBSetup>
    3322:	0003      	movs	r3, r0
    3324:	7023      	strb	r3, [r4, #0]
	if ( ret == false) {
    3326:	230e      	movs	r3, #14
    3328:	18fb      	adds	r3, r7, r3
    332a:	781b      	ldrb	r3, [r3, #0]
    332c:	2201      	movs	r2, #1
    332e:	4053      	eors	r3, r2
    3330:	b2db      	uxtb	r3, r3
    3332:	2b00      	cmp	r3, #0
    3334:	d004      	beq.n	3340 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x74>
		sendZlp(0);
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	2100      	movs	r1, #0
    333a:	0018      	movs	r0, r3
    333c:	f000 fc0e 	bl	3b5c <_ZN14USBDeviceClass7sendZlpEm>
	}
	return ret;
    3340:	230e      	movs	r3, #14
    3342:	18fb      	adds	r3, r7, r3
    3344:	781b      	ldrb	r3, [r3, #0]
	#endif

	return false;
}
    3346:	0018      	movs	r0, r3
    3348:	46bd      	mov	sp, r7
    334a:	b005      	add	sp, #20
    334c:	bd90      	pop	{r4, r7, pc}
    334e:	46c0      	nop			; (mov r8, r8)

00003350 <_ZN14USBDeviceClass13initEndpointsEv>:
	0,
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
    3350:	b580      	push	{r7, lr}
    3352:	b084      	sub	sp, #16
    3354:	af00      	add	r7, sp, #0
    3356:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    3358:	230f      	movs	r3, #15
    335a:	18fb      	adds	r3, r7, r3
    335c:	2201      	movs	r2, #1
    335e:	701a      	strb	r2, [r3, #0]
    3360:	230f      	movs	r3, #15
    3362:	18fb      	adds	r3, r7, r3
    3364:	781b      	ldrb	r3, [r3, #0]
    3366:	2b28      	cmp	r3, #40	; 0x28
    3368:	d21c      	bcs.n	33a4 <_ZN14USBDeviceClass13initEndpointsEv+0x54>
    336a:	230f      	movs	r3, #15
    336c:	18fb      	adds	r3, r7, r3
    336e:	781a      	ldrb	r2, [r3, #0]
    3370:	4b0e      	ldr	r3, [pc, #56]	; (33ac <_ZN14USBDeviceClass13initEndpointsEv+0x5c>)
    3372:	0092      	lsls	r2, r2, #2
    3374:	58d3      	ldr	r3, [r2, r3]
    3376:	2b00      	cmp	r3, #0
    3378:	d014      	beq.n	33a4 <_ZN14USBDeviceClass13initEndpointsEv+0x54>
		initEP(i, EndPoints[i]);
    337a:	230f      	movs	r3, #15
    337c:	18fb      	adds	r3, r7, r3
    337e:	7819      	ldrb	r1, [r3, #0]
    3380:	230f      	movs	r3, #15
    3382:	18fb      	adds	r3, r7, r3
    3384:	781a      	ldrb	r2, [r3, #0]
    3386:	4b09      	ldr	r3, [pc, #36]	; (33ac <_ZN14USBDeviceClass13initEndpointsEv+0x5c>)
    3388:	0092      	lsls	r2, r2, #2
    338a:	58d2      	ldr	r2, [r2, r3]
    338c:	687b      	ldr	r3, [r7, #4]
    338e:	0018      	movs	r0, r3
    3390:	f000 f80e 	bl	33b0 <_ZN14USBDeviceClass6initEPEmm>
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    3394:	230f      	movs	r3, #15
    3396:	18fb      	adds	r3, r7, r3
    3398:	781a      	ldrb	r2, [r3, #0]
    339a:	230f      	movs	r3, #15
    339c:	18fb      	adds	r3, r7, r3
    339e:	3201      	adds	r2, #1
    33a0:	701a      	strb	r2, [r3, #0]
    33a2:	e7dd      	b.n	3360 <_ZN14USBDeviceClass13initEndpointsEv+0x10>
		initEP(i, EndPoints[i]);
	}
}
    33a4:	46c0      	nop			; (mov r8, r8)
    33a6:	46bd      	mov	sp, r7
    33a8:	b004      	add	sp, #16
    33aa:	bd80      	pop	{r7, pc}
    33ac:	2000000c 	.word	0x2000000c

000033b0 <_ZN14USBDeviceClass6initEPEmm>:

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
{
    33b0:	b590      	push	{r4, r7, lr}
    33b2:	b085      	sub	sp, #20
    33b4:	af00      	add	r7, sp, #0
    33b6:	60f8      	str	r0, [r7, #12]
    33b8:	60b9      	str	r1, [r7, #8]
    33ba:	607a      	str	r2, [r7, #4]
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    33bc:	687b      	ldr	r3, [r7, #4]
    33be:	2b83      	cmp	r3, #131	; 0x83
    33c0:	d118      	bne.n	33f4 <_ZN14USBDeviceClass6initEPEmm+0x44>
	{
		usbd.epBank1SetSize(ep, 64);
    33c2:	68bb      	ldr	r3, [r7, #8]
    33c4:	b2d9      	uxtb	r1, r3
    33c6:	4b4b      	ldr	r3, [pc, #300]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    33c8:	2240      	movs	r2, #64	; 0x40
    33ca:	0018      	movs	r0, r3
    33cc:	f7ff f802 	bl	23d4 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    33d0:	68bb      	ldr	r3, [r7, #8]
    33d2:	b2d9      	uxtb	r1, r3
    33d4:	68bb      	ldr	r3, [r7, #8]
    33d6:	019a      	lsls	r2, r3, #6
    33d8:	4b47      	ldr	r3, [pc, #284]	; (34f8 <_ZN14USBDeviceClass6initEPEmm+0x148>)
    33da:	18d2      	adds	r2, r2, r3
    33dc:	4b45      	ldr	r3, [pc, #276]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    33de:	0018      	movs	r0, r3
    33e0:	f7fe ffb6 	bl	2350 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
    33e4:	68bb      	ldr	r3, [r7, #8]
    33e6:	b2d9      	uxtb	r1, r3
    33e8:	4b42      	ldr	r3, [pc, #264]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    33ea:	2204      	movs	r2, #4
    33ec:	0018      	movs	r0, r3
    33ee:	f7fe fd15 	bl	1e1c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    33f2:	e07b      	b.n	34ec <_ZN14USBDeviceClass6initEPEmm+0x13c>
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	2b02      	cmp	r3, #2
    33f8:	d110      	bne.n	341c <_ZN14USBDeviceClass6initEPEmm+0x6c>
	{
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    33fa:	2038      	movs	r0, #56	; 0x38
    33fc:	f002 f8f2 	bl	55e4 <_Znwj>
    3400:	0003      	movs	r3, r0
    3402:	001c      	movs	r4, r3
    3404:	2380      	movs	r3, #128	; 0x80
    3406:	005b      	lsls	r3, r3, #1
    3408:	68ba      	ldr	r2, [r7, #8]
    340a:	493a      	ldr	r1, [pc, #232]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    340c:	0020      	movs	r0, r4
    340e:	f7ff f91d 	bl	264c <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm>
    3412:	4b3a      	ldr	r3, [pc, #232]	; (34fc <_ZN14USBDeviceClass6initEPEmm+0x14c>)
    3414:	68ba      	ldr	r2, [r7, #8]
    3416:	0092      	lsls	r2, r2, #2
    3418:	50d4      	str	r4, [r2, r3]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    341a:	e067      	b.n	34ec <_ZN14USBDeviceClass6initEPEmm+0x13c>
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
	{
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	2b82      	cmp	r3, #130	; 0x82
    3420:	d11f      	bne.n	3462 <_ZN14USBDeviceClass6initEPEmm+0xb2>
	{
		usbd.epBank1SetSize(ep, 64);
    3422:	68bb      	ldr	r3, [r7, #8]
    3424:	b2d9      	uxtb	r1, r3
    3426:	4b33      	ldr	r3, [pc, #204]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    3428:	2240      	movs	r2, #64	; 0x40
    342a:	0018      	movs	r0, r3
    342c:	f7fe ffd2 	bl	23d4 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    3430:	68bb      	ldr	r3, [r7, #8]
    3432:	b2d9      	uxtb	r1, r3
    3434:	68bb      	ldr	r3, [r7, #8]
    3436:	019a      	lsls	r2, r3, #6
    3438:	4b2f      	ldr	r3, [pc, #188]	; (34f8 <_ZN14USBDeviceClass6initEPEmm+0x148>)
    343a:	18d2      	adds	r2, r2, r3
    343c:	4b2d      	ldr	r3, [pc, #180]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    343e:	0018      	movs	r0, r3
    3440:	f7fe ff86 	bl	2350 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>

		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(ep);
    3444:	68bb      	ldr	r3, [r7, #8]
    3446:	b2da      	uxtb	r2, r3
    3448:	4b2a      	ldr	r3, [pc, #168]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    344a:	0011      	movs	r1, r2
    344c:	0018      	movs	r0, r3
    344e:	f7fe feaf 	bl	21b0 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>

		usbd.epBank1SetType(ep, 3); // BULK IN
    3452:	68bb      	ldr	r3, [r7, #8]
    3454:	b2d9      	uxtb	r1, r3
    3456:	4b27      	ldr	r3, [pc, #156]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    3458:	2203      	movs	r2, #3
    345a:	0018      	movs	r0, r3
    345c:	f7fe fcde 	bl	1e1c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    3460:	e044      	b.n	34ec <_ZN14USBDeviceClass6initEPEmm+0x13c>
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(ep);

		usbd.epBank1SetType(ep, 3); // BULK IN
	}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	2b00      	cmp	r3, #0
    3466:	d141      	bne.n	34ec <_ZN14USBDeviceClass6initEPEmm+0x13c>
	{
		// Setup Control OUT
		usbd.epBank0SetSize(ep, 64);
    3468:	68bb      	ldr	r3, [r7, #8]
    346a:	b2d9      	uxtb	r1, r3
    346c:	4b21      	ldr	r3, [pc, #132]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    346e:	2240      	movs	r2, #64	; 0x40
    3470:	0018      	movs	r0, r3
    3472:	f7fe ff83 	bl	237c <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    3476:	68bb      	ldr	r3, [r7, #8]
    3478:	b2d9      	uxtb	r1, r3
    347a:	68bb      	ldr	r3, [r7, #8]
    347c:	019a      	lsls	r2, r3, #6
    347e:	4b20      	ldr	r3, [pc, #128]	; (3500 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    3480:	18d2      	adds	r2, r2, r3
    3482:	4b1c      	ldr	r3, [pc, #112]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    3484:	0018      	movs	r0, r3
    3486:	f7fe ff4d 	bl	2324 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
		usbd.epBank0SetType(ep, 1); // CONTROL OUT / SETUP
    348a:	68bb      	ldr	r3, [r7, #8]
    348c:	b2d9      	uxtb	r1, r3
    348e:	4b19      	ldr	r3, [pc, #100]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    3490:	2201      	movs	r2, #1
    3492:	0018      	movs	r0, r3
    3494:	f7fe fc9e 	bl	1dd4 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>

		// Setup Control IN
		usbd.epBank1SetSize(ep, 64);
    3498:	68bb      	ldr	r3, [r7, #8]
    349a:	b2d9      	uxtb	r1, r3
    349c:	4b15      	ldr	r3, [pc, #84]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    349e:	2240      	movs	r2, #64	; 0x40
    34a0:	0018      	movs	r0, r3
    34a2:	f7fe ff97 	bl	23d4 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[0]);
    34a6:	68bb      	ldr	r3, [r7, #8]
    34a8:	b2d9      	uxtb	r1, r3
    34aa:	4a13      	ldr	r2, [pc, #76]	; (34f8 <_ZN14USBDeviceClass6initEPEmm+0x148>)
    34ac:	4b11      	ldr	r3, [pc, #68]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    34ae:	0018      	movs	r0, r3
    34b0:	f7fe ff4e 	bl	2350 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetType(ep, 1); // CONTROL IN
    34b4:	68bb      	ldr	r3, [r7, #8]
    34b6:	b2d9      	uxtb	r1, r3
    34b8:	4b0e      	ldr	r3, [pc, #56]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    34ba:	2201      	movs	r2, #1
    34bc:	0018      	movs	r0, r3
    34be:	f7fe fcad 	bl	1e1c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>

		// Release OUT EP
		usbd.epBank0SetMultiPacketSize(ep, 64);
    34c2:	68bb      	ldr	r3, [r7, #8]
    34c4:	b2d9      	uxtb	r1, r3
    34c6:	4b0b      	ldr	r3, [pc, #44]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    34c8:	2240      	movs	r2, #64	; 0x40
    34ca:	0018      	movs	r0, r3
    34cc:	f7fe fee0 	bl	2290 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
		usbd.epBank0SetByteCount(ep, 0);
    34d0:	68bb      	ldr	r3, [r7, #8]
    34d2:	b2d9      	uxtb	r1, r3
    34d4:	4b07      	ldr	r3, [pc, #28]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    34d6:	2200      	movs	r2, #0
    34d8:	0018      	movs	r0, r3
    34da:	f7fe fe95 	bl	2208 <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
    34de:	68bb      	ldr	r3, [r7, #8]
    34e0:	b2da      	uxtb	r2, r3
    34e2:	4b04      	ldr	r3, [pc, #16]	; (34f4 <_ZN14USBDeviceClass6initEPEmm+0x144>)
    34e4:	0011      	movs	r1, r2
    34e6:	0018      	movs	r0, r3
    34e8:	f7fe fe1e 	bl	2128 <_ZN20USBDevice_SAMD21G18x15epBank0SetReadyEh>
	}
}
    34ec:	46c0      	nop			; (mov r8, r8)
    34ee:	46bd      	mov	sp, r7
    34f0:	b005      	add	sp, #20
    34f2:	bd90      	pop	{r4, r7, pc}
    34f4:	20000228 	.word	0x20000228
    34f8:	200004f8 	.word	0x200004f8
    34fc:	200006b8 	.word	0x200006b8
    3500:	20000338 	.word	0x20000338

00003504 <_ZN14USBDeviceClass5flushEm>:

void USBDeviceClass::flush(uint32_t ep)
{
    3504:	b580      	push	{r7, lr}
    3506:	b082      	sub	sp, #8
    3508:	af00      	add	r7, sp, #0
    350a:	6078      	str	r0, [r7, #4]
    350c:	6039      	str	r1, [r7, #0]
	if (available(ep)) {
    350e:	683a      	ldr	r2, [r7, #0]
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	0011      	movs	r1, r2
    3514:	0018      	movs	r0, r3
    3516:	f000 f867 	bl	35e8 <_ZN14USBDeviceClass9availableEm>
    351a:	0003      	movs	r3, r0
    351c:	1e5a      	subs	r2, r3, #1
    351e:	4193      	sbcs	r3, r2
    3520:	b2db      	uxtb	r3, r3
    3522:	2b00      	cmp	r3, #0
    3524:	d00d      	beq.n	3542 <_ZN14USBDeviceClass5flushEm+0x3e>
		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    3526:	683b      	ldr	r3, [r7, #0]
    3528:	b2da      	uxtb	r2, r3
    352a:	4b08      	ldr	r3, [pc, #32]	; (354c <_ZN14USBDeviceClass5flushEm+0x48>)
    352c:	0011      	movs	r1, r2
    352e:	0018      	movs	r0, r3
    3530:	f7fe fe10 	bl	2154 <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    3534:	683b      	ldr	r3, [r7, #0]
    3536:	b2da      	uxtb	r2, r3
    3538:	4b04      	ldr	r3, [pc, #16]	; (354c <_ZN14USBDeviceClass5flushEm+0x48>)
    353a:	0011      	movs	r1, r2
    353c:	0018      	movs	r0, r3
    353e:	f7fe fd39 	bl	1fb4 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
}
    3542:	46c0      	nop			; (mov r8, r8)
    3544:	46bd      	mov	sp, r7
    3546:	b002      	add	sp, #8
    3548:	bd80      	pop	{r7, pc}
    354a:	46c0      	nop			; (mov r8, r8)
    354c:	20000228 	.word	0x20000228

00003550 <_ZN14USBDeviceClass5stallEm>:

void USBDeviceClass::stall(uint32_t ep)
{
    3550:	b580      	push	{r7, lr}
    3552:	b082      	sub	sp, #8
    3554:	af00      	add	r7, sp, #0
    3556:	6078      	str	r0, [r7, #4]
    3558:	6039      	str	r1, [r7, #0]
	// TODO: test
	// TODO: use .bit. notation

	// Stall endpoint
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    355a:	4a06      	ldr	r2, [pc, #24]	; (3574 <_ZN14USBDeviceClass5stallEm+0x24>)
    355c:	683b      	ldr	r3, [r7, #0]
    355e:	3308      	adds	r3, #8
    3560:	015b      	lsls	r3, r3, #5
    3562:	18d3      	adds	r3, r2, r3
    3564:	3305      	adds	r3, #5
    3566:	2220      	movs	r2, #32
    3568:	701a      	strb	r2, [r3, #0]
}
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	46bd      	mov	sp, r7
    356e:	b002      	add	sp, #8
    3570:	bd80      	pop	{r7, pc}
    3572:	46c0      	nop			; (mov r8, r8)
    3574:	41005000 	.word	0x41005000

00003578 <_ZN14USBDeviceClass11recvControlEPvm>:
	return f != USB->DEVICE.FNUM.bit.FNUM;
}


uint32_t USBDeviceClass::recvControl(void *_data, uint32_t len)
{
    3578:	b580      	push	{r7, lr}
    357a:	b088      	sub	sp, #32
    357c:	af00      	add	r7, sp, #0
    357e:	60f8      	str	r0, [r7, #12]
    3580:	60b9      	str	r1, [r7, #8]
    3582:	607a      	str	r2, [r7, #4]
	uint8_t *data = reinterpret_cast<uint8_t *>(_data);
    3584:	68bb      	ldr	r3, [r7, #8]
    3586:	617b      	str	r3, [r7, #20]

	// The RAM Buffer is empty: we can receive data
	usbd.epBank0ResetReady(0);
    3588:	4b15      	ldr	r3, [pc, #84]	; (35e0 <_ZN14USBDeviceClass11recvControlEPvm+0x68>)
    358a:	2100      	movs	r1, #0
    358c:	0018      	movs	r0, r3
    358e:	f7fe fdf9 	bl	2184 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

	//usbd.epBank0AckSetupReceived(0);
	uint32_t read = armRecvCtrlOUT(0);
    3592:	68fb      	ldr	r3, [r7, #12]
    3594:	2100      	movs	r1, #0
    3596:	0018      	movs	r0, r3
    3598:	f000 f904 	bl	37a4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    359c:	0003      	movs	r3, r0
    359e:	61fb      	str	r3, [r7, #28]
	if (read > len)
    35a0:	69fa      	ldr	r2, [r7, #28]
    35a2:	687b      	ldr	r3, [r7, #4]
    35a4:	429a      	cmp	r2, r3
    35a6:	d901      	bls.n	35ac <_ZN14USBDeviceClass11recvControlEPvm+0x34>
		read = len;
    35a8:	687b      	ldr	r3, [r7, #4]
    35aa:	61fb      	str	r3, [r7, #28]
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
    35ac:	4b0d      	ldr	r3, [pc, #52]	; (35e4 <_ZN14USBDeviceClass11recvControlEPvm+0x6c>)
    35ae:	613b      	str	r3, [r7, #16]
	for (uint32_t i=0; i<len; i++) {
    35b0:	2300      	movs	r3, #0
    35b2:	61bb      	str	r3, [r7, #24]
    35b4:	69ba      	ldr	r2, [r7, #24]
    35b6:	687b      	ldr	r3, [r7, #4]
    35b8:	429a      	cmp	r2, r3
    35ba:	d20b      	bcs.n	35d4 <_ZN14USBDeviceClass11recvControlEPvm+0x5c>
		data[i] = buffer[i];
    35bc:	697a      	ldr	r2, [r7, #20]
    35be:	69bb      	ldr	r3, [r7, #24]
    35c0:	18d3      	adds	r3, r2, r3
    35c2:	6939      	ldr	r1, [r7, #16]
    35c4:	69ba      	ldr	r2, [r7, #24]
    35c6:	188a      	adds	r2, r1, r2
    35c8:	7812      	ldrb	r2, [r2, #0]
    35ca:	701a      	strb	r2, [r3, #0]
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    35cc:	69bb      	ldr	r3, [r7, #24]
    35ce:	3301      	adds	r3, #1
    35d0:	61bb      	str	r3, [r7, #24]
    35d2:	e7ef      	b.n	35b4 <_ZN14USBDeviceClass11recvControlEPvm+0x3c>
		data[i] = buffer[i];
	}

	return read;
    35d4:	69fb      	ldr	r3, [r7, #28]
}
    35d6:	0018      	movs	r0, r3
    35d8:	46bd      	mov	sp, r7
    35da:	b008      	add	sp, #32
    35dc:	bd80      	pop	{r7, pc}
    35de:	46c0      	nop			; (mov r8, r8)
    35e0:	20000228 	.word	0x20000228
    35e4:	20000338 	.word	0x20000338

000035e8 <_ZN14USBDeviceClass9availableEm>:

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
    35e8:	b580      	push	{r7, lr}
    35ea:	b082      	sub	sp, #8
    35ec:	af00      	add	r7, sp, #0
    35ee:	6078      	str	r0, [r7, #4]
    35f0:	6039      	str	r1, [r7, #0]
	if (epHandlers[ep]) {
    35f2:	4b10      	ldr	r3, [pc, #64]	; (3634 <_ZN14USBDeviceClass9availableEm+0x4c>)
    35f4:	683a      	ldr	r2, [r7, #0]
    35f6:	0092      	lsls	r2, r2, #2
    35f8:	58d3      	ldr	r3, [r2, r3]
    35fa:	2b00      	cmp	r3, #0
    35fc:	d00e      	beq.n	361c <_ZN14USBDeviceClass9availableEm+0x34>
		return epHandlers[ep]->available();
    35fe:	4b0d      	ldr	r3, [pc, #52]	; (3634 <_ZN14USBDeviceClass9availableEm+0x4c>)
    3600:	683a      	ldr	r2, [r7, #0]
    3602:	0092      	lsls	r2, r2, #2
    3604:	58d3      	ldr	r3, [r2, r3]
    3606:	681b      	ldr	r3, [r3, #0]
    3608:	3308      	adds	r3, #8
    360a:	681b      	ldr	r3, [r3, #0]
    360c:	4a09      	ldr	r2, [pc, #36]	; (3634 <_ZN14USBDeviceClass9availableEm+0x4c>)
    360e:	6839      	ldr	r1, [r7, #0]
    3610:	0089      	lsls	r1, r1, #2
    3612:	588a      	ldr	r2, [r1, r2]
    3614:	0010      	movs	r0, r2
    3616:	4798      	blx	r3
    3618:	0003      	movs	r3, r0
    361a:	e007      	b.n	362c <_ZN14USBDeviceClass9availableEm+0x44>
	} else {
		return usbd.epBank0ByteCount(ep);
    361c:	683b      	ldr	r3, [r7, #0]
    361e:	b2da      	uxtb	r2, r3
    3620:	4b05      	ldr	r3, [pc, #20]	; (3638 <_ZN14USBDeviceClass9availableEm+0x50>)
    3622:	0011      	movs	r1, r2
    3624:	0018      	movs	r0, r3
    3626:	f7fe fddb 	bl	21e0 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    362a:	0003      	movs	r3, r0
	}
}
    362c:	0018      	movs	r0, r3
    362e:	46bd      	mov	sp, r7
    3630:	b002      	add	sp, #8
    3632:	bd80      	pop	{r7, pc}
    3634:	200006b8 	.word	0x200006b8
    3638:	20000228 	.word	0x20000228

0000363c <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    363c:	b580      	push	{r7, lr}
    363e:	b084      	sub	sp, #16
    3640:	af00      	add	r7, sp, #0
    3642:	60f8      	str	r0, [r7, #12]
    3644:	60b9      	str	r1, [r7, #8]
    3646:	607a      	str	r2, [r7, #4]
    3648:	603b      	str	r3, [r7, #0]
	if (!_usbConfiguration)
    364a:	4b42      	ldr	r3, [pc, #264]	; (3754 <_ZN14USBDeviceClass4recvEmPvm+0x118>)
    364c:	681b      	ldr	r3, [r3, #0]
    364e:	425a      	negs	r2, r3
    3650:	4153      	adcs	r3, r2
    3652:	b2db      	uxtb	r3, r3
    3654:	2b00      	cmp	r3, #0
    3656:	d002      	beq.n	365e <_ZN14USBDeviceClass4recvEmPvm+0x22>
		return -1;
    3658:	2301      	movs	r3, #1
    365a:	425b      	negs	r3, r3
    365c:	e076      	b.n	374c <_ZN14USBDeviceClass4recvEmPvm+0x110>

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    365e:	4b3e      	ldr	r3, [pc, #248]	; (3758 <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
    3660:	781b      	ldrb	r3, [r3, #0]
    3662:	b2db      	uxtb	r3, r3
    3664:	425a      	negs	r2, r3
    3666:	4153      	adcs	r3, r2
    3668:	b2db      	uxtb	r3, r3
    366a:	2b00      	cmp	r3, #0
    366c:	d003      	beq.n	3676 <_ZN14USBDeviceClass4recvEmPvm+0x3a>
		digitalWrite(PIN_LED_RXL, LOW);
    366e:	2100      	movs	r1, #0
    3670:	2019      	movs	r0, #25
    3672:	f000 ff81 	bl	4578 <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    3676:	4b38      	ldr	r3, [pc, #224]	; (3758 <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
    3678:	2264      	movs	r2, #100	; 0x64
    367a:	701a      	strb	r2, [r3, #0]
#endif

	if (epHandlers[ep]) {
    367c:	4b37      	ldr	r3, [pc, #220]	; (375c <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    367e:	68ba      	ldr	r2, [r7, #8]
    3680:	0092      	lsls	r2, r2, #2
    3682:	58d3      	ldr	r3, [r2, r3]
    3684:	2b00      	cmp	r3, #0
    3686:	d00f      	beq.n	36a8 <_ZN14USBDeviceClass4recvEmPvm+0x6c>
		return epHandlers[ep]->recv(_data, len);
    3688:	4b34      	ldr	r3, [pc, #208]	; (375c <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    368a:	68ba      	ldr	r2, [r7, #8]
    368c:	0092      	lsls	r2, r2, #2
    368e:	58d3      	ldr	r3, [r2, r3]
    3690:	681b      	ldr	r3, [r3, #0]
    3692:	3304      	adds	r3, #4
    3694:	681b      	ldr	r3, [r3, #0]
    3696:	4a31      	ldr	r2, [pc, #196]	; (375c <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    3698:	68b9      	ldr	r1, [r7, #8]
    369a:	0089      	lsls	r1, r1, #2
    369c:	5888      	ldr	r0, [r1, r2]
    369e:	683a      	ldr	r2, [r7, #0]
    36a0:	6879      	ldr	r1, [r7, #4]
    36a2:	4798      	blx	r3
    36a4:	0003      	movs	r3, r0
    36a6:	e051      	b.n	374c <_ZN14USBDeviceClass4recvEmPvm+0x110>
	}

	if (available(ep) < len)
    36a8:	68ba      	ldr	r2, [r7, #8]
    36aa:	68fb      	ldr	r3, [r7, #12]
    36ac:	0011      	movs	r1, r2
    36ae:	0018      	movs	r0, r3
    36b0:	f7ff ff9a 	bl	35e8 <_ZN14USBDeviceClass9availableEm>
    36b4:	0002      	movs	r2, r0
    36b6:	683b      	ldr	r3, [r7, #0]
    36b8:	429a      	cmp	r2, r3
    36ba:	419b      	sbcs	r3, r3
    36bc:	425b      	negs	r3, r3
    36be:	b2db      	uxtb	r3, r3
    36c0:	2b00      	cmp	r3, #0
    36c2:	d007      	beq.n	36d4 <_ZN14USBDeviceClass4recvEmPvm+0x98>
		len = available(ep);
    36c4:	68ba      	ldr	r2, [r7, #8]
    36c6:	68fb      	ldr	r3, [r7, #12]
    36c8:	0011      	movs	r1, r2
    36ca:	0018      	movs	r0, r3
    36cc:	f7ff ff8c 	bl	35e8 <_ZN14USBDeviceClass9availableEm>
    36d0:	0003      	movs	r3, r0
    36d2:	603b      	str	r3, [r7, #0]

	armRecv(ep);
    36d4:	68ba      	ldr	r2, [r7, #8]
    36d6:	68fb      	ldr	r3, [r7, #12]
    36d8:	0011      	movs	r1, r2
    36da:	0018      	movs	r0, r3
    36dc:	f000 f8b6 	bl	384c <_ZN14USBDeviceClass7armRecvEm>

	usbd.epBank0DisableTransferComplete(ep);
    36e0:	68bb      	ldr	r3, [r7, #8]
    36e2:	b2da      	uxtb	r2, r3
    36e4:	4b1e      	ldr	r3, [pc, #120]	; (3760 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    36e6:	0011      	movs	r1, r2
    36e8:	0018      	movs	r0, r3
    36ea:	f7fe fcd9 	bl	20a0 <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>

	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    36ee:	68bb      	ldr	r3, [r7, #8]
    36f0:	019a      	lsls	r2, r3, #6
    36f2:	4b1c      	ldr	r3, [pc, #112]	; (3764 <_ZN14USBDeviceClass4recvEmPvm+0x128>)
    36f4:	18d1      	adds	r1, r2, r3
    36f6:	683a      	ldr	r2, [r7, #0]
    36f8:	687b      	ldr	r3, [r7, #4]
    36fa:	0018      	movs	r0, r3
    36fc:	f003 fe72 	bl	73e4 <memcpy>

	// release empty buffer
	if (len && !available(ep)) {
    3700:	683b      	ldr	r3, [r7, #0]
    3702:	2b00      	cmp	r3, #0
    3704:	d009      	beq.n	371a <_ZN14USBDeviceClass4recvEmPvm+0xde>
    3706:	68ba      	ldr	r2, [r7, #8]
    3708:	68fb      	ldr	r3, [r7, #12]
    370a:	0011      	movs	r1, r2
    370c:	0018      	movs	r0, r3
    370e:	f7ff ff6b 	bl	35e8 <_ZN14USBDeviceClass9availableEm>
    3712:	1e03      	subs	r3, r0, #0
    3714:	d101      	bne.n	371a <_ZN14USBDeviceClass4recvEmPvm+0xde>
    3716:	2301      	movs	r3, #1
    3718:	e000      	b.n	371c <_ZN14USBDeviceClass4recvEmPvm+0xe0>
    371a:	2300      	movs	r3, #0
    371c:	2b00      	cmp	r3, #0
    371e:	d014      	beq.n	374a <_ZN14USBDeviceClass4recvEmPvm+0x10e>
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(ep);
    3720:	68bb      	ldr	r3, [r7, #8]
    3722:	b2da      	uxtb	r2, r3
    3724:	4b0e      	ldr	r3, [pc, #56]	; (3760 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    3726:	0011      	movs	r1, r2
    3728:	0018      	movs	r0, r3
    372a:	f7fe fd2b 	bl	2184 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		// Clear Transfer complete 0 flag
		usbd.epBank0AckTransferComplete(ep);
    372e:	68bb      	ldr	r3, [r7, #8]
    3730:	b2da      	uxtb	r2, r3
    3732:	4b0b      	ldr	r3, [pc, #44]	; (3760 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    3734:	0011      	movs	r1, r2
    3736:	0018      	movs	r0, r3
    3738:	f7fe fc26 	bl	1f88 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>

		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
    373c:	68bb      	ldr	r3, [r7, #8]
    373e:	b2da      	uxtb	r2, r3
    3740:	4b07      	ldr	r3, [pc, #28]	; (3760 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    3742:	0011      	movs	r1, r2
    3744:	0018      	movs	r0, r3
    3746:	f7fe fc63 	bl	2010 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
	}

	return len;
    374a:	683b      	ldr	r3, [r7, #0]
}
    374c:	0018      	movs	r0, r3
    374e:	46bd      	mov	sp, r7
    3750:	b004      	add	sp, #16
    3752:	bd80      	pop	{r7, pc}
    3754:	20000330 	.word	0x20000330
    3758:	2000032d 	.word	0x2000032d
    375c:	200006b8 	.word	0x200006b8
    3760:	20000228 	.word	0x20000228
    3764:	20000338 	.word	0x20000338

00003768 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    3768:	b580      	push	{r7, lr}
    376a:	b084      	sub	sp, #16
    376c:	af00      	add	r7, sp, #0
    376e:	6078      	str	r0, [r7, #4]
    3770:	6039      	str	r1, [r7, #0]
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    3772:	230f      	movs	r3, #15
    3774:	18fa      	adds	r2, r7, r3
    3776:	6839      	ldr	r1, [r7, #0]
    3778:	6878      	ldr	r0, [r7, #4]
    377a:	2301      	movs	r3, #1
    377c:	f7ff ff5e 	bl	363c <_ZN14USBDeviceClass4recvEmPvm>
    3780:	0003      	movs	r3, r0
    3782:	3b01      	subs	r3, #1
    3784:	1e5a      	subs	r2, r3, #1
    3786:	4193      	sbcs	r3, r2
    3788:	b2db      	uxtb	r3, r3
    378a:	2b00      	cmp	r3, #0
    378c:	d002      	beq.n	3794 <_ZN14USBDeviceClass4recvEm+0x2c>
		return -1;
    378e:	2301      	movs	r3, #1
    3790:	425b      	negs	r3, r3
    3792:	e002      	b.n	379a <_ZN14USBDeviceClass4recvEm+0x32>
	} else {
		return c;
    3794:	230f      	movs	r3, #15
    3796:	18fb      	adds	r3, r7, r3
    3798:	781b      	ldrb	r3, [r3, #0]
	}
}
    379a:	0018      	movs	r0, r3
    379c:	46bd      	mov	sp, r7
    379e:	b004      	add	sp, #16
    37a0:	bd80      	pop	{r7, pc}
    37a2:	46c0      	nop			; (mov r8, r8)

000037a4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    37a4:	b580      	push	{r7, lr}
    37a6:	b082      	sub	sp, #8
    37a8:	af00      	add	r7, sp, #0
    37aa:	6078      	str	r0, [r7, #4]
    37ac:	6039      	str	r1, [r7, #0]
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    37ae:	683b      	ldr	r3, [r7, #0]
    37b0:	b2d9      	uxtb	r1, r3
    37b2:	683b      	ldr	r3, [r7, #0]
    37b4:	019a      	lsls	r2, r3, #6
    37b6:	4b23      	ldr	r3, [pc, #140]	; (3844 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa0>)
    37b8:	18d2      	adds	r2, r2, r3
    37ba:	4b23      	ldr	r3, [pc, #140]	; (3848 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    37bc:	0018      	movs	r0, r3
    37be:	f7fe fdb1 	bl	2324 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
	usbd.epBank0SetMultiPacketSize(ep, 8);
    37c2:	683b      	ldr	r3, [r7, #0]
    37c4:	b2d9      	uxtb	r1, r3
    37c6:	4b20      	ldr	r3, [pc, #128]	; (3848 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    37c8:	2208      	movs	r2, #8
    37ca:	0018      	movs	r0, r3
    37cc:	f7fe fd60 	bl	2290 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
	usbd.epBank0SetByteCount(ep, 0);
    37d0:	683b      	ldr	r3, [r7, #0]
    37d2:	b2d9      	uxtb	r1, r3
    37d4:	4b1c      	ldr	r3, [pc, #112]	; (3848 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    37d6:	2200      	movs	r2, #0
    37d8:	0018      	movs	r0, r3
    37da:	f7fe fd15 	bl	2208 <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>

	usbd.epBank0ResetReady(ep);
    37de:	683b      	ldr	r3, [r7, #0]
    37e0:	b2da      	uxtb	r2, r3
    37e2:	4b19      	ldr	r3, [pc, #100]	; (3848 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    37e4:	0011      	movs	r1, r2
    37e6:	0018      	movs	r0, r3
    37e8:	f7fe fccc 	bl	2184 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    37ec:	683b      	ldr	r3, [r7, #0]
    37ee:	b2da      	uxtb	r2, r3
    37f0:	4b15      	ldr	r3, [pc, #84]	; (3848 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    37f2:	0011      	movs	r1, r2
    37f4:	0018      	movs	r0, r3
    37f6:	f7fe fc6b 	bl	20d0 <_ZN20USBDevice_SAMD21G18x14epBank0IsReadyEh>
    37fa:	0003      	movs	r3, r0
    37fc:	001a      	movs	r2, r3
    37fe:	2301      	movs	r3, #1
    3800:	4053      	eors	r3, r2
    3802:	b2db      	uxtb	r3, r3
    3804:	2b00      	cmp	r3, #0
    3806:	d000      	beq.n	380a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x66>
    3808:	e7f0      	b.n	37ec <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x48>
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    380a:	683b      	ldr	r3, [r7, #0]
    380c:	b2da      	uxtb	r2, r3
    380e:	4b0e      	ldr	r3, [pc, #56]	; (3848 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    3810:	0011      	movs	r1, r2
    3812:	0018      	movs	r0, r3
    3814:	f7fe fb60 	bl	1ed8 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    3818:	0003      	movs	r3, r0
    381a:	001a      	movs	r2, r3
    381c:	2301      	movs	r3, #1
    381e:	4053      	eors	r3, r2
    3820:	b2db      	uxtb	r3, r3
    3822:	2b00      	cmp	r3, #0
    3824:	d000      	beq.n	3828 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x84>
    3826:	e7f0      	b.n	380a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x66>
	return usbd.epBank0ByteCount(ep);
    3828:	683b      	ldr	r3, [r7, #0]
    382a:	b2da      	uxtb	r2, r3
    382c:	4b06      	ldr	r3, [pc, #24]	; (3848 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    382e:	0011      	movs	r1, r2
    3830:	0018      	movs	r0, r3
    3832:	f7fe fcd5 	bl	21e0 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    3836:	0003      	movs	r3, r0
    3838:	b2db      	uxtb	r3, r3
}
    383a:	0018      	movs	r0, r3
    383c:	46bd      	mov	sp, r7
    383e:	b002      	add	sp, #8
    3840:	bd80      	pop	{r7, pc}
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	20000338 	.word	0x20000338
    3848:	20000228 	.word	0x20000228

0000384c <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    384c:	b590      	push	{r4, r7, lr}
    384e:	b085      	sub	sp, #20
    3850:	af00      	add	r7, sp, #0
    3852:	6078      	str	r0, [r7, #4]
    3854:	6039      	str	r1, [r7, #0]
	uint16_t count = usbd.epBank0ByteCount(ep);
    3856:	683b      	ldr	r3, [r7, #0]
    3858:	b2da      	uxtb	r2, r3
    385a:	230e      	movs	r3, #14
    385c:	18fc      	adds	r4, r7, r3
    385e:	4b16      	ldr	r3, [pc, #88]	; (38b8 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    3860:	0011      	movs	r1, r2
    3862:	0018      	movs	r0, r3
    3864:	f7fe fcbc 	bl	21e0 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    3868:	0003      	movs	r3, r0
    386a:	8023      	strh	r3, [r4, #0]
	if (count >= 64) {
    386c:	230e      	movs	r3, #14
    386e:	18fb      	adds	r3, r7, r3
    3870:	881b      	ldrh	r3, [r3, #0]
    3872:	2b3f      	cmp	r3, #63	; 0x3f
    3874:	d90b      	bls.n	388e <_ZN14USBDeviceClass7armRecvEm+0x42>
		usbd.epBank0SetByteCount(ep, count - 64);
    3876:	683b      	ldr	r3, [r7, #0]
    3878:	b2d9      	uxtb	r1, r3
    387a:	230e      	movs	r3, #14
    387c:	18fb      	adds	r3, r7, r3
    387e:	881b      	ldrh	r3, [r3, #0]
    3880:	3b40      	subs	r3, #64	; 0x40
    3882:	b29a      	uxth	r2, r3
    3884:	4b0c      	ldr	r3, [pc, #48]	; (38b8 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    3886:	0018      	movs	r0, r3
    3888:	f7fe fcbe 	bl	2208 <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
    388c:	e006      	b.n	389c <_ZN14USBDeviceClass7armRecvEm+0x50>
	} else {
		usbd.epBank0SetByteCount(ep, 0);
    388e:	683b      	ldr	r3, [r7, #0]
    3890:	b2d9      	uxtb	r1, r3
    3892:	4b09      	ldr	r3, [pc, #36]	; (38b8 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    3894:	2200      	movs	r2, #0
    3896:	0018      	movs	r0, r3
    3898:	f7fe fcb6 	bl	2208 <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
	}
	return usbd.epBank0ByteCount(ep);
    389c:	683b      	ldr	r3, [r7, #0]
    389e:	b2da      	uxtb	r2, r3
    38a0:	4b05      	ldr	r3, [pc, #20]	; (38b8 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    38a2:	0011      	movs	r1, r2
    38a4:	0018      	movs	r0, r3
    38a6:	f7fe fc9b 	bl	21e0 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    38aa:	0003      	movs	r3, r0
    38ac:	b2db      	uxtb	r3, r3
}
    38ae:	0018      	movs	r0, r3
    38b0:	46bd      	mov	sp, r7
    38b2:	b005      	add	sp, #20
    38b4:	bd90      	pop	{r4, r7, pc}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	20000228 	.word	0x20000228

000038bc <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    38bc:	b580      	push	{r7, lr}
    38be:	b088      	sub	sp, #32
    38c0:	af00      	add	r7, sp, #0
    38c2:	60f8      	str	r0, [r7, #12]
    38c4:	60b9      	str	r1, [r7, #8]
    38c6:	607a      	str	r2, [r7, #4]
    38c8:	603b      	str	r3, [r7, #0]
	uint32_t written = 0;
    38ca:	2300      	movs	r3, #0
    38cc:	61fb      	str	r3, [r7, #28]
	uint32_t length = 0;
    38ce:	2300      	movs	r3, #0
    38d0:	61bb      	str	r3, [r7, #24]

	if (!_usbConfiguration)
    38d2:	4b59      	ldr	r3, [pc, #356]	; (3a38 <_ZN14USBDeviceClass4sendEmPKvm+0x17c>)
    38d4:	681b      	ldr	r3, [r3, #0]
    38d6:	425a      	negs	r2, r3
    38d8:	4153      	adcs	r3, r2
    38da:	b2db      	uxtb	r3, r3
    38dc:	2b00      	cmp	r3, #0
    38de:	d002      	beq.n	38e6 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		return -1;
    38e0:	2301      	movs	r3, #1
    38e2:	425b      	negs	r3, r3
    38e4:	e0a4      	b.n	3a30 <_ZN14USBDeviceClass4sendEmPKvm+0x174>
	if (len > 16384)
    38e6:	683a      	ldr	r2, [r7, #0]
    38e8:	2380      	movs	r3, #128	; 0x80
    38ea:	01db      	lsls	r3, r3, #7
    38ec:	429a      	cmp	r2, r3
    38ee:	d902      	bls.n	38f6 <_ZN14USBDeviceClass4sendEmPKvm+0x3a>
		return -1;
    38f0:	2301      	movs	r3, #1
    38f2:	425b      	negs	r3, r3
    38f4:	e09c      	b.n	3a30 <_ZN14USBDeviceClass4sendEmPKvm+0x174>

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    38f6:	4b51      	ldr	r3, [pc, #324]	; (3a3c <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    38f8:	781b      	ldrb	r3, [r3, #0]
    38fa:	b2db      	uxtb	r3, r3
    38fc:	425a      	negs	r2, r3
    38fe:	4153      	adcs	r3, r2
    3900:	b2db      	uxtb	r3, r3
    3902:	2b00      	cmp	r3, #0
    3904:	d003      	beq.n	390e <_ZN14USBDeviceClass4sendEmPKvm+0x52>
		digitalWrite(PIN_LED_TXL, LOW);
    3906:	2100      	movs	r1, #0
    3908:	201a      	movs	r0, #26
    390a:	f000 fe35 	bl	4578 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    390e:	4b4b      	ldr	r3, [pc, #300]	; (3a3c <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    3910:	2264      	movs	r2, #100	; 0x64
    3912:	701a      	strb	r2, [r3, #0]
#endif

	// Flash area
	while (len != 0)
    3914:	683b      	ldr	r3, [r7, #0]
    3916:	2b00      	cmp	r3, #0
    3918:	d100      	bne.n	391c <_ZN14USBDeviceClass4sendEmPKvm+0x60>
    391a:	e088      	b.n	3a2e <_ZN14USBDeviceClass4sendEmPKvm+0x172>
	{
		if (usbd.epBank1IsReady(ep)) {
    391c:	68bb      	ldr	r3, [r7, #8]
    391e:	b2da      	uxtb	r2, r3
    3920:	4b47      	ldr	r3, [pc, #284]	; (3a40 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    3922:	0011      	movs	r1, r2
    3924:	0018      	movs	r0, r3
    3926:	f7fe fbe9 	bl	20fc <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>
    392a:	1e03      	subs	r3, r0, #0
    392c:	d03c      	beq.n	39a8 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
			// previous transfer is still not complete

			// convert the timeout from microseconds to a number of times through
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    392e:	4b45      	ldr	r3, [pc, #276]	; (3a44 <_ZN14USBDeviceClass4sendEmPKvm+0x188>)
    3930:	681b      	ldr	r3, [r3, #0]
    3932:	4945      	ldr	r1, [pc, #276]	; (3a48 <_ZN14USBDeviceClass4sendEmPKvm+0x18c>)
    3934:	0018      	movs	r0, r3
    3936:	f002 fe43 	bl	65c0 <__aeabi_uidiv>
    393a:	0003      	movs	r3, r0
    393c:	001a      	movs	r2, r3
    393e:	4b43      	ldr	r3, [pc, #268]	; (3a4c <_ZN14USBDeviceClass4sendEmPKvm+0x190>)
    3940:	4353      	muls	r3, r2
    3942:	2117      	movs	r1, #23
    3944:	0018      	movs	r0, r3
    3946:	f002 fe3b 	bl	65c0 <__aeabi_uidiv>
    394a:	0003      	movs	r3, r0
    394c:	617b      	str	r3, [r7, #20]

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
    394e:	68bb      	ldr	r3, [r7, #8]
    3950:	b2da      	uxtb	r2, r3
    3952:	4b3b      	ldr	r3, [pc, #236]	; (3a40 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    3954:	0011      	movs	r1, r2
    3956:	0018      	movs	r0, r3
    3958:	f7fe fad4 	bl	1f04 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    395c:	0003      	movs	r3, r0
    395e:	001a      	movs	r2, r3
    3960:	2301      	movs	r3, #1
    3962:	4053      	eors	r3, r2
    3964:	b2db      	uxtb	r3, r3
    3966:	2b00      	cmp	r3, #0
    3968:	d01e      	beq.n	39a8 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    396a:	4a39      	ldr	r2, [pc, #228]	; (3a50 <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    396c:	68bb      	ldr	r3, [r7, #8]
    396e:	18d3      	adds	r3, r2, r3
    3970:	781b      	ldrb	r3, [r3, #0]
    3972:	2b00      	cmp	r3, #0
    3974:	d104      	bne.n	3980 <_ZN14USBDeviceClass4sendEmPKvm+0xc4>
    3976:	697b      	ldr	r3, [r7, #20]
    3978:	1e5a      	subs	r2, r3, #1
    397a:	617a      	str	r2, [r7, #20]
    397c:	2b00      	cmp	r3, #0
    397e:	d101      	bne.n	3984 <_ZN14USBDeviceClass4sendEmPKvm+0xc8>
    3980:	2301      	movs	r3, #1
    3982:	e000      	b.n	3986 <_ZN14USBDeviceClass4sendEmPKvm+0xca>
    3984:	2300      	movs	r3, #0
    3986:	2b00      	cmp	r3, #0
    3988:	d0e1      	beq.n	394e <_ZN14USBDeviceClass4sendEmPKvm+0x92>
					LastTransmitTimedOut[ep] = 1;
    398a:	4a31      	ldr	r2, [pc, #196]	; (3a50 <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    398c:	68bb      	ldr	r3, [r7, #8]
    398e:	18d3      	adds	r3, r2, r3
    3990:	2201      	movs	r2, #1
    3992:	701a      	strb	r2, [r3, #0]

					// set byte count to zero, so that ZLP is sent
					// instead of stale data
					usbd.epBank1SetByteCount(ep, 0);
    3994:	68bb      	ldr	r3, [r7, #8]
    3996:	b2d9      	uxtb	r1, r3
    3998:	4b29      	ldr	r3, [pc, #164]	; (3a40 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    399a:	2200      	movs	r2, #0
    399c:	0018      	movs	r0, r3
    399e:	f7fe fc55 	bl	224c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
					return -1;
    39a2:	2301      	movs	r3, #1
    39a4:	425b      	negs	r3, r3
    39a6:	e043      	b.n	3a30 <_ZN14USBDeviceClass4sendEmPKvm+0x174>
				}
			}
		}

		LastTransmitTimedOut[ep] = 0;
    39a8:	4a29      	ldr	r2, [pc, #164]	; (3a50 <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    39aa:	68bb      	ldr	r3, [r7, #8]
    39ac:	18d3      	adds	r3, r2, r3
    39ae:	2200      	movs	r2, #0
    39b0:	701a      	strb	r2, [r3, #0]

		if (len >= EPX_SIZE) {
    39b2:	683b      	ldr	r3, [r7, #0]
    39b4:	2b3f      	cmp	r3, #63	; 0x3f
    39b6:	d902      	bls.n	39be <_ZN14USBDeviceClass4sendEmPKvm+0x102>
			length = EPX_SIZE - 1;
    39b8:	233f      	movs	r3, #63	; 0x3f
    39ba:	61bb      	str	r3, [r7, #24]
    39bc:	e001      	b.n	39c2 <_ZN14USBDeviceClass4sendEmPKvm+0x106>
		} else {
			length = len;
    39be:	683b      	ldr	r3, [r7, #0]
    39c0:	61bb      	str	r3, [r7, #24]
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    39c2:	68bb      	ldr	r3, [r7, #8]
    39c4:	019a      	lsls	r2, r3, #6
    39c6:	4b23      	ldr	r3, [pc, #140]	; (3a54 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    39c8:	18d3      	adds	r3, r2, r3
    39ca:	69ba      	ldr	r2, [r7, #24]
    39cc:	6879      	ldr	r1, [r7, #4]
    39ce:	0018      	movs	r0, r3
    39d0:	f003 fd08 	bl	73e4 <memcpy>

		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    39d4:	68bb      	ldr	r3, [r7, #8]
    39d6:	b2d9      	uxtb	r1, r3
    39d8:	68bb      	ldr	r3, [r7, #8]
    39da:	019a      	lsls	r2, r3, #6
    39dc:	4b1d      	ldr	r3, [pc, #116]	; (3a54 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    39de:	18d2      	adds	r2, r2, r3
    39e0:	4b17      	ldr	r3, [pc, #92]	; (3a40 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    39e2:	0018      	movs	r0, r3
    39e4:	f7fe fcb4 	bl	2350 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetByteCount(ep, length);
    39e8:	68bb      	ldr	r3, [r7, #8]
    39ea:	b2d9      	uxtb	r1, r3
    39ec:	69bb      	ldr	r3, [r7, #24]
    39ee:	b29a      	uxth	r2, r3
    39f0:	4b13      	ldr	r3, [pc, #76]	; (3a40 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    39f2:	0018      	movs	r0, r3
    39f4:	f7fe fc2a 	bl	224c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

		// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    39f8:	68bb      	ldr	r3, [r7, #8]
    39fa:	b2da      	uxtb	r2, r3
    39fc:	4b10      	ldr	r3, [pc, #64]	; (3a40 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    39fe:	0011      	movs	r1, r2
    3a00:	0018      	movs	r0, r3
    3a02:	f7fe fad7 	bl	1fb4 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    3a06:	68bb      	ldr	r3, [r7, #8]
    3a08:	b2da      	uxtb	r2, r3
    3a0a:	4b0d      	ldr	r3, [pc, #52]	; (3a40 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    3a0c:	0011      	movs	r1, r2
    3a0e:	0018      	movs	r0, r3
    3a10:	f7fe fba0 	bl	2154 <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

		written += length;
    3a14:	69fa      	ldr	r2, [r7, #28]
    3a16:	69bb      	ldr	r3, [r7, #24]
    3a18:	18d3      	adds	r3, r2, r3
    3a1a:	61fb      	str	r3, [r7, #28]
		len -= length;
    3a1c:	683a      	ldr	r2, [r7, #0]
    3a1e:	69bb      	ldr	r3, [r7, #24]
    3a20:	1ad3      	subs	r3, r2, r3
    3a22:	603b      	str	r3, [r7, #0]
		data = (char *)data + length;
    3a24:	687a      	ldr	r2, [r7, #4]
    3a26:	69bb      	ldr	r3, [r7, #24]
    3a28:	18d3      	adds	r3, r2, r3
    3a2a:	607b      	str	r3, [r7, #4]

	txLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	// Flash area
	while (len != 0)
    3a2c:	e772      	b.n	3914 <_ZN14USBDeviceClass4sendEmPKvm+0x58>

		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
    3a2e:	69fb      	ldr	r3, [r7, #28]
}
    3a30:	0018      	movs	r0, r3
    3a32:	46bd      	mov	sp, r7
    3a34:	b008      	add	sp, #32
    3a36:	bd80      	pop	{r7, pc}
    3a38:	20000330 	.word	0x20000330
    3a3c:	2000032c 	.word	0x2000032c
    3a40:	20000228 	.word	0x20000228
    3a44:	20000034 	.word	0x20000034
    3a48:	000f4240 	.word	0x000f4240
    3a4c:	00011170 	.word	0x00011170
    3a50:	200007d8 	.word	0x200007d8
    3a54:	200004f8 	.word	0x200004f8

00003a58 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    3a58:	b580      	push	{r7, lr}
    3a5a:	b084      	sub	sp, #16
    3a5c:	af00      	add	r7, sp, #0
    3a5e:	60f8      	str	r0, [r7, #12]
    3a60:	60b9      	str	r1, [r7, #8]
    3a62:	607a      	str	r2, [r7, #4]
    3a64:	603b      	str	r3, [r7, #0]
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    3a66:	68bb      	ldr	r3, [r7, #8]
    3a68:	019a      	lsls	r2, r3, #6
    3a6a:	4b12      	ldr	r3, [pc, #72]	; (3ab4 <_ZN14USBDeviceClass7armSendEmPKvm+0x5c>)
    3a6c:	18d3      	adds	r3, r2, r3
    3a6e:	683a      	ldr	r2, [r7, #0]
    3a70:	6879      	ldr	r1, [r7, #4]
    3a72:	0018      	movs	r0, r3
    3a74:	f003 fcb6 	bl	73e4 <memcpy>

	// Get endpoint configuration from setting register
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    3a78:	68bb      	ldr	r3, [r7, #8]
    3a7a:	b2d9      	uxtb	r1, r3
    3a7c:	68bb      	ldr	r3, [r7, #8]
    3a7e:	019a      	lsls	r2, r3, #6
    3a80:	4b0c      	ldr	r3, [pc, #48]	; (3ab4 <_ZN14USBDeviceClass7armSendEmPKvm+0x5c>)
    3a82:	18d2      	adds	r2, r2, r3
    3a84:	4b0c      	ldr	r3, [pc, #48]	; (3ab8 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    3a86:	0018      	movs	r0, r3
    3a88:	f7fe fc62 	bl	2350 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
	usbd.epBank1SetMultiPacketSize(ep, 0);
    3a8c:	68bb      	ldr	r3, [r7, #8]
    3a8e:	b2d9      	uxtb	r1, r3
    3a90:	4b09      	ldr	r3, [pc, #36]	; (3ab8 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    3a92:	2200      	movs	r2, #0
    3a94:	0018      	movs	r0, r3
    3a96:	f7fe fc1f 	bl	22d8 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht>
	usbd.epBank1SetByteCount(ep, len);
    3a9a:	68bb      	ldr	r3, [r7, #8]
    3a9c:	b2d9      	uxtb	r1, r3
    3a9e:	683b      	ldr	r3, [r7, #0]
    3aa0:	b29a      	uxth	r2, r3
    3aa2:	4b05      	ldr	r3, [pc, #20]	; (3ab8 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    3aa4:	0018      	movs	r0, r3
    3aa6:	f7fe fbd1 	bl	224c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

	return len;
    3aaa:	683b      	ldr	r3, [r7, #0]
}
    3aac:	0018      	movs	r0, r3
    3aae:	46bd      	mov	sp, r7
    3ab0:	b004      	add	sp, #16
    3ab2:	bd80      	pop	{r7, pc}
    3ab4:	200004f8 	.word	0x200004f8
    3ab8:	20000228 	.word	0x20000228

00003abc <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    3abc:	b580      	push	{r7, lr}
    3abe:	b088      	sub	sp, #32
    3ac0:	af00      	add	r7, sp, #0
    3ac2:	60f8      	str	r0, [r7, #12]
    3ac4:	60b9      	str	r1, [r7, #8]
    3ac6:	607a      	str	r2, [r7, #4]
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
    3ac8:	68bb      	ldr	r3, [r7, #8]
    3aca:	61bb      	str	r3, [r7, #24]
	uint32_t length = len;
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	617b      	str	r3, [r7, #20]
	uint32_t sent = 0;
    3ad0:	2300      	movs	r3, #0
    3ad2:	613b      	str	r3, [r7, #16]
	uint32_t pos = 0;
    3ad4:	2300      	movs	r3, #0
    3ad6:	61fb      	str	r3, [r7, #28]

	if (_dry_run == true)
    3ad8:	4b1c      	ldr	r3, [pc, #112]	; (3b4c <_ZN14USBDeviceClass11sendControlEPKvm+0x90>)
    3ada:	781b      	ldrb	r3, [r3, #0]
    3adc:	2b00      	cmp	r3, #0
    3ade:	d001      	beq.n	3ae4 <_ZN14USBDeviceClass11sendControlEPKvm+0x28>
		return length;
    3ae0:	697b      	ldr	r3, [r7, #20]
    3ae2:	e02e      	b.n	3b42 <_ZN14USBDeviceClass11sendControlEPKvm+0x86>

	if (_pack_message == true) {
    3ae4:	4b1a      	ldr	r3, [pc, #104]	; (3b50 <_ZN14USBDeviceClass11sendControlEPKvm+0x94>)
    3ae6:	781b      	ldrb	r3, [r3, #0]
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d013      	beq.n	3b14 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>
		memcpy(&_pack_buffer[_pack_size], data, len);
    3aec:	4b19      	ldr	r3, [pc, #100]	; (3b54 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    3aee:	881b      	ldrh	r3, [r3, #0]
    3af0:	001a      	movs	r2, r3
    3af2:	4b19      	ldr	r3, [pc, #100]	; (3b58 <_ZN14USBDeviceClass11sendControlEPKvm+0x9c>)
    3af4:	18d3      	adds	r3, r2, r3
    3af6:	687a      	ldr	r2, [r7, #4]
    3af8:	69b9      	ldr	r1, [r7, #24]
    3afa:	0018      	movs	r0, r3
    3afc:	f003 fc72 	bl	73e4 <memcpy>
		_pack_size += len;
    3b00:	687b      	ldr	r3, [r7, #4]
    3b02:	b29a      	uxth	r2, r3
    3b04:	4b13      	ldr	r3, [pc, #76]	; (3b54 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    3b06:	881b      	ldrh	r3, [r3, #0]
    3b08:	18d3      	adds	r3, r2, r3
    3b0a:	b29a      	uxth	r2, r3
    3b0c:	4b11      	ldr	r3, [pc, #68]	; (3b54 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    3b0e:	801a      	strh	r2, [r3, #0]
		return length;
    3b10:	697b      	ldr	r3, [r7, #20]
    3b12:	e016      	b.n	3b42 <_ZN14USBDeviceClass11sendControlEPKvm+0x86>
	}

 	while (len > 0)
    3b14:	687b      	ldr	r3, [r7, #4]
    3b16:	2b00      	cmp	r3, #0
    3b18:	d012      	beq.n	3b40 <_ZN14USBDeviceClass11sendControlEPKvm+0x84>
 	{
		sent = armSend(EP0, data + pos, len);
    3b1a:	69ba      	ldr	r2, [r7, #24]
    3b1c:	69fb      	ldr	r3, [r7, #28]
    3b1e:	18d2      	adds	r2, r2, r3
    3b20:	687b      	ldr	r3, [r7, #4]
    3b22:	68f8      	ldr	r0, [r7, #12]
    3b24:	2100      	movs	r1, #0
    3b26:	f7ff ff97 	bl	3a58 <_ZN14USBDeviceClass7armSendEmPKvm>
    3b2a:	0003      	movs	r3, r0
    3b2c:	613b      	str	r3, [r7, #16]
		pos += sent;
    3b2e:	69fa      	ldr	r2, [r7, #28]
    3b30:	693b      	ldr	r3, [r7, #16]
    3b32:	18d3      	adds	r3, r2, r3
    3b34:	61fb      	str	r3, [r7, #28]
		len -= sent;
    3b36:	687a      	ldr	r2, [r7, #4]
    3b38:	693b      	ldr	r3, [r7, #16]
    3b3a:	1ad3      	subs	r3, r2, r3
    3b3c:	607b      	str	r3, [r7, #4]
		memcpy(&_pack_buffer[_pack_size], data, len);
		_pack_size += len;
		return length;
	}

 	while (len > 0)
    3b3e:	e7e9      	b.n	3b14 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>
		sent = armSend(EP0, data + pos, len);
		pos += sent;
		len -= sent;
 	}

	return length;
    3b40:	697b      	ldr	r3, [r7, #20]
}
    3b42:	0018      	movs	r0, r3
    3b44:	46bd      	mov	sp, r7
    3b46:	b008      	add	sp, #32
    3b48:	bd80      	pop	{r7, pc}
    3b4a:	46c0      	nop			; (mov r8, r8)
    3b4c:	200006d4 	.word	0x200006d4
    3b50:	200006d5 	.word	0x200006d5
    3b54:	200006d6 	.word	0x200006d6
    3b58:	200006d8 	.word	0x200006d8

00003b5c <_ZN14USBDeviceClass7sendZlpEm>:

void USBDeviceClass::sendZlp(uint32_t ep)
{
    3b5c:	b580      	push	{r7, lr}
    3b5e:	b082      	sub	sp, #8
    3b60:	af00      	add	r7, sp, #0
    3b62:	6078      	str	r0, [r7, #4]
    3b64:	6039      	str	r1, [r7, #0]
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
    3b66:	683b      	ldr	r3, [r7, #0]
    3b68:	b2d9      	uxtb	r1, r3
    3b6a:	4b04      	ldr	r3, [pc, #16]	; (3b7c <_ZN14USBDeviceClass7sendZlpEm+0x20>)
    3b6c:	2200      	movs	r2, #0
    3b6e:	0018      	movs	r0, r3
    3b70:	f7fe fb6c 	bl	224c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
}
    3b74:	46c0      	nop			; (mov r8, r8)
    3b76:	46bd      	mov	sp, r7
    3b78:	b002      	add	sp, #8
    3b7a:	bd80      	pop	{r7, pc}
    3b7c:	20000228 	.word	0x20000228

00003b80 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    3b80:	b580      	push	{r7, lr}
    3b82:	b086      	sub	sp, #24
    3b84:	af00      	add	r7, sp, #0
    3b86:	6078      	str	r0, [r7, #4]
    3b88:	6039      	str	r1, [r7, #0]
	switch (setup.bRequest) {
    3b8a:	683b      	ldr	r3, [r7, #0]
    3b8c:	785b      	ldrb	r3, [r3, #1]
    3b8e:	2b0b      	cmp	r3, #11
    3b90:	d900      	bls.n	3b94 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x14>
    3b92:	e0cd      	b.n	3d30 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b0>
    3b94:	009a      	lsls	r2, r3, #2
    3b96:	4b69      	ldr	r3, [pc, #420]	; (3d3c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1bc>)
    3b98:	18d3      	adds	r3, r2, r3
    3b9a:	681b      	ldr	r3, [r3, #0]
    3b9c:	469f      	mov	pc, r3
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    3b9e:	683b      	ldr	r3, [r7, #0]
    3ba0:	781b      	ldrb	r3, [r3, #0]
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d110      	bne.n	3bc8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x48>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
    3ba6:	2314      	movs	r3, #20
    3ba8:	18fb      	adds	r3, r7, r3
    3baa:	2200      	movs	r2, #0
    3bac:	701a      	strb	r2, [r3, #0]
    3bae:	2314      	movs	r3, #20
    3bb0:	18fb      	adds	r3, r7, r3
    3bb2:	2200      	movs	r2, #0
    3bb4:	705a      	strb	r2, [r3, #1]
			armSend(0, buff, 2);
    3bb6:	2314      	movs	r3, #20
    3bb8:	18fa      	adds	r2, r7, r3
    3bba:	6878      	ldr	r0, [r7, #4]
    3bbc:	2302      	movs	r3, #2
    3bbe:	2100      	movs	r1, #0
    3bc0:	f7ff ff4a 	bl	3a58 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    3bc4:	2301      	movs	r3, #1
    3bc6:	e0b4      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		// if( setup.bmRequestType == 2 ) // Endpoint:
		else
		{
			// Send the endpoint status
			// Check if the endpoint if currently halted
			uint8_t buff[] = { 0, 0 };
    3bc8:	2310      	movs	r3, #16
    3bca:	18fb      	adds	r3, r7, r3
    3bcc:	2200      	movs	r2, #0
    3bce:	701a      	strb	r2, [r3, #0]
    3bd0:	2310      	movs	r3, #16
    3bd2:	18fb      	adds	r3, r7, r3
    3bd4:	2200      	movs	r2, #0
    3bd6:	705a      	strb	r2, [r3, #1]
			if (isEndpointHalt == 1)
    3bd8:	4b59      	ldr	r3, [pc, #356]	; (3d40 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    3bda:	781b      	ldrb	r3, [r3, #0]
    3bdc:	2b01      	cmp	r3, #1
    3bde:	d103      	bne.n	3be8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x68>
				buff[0] = 1;
    3be0:	2310      	movs	r3, #16
    3be2:	18fb      	adds	r3, r7, r3
    3be4:	2201      	movs	r2, #1
    3be6:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 2);
    3be8:	2310      	movs	r3, #16
    3bea:	18fa      	adds	r2, r7, r3
    3bec:	6878      	ldr	r0, [r7, #4]
    3bee:	2302      	movs	r3, #2
    3bf0:	2100      	movs	r1, #0
    3bf2:	f7ff ff31 	bl	3a58 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    3bf6:	2301      	movs	r3, #1
    3bf8:	e09b      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case CLEAR_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    3bfa:	683b      	ldr	r3, [r7, #0]
    3bfc:	789b      	ldrb	r3, [r3, #2]
    3bfe:	2b01      	cmp	r3, #1
    3c00:	d118      	bne.n	3c34 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xb4>
		{
			// Enable remote wake-up and send a ZLP
			uint8_t buff[] = { 0, 0 };
    3c02:	230c      	movs	r3, #12
    3c04:	18fb      	adds	r3, r7, r3
    3c06:	2200      	movs	r2, #0
    3c08:	701a      	strb	r2, [r3, #0]
    3c0a:	230c      	movs	r3, #12
    3c0c:	18fb      	adds	r3, r7, r3
    3c0e:	2200      	movs	r2, #0
    3c10:	705a      	strb	r2, [r3, #1]
			if (isRemoteWakeUpEnabled == 1)
    3c12:	4b4c      	ldr	r3, [pc, #304]	; (3d44 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c4>)
    3c14:	781b      	ldrb	r3, [r3, #0]
    3c16:	2b01      	cmp	r3, #1
    3c18:	d103      	bne.n	3c22 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xa2>
				buff[0] = 1;
    3c1a:	230c      	movs	r3, #12
    3c1c:	18fb      	adds	r3, r7, r3
    3c1e:	2201      	movs	r2, #1
    3c20:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 2);
    3c22:	230c      	movs	r3, #12
    3c24:	18fa      	adds	r2, r7, r3
    3c26:	6878      	ldr	r0, [r7, #4]
    3c28:	2302      	movs	r3, #2
    3c2a:	2100      	movs	r1, #0
    3c2c:	f7ff ff14 	bl	3a58 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    3c30:	2301      	movs	r3, #1
    3c32:	e07e      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}
		else // if( setup.wValueL == 0) // ENDPOINTHALT
		{
			isEndpointHalt = 0;
    3c34:	4b42      	ldr	r3, [pc, #264]	; (3d40 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    3c36:	2200      	movs	r2, #0
    3c38:	701a      	strb	r2, [r3, #0]
			sendZlp(0);
    3c3a:	687b      	ldr	r3, [r7, #4]
    3c3c:	2100      	movs	r1, #0
    3c3e:	0018      	movs	r0, r3
    3c40:	f7ff ff8c 	bl	3b5c <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    3c44:	2301      	movs	r3, #1
    3c46:	e074      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    3c48:	683b      	ldr	r3, [r7, #0]
    3c4a:	789b      	ldrb	r3, [r3, #2]
    3c4c:	2b01      	cmp	r3, #1
    3c4e:	d10f      	bne.n	3c70 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    3c50:	4b3c      	ldr	r3, [pc, #240]	; (3d44 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c4>)
    3c52:	2201      	movs	r2, #1
    3c54:	701a      	strb	r2, [r3, #0]
			uint8_t buff[] = { 0 };
    3c56:	2308      	movs	r3, #8
    3c58:	18fb      	adds	r3, r7, r3
    3c5a:	2200      	movs	r2, #0
    3c5c:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 1);
    3c5e:	2308      	movs	r3, #8
    3c60:	18fa      	adds	r2, r7, r3
    3c62:	6878      	ldr	r0, [r7, #4]
    3c64:	2301      	movs	r3, #1
    3c66:	2100      	movs	r1, #0
    3c68:	f7ff fef6 	bl	3a58 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    3c6c:	2301      	movs	r3, #1
    3c6e:	e060      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}
		if (setup.wValueL == 0) // ENDPOINTHALT
    3c70:	683b      	ldr	r3, [r7, #0]
    3c72:	789b      	ldrb	r3, [r3, #2]
    3c74:	2b00      	cmp	r3, #0
    3c76:	d109      	bne.n	3c8c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x10c>
		{
			// Halt endpoint
			isEndpointHalt = 1;
    3c78:	4b31      	ldr	r3, [pc, #196]	; (3d40 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    3c7a:	2201      	movs	r2, #1
    3c7c:	701a      	strb	r2, [r3, #0]
			sendZlp(0);
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	2100      	movs	r1, #0
    3c82:	0018      	movs	r0, r3
    3c84:	f7ff ff6a 	bl	3b5c <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    3c88:	2301      	movs	r3, #1
    3c8a:	e052      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case SET_ADDRESS:
		setAddress(setup.wValueL);
    3c8c:	683b      	ldr	r3, [r7, #0]
    3c8e:	789b      	ldrb	r3, [r3, #2]
    3c90:	001a      	movs	r2, r3
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	0011      	movs	r1, r2
    3c96:	0018      	movs	r0, r3
    3c98:	f7ff fad8 	bl	324c <_ZN14USBDeviceClass10setAddressEm>
		return true;
    3c9c:	2301      	movs	r3, #1
    3c9e:	e048      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);
    3ca0:	683a      	ldr	r2, [r7, #0]
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	0011      	movs	r1, r2
    3ca6:	0018      	movs	r0, r3
    3ca8:	f7ff f918 	bl	2edc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    3cac:	0003      	movs	r3, r0
    3cae:	e040      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_DESCRIPTOR:
		return false;
    3cb0:	2300      	movs	r3, #0
    3cb2:	e03e      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
    3cb4:	4a24      	ldr	r2, [pc, #144]	; (3d48 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c8>)
    3cb6:	6878      	ldr	r0, [r7, #4]
    3cb8:	2301      	movs	r3, #1
    3cba:	2100      	movs	r1, #0
    3cbc:	f7ff fecc 	bl	3a58 <_ZN14USBDeviceClass7armSendEmPKvm>
		return true;
    3cc0:	2301      	movs	r3, #1
    3cc2:	e036      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    3cc4:	683b      	ldr	r3, [r7, #0]
    3cc6:	781b      	ldrb	r3, [r3, #0]
    3cc8:	001a      	movs	r2, r3
    3cca:	231f      	movs	r3, #31
    3ccc:	4013      	ands	r3, r2
    3cce:	d119      	bne.n	3d04 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x184>

			initEndpoints();
    3cd0:	687b      	ldr	r3, [r7, #4]
    3cd2:	0018      	movs	r0, r3
    3cd4:	f7ff fb3c 	bl	3350 <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    3cd8:	683b      	ldr	r3, [r7, #0]
    3cda:	789b      	ldrb	r3, [r3, #2]
    3cdc:	001a      	movs	r2, r3
    3cde:	4b1a      	ldr	r3, [pc, #104]	; (3d48 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c8>)
    3ce0:	601a      	str	r2, [r3, #0]

			#if defined(CDC_ENABLED)
			// Enable interrupt for CDC reception from host (OUT packet)
			usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
    3ce2:	4b1a      	ldr	r3, [pc, #104]	; (3d4c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1cc>)
    3ce4:	2101      	movs	r1, #1
    3ce6:	0018      	movs	r0, r3
    3ce8:	f7fe f9aa 	bl	2040 <_ZN20USBDevice_SAMD21G18x29epBank1EnableTransferCompleteEh>
			usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
    3cec:	4b17      	ldr	r3, [pc, #92]	; (3d4c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1cc>)
    3cee:	2102      	movs	r1, #2
    3cf0:	0018      	movs	r0, r3
    3cf2:	f7fe f98d 	bl	2010 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
			#endif

			sendZlp(0);
    3cf6:	687b      	ldr	r3, [r7, #4]
    3cf8:	2100      	movs	r1, #0
    3cfa:	0018      	movs	r0, r3
    3cfc:	f7ff ff2e 	bl	3b5c <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    3d00:	2301      	movs	r3, #1
    3d02:	e016      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		} else {
			return false;
    3d04:	2300      	movs	r3, #0
    3d06:	e014      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
    3d08:	4a11      	ldr	r2, [pc, #68]	; (3d50 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1d0>)
    3d0a:	6878      	ldr	r0, [r7, #4]
    3d0c:	2301      	movs	r3, #1
    3d0e:	2100      	movs	r1, #0
    3d10:	f7ff fea2 	bl	3a58 <_ZN14USBDeviceClass7armSendEmPKvm>
		return true;
    3d14:	2301      	movs	r3, #1
    3d16:	e00c      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_INTERFACE:
		_usbSetInterface = setup.wValueL;
    3d18:	683b      	ldr	r3, [r7, #0]
    3d1a:	789b      	ldrb	r3, [r3, #2]
    3d1c:	001a      	movs	r2, r3
    3d1e:	4b0c      	ldr	r3, [pc, #48]	; (3d50 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1d0>)
    3d20:	601a      	str	r2, [r3, #0]
		sendZlp(0);
    3d22:	687b      	ldr	r3, [r7, #4]
    3d24:	2100      	movs	r1, #0
    3d26:	0018      	movs	r0, r3
    3d28:	f7ff ff18 	bl	3b5c <_ZN14USBDeviceClass7sendZlpEm>
		return true;
    3d2c:	2301      	movs	r3, #1
    3d2e:	e000      	b.n	3d32 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	default:
		return true;
    3d30:	2301      	movs	r3, #1
	}
}
    3d32:	0018      	movs	r0, r3
    3d34:	46bd      	mov	sp, r7
    3d36:	b006      	add	sp, #24
    3d38:	bd80      	pop	{r7, pc}
    3d3a:	46c0      	nop			; (mov r8, r8)
    3d3c:	00007654 	.word	0x00007654
    3d40:	2000032f 	.word	0x2000032f
    3d44:	2000032e 	.word	0x2000032e
    3d48:	20000330 	.word	0x20000330
    3d4c:	20000228 	.word	0x20000228
    3d50:	20000334 	.word	0x20000334

00003d54 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
    3d54:	b590      	push	{r4, r7, lr}
    3d56:	b085      	sub	sp, #20
    3d58:	af00      	add	r7, sp, #0
    3d5a:	6078      	str	r0, [r7, #4]

	if (_pack_message == true) {
    3d5c:	4b94      	ldr	r3, [pc, #592]	; (3fb0 <_ZN14USBDeviceClass10ISRHandlerEv+0x25c>)
    3d5e:	781b      	ldrb	r3, [r3, #0]
    3d60:	2b00      	cmp	r3, #0
    3d62:	d000      	beq.n	3d66 <_ZN14USBDeviceClass10ISRHandlerEv+0x12>
    3d64:	e11e      	b.n	3fa4 <_ZN14USBDeviceClass10ISRHandlerEv+0x250>
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    3d66:	4b93      	ldr	r3, [pc, #588]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3d68:	0018      	movs	r0, r3
    3d6a:	f7fd ffe3 	bl	1d34 <_ZN20USBDevice_SAMD21G18x21isEndOfResetInterruptEv>
    3d6e:	1e03      	subs	r3, r0, #0
    3d70:	d011      	beq.n	3d96 <_ZN14USBDeviceClass10ISRHandlerEv+0x42>
	{
		// Configure EP 0
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	2200      	movs	r2, #0
    3d76:	2100      	movs	r1, #0
    3d78:	0018      	movs	r0, r3
    3d7a:	f7ff fb19 	bl	33b0 <_ZN14USBDeviceClass6initEPEmm>

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);
    3d7e:	4b8d      	ldr	r3, [pc, #564]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3d80:	2100      	movs	r1, #0
    3d82:	0018      	movs	r0, r3
    3d84:	f7fe f92c 	bl	1fe0 <_ZN20USBDevice_SAMD21G18x26epBank0EnableSetupReceivedEh>

		_usbConfiguration = 0;
    3d88:	4b8b      	ldr	r3, [pc, #556]	; (3fb8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    3d8a:	2200      	movs	r2, #0
    3d8c:	601a      	str	r2, [r3, #0]

		usbd.ackEndOfResetInterrupt();
    3d8e:	4b89      	ldr	r3, [pc, #548]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3d90:	0018      	movs	r0, r3
    3d92:	f7fd ffdd 	bl	1d50 <_ZN20USBDevice_SAMD21G18x22ackEndOfResetInterruptEv>
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    3d96:	4b87      	ldr	r3, [pc, #540]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3d98:	0018      	movs	r0, r3
    3d9a:	f7fd fff3 	bl	1d84 <_ZN20USBDevice_SAMD21G18x23isStartOfFrameInterruptEv>
    3d9e:	1e03      	subs	r3, r0, #0
    3da0:	d039      	beq.n	3e16 <_ZN14USBDeviceClass10ISRHandlerEv+0xc2>
	{
		usbd.ackStartOfFrameInterrupt();
    3da2:	4b84      	ldr	r3, [pc, #528]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3da4:	0018      	movs	r0, r3
    3da6:	f7fd fffb 	bl	1da0 <_ZN20USBDevice_SAMD21G18x24ackStartOfFrameInterruptEv>

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    3daa:	4b84      	ldr	r3, [pc, #528]	; (3fbc <_ZN14USBDeviceClass10ISRHandlerEv+0x268>)
    3dac:	781b      	ldrb	r3, [r3, #0]
    3dae:	b2db      	uxtb	r3, r3
    3db0:	1e5a      	subs	r2, r3, #1
    3db2:	4193      	sbcs	r3, r2
    3db4:	b2db      	uxtb	r3, r3
    3db6:	2b00      	cmp	r3, #0
    3db8:	d012      	beq.n	3de0 <_ZN14USBDeviceClass10ISRHandlerEv+0x8c>
			txLEDPulse--;
    3dba:	4b80      	ldr	r3, [pc, #512]	; (3fbc <_ZN14USBDeviceClass10ISRHandlerEv+0x268>)
    3dbc:	781b      	ldrb	r3, [r3, #0]
    3dbe:	b2db      	uxtb	r3, r3
    3dc0:	3b01      	subs	r3, #1
    3dc2:	b2da      	uxtb	r2, r3
    3dc4:	4b7d      	ldr	r3, [pc, #500]	; (3fbc <_ZN14USBDeviceClass10ISRHandlerEv+0x268>)
    3dc6:	701a      	strb	r2, [r3, #0]
			if (txLEDPulse == 0)
    3dc8:	4b7c      	ldr	r3, [pc, #496]	; (3fbc <_ZN14USBDeviceClass10ISRHandlerEv+0x268>)
    3dca:	781b      	ldrb	r3, [r3, #0]
    3dcc:	b2db      	uxtb	r3, r3
    3dce:	425a      	negs	r2, r3
    3dd0:	4153      	adcs	r3, r2
    3dd2:	b2db      	uxtb	r3, r3
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	d003      	beq.n	3de0 <_ZN14USBDeviceClass10ISRHandlerEv+0x8c>
				digitalWrite(PIN_LED_TXL, HIGH);
    3dd8:	2101      	movs	r1, #1
    3dda:	201a      	movs	r0, #26
    3ddc:	f000 fbcc 	bl	4578 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    3de0:	4b77      	ldr	r3, [pc, #476]	; (3fc0 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    3de2:	781b      	ldrb	r3, [r3, #0]
    3de4:	b2db      	uxtb	r3, r3
    3de6:	1e5a      	subs	r2, r3, #1
    3de8:	4193      	sbcs	r3, r2
    3dea:	b2db      	uxtb	r3, r3
    3dec:	2b00      	cmp	r3, #0
    3dee:	d012      	beq.n	3e16 <_ZN14USBDeviceClass10ISRHandlerEv+0xc2>
			rxLEDPulse--;
    3df0:	4b73      	ldr	r3, [pc, #460]	; (3fc0 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    3df2:	781b      	ldrb	r3, [r3, #0]
    3df4:	b2db      	uxtb	r3, r3
    3df6:	3b01      	subs	r3, #1
    3df8:	b2da      	uxtb	r2, r3
    3dfa:	4b71      	ldr	r3, [pc, #452]	; (3fc0 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    3dfc:	701a      	strb	r2, [r3, #0]
			if (rxLEDPulse == 0)
    3dfe:	4b70      	ldr	r3, [pc, #448]	; (3fc0 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    3e00:	781b      	ldrb	r3, [r3, #0]
    3e02:	b2db      	uxtb	r3, r3
    3e04:	425a      	negs	r2, r3
    3e06:	4153      	adcs	r3, r2
    3e08:	b2db      	uxtb	r3, r3
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d003      	beq.n	3e16 <_ZN14USBDeviceClass10ISRHandlerEv+0xc2>
				digitalWrite(PIN_LED_RXL, HIGH);
    3e0e:	2101      	movs	r1, #1
    3e10:	2019      	movs	r0, #25
    3e12:	f000 fbb1 	bl	4578 <digitalWrite>
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    3e16:	4b67      	ldr	r3, [pc, #412]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3e18:	2100      	movs	r1, #0
    3e1a:	0018      	movs	r0, r3
    3e1c:	f7fe f830 	bl	1e80 <_ZN20USBDevice_SAMD21G18x22epBank0IsSetupReceivedEh>
    3e20:	1e03      	subs	r3, r0, #0
    3e22:	d047      	beq.n	3eb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x160>
	{
		usbd.epBank0AckSetupReceived(0);
    3e24:	4b63      	ldr	r3, [pc, #396]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3e26:	2100      	movs	r1, #0
    3e28:	0018      	movs	r0, r3
    3e2a:	f7fe f881 	bl	1f30 <_ZN20USBDevice_SAMD21G18x23epBank0AckSetupReceivedEh>

		USBSetup *setup = reinterpret_cast<USBSetup *>(udd_ep_out_cache_buffer[0]);
    3e2e:	4b65      	ldr	r3, [pc, #404]	; (3fc4 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    3e30:	60bb      	str	r3, [r7, #8]

		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);
    3e32:	4b60      	ldr	r3, [pc, #384]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3e34:	2100      	movs	r1, #0
    3e36:	0018      	movs	r0, r3
    3e38:	f7fe f9a4 	bl	2184 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    3e3c:	68bb      	ldr	r3, [r7, #8]
    3e3e:	781b      	ldrb	r3, [r3, #0]
    3e40:	001a      	movs	r2, r3
    3e42:	2360      	movs	r3, #96	; 0x60
    3e44:	4013      	ands	r3, r2
    3e46:	d10a      	bne.n	3e5e <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
			// Standard Requests
			ok = handleStandardSetup(*setup);
    3e48:	230f      	movs	r3, #15
    3e4a:	18fc      	adds	r4, r7, r3
    3e4c:	68ba      	ldr	r2, [r7, #8]
    3e4e:	687b      	ldr	r3, [r7, #4]
    3e50:	0011      	movs	r1, r2
    3e52:	0018      	movs	r0, r3
    3e54:	f7ff fe94 	bl	3b80 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
    3e58:	0003      	movs	r3, r0
    3e5a:	7023      	strb	r3, [r4, #0]
    3e5c:	e009      	b.n	3e72 <_ZN14USBDeviceClass10ISRHandlerEv+0x11e>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
    3e5e:	230f      	movs	r3, #15
    3e60:	18fc      	adds	r4, r7, r3
    3e62:	68ba      	ldr	r2, [r7, #8]
    3e64:	687b      	ldr	r3, [r7, #4]
    3e66:	0011      	movs	r1, r2
    3e68:	0018      	movs	r0, r3
    3e6a:	f7ff fa2f 	bl	32cc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    3e6e:	0003      	movs	r3, r0
    3e70:	7023      	strb	r3, [r4, #0]
		}

		if (ok) {
    3e72:	230f      	movs	r3, #15
    3e74:	18fb      	adds	r3, r7, r3
    3e76:	781b      	ldrb	r3, [r3, #0]
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d005      	beq.n	3e88 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>
			usbd.epBank1SetReady(0);
    3e7c:	4b4d      	ldr	r3, [pc, #308]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3e7e:	2100      	movs	r1, #0
    3e80:	0018      	movs	r0, r3
    3e82:	f7fe f967 	bl	2154 <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>
    3e86:	e004      	b.n	3e92 <_ZN14USBDeviceClass10ISRHandlerEv+0x13e>
		} else {
			stall(0);
    3e88:	687b      	ldr	r3, [r7, #4]
    3e8a:	2100      	movs	r1, #0
    3e8c:	0018      	movs	r0, r3
    3e8e:	f7ff fb5f 	bl	3550 <_ZN14USBDeviceClass5stallEm>
		}

		if (usbd.epBank1IsStalled(0))
    3e92:	4b48      	ldr	r3, [pc, #288]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3e94:	2100      	movs	r1, #0
    3e96:	0018      	movs	r0, r3
    3e98:	f7fe f808 	bl	1eac <_ZN20USBDevice_SAMD21G18x16epBank1IsStalledEh>
    3e9c:	1e03      	subs	r3, r0, #0
    3e9e:	d009      	beq.n	3eb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x160>
		{
			usbd.epBank1AckStalled(0);
    3ea0:	4b44      	ldr	r3, [pc, #272]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3ea2:	2100      	movs	r1, #0
    3ea4:	0018      	movs	r0, r3
    3ea6:	f7fe f859 	bl	1f5c <_ZN20USBDevice_SAMD21G18x17epBank1AckStalledEh>

			// Remove stall request
			usbd.epBank1DisableStalled(0);
    3eaa:	4b42      	ldr	r3, [pc, #264]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3eac:	2100      	movs	r1, #0
    3eae:	0018      	movs	r0, r3
    3eb0:	f7fe f8de 	bl	2070 <_ZN20USBDevice_SAMD21G18x21epBank1DisableStalledEh>
		}

	} // end Received Setup handler

	uint8_t i=0;
    3eb4:	230e      	movs	r3, #14
    3eb6:	18fb      	adds	r3, r7, r3
    3eb8:	2200      	movs	r2, #0
    3eba:	701a      	strb	r2, [r3, #0]
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    3ebc:	4b3d      	ldr	r3, [pc, #244]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3ebe:	0018      	movs	r0, r3
    3ec0:	f7fd ffd2 	bl	1e68 <_ZN20USBDevice_SAMD21G18x18epInterruptSummaryEv>
    3ec4:	0003      	movs	r3, r0
    3ec6:	b2da      	uxtb	r2, r3
    3ec8:	230d      	movs	r3, #13
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	2101      	movs	r1, #1
    3ece:	438a      	bics	r2, r1
    3ed0:	701a      	strb	r2, [r3, #0]
	while (ept_int != 0)
    3ed2:	230d      	movs	r3, #13
    3ed4:	18fb      	adds	r3, r7, r3
    3ed6:	781b      	ldrb	r3, [r3, #0]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d066      	beq.n	3faa <_ZN14USBDeviceClass10ISRHandlerEv+0x256>
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    3edc:	230d      	movs	r3, #13
    3ede:	18fb      	adds	r3, r7, r3
    3ee0:	781a      	ldrb	r2, [r3, #0]
    3ee2:	230e      	movs	r3, #14
    3ee4:	18fb      	adds	r3, r7, r3
    3ee6:	781b      	ldrb	r3, [r3, #0]
    3ee8:	411a      	asrs	r2, r3
    3eea:	0013      	movs	r3, r2
    3eec:	2201      	movs	r2, #1
    3eee:	4013      	ands	r3, r2
    3ef0:	d04b      	beq.n	3f8a <_ZN14USBDeviceClass10ISRHandlerEv+0x236>
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    3ef2:	230e      	movs	r3, #14
    3ef4:	18fb      	adds	r3, r7, r3
    3ef6:	781a      	ldrb	r2, [r3, #0]
    3ef8:	4b2e      	ldr	r3, [pc, #184]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3efa:	0011      	movs	r1, r2
    3efc:	0018      	movs	r0, r3
    3efe:	f7fd ffeb 	bl	1ed8 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    3f02:	1e03      	subs	r3, r0, #0
    3f04:	d109      	bne.n	3f1a <_ZN14USBDeviceClass10ISRHandlerEv+0x1c6>
			    usbd.epBank1IsTransferComplete(i))
    3f06:	230e      	movs	r3, #14
    3f08:	18fb      	adds	r3, r7, r3
    3f0a:	781a      	ldrb	r2, [r3, #0]
    3f0c:	4b29      	ldr	r3, [pc, #164]	; (3fb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    3f0e:	0011      	movs	r1, r2
    3f10:	0018      	movs	r0, r3
    3f12:	f7fd fff7 	bl	1f04 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    3f16:	1e03      	subs	r3, r0, #0
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    3f18:	d001      	beq.n	3f1e <_ZN14USBDeviceClass10ISRHandlerEv+0x1ca>
    3f1a:	2301      	movs	r3, #1
    3f1c:	e000      	b.n	3f20 <_ZN14USBDeviceClass10ISRHandlerEv+0x1cc>
    3f1e:	2300      	movs	r3, #0
    3f20:	2b00      	cmp	r3, #0
    3f22:	d020      	beq.n	3f66 <_ZN14USBDeviceClass10ISRHandlerEv+0x212>
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
    3f24:	230e      	movs	r3, #14
    3f26:	18fb      	adds	r3, r7, r3
    3f28:	781a      	ldrb	r2, [r3, #0]
    3f2a:	4b27      	ldr	r3, [pc, #156]	; (3fc8 <_ZN14USBDeviceClass10ISRHandlerEv+0x274>)
    3f2c:	0092      	lsls	r2, r2, #2
    3f2e:	58d3      	ldr	r3, [r2, r3]
    3f30:	2b00      	cmp	r3, #0
    3f32:	d010      	beq.n	3f56 <_ZN14USBDeviceClass10ISRHandlerEv+0x202>
					epHandlers[i]->handleEndpoint();
    3f34:	230e      	movs	r3, #14
    3f36:	18fb      	adds	r3, r7, r3
    3f38:	781a      	ldrb	r2, [r3, #0]
    3f3a:	4b23      	ldr	r3, [pc, #140]	; (3fc8 <_ZN14USBDeviceClass10ISRHandlerEv+0x274>)
    3f3c:	0092      	lsls	r2, r2, #2
    3f3e:	58d3      	ldr	r3, [r2, r3]
    3f40:	681b      	ldr	r3, [r3, #0]
    3f42:	681b      	ldr	r3, [r3, #0]
    3f44:	220e      	movs	r2, #14
    3f46:	18ba      	adds	r2, r7, r2
    3f48:	7811      	ldrb	r1, [r2, #0]
    3f4a:	4a1f      	ldr	r2, [pc, #124]	; (3fc8 <_ZN14USBDeviceClass10ISRHandlerEv+0x274>)
    3f4c:	0089      	lsls	r1, r1, #2
    3f4e:	588a      	ldr	r2, [r1, r2]
    3f50:	0010      	movs	r0, r2
    3f52:	4798      	blx	r3
    3f54:	e007      	b.n	3f66 <_ZN14USBDeviceClass10ISRHandlerEv+0x212>
				} else {
					handleEndpoint(i);
    3f56:	230e      	movs	r3, #14
    3f58:	18fb      	adds	r3, r7, r3
    3f5a:	781a      	ldrb	r2, [r3, #0]
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	0011      	movs	r1, r2
    3f60:	0018      	movs	r0, r3
    3f62:	f7ff f889 	bl	3078 <_ZN14USBDeviceClass14handleEndpointEh>
				}
			}
			ept_int &= ~(1 << i);
    3f66:	230e      	movs	r3, #14
    3f68:	18fb      	adds	r3, r7, r3
    3f6a:	781b      	ldrb	r3, [r3, #0]
    3f6c:	2201      	movs	r2, #1
    3f6e:	409a      	lsls	r2, r3
    3f70:	0013      	movs	r3, r2
    3f72:	b25b      	sxtb	r3, r3
    3f74:	43db      	mvns	r3, r3
    3f76:	b25b      	sxtb	r3, r3
    3f78:	220d      	movs	r2, #13
    3f7a:	18ba      	adds	r2, r7, r2
    3f7c:	7812      	ldrb	r2, [r2, #0]
    3f7e:	b252      	sxtb	r2, r2
    3f80:	4013      	ands	r3, r2
    3f82:	b25a      	sxtb	r2, r3
    3f84:	230d      	movs	r3, #13
    3f86:	18fb      	adds	r3, r7, r3
    3f88:	701a      	strb	r2, [r3, #0]
		}
		i++;
    3f8a:	230e      	movs	r3, #14
    3f8c:	18fb      	adds	r3, r7, r3
    3f8e:	781a      	ldrb	r2, [r3, #0]
    3f90:	230e      	movs	r3, #14
    3f92:	18fb      	adds	r3, r7, r3
    3f94:	3201      	adds	r2, #1
    3f96:	701a      	strb	r2, [r3, #0]
		if (i > USB_EPT_NUM)
    3f98:	230e      	movs	r3, #14
    3f9a:	18fb      	adds	r3, r7, r3
    3f9c:	781b      	ldrb	r3, [r3, #0]
    3f9e:	2b08      	cmp	r3, #8
    3fa0:	d802      	bhi.n	3fa8 <_ZN14USBDeviceClass10ISRHandlerEv+0x254>

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
	while (ept_int != 0)
    3fa2:	e796      	b.n	3ed2 <_ZN14USBDeviceClass10ISRHandlerEv+0x17e>

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
		return;
    3fa4:	46c0      	nop			; (mov r8, r8)
    3fa6:	e000      	b.n	3faa <_ZN14USBDeviceClass10ISRHandlerEv+0x256>
			}
			ept_int &= ~(1 << i);
		}
		i++;
		if (i > USB_EPT_NUM)
			break;  // fire exit
    3fa8:	46c0      	nop			; (mov r8, r8)
	}
}
    3faa:	46bd      	mov	sp, r7
    3fac:	b005      	add	sp, #20
    3fae:	bd90      	pop	{r4, r7, pc}
    3fb0:	200006d5 	.word	0x200006d5
    3fb4:	20000228 	.word	0x20000228
    3fb8:	20000330 	.word	0x20000330
    3fbc:	2000032c 	.word	0x2000032c
    3fc0:	2000032d 	.word	0x2000032d
    3fc4:	20000338 	.word	0x20000338
    3fc8:	200006b8 	.word	0x200006b8

00003fcc <_Z41__static_initialization_and_destruction_0ii>:
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    3fcc:	b580      	push	{r7, lr}
    3fce:	b082      	sub	sp, #8
    3fd0:	af00      	add	r7, sp, #0
    3fd2:	6078      	str	r0, [r7, #4]
    3fd4:	6039      	str	r1, [r7, #0]
    3fd6:	687b      	ldr	r3, [r7, #4]
    3fd8:	2b01      	cmp	r3, #1
    3fda:	d10b      	bne.n	3ff4 <_Z41__static_initialization_and_destruction_0ii+0x28>
    3fdc:	683b      	ldr	r3, [r7, #0]
    3fde:	4a07      	ldr	r2, [pc, #28]	; (3ffc <_Z41__static_initialization_and_destruction_0ii+0x30>)
    3fe0:	4293      	cmp	r3, r2
    3fe2:	d107      	bne.n	3ff4 <_Z41__static_initialization_and_destruction_0ii+0x28>
#include <limits.h>

#ifdef __SAMR21G18A__
USBDevice_SAMR21G18x usbd;
#else
USBDevice_SAMD21G18x usbd;
    3fe4:	4b06      	ldr	r3, [pc, #24]	; (4000 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    3fe6:	0018      	movs	r0, r3
    3fe8:	f7fd fe44 	bl	1c74 <_ZN20USBDevice_SAMD21G18xC1Ev>
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    3fec:	4b05      	ldr	r3, [pc, #20]	; (4004 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    3fee:	0018      	movs	r0, r3
    3ff0:	f7fd fe18 	bl	1c24 <_ZN14USBDeviceClassC1Ev>
    3ff4:	46c0      	nop			; (mov r8, r8)
    3ff6:	46bd      	mov	sp, r7
    3ff8:	b002      	add	sp, #8
    3ffa:	bd80      	pop	{r7, pc}
    3ffc:	0000ffff 	.word	0x0000ffff
    4000:	20000228 	.word	0x20000228
    4004:	200007e0 	.word	0x200007e0

00004008 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
    4008:	b580      	push	{r7, lr}
    400a:	af00      	add	r7, sp, #0
    400c:	4b03      	ldr	r3, [pc, #12]	; (401c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x14>)
    400e:	0019      	movs	r1, r3
    4010:	2001      	movs	r0, #1
    4012:	f7ff ffdb 	bl	3fcc <_Z41__static_initialization_and_destruction_0ii>
    4016:	46bd      	mov	sp, r7
    4018:	bd80      	pop	{r7, pc}
    401a:	46c0      	nop			; (mov r8, r8)
    401c:	0000ffff 	.word	0x0000ffff

00004020 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    4020:	b5b0      	push	{r4, r5, r7, lr}
    4022:	b082      	sub	sp, #8
    4024:	af00      	add	r7, sp, #0
    4026:	0002      	movs	r2, r0
    4028:	6039      	str	r1, [r7, #0]
    402a:	1dfb      	adds	r3, r7, #7
    402c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    402e:	1dfb      	adds	r3, r7, #7
    4030:	781b      	ldrb	r3, [r3, #0]
    4032:	2b7f      	cmp	r3, #127	; 0x7f
    4034:	d932      	bls.n	409c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4036:	4c2f      	ldr	r4, [pc, #188]	; (40f4 <NVIC_SetPriority+0xd4>)
    4038:	1dfb      	adds	r3, r7, #7
    403a:	781b      	ldrb	r3, [r3, #0]
    403c:	001a      	movs	r2, r3
    403e:	230f      	movs	r3, #15
    4040:	4013      	ands	r3, r2
    4042:	3b08      	subs	r3, #8
    4044:	0899      	lsrs	r1, r3, #2
    4046:	4a2b      	ldr	r2, [pc, #172]	; (40f4 <NVIC_SetPriority+0xd4>)
    4048:	1dfb      	adds	r3, r7, #7
    404a:	781b      	ldrb	r3, [r3, #0]
    404c:	0018      	movs	r0, r3
    404e:	230f      	movs	r3, #15
    4050:	4003      	ands	r3, r0
    4052:	3b08      	subs	r3, #8
    4054:	089b      	lsrs	r3, r3, #2
    4056:	3306      	adds	r3, #6
    4058:	009b      	lsls	r3, r3, #2
    405a:	18d3      	adds	r3, r2, r3
    405c:	3304      	adds	r3, #4
    405e:	681b      	ldr	r3, [r3, #0]
    4060:	1dfa      	adds	r2, r7, #7
    4062:	7812      	ldrb	r2, [r2, #0]
    4064:	0010      	movs	r0, r2
    4066:	2203      	movs	r2, #3
    4068:	4002      	ands	r2, r0
    406a:	00d2      	lsls	r2, r2, #3
    406c:	20ff      	movs	r0, #255	; 0xff
    406e:	4090      	lsls	r0, r2
    4070:	0002      	movs	r2, r0
    4072:	43d2      	mvns	r2, r2
    4074:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    4076:	683b      	ldr	r3, [r7, #0]
    4078:	019b      	lsls	r3, r3, #6
    407a:	20ff      	movs	r0, #255	; 0xff
    407c:	4018      	ands	r0, r3
    407e:	1dfb      	adds	r3, r7, #7
    4080:	781b      	ldrb	r3, [r3, #0]
    4082:	001d      	movs	r5, r3
    4084:	2303      	movs	r3, #3
    4086:	402b      	ands	r3, r5
    4088:	00db      	lsls	r3, r3, #3
    408a:	4098      	lsls	r0, r3
    408c:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    408e:	431a      	orrs	r2, r3
    4090:	1d8b      	adds	r3, r1, #6
    4092:	009b      	lsls	r3, r3, #2
    4094:	18e3      	adds	r3, r4, r3
    4096:	3304      	adds	r3, #4
    4098:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    409a:	e027      	b.n	40ec <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    409c:	4c16      	ldr	r4, [pc, #88]	; (40f8 <NVIC_SetPriority+0xd8>)
    409e:	1dfb      	adds	r3, r7, #7
    40a0:	781b      	ldrb	r3, [r3, #0]
    40a2:	b25b      	sxtb	r3, r3
    40a4:	089b      	lsrs	r3, r3, #2
    40a6:	4914      	ldr	r1, [pc, #80]	; (40f8 <NVIC_SetPriority+0xd8>)
    40a8:	1dfa      	adds	r2, r7, #7
    40aa:	7812      	ldrb	r2, [r2, #0]
    40ac:	b252      	sxtb	r2, r2
    40ae:	0892      	lsrs	r2, r2, #2
    40b0:	32c0      	adds	r2, #192	; 0xc0
    40b2:	0092      	lsls	r2, r2, #2
    40b4:	5852      	ldr	r2, [r2, r1]
    40b6:	1df9      	adds	r1, r7, #7
    40b8:	7809      	ldrb	r1, [r1, #0]
    40ba:	0008      	movs	r0, r1
    40bc:	2103      	movs	r1, #3
    40be:	4001      	ands	r1, r0
    40c0:	00c9      	lsls	r1, r1, #3
    40c2:	20ff      	movs	r0, #255	; 0xff
    40c4:	4088      	lsls	r0, r1
    40c6:	0001      	movs	r1, r0
    40c8:	43c9      	mvns	r1, r1
    40ca:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    40cc:	683a      	ldr	r2, [r7, #0]
    40ce:	0192      	lsls	r2, r2, #6
    40d0:	20ff      	movs	r0, #255	; 0xff
    40d2:	4010      	ands	r0, r2
    40d4:	1dfa      	adds	r2, r7, #7
    40d6:	7812      	ldrb	r2, [r2, #0]
    40d8:	0015      	movs	r5, r2
    40da:	2203      	movs	r2, #3
    40dc:	402a      	ands	r2, r5
    40de:	00d2      	lsls	r2, r2, #3
    40e0:	4090      	lsls	r0, r2
    40e2:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    40e4:	430a      	orrs	r2, r1
    40e6:	33c0      	adds	r3, #192	; 0xc0
    40e8:	009b      	lsls	r3, r3, #2
    40ea:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    40ec:	46c0      	nop			; (mov r8, r8)
    40ee:	46bd      	mov	sp, r7
    40f0:	b002      	add	sp, #8
    40f2:	bdb0      	pop	{r4, r5, r7, pc}
    40f4:	e000ed00 	.word	0xe000ed00
    40f8:	e000e100 	.word	0xe000e100

000040fc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    40fc:	b580      	push	{r7, lr}
    40fe:	b082      	sub	sp, #8
    4100:	af00      	add	r7, sp, #0
    4102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    4104:	687b      	ldr	r3, [r7, #4]
    4106:	3b01      	subs	r3, #1
    4108:	4a0c      	ldr	r2, [pc, #48]	; (413c <SysTick_Config+0x40>)
    410a:	4293      	cmp	r3, r2
    410c:	d901      	bls.n	4112 <SysTick_Config+0x16>
    410e:	2301      	movs	r3, #1
    4110:	e010      	b.n	4134 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    4112:	4b0b      	ldr	r3, [pc, #44]	; (4140 <SysTick_Config+0x44>)
    4114:	687a      	ldr	r2, [r7, #4]
    4116:	3a01      	subs	r2, #1
    4118:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
    411a:	2301      	movs	r3, #1
    411c:	425b      	negs	r3, r3
    411e:	2103      	movs	r1, #3
    4120:	0018      	movs	r0, r3
    4122:	f7ff ff7d 	bl	4020 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    4126:	4b06      	ldr	r3, [pc, #24]	; (4140 <SysTick_Config+0x44>)
    4128:	2200      	movs	r2, #0
    412a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    412c:	4b04      	ldr	r3, [pc, #16]	; (4140 <SysTick_Config+0x44>)
    412e:	2207      	movs	r2, #7
    4130:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    4132:	2300      	movs	r3, #0
}
    4134:	0018      	movs	r0, r3
    4136:	46bd      	mov	sp, r7
    4138:	b002      	add	sp, #8
    413a:	bd80      	pop	{r7, pc}
    413c:	00ffffff 	.word	0x00ffffff
    4140:	e000e010 	.word	0xe000e010

00004144 <init>:
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz.
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    4144:	b580      	push	{r7, lr}
    4146:	b082      	sub	sp, #8
    4148:	af00      	add	r7, sp, #0
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    414a:	4b3d      	ldr	r3, [pc, #244]	; (4240 <init+0xfc>)
    414c:	681a      	ldr	r2, [r3, #0]
    414e:	23fa      	movs	r3, #250	; 0xfa
    4150:	0099      	lsls	r1, r3, #2
    4152:	0010      	movs	r0, r2
    4154:	f002 fa34 	bl	65c0 <__aeabi_uidiv>
    4158:	0003      	movs	r3, r0
    415a:	0018      	movs	r0, r3
    415c:	f7ff ffce 	bl	40fc <SysTick_Config>
    4160:	1e03      	subs	r3, r0, #0
    4162:	d000      	beq.n	4166 <init+0x22>
  {
    // Capture error
    while ( 1 ) ;
    4164:	e7fe      	b.n	4164 <init+0x20>
  }
  NVIC_SetPriority (SysTick_IRQn,  (1 << __NVIC_PRIO_BITS) - 2);  /* set Priority for Systick Interrupt (2nd lowest) */
    4166:	2301      	movs	r3, #1
    4168:	425b      	negs	r3, r3
    416a:	2102      	movs	r1, #2
    416c:	0018      	movs	r0, r3
    416e:	f7ff ff57 	bl	4020 <NVIC_SetPriority>
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    4172:	4b34      	ldr	r3, [pc, #208]	; (4244 <init+0x100>)
    4174:	4a33      	ldr	r2, [pc, #204]	; (4244 <init+0x100>)
    4176:	6a12      	ldr	r2, [r2, #32]
    4178:	21fc      	movs	r1, #252	; 0xfc
    417a:	430a      	orrs	r2, r1
    417c:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    417e:	4b31      	ldr	r3, [pc, #196]	; (4244 <init+0x100>)
    4180:	4a30      	ldr	r2, [pc, #192]	; (4244 <init+0x100>)
    4182:	6a12      	ldr	r2, [r2, #32]
    4184:	21fc      	movs	r1, #252	; 0xfc
    4186:	0189      	lsls	r1, r1, #6
    4188:	430a      	orrs	r2, r1
    418a:	621a      	str	r2, [r3, #32]

  // ATSAMR, for example, doesn't have a DAC
#ifdef PM_APBCMASK_DAC
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    418c:	4b2d      	ldr	r3, [pc, #180]	; (4244 <init+0x100>)
    418e:	4a2d      	ldr	r2, [pc, #180]	; (4244 <init+0x100>)
    4190:	6a12      	ldr	r2, [r2, #32]
    4192:	21a0      	movs	r1, #160	; 0xa0
    4194:	02c9      	lsls	r1, r1, #11
    4196:	430a      	orrs	r2, r1
    4198:	621a      	str	r2, [r3, #32]
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    419a:	2300      	movs	r3, #0
    419c:	607b      	str	r3, [r7, #4]
    419e:	e007      	b.n	41b0 <init+0x6c>
  {
    pinMode( ul, INPUT ) ;
    41a0:	687b      	ldr	r3, [r7, #4]
    41a2:	2100      	movs	r1, #0
    41a4:	0018      	movs	r0, r3
    41a6:	f000 f8bd 	bl	4324 <pinMode>
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	3301      	adds	r3, #1
    41ae:	607b      	str	r3, [r7, #4]
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	2b13      	cmp	r3, #19
    41b4:	d9f4      	bls.n	41a0 <init+0x5c>
    pinMode( ul, INPUT ) ;
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	4b23      	ldr	r3, [pc, #140]	; (4248 <init+0x104>)
    41ba:	785b      	ldrb	r3, [r3, #1]
    41bc:	b2db      	uxtb	r3, r3
    41be:	b25b      	sxtb	r3, r3
    41c0:	2b00      	cmp	r3, #0
    41c2:	dbf9      	blt.n	41b8 <init+0x74>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    41c4:	4b20      	ldr	r3, [pc, #128]	; (4248 <init+0x104>)
    41c6:	4a21      	ldr	r2, [pc, #132]	; (424c <init+0x108>)
    41c8:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    41ca:	46c0      	nop			; (mov r8, r8)
    41cc:	4b20      	ldr	r3, [pc, #128]	; (4250 <init+0x10c>)
    41ce:	7e5b      	ldrb	r3, [r3, #25]
    41d0:	061b      	lsls	r3, r3, #24
    41d2:	0fdb      	lsrs	r3, r3, #31
    41d4:	b2db      	uxtb	r3, r3
    41d6:	2b01      	cmp	r3, #1
    41d8:	d0f8      	beq.n	41cc <init+0x88>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    41da:	4b1d      	ldr	r3, [pc, #116]	; (4250 <init+0x10c>)
    41dc:	22e4      	movs	r2, #228	; 0xe4
    41de:	00d2      	lsls	r2, r2, #3
    41e0:	809a      	strh	r2, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    41e2:	4b1b      	ldr	r3, [pc, #108]	; (4250 <init+0x10c>)
    41e4:	223f      	movs	r2, #63	; 0x3f
    41e6:	70da      	strb	r2, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    41e8:	46c0      	nop			; (mov r8, r8)
    41ea:	4b19      	ldr	r3, [pc, #100]	; (4250 <init+0x10c>)
    41ec:	7e5b      	ldrb	r3, [r3, #25]
    41ee:	061b      	lsls	r3, r3, #24
    41f0:	0fdb      	lsrs	r3, r3, #31
    41f2:	b2db      	uxtb	r3, r3
    41f4:	2b01      	cmp	r3, #1
    41f6:	d0f8      	beq.n	41ea <init+0xa6>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    41f8:	4b15      	ldr	r3, [pc, #84]	; (4250 <init+0x10c>)
    41fa:	22c0      	movs	r2, #192	; 0xc0
    41fc:	0152      	lsls	r2, r2, #5
    41fe:	611a      	str	r2, [r3, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    4200:	4b13      	ldr	r3, [pc, #76]	; (4250 <init+0x10c>)
    4202:	2200      	movs	r2, #0
    4204:	709a      	strb	r2, [r3, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    4206:	2000      	movs	r0, #0
    4208:	f000 f828 	bl	425c <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    420c:	46c0      	nop			; (mov r8, r8)
    420e:	4b0e      	ldr	r3, [pc, #56]	; (4248 <init+0x104>)
    4210:	785b      	ldrb	r3, [r3, #1]
    4212:	b2db      	uxtb	r3, r3
    4214:	b25b      	sxtb	r3, r3
    4216:	2b00      	cmp	r3, #0
    4218:	dbf9      	blt.n	420e <init+0xca>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    421a:	4b0b      	ldr	r3, [pc, #44]	; (4248 <init+0x104>)
    421c:	4a0d      	ldr	r2, [pc, #52]	; (4254 <init+0x110>)
    421e:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    4220:	46c0      	nop			; (mov r8, r8)
    4222:	4b0d      	ldr	r3, [pc, #52]	; (4258 <init+0x114>)
    4224:	79db      	ldrb	r3, [r3, #7]
    4226:	061b      	lsls	r3, r3, #24
    4228:	0fdb      	lsrs	r3, r3, #31
    422a:	b2db      	uxtb	r3, r3
    422c:	2b01      	cmp	r3, #1
    422e:	d0f8      	beq.n	4222 <init+0xde>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    4230:	4b09      	ldr	r3, [pc, #36]	; (4258 <init+0x114>)
    4232:	2241      	movs	r2, #65	; 0x41
    4234:	705a      	strb	r2, [r3, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
#endif

}
    4236:	46c0      	nop			; (mov r8, r8)
    4238:	46bd      	mov	sp, r7
    423a:	b002      	add	sp, #8
    423c:	bd80      	pop	{r7, pc}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	20000034 	.word	0x20000034
    4244:	40000400 	.word	0x40000400
    4248:	40000c00 	.word	0x40000c00
    424c:	0000401e 	.word	0x0000401e
    4250:	42004000 	.word	0x42004000
    4254:	00004021 	.word	0x00004021
    4258:	42004800 	.word	0x42004800

0000425c <analogReference>:
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    425c:	b580      	push	{r7, lr}
    425e:	b082      	sub	sp, #8
    4260:	af00      	add	r7, sp, #0
    4262:	0002      	movs	r2, r0
    4264:	1dfb      	adds	r3, r7, #7
    4266:	701a      	strb	r2, [r3, #0]
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    4268:	4b2b      	ldr	r3, [pc, #172]	; (4318 <analogReference+0xbc>)
    426a:	7e5b      	ldrb	r3, [r3, #25]
    426c:	061b      	lsls	r3, r3, #24
    426e:	0fdb      	lsrs	r3, r3, #31
    4270:	b2db      	uxtb	r3, r3
    4272:	2b01      	cmp	r3, #1
    4274:	d0f8      	beq.n	4268 <analogReference+0xc>
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
  syncADC();
  switch (mode)
    4276:	1dfb      	adds	r3, r7, #7
    4278:	781b      	ldrb	r3, [r3, #0]
    427a:	2b05      	cmp	r3, #5
    427c:	d839      	bhi.n	42f2 <analogReference+0x96>
    427e:	009a      	lsls	r2, r3, #2
    4280:	4b26      	ldr	r3, [pc, #152]	; (431c <analogReference+0xc0>)
    4282:	18d3      	adds	r3, r2, r3
    4284:	681b      	ldr	r3, [r3, #0]
    4286:	469f      	mov	pc, r3
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    4288:	4a23      	ldr	r2, [pc, #140]	; (4318 <analogReference+0xbc>)
    428a:	6913      	ldr	r3, [r2, #16]
    428c:	4924      	ldr	r1, [pc, #144]	; (4320 <analogReference+0xc4>)
    428e:	400b      	ands	r3, r1
    4290:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    4292:	4a21      	ldr	r2, [pc, #132]	; (4318 <analogReference+0xbc>)
    4294:	7853      	ldrb	r3, [r2, #1]
    4296:	210f      	movs	r1, #15
    4298:	438b      	bics	r3, r1
    429a:	1c19      	adds	r1, r3, #0
    429c:	2301      	movs	r3, #1
    429e:	430b      	orrs	r3, r1
    42a0:	7053      	strb	r3, [r2, #1]
      break;
    42a2:	e035      	b.n	4310 <analogReference+0xb4>

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    42a4:	4a1c      	ldr	r2, [pc, #112]	; (4318 <analogReference+0xbc>)
    42a6:	6913      	ldr	r3, [r2, #16]
    42a8:	491d      	ldr	r1, [pc, #116]	; (4320 <analogReference+0xc4>)
    42aa:	400b      	ands	r3, r1
    42ac:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    42ae:	4a1a      	ldr	r2, [pc, #104]	; (4318 <analogReference+0xbc>)
    42b0:	7853      	ldrb	r3, [r2, #1]
    42b2:	210f      	movs	r1, #15
    42b4:	438b      	bics	r3, r1
    42b6:	1c19      	adds	r1, r3, #0
    42b8:	2303      	movs	r3, #3
    42ba:	430b      	orrs	r3, r1
    42bc:	7053      	strb	r3, [r2, #1]
      break;
    42be:	e027      	b.n	4310 <analogReference+0xb4>

    case AR_INTERNAL1V0:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    42c0:	4a15      	ldr	r2, [pc, #84]	; (4318 <analogReference+0xbc>)
    42c2:	6913      	ldr	r3, [r2, #16]
    42c4:	4916      	ldr	r1, [pc, #88]	; (4320 <analogReference+0xc4>)
    42c6:	400b      	ands	r3, r1
    42c8:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
    42ca:	4a13      	ldr	r2, [pc, #76]	; (4318 <analogReference+0xbc>)
    42cc:	7853      	ldrb	r3, [r2, #1]
    42ce:	210f      	movs	r1, #15
    42d0:	438b      	bics	r3, r1
    42d2:	7053      	strb	r3, [r2, #1]
      break;
    42d4:	e01c      	b.n	4310 <analogReference+0xb4>

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    42d6:	4a10      	ldr	r2, [pc, #64]	; (4318 <analogReference+0xbc>)
    42d8:	6913      	ldr	r3, [r2, #16]
    42da:	4911      	ldr	r1, [pc, #68]	; (4320 <analogReference+0xc4>)
    42dc:	400b      	ands	r3, r1
    42de:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    42e0:	4a0d      	ldr	r2, [pc, #52]	; (4318 <analogReference+0xbc>)
    42e2:	7853      	ldrb	r3, [r2, #1]
    42e4:	210f      	movs	r1, #15
    42e6:	438b      	bics	r3, r1
    42e8:	1c19      	adds	r1, r3, #0
    42ea:	2302      	movs	r3, #2
    42ec:	430b      	orrs	r3, r1
    42ee:	7053      	strb	r3, [r2, #1]
      break;
    42f0:	e00e      	b.n	4310 <analogReference+0xb4>

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    42f2:	4a09      	ldr	r2, [pc, #36]	; (4318 <analogReference+0xbc>)
    42f4:	6913      	ldr	r3, [r2, #16]
    42f6:	21f0      	movs	r1, #240	; 0xf0
    42f8:	0509      	lsls	r1, r1, #20
    42fa:	430b      	orrs	r3, r1
    42fc:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    42fe:	4a06      	ldr	r2, [pc, #24]	; (4318 <analogReference+0xbc>)
    4300:	7853      	ldrb	r3, [r2, #1]
    4302:	210f      	movs	r1, #15
    4304:	438b      	bics	r3, r1
    4306:	1c19      	adds	r1, r3, #0
    4308:	2302      	movs	r3, #2
    430a:	430b      	orrs	r3, r1
    430c:	7053      	strb	r3, [r2, #1]
      break;
    430e:	46c0      	nop			; (mov r8, r8)
  }
}
    4310:	46c0      	nop			; (mov r8, r8)
    4312:	46bd      	mov	sp, r7
    4314:	b002      	add	sp, #8
    4316:	bd80      	pop	{r7, pc}
    4318:	42004000 	.word	0x42004000
    431c:	000076ac 	.word	0x000076ac
    4320:	f0ffffff 	.word	0xf0ffffff

00004324 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    4324:	b590      	push	{r4, r7, lr}
    4326:	b083      	sub	sp, #12
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
    432c:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    432e:	4990      	ldr	r1, [pc, #576]	; (4570 <pinMode+0x24c>)
    4330:	687a      	ldr	r2, [r7, #4]
    4332:	0013      	movs	r3, r2
    4334:	005b      	lsls	r3, r3, #1
    4336:	189b      	adds	r3, r3, r2
    4338:	00db      	lsls	r3, r3, #3
    433a:	18cb      	adds	r3, r1, r3
    433c:	3308      	adds	r3, #8
    433e:	781b      	ldrb	r3, [r3, #0]
    4340:	b25b      	sxtb	r3, r3
    4342:	3301      	adds	r3, #1
    4344:	d100      	bne.n	4348 <pinMode+0x24>
    4346:	e10e      	b.n	4566 <pinMode+0x242>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    4348:	683b      	ldr	r3, [r7, #0]
    434a:	2b01      	cmp	r3, #1
    434c:	d100      	bne.n	4350 <pinMode+0x2c>
    434e:	e0d6      	b.n	44fe <pinMode+0x1da>
    4350:	d305      	bcc.n	435e <pinMode+0x3a>
    4352:	2b02      	cmp	r3, #2
    4354:	d037      	beq.n	43c6 <pinMode+0xa2>
    4356:	2b03      	cmp	r3, #3
    4358:	d100      	bne.n	435c <pinMode+0x38>
    435a:	e082      	b.n	4462 <pinMode+0x13e>
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    default:
      // do nothing
    break ;
    435c:	e104      	b.n	4568 <pinMode+0x244>
  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
  {
    case INPUT:
      // Set pin to input mode
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    435e:	4885      	ldr	r0, [pc, #532]	; (4574 <pinMode+0x250>)
    4360:	4983      	ldr	r1, [pc, #524]	; (4570 <pinMode+0x24c>)
    4362:	687a      	ldr	r2, [r7, #4]
    4364:	0013      	movs	r3, r2
    4366:	005b      	lsls	r3, r3, #1
    4368:	189b      	adds	r3, r3, r2
    436a:	00db      	lsls	r3, r3, #3
    436c:	565b      	ldrsb	r3, [r3, r1]
    436e:	001c      	movs	r4, r3
    4370:	497f      	ldr	r1, [pc, #508]	; (4570 <pinMode+0x24c>)
    4372:	687a      	ldr	r2, [r7, #4]
    4374:	0013      	movs	r3, r2
    4376:	005b      	lsls	r3, r3, #1
    4378:	189b      	adds	r3, r3, r2
    437a:	00db      	lsls	r3, r3, #3
    437c:	18cb      	adds	r3, r1, r3
    437e:	3304      	adds	r3, #4
    4380:	681b      	ldr	r3, [r3, #0]
    4382:	2140      	movs	r1, #64	; 0x40
    4384:	01e2      	lsls	r2, r4, #7
    4386:	1882      	adds	r2, r0, r2
    4388:	18d3      	adds	r3, r2, r3
    438a:	185b      	adds	r3, r3, r1
    438c:	2202      	movs	r2, #2
    438e:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    4390:	4878      	ldr	r0, [pc, #480]	; (4574 <pinMode+0x250>)
    4392:	4977      	ldr	r1, [pc, #476]	; (4570 <pinMode+0x24c>)
    4394:	687a      	ldr	r2, [r7, #4]
    4396:	0013      	movs	r3, r2
    4398:	005b      	lsls	r3, r3, #1
    439a:	189b      	adds	r3, r3, r2
    439c:	00db      	lsls	r3, r3, #3
    439e:	565b      	ldrsb	r3, [r3, r1]
    43a0:	001c      	movs	r4, r3
    43a2:	4973      	ldr	r1, [pc, #460]	; (4570 <pinMode+0x24c>)
    43a4:	687a      	ldr	r2, [r7, #4]
    43a6:	0013      	movs	r3, r2
    43a8:	005b      	lsls	r3, r3, #1
    43aa:	189b      	adds	r3, r3, r2
    43ac:	00db      	lsls	r3, r3, #3
    43ae:	18cb      	adds	r3, r1, r3
    43b0:	3304      	adds	r3, #4
    43b2:	681b      	ldr	r3, [r3, #0]
    43b4:	2201      	movs	r2, #1
    43b6:	409a      	lsls	r2, r3
    43b8:	0013      	movs	r3, r2
    43ba:	001a      	movs	r2, r3
    43bc:	01e3      	lsls	r3, r4, #7
    43be:	18c3      	adds	r3, r0, r3
    43c0:	3304      	adds	r3, #4
    43c2:	601a      	str	r2, [r3, #0]
    break ;
    43c4:	e0d0      	b.n	4568 <pinMode+0x244>

    case INPUT_PULLUP:
      // Set pin to input mode with pull-up resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    43c6:	486b      	ldr	r0, [pc, #428]	; (4574 <pinMode+0x250>)
    43c8:	4969      	ldr	r1, [pc, #420]	; (4570 <pinMode+0x24c>)
    43ca:	687a      	ldr	r2, [r7, #4]
    43cc:	0013      	movs	r3, r2
    43ce:	005b      	lsls	r3, r3, #1
    43d0:	189b      	adds	r3, r3, r2
    43d2:	00db      	lsls	r3, r3, #3
    43d4:	565b      	ldrsb	r3, [r3, r1]
    43d6:	001c      	movs	r4, r3
    43d8:	4965      	ldr	r1, [pc, #404]	; (4570 <pinMode+0x24c>)
    43da:	687a      	ldr	r2, [r7, #4]
    43dc:	0013      	movs	r3, r2
    43de:	005b      	lsls	r3, r3, #1
    43e0:	189b      	adds	r3, r3, r2
    43e2:	00db      	lsls	r3, r3, #3
    43e4:	18cb      	adds	r3, r1, r3
    43e6:	3304      	adds	r3, #4
    43e8:	681b      	ldr	r3, [r3, #0]
    43ea:	2140      	movs	r1, #64	; 0x40
    43ec:	01e2      	lsls	r2, r4, #7
    43ee:	1882      	adds	r2, r0, r2
    43f0:	18d3      	adds	r3, r2, r3
    43f2:	185b      	adds	r3, r3, r1
    43f4:	2206      	movs	r2, #6
    43f6:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    43f8:	485e      	ldr	r0, [pc, #376]	; (4574 <pinMode+0x250>)
    43fa:	495d      	ldr	r1, [pc, #372]	; (4570 <pinMode+0x24c>)
    43fc:	687a      	ldr	r2, [r7, #4]
    43fe:	0013      	movs	r3, r2
    4400:	005b      	lsls	r3, r3, #1
    4402:	189b      	adds	r3, r3, r2
    4404:	00db      	lsls	r3, r3, #3
    4406:	565b      	ldrsb	r3, [r3, r1]
    4408:	001c      	movs	r4, r3
    440a:	4959      	ldr	r1, [pc, #356]	; (4570 <pinMode+0x24c>)
    440c:	687a      	ldr	r2, [r7, #4]
    440e:	0013      	movs	r3, r2
    4410:	005b      	lsls	r3, r3, #1
    4412:	189b      	adds	r3, r3, r2
    4414:	00db      	lsls	r3, r3, #3
    4416:	18cb      	adds	r3, r1, r3
    4418:	3304      	adds	r3, #4
    441a:	681b      	ldr	r3, [r3, #0]
    441c:	2201      	movs	r2, #1
    441e:	409a      	lsls	r2, r3
    4420:	0013      	movs	r3, r2
    4422:	001a      	movs	r2, r3
    4424:	01e3      	lsls	r3, r4, #7
    4426:	18c3      	adds	r3, r0, r3
    4428:	3304      	adds	r3, #4
    442a:	601a      	str	r2, [r3, #0]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.7 Data Output Value Set')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    442c:	4851      	ldr	r0, [pc, #324]	; (4574 <pinMode+0x250>)
    442e:	4950      	ldr	r1, [pc, #320]	; (4570 <pinMode+0x24c>)
    4430:	687a      	ldr	r2, [r7, #4]
    4432:	0013      	movs	r3, r2
    4434:	005b      	lsls	r3, r3, #1
    4436:	189b      	adds	r3, r3, r2
    4438:	00db      	lsls	r3, r3, #3
    443a:	565b      	ldrsb	r3, [r3, r1]
    443c:	001c      	movs	r4, r3
    443e:	494c      	ldr	r1, [pc, #304]	; (4570 <pinMode+0x24c>)
    4440:	687a      	ldr	r2, [r7, #4]
    4442:	0013      	movs	r3, r2
    4444:	005b      	lsls	r3, r3, #1
    4446:	189b      	adds	r3, r3, r2
    4448:	00db      	lsls	r3, r3, #3
    444a:	18cb      	adds	r3, r1, r3
    444c:	3304      	adds	r3, #4
    444e:	681b      	ldr	r3, [r3, #0]
    4450:	2201      	movs	r2, #1
    4452:	409a      	lsls	r2, r3
    4454:	0013      	movs	r3, r2
    4456:	001a      	movs	r2, r3
    4458:	01e3      	lsls	r3, r4, #7
    445a:	18c3      	adds	r3, r0, r3
    445c:	3318      	adds	r3, #24
    445e:	601a      	str	r2, [r3, #0]
    break ;
    4460:	e082      	b.n	4568 <pinMode+0x244>

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    4462:	4844      	ldr	r0, [pc, #272]	; (4574 <pinMode+0x250>)
    4464:	4942      	ldr	r1, [pc, #264]	; (4570 <pinMode+0x24c>)
    4466:	687a      	ldr	r2, [r7, #4]
    4468:	0013      	movs	r3, r2
    446a:	005b      	lsls	r3, r3, #1
    446c:	189b      	adds	r3, r3, r2
    446e:	00db      	lsls	r3, r3, #3
    4470:	565b      	ldrsb	r3, [r3, r1]
    4472:	001c      	movs	r4, r3
    4474:	493e      	ldr	r1, [pc, #248]	; (4570 <pinMode+0x24c>)
    4476:	687a      	ldr	r2, [r7, #4]
    4478:	0013      	movs	r3, r2
    447a:	005b      	lsls	r3, r3, #1
    447c:	189b      	adds	r3, r3, r2
    447e:	00db      	lsls	r3, r3, #3
    4480:	18cb      	adds	r3, r1, r3
    4482:	3304      	adds	r3, #4
    4484:	681b      	ldr	r3, [r3, #0]
    4486:	2140      	movs	r1, #64	; 0x40
    4488:	01e2      	lsls	r2, r4, #7
    448a:	1882      	adds	r2, r0, r2
    448c:	18d3      	adds	r3, r2, r3
    448e:	185b      	adds	r3, r3, r1
    4490:	2206      	movs	r2, #6
    4492:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    4494:	4837      	ldr	r0, [pc, #220]	; (4574 <pinMode+0x250>)
    4496:	4936      	ldr	r1, [pc, #216]	; (4570 <pinMode+0x24c>)
    4498:	687a      	ldr	r2, [r7, #4]
    449a:	0013      	movs	r3, r2
    449c:	005b      	lsls	r3, r3, #1
    449e:	189b      	adds	r3, r3, r2
    44a0:	00db      	lsls	r3, r3, #3
    44a2:	565b      	ldrsb	r3, [r3, r1]
    44a4:	001c      	movs	r4, r3
    44a6:	4932      	ldr	r1, [pc, #200]	; (4570 <pinMode+0x24c>)
    44a8:	687a      	ldr	r2, [r7, #4]
    44aa:	0013      	movs	r3, r2
    44ac:	005b      	lsls	r3, r3, #1
    44ae:	189b      	adds	r3, r3, r2
    44b0:	00db      	lsls	r3, r3, #3
    44b2:	18cb      	adds	r3, r1, r3
    44b4:	3304      	adds	r3, #4
    44b6:	681b      	ldr	r3, [r3, #0]
    44b8:	2201      	movs	r2, #1
    44ba:	409a      	lsls	r2, r3
    44bc:	0013      	movs	r3, r2
    44be:	001a      	movs	r2, r3
    44c0:	01e3      	lsls	r3, r4, #7
    44c2:	18c3      	adds	r3, r0, r3
    44c4:	3304      	adds	r3, #4
    44c6:	601a      	str	r2, [r3, #0]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.6 Data Output Value Clear')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    44c8:	482a      	ldr	r0, [pc, #168]	; (4574 <pinMode+0x250>)
    44ca:	4929      	ldr	r1, [pc, #164]	; (4570 <pinMode+0x24c>)
    44cc:	687a      	ldr	r2, [r7, #4]
    44ce:	0013      	movs	r3, r2
    44d0:	005b      	lsls	r3, r3, #1
    44d2:	189b      	adds	r3, r3, r2
    44d4:	00db      	lsls	r3, r3, #3
    44d6:	565b      	ldrsb	r3, [r3, r1]
    44d8:	001c      	movs	r4, r3
    44da:	4925      	ldr	r1, [pc, #148]	; (4570 <pinMode+0x24c>)
    44dc:	687a      	ldr	r2, [r7, #4]
    44de:	0013      	movs	r3, r2
    44e0:	005b      	lsls	r3, r3, #1
    44e2:	189b      	adds	r3, r3, r2
    44e4:	00db      	lsls	r3, r3, #3
    44e6:	18cb      	adds	r3, r1, r3
    44e8:	3304      	adds	r3, #4
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	2201      	movs	r2, #1
    44ee:	409a      	lsls	r2, r3
    44f0:	0013      	movs	r3, r2
    44f2:	001a      	movs	r2, r3
    44f4:	01e3      	lsls	r3, r4, #7
    44f6:	18c3      	adds	r3, r0, r3
    44f8:	3314      	adds	r3, #20
    44fa:	601a      	str	r2, [r3, #0]
    break ;
    44fc:	e034      	b.n	4568 <pinMode+0x244>

    case OUTPUT:
      // enable input, to support reading back values, with pullups disabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    44fe:	481d      	ldr	r0, [pc, #116]	; (4574 <pinMode+0x250>)
    4500:	491b      	ldr	r1, [pc, #108]	; (4570 <pinMode+0x24c>)
    4502:	687a      	ldr	r2, [r7, #4]
    4504:	0013      	movs	r3, r2
    4506:	005b      	lsls	r3, r3, #1
    4508:	189b      	adds	r3, r3, r2
    450a:	00db      	lsls	r3, r3, #3
    450c:	565b      	ldrsb	r3, [r3, r1]
    450e:	001c      	movs	r4, r3
    4510:	4917      	ldr	r1, [pc, #92]	; (4570 <pinMode+0x24c>)
    4512:	687a      	ldr	r2, [r7, #4]
    4514:	0013      	movs	r3, r2
    4516:	005b      	lsls	r3, r3, #1
    4518:	189b      	adds	r3, r3, r2
    451a:	00db      	lsls	r3, r3, #3
    451c:	18cb      	adds	r3, r1, r3
    451e:	3304      	adds	r3, #4
    4520:	681b      	ldr	r3, [r3, #0]
    4522:	2140      	movs	r1, #64	; 0x40
    4524:	01e2      	lsls	r2, r4, #7
    4526:	1882      	adds	r2, r0, r2
    4528:	18d3      	adds	r3, r2, r3
    452a:	185b      	adds	r3, r3, r1
    452c:	2202      	movs	r2, #2
    452e:	701a      	strb	r2, [r3, #0]

      // Set pin to output mode
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    4530:	4810      	ldr	r0, [pc, #64]	; (4574 <pinMode+0x250>)
    4532:	490f      	ldr	r1, [pc, #60]	; (4570 <pinMode+0x24c>)
    4534:	687a      	ldr	r2, [r7, #4]
    4536:	0013      	movs	r3, r2
    4538:	005b      	lsls	r3, r3, #1
    453a:	189b      	adds	r3, r3, r2
    453c:	00db      	lsls	r3, r3, #3
    453e:	565b      	ldrsb	r3, [r3, r1]
    4540:	001c      	movs	r4, r3
    4542:	490b      	ldr	r1, [pc, #44]	; (4570 <pinMode+0x24c>)
    4544:	687a      	ldr	r2, [r7, #4]
    4546:	0013      	movs	r3, r2
    4548:	005b      	lsls	r3, r3, #1
    454a:	189b      	adds	r3, r3, r2
    454c:	00db      	lsls	r3, r3, #3
    454e:	18cb      	adds	r3, r1, r3
    4550:	3304      	adds	r3, #4
    4552:	681b      	ldr	r3, [r3, #0]
    4554:	2201      	movs	r2, #1
    4556:	409a      	lsls	r2, r3
    4558:	0013      	movs	r3, r2
    455a:	001a      	movs	r2, r3
    455c:	01e3      	lsls	r3, r4, #7
    455e:	18c3      	adds	r3, r0, r3
    4560:	3308      	adds	r3, #8
    4562:	601a      	str	r2, [r3, #0]
    break ;
    4564:	e000      	b.n	4568 <pinMode+0x244>
void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
  {
    return ;
    4566:	46c0      	nop			; (mov r8, r8)

    default:
      // do nothing
    break ;
  }
}
    4568:	46bd      	mov	sp, r7
    456a:	b003      	add	sp, #12
    456c:	bd90      	pop	{r4, r7, pc}
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	000076f8 	.word	0x000076f8
    4574:	41004400 	.word	0x41004400

00004578 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    4578:	b590      	push	{r4, r7, lr}
    457a:	b087      	sub	sp, #28
    457c:	af00      	add	r7, sp, #0
    457e:	6078      	str	r0, [r7, #4]
    4580:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    4582:	4934      	ldr	r1, [pc, #208]	; (4654 <digitalWrite+0xdc>)
    4584:	687a      	ldr	r2, [r7, #4]
    4586:	0013      	movs	r3, r2
    4588:	005b      	lsls	r3, r3, #1
    458a:	189b      	adds	r3, r3, r2
    458c:	00db      	lsls	r3, r3, #3
    458e:	18cb      	adds	r3, r1, r3
    4590:	3308      	adds	r3, #8
    4592:	781b      	ldrb	r3, [r3, #0]
    4594:	b25b      	sxtb	r3, r3
    4596:	3301      	adds	r3, #1
    4598:	d058      	beq.n	464c <digitalWrite+0xd4>
  {
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
    459a:	2317      	movs	r3, #23
    459c:	18f9      	adds	r1, r7, r3
    459e:	482d      	ldr	r0, [pc, #180]	; (4654 <digitalWrite+0xdc>)
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	0013      	movs	r3, r2
    45a4:	005b      	lsls	r3, r3, #1
    45a6:	189b      	adds	r3, r3, r2
    45a8:	00db      	lsls	r3, r3, #3
    45aa:	5c1b      	ldrb	r3, [r3, r0]
    45ac:	700b      	strb	r3, [r1, #0]
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    45ae:	4929      	ldr	r1, [pc, #164]	; (4654 <digitalWrite+0xdc>)
    45b0:	687a      	ldr	r2, [r7, #4]
    45b2:	0013      	movs	r3, r2
    45b4:	005b      	lsls	r3, r3, #1
    45b6:	189b      	adds	r3, r3, r2
    45b8:	00db      	lsls	r3, r3, #3
    45ba:	18cb      	adds	r3, r1, r3
    45bc:	3304      	adds	r3, #4
    45be:	681b      	ldr	r3, [r3, #0]
    45c0:	613b      	str	r3, [r7, #16]
  uint32_t pinMask = (1ul << pin);
    45c2:	2201      	movs	r2, #1
    45c4:	693b      	ldr	r3, [r7, #16]
    45c6:	409a      	lsls	r2, r3
    45c8:	0013      	movs	r3, r2
    45ca:	60fb      	str	r3, [r7, #12]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    45cc:	4a22      	ldr	r2, [pc, #136]	; (4658 <digitalWrite+0xe0>)
    45ce:	2317      	movs	r3, #23
    45d0:	18fb      	adds	r3, r7, r3
    45d2:	781b      	ldrb	r3, [r3, #0]
    45d4:	b25b      	sxtb	r3, r3
    45d6:	01db      	lsls	r3, r3, #7
    45d8:	18d3      	adds	r3, r2, r3
    45da:	3308      	adds	r3, #8
    45dc:	681b      	ldr	r3, [r3, #0]
    45de:	68fa      	ldr	r2, [r7, #12]
    45e0:	4013      	ands	r3, r2
    45e2:	d118      	bne.n	4616 <digitalWrite+0x9e>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    45e4:	4c1c      	ldr	r4, [pc, #112]	; (4658 <digitalWrite+0xe0>)
    45e6:	2317      	movs	r3, #23
    45e8:	18fb      	adds	r3, r7, r3
    45ea:	781b      	ldrb	r3, [r3, #0]
    45ec:	b25b      	sxtb	r3, r3
    45ee:	683a      	ldr	r2, [r7, #0]
    45f0:	1e51      	subs	r1, r2, #1
    45f2:	418a      	sbcs	r2, r1
    45f4:	b2d1      	uxtb	r1, r2
    45f6:	2040      	movs	r0, #64	; 0x40
    45f8:	01db      	lsls	r3, r3, #7
    45fa:	18e2      	adds	r2, r4, r3
    45fc:	693b      	ldr	r3, [r7, #16]
    45fe:	18d3      	adds	r3, r2, r3
    4600:	181a      	adds	r2, r3, r0
    4602:	7813      	ldrb	r3, [r2, #0]
    4604:	2001      	movs	r0, #1
    4606:	4001      	ands	r1, r0
    4608:	0088      	lsls	r0, r1, #2
    460a:	2104      	movs	r1, #4
    460c:	438b      	bics	r3, r1
    460e:	1c19      	adds	r1, r3, #0
    4610:	1c03      	adds	r3, r0, #0
    4612:	430b      	orrs	r3, r1
    4614:	7013      	strb	r3, [r2, #0]
  }

  switch ( ulVal )
    4616:	683b      	ldr	r3, [r7, #0]
    4618:	2b00      	cmp	r3, #0
    461a:	d10a      	bne.n	4632 <digitalWrite+0xba>
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    461c:	4a0e      	ldr	r2, [pc, #56]	; (4658 <digitalWrite+0xe0>)
    461e:	2317      	movs	r3, #23
    4620:	18fb      	adds	r3, r7, r3
    4622:	781b      	ldrb	r3, [r3, #0]
    4624:	b25b      	sxtb	r3, r3
    4626:	01db      	lsls	r3, r3, #7
    4628:	18d3      	adds	r3, r2, r3
    462a:	3314      	adds	r3, #20
    462c:	68fa      	ldr	r2, [r7, #12]
    462e:	601a      	str	r2, [r3, #0]
    break ;
    4630:	e00a      	b.n	4648 <digitalWrite+0xd0>

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    4632:	4a09      	ldr	r2, [pc, #36]	; (4658 <digitalWrite+0xe0>)
    4634:	2317      	movs	r3, #23
    4636:	18fb      	adds	r3, r7, r3
    4638:	781b      	ldrb	r3, [r3, #0]
    463a:	b25b      	sxtb	r3, r3
    463c:	01db      	lsls	r3, r3, #7
    463e:	18d3      	adds	r3, r2, r3
    4640:	3318      	adds	r3, #24
    4642:	68fa      	ldr	r2, [r7, #12]
    4644:	601a      	str	r2, [r3, #0]
    break ;
    4646:	46c0      	nop			; (mov r8, r8)
  }

  return ;
    4648:	46c0      	nop			; (mov r8, r8)
    464a:	e000      	b.n	464e <digitalWrite+0xd6>
void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
  {
    return ;
    464c:	46c0      	nop			; (mov r8, r8)
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    464e:	46bd      	mov	sp, r7
    4650:	b007      	add	sp, #28
    4652:	bd90      	pop	{r4, r7, pc}
    4654:	000076f8 	.word	0x000076f8
    4658:	41004400 	.word	0x41004400

0000465c <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    465c:	b5f0      	push	{r4, r5, r6, r7, lr}
    465e:	b085      	sub	sp, #20
    4660:	af00      	add	r7, sp, #0
    4662:	6078      	str	r0, [r7, #4]
    4664:	000a      	movs	r2, r1
    4666:	1cfb      	adds	r3, r7, #3
    4668:	701a      	strb	r2, [r3, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    466a:	49a0      	ldr	r1, [pc, #640]	; (48ec <pinPeripheral+0x290>)
    466c:	687a      	ldr	r2, [r7, #4]
    466e:	0013      	movs	r3, r2
    4670:	005b      	lsls	r3, r3, #1
    4672:	189b      	adds	r3, r3, r2
    4674:	00db      	lsls	r3, r3, #3
    4676:	18cb      	adds	r3, r1, r3
    4678:	3308      	adds	r3, #8
    467a:	781b      	ldrb	r3, [r3, #0]
    467c:	b25b      	sxtb	r3, r3
    467e:	3301      	adds	r3, #1
    4680:	d102      	bne.n	4688 <pinPeripheral+0x2c>
  {
    return -1 ;
    4682:	2301      	movs	r3, #1
    4684:	425b      	negs	r3, r3
    4686:	e12d      	b.n	48e4 <pinPeripheral+0x288>
  }

  switch ( ulPeripheral )
    4688:	1cfb      	adds	r3, r7, #3
    468a:	781b      	ldrb	r3, [r3, #0]
    468c:	b25b      	sxtb	r3, r3
    468e:	3301      	adds	r3, #1
    4690:	2b0c      	cmp	r3, #12
    4692:	d900      	bls.n	4696 <pinPeripheral+0x3a>
    4694:	e125      	b.n	48e2 <pinPeripheral+0x286>
    4696:	009a      	lsls	r2, r3, #2
    4698:	4b95      	ldr	r3, [pc, #596]	; (48f0 <pinPeripheral+0x294>)
    469a:	18d3      	adds	r3, r2, r3
    469c:	681b      	ldr	r3, [r3, #0]
    469e:	469f      	mov	pc, r3
    case PIO_OUTPUT:
      // Disable peripheral muxing, done in pinMode
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
    46a0:	1cfb      	adds	r3, r7, #3
    46a2:	781b      	ldrb	r3, [r3, #0]
    46a4:	b25b      	sxtb	r3, r3
    46a6:	2b09      	cmp	r3, #9
    46a8:	d105      	bne.n	46b6 <pinPeripheral+0x5a>
      {
        pinMode( ulPin, INPUT ) ;
    46aa:	687b      	ldr	r3, [r7, #4]
    46ac:	2100      	movs	r1, #0
    46ae:	0018      	movs	r0, r3
    46b0:	f7ff fe38 	bl	4324 <pinMode>
          {
            // PIO_DIGITAL, do we have to do something as all cases are covered?
          }
        }
      }
    break ;
    46b4:	e114      	b.n	48e0 <pinPeripheral+0x284>
      {
        pinMode( ulPin, INPUT ) ;
      }
      else
      {
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    46b6:	1cfb      	adds	r3, r7, #3
    46b8:	781b      	ldrb	r3, [r3, #0]
    46ba:	b25b      	sxtb	r3, r3
    46bc:	2b0a      	cmp	r3, #10
    46be:	d105      	bne.n	46cc <pinPeripheral+0x70>
        {
          pinMode( ulPin, INPUT_PULLUP ) ;
    46c0:	687b      	ldr	r3, [r7, #4]
    46c2:	2102      	movs	r1, #2
    46c4:	0018      	movs	r0, r3
    46c6:	f7ff fe2d 	bl	4324 <pinMode>
          {
            // PIO_DIGITAL, do we have to do something as all cases are covered?
          }
        }
      }
    break ;
    46ca:	e109      	b.n	48e0 <pinPeripheral+0x284>
        {
          pinMode( ulPin, INPUT_PULLUP ) ;
        }
        else
        {
          if ( ulPeripheral == PIO_OUTPUT )
    46cc:	1cfb      	adds	r3, r7, #3
    46ce:	781b      	ldrb	r3, [r3, #0]
    46d0:	b25b      	sxtb	r3, r3
    46d2:	2b0b      	cmp	r3, #11
    46d4:	d000      	beq.n	46d8 <pinPeripheral+0x7c>
    46d6:	e103      	b.n	48e0 <pinPeripheral+0x284>
          {
            pinMode( ulPin, OUTPUT ) ;
    46d8:	687b      	ldr	r3, [r7, #4]
    46da:	2101      	movs	r1, #1
    46dc:	0018      	movs	r0, r3
    46de:	f7ff fe21 	bl	4324 <pinMode>
          {
            // PIO_DIGITAL, do we have to do something as all cases are covered?
          }
        }
      }
    break ;
    46e2:	e0fd      	b.n	48e0 <pinPeripheral+0x284>
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    46e4:	4981      	ldr	r1, [pc, #516]	; (48ec <pinPeripheral+0x290>)
    46e6:	687a      	ldr	r2, [r7, #4]
    46e8:	0013      	movs	r3, r2
    46ea:	005b      	lsls	r3, r3, #1
    46ec:	189b      	adds	r3, r3, r2
    46ee:	00db      	lsls	r3, r3, #3
    46f0:	18cb      	adds	r3, r1, r3
    46f2:	3304      	adds	r3, #4
    46f4:	681b      	ldr	r3, [r3, #0]
    46f6:	2201      	movs	r2, #1
    46f8:	4013      	ands	r3, r2
    46fa:	d076      	beq.n	47ea <pinPeripheral+0x18e>
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    46fc:	487d      	ldr	r0, [pc, #500]	; (48f4 <pinPeripheral+0x298>)
    46fe:	497b      	ldr	r1, [pc, #492]	; (48ec <pinPeripheral+0x290>)
    4700:	687a      	ldr	r2, [r7, #4]
    4702:	0013      	movs	r3, r2
    4704:	005b      	lsls	r3, r3, #1
    4706:	189b      	adds	r3, r3, r2
    4708:	00db      	lsls	r3, r3, #3
    470a:	565b      	ldrsb	r3, [r3, r1]
    470c:	001c      	movs	r4, r3
    470e:	4977      	ldr	r1, [pc, #476]	; (48ec <pinPeripheral+0x290>)
    4710:	687a      	ldr	r2, [r7, #4]
    4712:	0013      	movs	r3, r2
    4714:	005b      	lsls	r3, r3, #1
    4716:	189b      	adds	r3, r3, r2
    4718:	00db      	lsls	r3, r3, #3
    471a:	18cb      	adds	r3, r1, r3
    471c:	3304      	adds	r3, #4
    471e:	681b      	ldr	r3, [r3, #0]
    4720:	085b      	lsrs	r3, r3, #1
    4722:	2130      	movs	r1, #48	; 0x30
    4724:	01e2      	lsls	r2, r4, #7
    4726:	1882      	adds	r2, r0, r2
    4728:	18d3      	adds	r3, r2, r3
    472a:	185b      	adds	r3, r3, r1
    472c:	781b      	ldrb	r3, [r3, #0]
    472e:	b2db      	uxtb	r3, r3
    4730:	001a      	movs	r2, r3
    4732:	230f      	movs	r3, #15
    4734:	4013      	ands	r3, r2
    4736:	60fb      	str	r3, [r7, #12]
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    4738:	486e      	ldr	r0, [pc, #440]	; (48f4 <pinPeripheral+0x298>)
    473a:	496c      	ldr	r1, [pc, #432]	; (48ec <pinPeripheral+0x290>)
    473c:	687a      	ldr	r2, [r7, #4]
    473e:	0013      	movs	r3, r2
    4740:	005b      	lsls	r3, r3, #1
    4742:	189b      	adds	r3, r3, r2
    4744:	00db      	lsls	r3, r3, #3
    4746:	565b      	ldrsb	r3, [r3, r1]
    4748:	001d      	movs	r5, r3
    474a:	4968      	ldr	r1, [pc, #416]	; (48ec <pinPeripheral+0x290>)
    474c:	687a      	ldr	r2, [r7, #4]
    474e:	0013      	movs	r3, r2
    4750:	005b      	lsls	r3, r3, #1
    4752:	189b      	adds	r3, r3, r2
    4754:	00db      	lsls	r3, r3, #3
    4756:	18cb      	adds	r3, r1, r3
    4758:	3304      	adds	r3, #4
    475a:	681b      	ldr	r3, [r3, #0]
    475c:	085b      	lsrs	r3, r3, #1
    475e:	1cfa      	adds	r2, r7, #3
    4760:	7812      	ldrb	r2, [r2, #0]
    4762:	0112      	lsls	r2, r2, #4
    4764:	b2d1      	uxtb	r1, r2
    4766:	68fa      	ldr	r2, [r7, #12]
    4768:	b2d2      	uxtb	r2, r2
    476a:	430a      	orrs	r2, r1
    476c:	b2d4      	uxtb	r4, r2
    476e:	2130      	movs	r1, #48	; 0x30
    4770:	01ea      	lsls	r2, r5, #7
    4772:	1882      	adds	r2, r0, r2
    4774:	18d3      	adds	r3, r2, r3
    4776:	185b      	adds	r3, r3, r1
    4778:	1c22      	adds	r2, r4, #0
    477a:	701a      	strb	r2, [r3, #0]
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    477c:	4c5d      	ldr	r4, [pc, #372]	; (48f4 <pinPeripheral+0x298>)
    477e:	495b      	ldr	r1, [pc, #364]	; (48ec <pinPeripheral+0x290>)
    4780:	687a      	ldr	r2, [r7, #4]
    4782:	0013      	movs	r3, r2
    4784:	005b      	lsls	r3, r3, #1
    4786:	189b      	adds	r3, r3, r2
    4788:	00db      	lsls	r3, r3, #3
    478a:	565b      	ldrsb	r3, [r3, r1]
    478c:	001e      	movs	r6, r3
    478e:	4957      	ldr	r1, [pc, #348]	; (48ec <pinPeripheral+0x290>)
    4790:	687a      	ldr	r2, [r7, #4]
    4792:	0013      	movs	r3, r2
    4794:	005b      	lsls	r3, r3, #1
    4796:	189b      	adds	r3, r3, r2
    4798:	00db      	lsls	r3, r3, #3
    479a:	18cb      	adds	r3, r1, r3
    479c:	3304      	adds	r3, #4
    479e:	6819      	ldr	r1, [r3, #0]
    47a0:	4d54      	ldr	r5, [pc, #336]	; (48f4 <pinPeripheral+0x298>)
    47a2:	4852      	ldr	r0, [pc, #328]	; (48ec <pinPeripheral+0x290>)
    47a4:	687a      	ldr	r2, [r7, #4]
    47a6:	0013      	movs	r3, r2
    47a8:	005b      	lsls	r3, r3, #1
    47aa:	189b      	adds	r3, r3, r2
    47ac:	00db      	lsls	r3, r3, #3
    47ae:	561b      	ldrsb	r3, [r3, r0]
    47b0:	469c      	mov	ip, r3
    47b2:	484e      	ldr	r0, [pc, #312]	; (48ec <pinPeripheral+0x290>)
    47b4:	687a      	ldr	r2, [r7, #4]
    47b6:	0013      	movs	r3, r2
    47b8:	005b      	lsls	r3, r3, #1
    47ba:	189b      	adds	r3, r3, r2
    47bc:	00db      	lsls	r3, r3, #3
    47be:	18c3      	adds	r3, r0, r3
    47c0:	3304      	adds	r3, #4
    47c2:	681b      	ldr	r3, [r3, #0]
    47c4:	2040      	movs	r0, #64	; 0x40
    47c6:	4662      	mov	r2, ip
    47c8:	01d2      	lsls	r2, r2, #7
    47ca:	18aa      	adds	r2, r5, r2
    47cc:	18d3      	adds	r3, r2, r3
    47ce:	181b      	adds	r3, r3, r0
    47d0:	781b      	ldrb	r3, [r3, #0]
    47d2:	b2db      	uxtb	r3, r3
    47d4:	2201      	movs	r2, #1
    47d6:	4313      	orrs	r3, r2
    47d8:	b2d8      	uxtb	r0, r3
    47da:	2240      	movs	r2, #64	; 0x40
    47dc:	01f3      	lsls	r3, r6, #7
    47de:	18e3      	adds	r3, r4, r3
    47e0:	185b      	adds	r3, r3, r1
    47e2:	189b      	adds	r3, r3, r2
    47e4:	1c02      	adds	r2, r0, #0
    47e6:	701a      	strb	r2, [r3, #0]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
      }
#endif
    break ;
    47e8:	e07b      	b.n	48e2 <pinPeripheral+0x286>
      }
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    47ea:	4842      	ldr	r0, [pc, #264]	; (48f4 <pinPeripheral+0x298>)
    47ec:	493f      	ldr	r1, [pc, #252]	; (48ec <pinPeripheral+0x290>)
    47ee:	687a      	ldr	r2, [r7, #4]
    47f0:	0013      	movs	r3, r2
    47f2:	005b      	lsls	r3, r3, #1
    47f4:	189b      	adds	r3, r3, r2
    47f6:	00db      	lsls	r3, r3, #3
    47f8:	565b      	ldrsb	r3, [r3, r1]
    47fa:	001c      	movs	r4, r3
    47fc:	493b      	ldr	r1, [pc, #236]	; (48ec <pinPeripheral+0x290>)
    47fe:	687a      	ldr	r2, [r7, #4]
    4800:	0013      	movs	r3, r2
    4802:	005b      	lsls	r3, r3, #1
    4804:	189b      	adds	r3, r3, r2
    4806:	00db      	lsls	r3, r3, #3
    4808:	18cb      	adds	r3, r1, r3
    480a:	3304      	adds	r3, #4
    480c:	681b      	ldr	r3, [r3, #0]
    480e:	085b      	lsrs	r3, r3, #1
    4810:	2130      	movs	r1, #48	; 0x30
    4812:	01e2      	lsls	r2, r4, #7
    4814:	1882      	adds	r2, r0, r2
    4816:	18d3      	adds	r3, r2, r3
    4818:	185b      	adds	r3, r3, r1
    481a:	781b      	ldrb	r3, [r3, #0]
    481c:	b2db      	uxtb	r3, r3
    481e:	001a      	movs	r2, r3
    4820:	23f0      	movs	r3, #240	; 0xf0
    4822:	4013      	ands	r3, r2
    4824:	60bb      	str	r3, [r7, #8]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    4826:	4833      	ldr	r0, [pc, #204]	; (48f4 <pinPeripheral+0x298>)
    4828:	4930      	ldr	r1, [pc, #192]	; (48ec <pinPeripheral+0x290>)
    482a:	687a      	ldr	r2, [r7, #4]
    482c:	0013      	movs	r3, r2
    482e:	005b      	lsls	r3, r3, #1
    4830:	189b      	adds	r3, r3, r2
    4832:	00db      	lsls	r3, r3, #3
    4834:	565b      	ldrsb	r3, [r3, r1]
    4836:	001d      	movs	r5, r3
    4838:	492c      	ldr	r1, [pc, #176]	; (48ec <pinPeripheral+0x290>)
    483a:	687a      	ldr	r2, [r7, #4]
    483c:	0013      	movs	r3, r2
    483e:	005b      	lsls	r3, r3, #1
    4840:	189b      	adds	r3, r3, r2
    4842:	00db      	lsls	r3, r3, #3
    4844:	18cb      	adds	r3, r1, r3
    4846:	3304      	adds	r3, #4
    4848:	681b      	ldr	r3, [r3, #0]
    484a:	085b      	lsrs	r3, r3, #1
    484c:	1cfa      	adds	r2, r7, #3
    484e:	7812      	ldrb	r2, [r2, #0]
    4850:	210f      	movs	r1, #15
    4852:	400a      	ands	r2, r1
    4854:	b2d1      	uxtb	r1, r2
    4856:	68ba      	ldr	r2, [r7, #8]
    4858:	b2d2      	uxtb	r2, r2
    485a:	430a      	orrs	r2, r1
    485c:	b2d4      	uxtb	r4, r2
    485e:	2130      	movs	r1, #48	; 0x30
    4860:	01ea      	lsls	r2, r5, #7
    4862:	1882      	adds	r2, r0, r2
    4864:	18d3      	adds	r3, r2, r3
    4866:	185b      	adds	r3, r3, r1
    4868:	1c22      	adds	r2, r4, #0
    486a:	701a      	strb	r2, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    486c:	4c21      	ldr	r4, [pc, #132]	; (48f4 <pinPeripheral+0x298>)
    486e:	491f      	ldr	r1, [pc, #124]	; (48ec <pinPeripheral+0x290>)
    4870:	687a      	ldr	r2, [r7, #4]
    4872:	0013      	movs	r3, r2
    4874:	005b      	lsls	r3, r3, #1
    4876:	189b      	adds	r3, r3, r2
    4878:	00db      	lsls	r3, r3, #3
    487a:	565b      	ldrsb	r3, [r3, r1]
    487c:	001e      	movs	r6, r3
    487e:	491b      	ldr	r1, [pc, #108]	; (48ec <pinPeripheral+0x290>)
    4880:	687a      	ldr	r2, [r7, #4]
    4882:	0013      	movs	r3, r2
    4884:	005b      	lsls	r3, r3, #1
    4886:	189b      	adds	r3, r3, r2
    4888:	00db      	lsls	r3, r3, #3
    488a:	18cb      	adds	r3, r1, r3
    488c:	3304      	adds	r3, #4
    488e:	6819      	ldr	r1, [r3, #0]
    4890:	4d18      	ldr	r5, [pc, #96]	; (48f4 <pinPeripheral+0x298>)
    4892:	4816      	ldr	r0, [pc, #88]	; (48ec <pinPeripheral+0x290>)
    4894:	687a      	ldr	r2, [r7, #4]
    4896:	0013      	movs	r3, r2
    4898:	005b      	lsls	r3, r3, #1
    489a:	189b      	adds	r3, r3, r2
    489c:	00db      	lsls	r3, r3, #3
    489e:	561b      	ldrsb	r3, [r3, r0]
    48a0:	469c      	mov	ip, r3
    48a2:	4812      	ldr	r0, [pc, #72]	; (48ec <pinPeripheral+0x290>)
    48a4:	687a      	ldr	r2, [r7, #4]
    48a6:	0013      	movs	r3, r2
    48a8:	005b      	lsls	r3, r3, #1
    48aa:	189b      	adds	r3, r3, r2
    48ac:	00db      	lsls	r3, r3, #3
    48ae:	18c3      	adds	r3, r0, r3
    48b0:	3304      	adds	r3, #4
    48b2:	681b      	ldr	r3, [r3, #0]
    48b4:	2040      	movs	r0, #64	; 0x40
    48b6:	4662      	mov	r2, ip
    48b8:	01d2      	lsls	r2, r2, #7
    48ba:	18aa      	adds	r2, r5, r2
    48bc:	18d3      	adds	r3, r2, r3
    48be:	181b      	adds	r3, r3, r0
    48c0:	781b      	ldrb	r3, [r3, #0]
    48c2:	b2db      	uxtb	r3, r3
    48c4:	2201      	movs	r2, #1
    48c6:	4313      	orrs	r3, r2
    48c8:	b2d8      	uxtb	r0, r3
    48ca:	2240      	movs	r2, #64	; 0x40
    48cc:	01f3      	lsls	r3, r6, #7
    48ce:	18e3      	adds	r3, r4, r3
    48d0:	185b      	adds	r3, r3, r1
    48d2:	189b      	adds	r3, r3, r2
    48d4:	1c02      	adds	r2, r0, #0
    48d6:	701a      	strb	r2, [r3, #0]
      }
#endif
    break ;
    48d8:	e003      	b.n	48e2 <pinPeripheral+0x286>

    case PIO_NOT_A_PIN:
      return -1l ;
    48da:	2301      	movs	r3, #1
    48dc:	425b      	negs	r3, r3
    48de:	e001      	b.n	48e4 <pinPeripheral+0x288>
          {
            // PIO_DIGITAL, do we have to do something as all cases are covered?
          }
        }
      }
    break ;
    48e0:	46c0      	nop			; (mov r8, r8)
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    48e2:	2300      	movs	r3, #0
}
    48e4:	0018      	movs	r0, r3
    48e6:	46bd      	mov	sp, r7
    48e8:	b005      	add	sp, #20
    48ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48ec:	000076f8 	.word	0x000076f8
    48f0:	000076c4 	.word	0x000076c4
    48f4:	41004400 	.word	0x41004400

000048f8 <_Z10fill_solidP4CRGBiRKS_>:



void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    48f8:	b580      	push	{r7, lr}
    48fa:	b088      	sub	sp, #32
    48fc:	af00      	add	r7, sp, #0
    48fe:	60f8      	str	r0, [r7, #12]
    4900:	60b9      	str	r1, [r7, #8]
    4902:	607a      	str	r2, [r7, #4]
    for( int i = 0; i < numToFill; i++) {
    4904:	2300      	movs	r3, #0
    4906:	61fb      	str	r3, [r7, #28]
    4908:	69fa      	ldr	r2, [r7, #28]
    490a:	68bb      	ldr	r3, [r7, #8]
    490c:	429a      	cmp	r2, r3
    490e:	da18      	bge.n	4942 <_Z10fill_solidP4CRGBiRKS_+0x4a>
        leds[i] = color;
    4910:	69fa      	ldr	r2, [r7, #28]
    4912:	0013      	movs	r3, r2
    4914:	005b      	lsls	r3, r3, #1
    4916:	189b      	adds	r3, r3, r2
    4918:	68fa      	ldr	r2, [r7, #12]
    491a:	18d3      	adds	r3, r2, r3
    491c:	61bb      	str	r3, [r7, #24]
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	617b      	str	r3, [r7, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4922:	697b      	ldr	r3, [r7, #20]
    4924:	781a      	ldrb	r2, [r3, #0]
    4926:	69bb      	ldr	r3, [r7, #24]
    4928:	701a      	strb	r2, [r3, #0]
        g = rhs.g;
    492a:	697b      	ldr	r3, [r7, #20]
    492c:	785a      	ldrb	r2, [r3, #1]
    492e:	69bb      	ldr	r3, [r7, #24]
    4930:	705a      	strb	r2, [r3, #1]
        b = rhs.b;
    4932:	697b      	ldr	r3, [r7, #20]
    4934:	789a      	ldrb	r2, [r3, #2]
    4936:	69bb      	ldr	r3, [r7, #24]
    4938:	709a      	strb	r2, [r3, #2]


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    493a:	69fb      	ldr	r3, [r7, #28]
    493c:	3301      	adds	r3, #1
    493e:	61fb      	str	r3, [r7, #28]
    4940:	e7e2      	b.n	4908 <_Z10fill_solidP4CRGBiRKS_+0x10>
        leds[i] = color;
    }
}
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	46bd      	mov	sp, r7
    4946:	b008      	add	sp, #32
    4948:	bd80      	pop	{r7, pc}
    494a:	46c0      	nop			; (mov r8, r8)

0000494c <_ZN14CLEDController8showLedsEh>:
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
    494c:	b5f0      	push	{r4, r5, r6, r7, lr}
    494e:	b085      	sub	sp, #20
    4950:	af00      	add	r7, sp, #0
    4952:	6078      	str	r0, [r7, #4]
    4954:	000a      	movs	r2, r1
    4956:	1cfb      	adds	r3, r7, #3
    4958:	701a      	strb	r2, [r3, #0]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	681b      	ldr	r3, [r3, #0]
    495e:	3304      	adds	r3, #4
    4960:	681c      	ldr	r4, [r3, #0]
    4962:	687b      	ldr	r3, [r7, #4]
    4964:	685d      	ldr	r5, [r3, #4]
    4966:	687b      	ldr	r3, [r7, #4]
    4968:	695e      	ldr	r6, [r3, #20]
    496a:	230c      	movs	r3, #12
    496c:	18f8      	adds	r0, r7, r3
    496e:	1cfb      	adds	r3, r7, #3
    4970:	781a      	ldrb	r2, [r3, #0]
    4972:	687b      	ldr	r3, [r7, #4]
    4974:	0019      	movs	r1, r3
    4976:	f7fb fc99 	bl	2ac <_ZN14CLEDController13getAdjustmentEh>
    497a:	230c      	movs	r3, #12
    497c:	18fb      	adds	r3, r7, r3
    497e:	6878      	ldr	r0, [r7, #4]
    4980:	0032      	movs	r2, r6
    4982:	0029      	movs	r1, r5
    4984:	47a0      	blx	r4
    }
    4986:	46c0      	nop			; (mov r8, r8)
    4988:	46bd      	mov	sp, r7
    498a:	b005      	add	sp, #20
    498c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    498e:	46c0      	nop			; (mov r8, r8)

00004990 <_ZN14CLEDController4headEv>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    4990:	b580      	push	{r7, lr}
    4992:	af00      	add	r7, sp, #0
    4994:	4b02      	ldr	r3, [pc, #8]	; (49a0 <_ZN14CLEDController4headEv+0x10>)
    4996:	681b      	ldr	r3, [r3, #0]
    4998:	0018      	movs	r0, r3
    499a:	46bd      	mov	sp, r7
    499c:	bd80      	pop	{r7, pc}
    499e:	46c0      	nop			; (mov r8, r8)
    49a0:	200007f4 	.word	0x200007f4

000049a4 <_ZN14CLEDController4nextEv>:
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }
    49a4:	b580      	push	{r7, lr}
    49a6:	b082      	sub	sp, #8
    49a8:	af00      	add	r7, sp, #0
    49aa:	6078      	str	r0, [r7, #4]
    49ac:	687b      	ldr	r3, [r7, #4]
    49ae:	689b      	ldr	r3, [r3, #8]
    49b0:	0018      	movs	r0, r3
    49b2:	46bd      	mov	sp, r7
    49b4:	b002      	add	sp, #8
    49b6:	bd80      	pop	{r7, pc}

000049b8 <_ZN14CLEDController7setLedsEP4CRGBi>:

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
    49b8:	b580      	push	{r7, lr}
    49ba:	b084      	sub	sp, #16
    49bc:	af00      	add	r7, sp, #0
    49be:	60f8      	str	r0, [r7, #12]
    49c0:	60b9      	str	r1, [r7, #8]
    49c2:	607a      	str	r2, [r7, #4]
        m_Data = data;
    49c4:	68fb      	ldr	r3, [r7, #12]
    49c6:	68ba      	ldr	r2, [r7, #8]
    49c8:	605a      	str	r2, [r3, #4]
        m_nLeds = nLeds;
    49ca:	68fb      	ldr	r3, [r7, #12]
    49cc:	687a      	ldr	r2, [r7, #4]
    49ce:	615a      	str	r2, [r3, #20]
        return *this;
    49d0:	68fb      	ldr	r3, [r7, #12]
    }
    49d2:	0018      	movs	r0, r3
    49d4:	46bd      	mov	sp, r7
    49d6:	b004      	add	sp, #16
    49d8:	bd80      	pop	{r7, pc}
    49da:	46c0      	nop			; (mov r8, r8)

000049dc <_ZN14CLEDController9setDitherEh>:

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    49dc:	b580      	push	{r7, lr}
    49de:	b082      	sub	sp, #8
    49e0:	af00      	add	r7, sp, #0
    49e2:	6078      	str	r0, [r7, #4]
    49e4:	000a      	movs	r2, r1
    49e6:	1cfb      	adds	r3, r7, #3
    49e8:	701a      	strb	r2, [r3, #0]
    49ea:	687b      	ldr	r3, [r7, #4]
    49ec:	1cfa      	adds	r2, r7, #3
    49ee:	7812      	ldrb	r2, [r2, #0]
    49f0:	749a      	strb	r2, [r3, #18]
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	0018      	movs	r0, r3
    49f6:	46bd      	mov	sp, r7
    49f8:	b002      	add	sp, #8
    49fa:	bd80      	pop	{r7, pc}

000049fc <_ZN8CFastLEDC1Ev>:
uint32_t _frame_cnt=0;
uint32_t _retry_cnt=0;

// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
    49fc:	b580      	push	{r7, lr}
    49fe:	b082      	sub	sp, #8
    4a00:	af00      	add	r7, sp, #0
    4a02:	6078      	str	r0, [r7, #4]
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    4a04:	687b      	ldr	r3, [r7, #4]
    4a06:	22ff      	movs	r2, #255	; 0xff
    4a08:	701a      	strb	r2, [r3, #0]
	m_nFPS = 0;
    4a0a:	687b      	ldr	r3, [r7, #4]
    4a0c:	2200      	movs	r2, #0
    4a0e:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	2200      	movs	r2, #0
    4a14:	60da      	str	r2, [r3, #12]
	m_nPowerData = 0xFFFFFFFF;
    4a16:	687b      	ldr	r3, [r7, #4]
    4a18:	2201      	movs	r2, #1
    4a1a:	4252      	negs	r2, r2
    4a1c:	609a      	str	r2, [r3, #8]
}
    4a1e:	687b      	ldr	r3, [r7, #4]
    4a20:	0018      	movs	r0, r3
    4a22:	46bd      	mov	sp, r7
    4a24:	b002      	add	sp, #8
    4a26:	bd80      	pop	{r7, pc}

00004a28 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>:

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    4a28:	b580      	push	{r7, lr}
    4a2a:	b086      	sub	sp, #24
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	60f8      	str	r0, [r7, #12]
    4a30:	60b9      	str	r1, [r7, #8]
    4a32:	607a      	str	r2, [r7, #4]
    4a34:	603b      	str	r3, [r7, #0]
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    4a36:	683b      	ldr	r3, [r7, #0]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	dd01      	ble.n	4a40 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x18>
    4a3c:	687b      	ldr	r3, [r7, #4]
    4a3e:	e000      	b.n	4a42 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x1a>
    4a40:	2300      	movs	r3, #0
    4a42:	617b      	str	r3, [r7, #20]
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    4a44:	683b      	ldr	r3, [r7, #0]
    4a46:	2b00      	cmp	r3, #0
    4a48:	dd01      	ble.n	4a4e <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x26>
    4a4a:	683b      	ldr	r3, [r7, #0]
    4a4c:	e000      	b.n	4a50 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x28>
    4a4e:	687b      	ldr	r3, [r7, #4]
    4a50:	613b      	str	r3, [r7, #16]

	pLed->init();
    4a52:	68fb      	ldr	r3, [r7, #12]
    4a54:	681b      	ldr	r3, [r3, #0]
    4a56:	3308      	adds	r3, #8
    4a58:	681b      	ldr	r3, [r3, #0]
    4a5a:	68fa      	ldr	r2, [r7, #12]
    4a5c:	0010      	movs	r0, r2
    4a5e:	4798      	blx	r3
	pLed->setLeds(data + nOffset, nLeds);
    4a60:	697a      	ldr	r2, [r7, #20]
    4a62:	0013      	movs	r3, r2
    4a64:	005b      	lsls	r3, r3, #1
    4a66:	189b      	adds	r3, r3, r2
    4a68:	68ba      	ldr	r2, [r7, #8]
    4a6a:	18d1      	adds	r1, r2, r3
    4a6c:	693a      	ldr	r2, [r7, #16]
    4a6e:	68fb      	ldr	r3, [r7, #12]
    4a70:	0018      	movs	r0, r3
    4a72:	f7ff ffa1 	bl	49b8 <_ZN14CLEDController7setLedsEP4CRGBi>
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    4a76:	68fb      	ldr	r3, [r7, #12]
    4a78:	681b      	ldr	r3, [r3, #0]
    4a7a:	3314      	adds	r3, #20
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	68fa      	ldr	r2, [r7, #12]
    4a80:	0010      	movs	r0, r2
    4a82:	4798      	blx	r3
    4a84:	0003      	movs	r3, r0
    4a86:	0019      	movs	r1, r3
    4a88:	4b04      	ldr	r3, [pc, #16]	; (4a9c <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x74>)
    4a8a:	2201      	movs	r2, #1
    4a8c:	0018      	movs	r0, r3
    4a8e:	f000 f8a9 	bl	4be4 <_ZN8CFastLED17setMaxRefreshRateEtb>
	return *pLed;
    4a92:	68fb      	ldr	r3, [r7, #12]
}
    4a94:	0018      	movs	r0, r3
    4a96:	46bd      	mov	sp, r7
    4a98:	b006      	add	sp, #24
    4a9a:	bd80      	pop	{r7, pc}
    4a9c:	200007e4 	.word	0x200007e4

00004aa0 <_ZN8CFastLED4showEh>:

void CFastLED::show(uint8_t scale) {
    4aa0:	b590      	push	{r4, r7, lr}
    4aa2:	b085      	sub	sp, #20
    4aa4:	af00      	add	r7, sp, #0
    4aa6:	6078      	str	r0, [r7, #4]
    4aa8:	000a      	movs	r2, r1
    4aaa:	1cfb      	adds	r3, r7, #3
    4aac:	701a      	strb	r2, [r3, #0]
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	685b      	ldr	r3, [r3, #4]
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	d00b      	beq.n	4ace <_ZN8CFastLED4showEh+0x2e>
    4ab6:	f7fc fe27 	bl	1708 <micros>
    4aba:	0002      	movs	r2, r0
    4abc:	4b2b      	ldr	r3, [pc, #172]	; (4b6c <_ZN8CFastLED4showEh+0xcc>)
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	1ad2      	subs	r2, r2, r3
    4ac2:	687b      	ldr	r3, [r7, #4]
    4ac4:	685b      	ldr	r3, [r3, #4]
    4ac6:	429a      	cmp	r2, r3
    4ac8:	d201      	bcs.n	4ace <_ZN8CFastLED4showEh+0x2e>
    4aca:	2301      	movs	r3, #1
    4acc:	e000      	b.n	4ad0 <_ZN8CFastLED4showEh+0x30>
    4ace:	2300      	movs	r3, #0
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d000      	beq.n	4ad6 <_ZN8CFastLED4showEh+0x36>
    4ad4:	e7eb      	b.n	4aae <_ZN8CFastLED4showEh+0xe>
	lastshow = micros();
    4ad6:	f7fc fe17 	bl	1708 <micros>
    4ada:	0002      	movs	r2, r0
    4adc:	4b23      	ldr	r3, [pc, #140]	; (4b6c <_ZN8CFastLED4showEh+0xcc>)
    4ade:	601a      	str	r2, [r3, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    4ae0:	687b      	ldr	r3, [r7, #4]
    4ae2:	68db      	ldr	r3, [r3, #12]
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	d00a      	beq.n	4afe <_ZN8CFastLED4showEh+0x5e>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    4ae8:	687b      	ldr	r3, [r7, #4]
    4aea:	68da      	ldr	r2, [r3, #12]
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	6899      	ldr	r1, [r3, #8]
    4af0:	1cfc      	adds	r4, r7, #3
    4af2:	1cfb      	adds	r3, r7, #3
    4af4:	781b      	ldrb	r3, [r3, #0]
    4af6:	0018      	movs	r0, r3
    4af8:	4790      	blx	r2
    4afa:	0003      	movs	r3, r0
    4afc:	7023      	strb	r3, [r4, #0]
	}

	CLEDController *pCur = CLEDController::head();
    4afe:	f7ff ff47 	bl	4990 <_ZN14CLEDController4headEv>
    4b02:	0003      	movs	r3, r0
    4b04:	60fb      	str	r3, [r7, #12]
	while(pCur) {
    4b06:	68fb      	ldr	r3, [r7, #12]
    4b08:	2b00      	cmp	r3, #0
    4b0a:	d026      	beq.n	4b5a <_ZN8CFastLED4showEh+0xba>
		uint8_t d = pCur->getDither();
    4b0c:	230b      	movs	r3, #11
    4b0e:	18fc      	adds	r4, r7, r3
    4b10:	68fb      	ldr	r3, [r7, #12]
    4b12:	0018      	movs	r0, r3
    4b14:	f7fb fba2 	bl	25c <_ZN14CLEDController9getDitherEv>
    4b18:	0003      	movs	r3, r0
    4b1a:	7023      	strb	r3, [r4, #0]
		if(m_nFPS < 100) { pCur->setDither(0); }
    4b1c:	687b      	ldr	r3, [r7, #4]
    4b1e:	885b      	ldrh	r3, [r3, #2]
    4b20:	2b63      	cmp	r3, #99	; 0x63
    4b22:	d804      	bhi.n	4b2e <_ZN8CFastLED4showEh+0x8e>
    4b24:	68fb      	ldr	r3, [r7, #12]
    4b26:	2100      	movs	r1, #0
    4b28:	0018      	movs	r0, r3
    4b2a:	f7ff ff57 	bl	49dc <_ZN14CLEDController9setDitherEh>
		pCur->showLeds(scale);
    4b2e:	1cfb      	adds	r3, r7, #3
    4b30:	781a      	ldrb	r2, [r3, #0]
    4b32:	68fb      	ldr	r3, [r7, #12]
    4b34:	0011      	movs	r1, r2
    4b36:	0018      	movs	r0, r3
    4b38:	f7ff ff08 	bl	494c <_ZN14CLEDController8showLedsEh>
		pCur->setDither(d);
    4b3c:	230b      	movs	r3, #11
    4b3e:	18fb      	adds	r3, r7, r3
    4b40:	781a      	ldrb	r2, [r3, #0]
    4b42:	68fb      	ldr	r3, [r7, #12]
    4b44:	0011      	movs	r1, r2
    4b46:	0018      	movs	r0, r3
    4b48:	f7ff ff48 	bl	49dc <_ZN14CLEDController9setDitherEh>
		pCur = pCur->next();
    4b4c:	68fb      	ldr	r3, [r7, #12]
    4b4e:	0018      	movs	r0, r3
    4b50:	f7ff ff28 	bl	49a4 <_ZN14CLEDController4nextEv>
    4b54:	0003      	movs	r3, r0
    4b56:	60fb      	str	r3, [r7, #12]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    4b58:	e7d5      	b.n	4b06 <_ZN8CFastLED4showEh+0x66>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    4b5a:	687b      	ldr	r3, [r7, #4]
    4b5c:	2119      	movs	r1, #25
    4b5e:	0018      	movs	r0, r3
    4b60:	f000 f806 	bl	4b70 <_ZN8CFastLED8countFPSEi>
}
    4b64:	46c0      	nop			; (mov r8, r8)
    4b66:	46bd      	mov	sp, r7
    4b68:	b005      	add	sp, #20
    4b6a:	bd90      	pop	{r4, r7, pc}
    4b6c:	200007fc 	.word	0x200007fc

00004b70 <_ZN8CFastLED8countFPSEi>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    4b70:	b580      	push	{r7, lr}
    4b72:	b084      	sub	sp, #16
    4b74:	af00      	add	r7, sp, #0
    4b76:	6078      	str	r0, [r7, #4]
    4b78:	6039      	str	r1, [r7, #0]
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    4b7a:	4b18      	ldr	r3, [pc, #96]	; (4bdc <_ZN8CFastLED8countFPSEi+0x6c>)
    4b7c:	681b      	ldr	r3, [r3, #0]
    4b7e:	1c59      	adds	r1, r3, #1
    4b80:	4a16      	ldr	r2, [pc, #88]	; (4bdc <_ZN8CFastLED8countFPSEi+0x6c>)
    4b82:	6011      	str	r1, [r2, #0]
    4b84:	683a      	ldr	r2, [r7, #0]
    4b86:	17d8      	asrs	r0, r3, #31
    4b88:	0fd1      	lsrs	r1, r2, #31
    4b8a:	4293      	cmp	r3, r2
    4b8c:	4148      	adcs	r0, r1
    4b8e:	0003      	movs	r3, r0
    4b90:	b2db      	uxtb	r3, r3
    4b92:	2b00      	cmp	r3, #0
    4b94:	d01d      	beq.n	4bd2 <_ZN8CFastLED8countFPSEi+0x62>
		uint32_t now = millis();
    4b96:	f7fc fdad 	bl	16f4 <millis>
    4b9a:	0003      	movs	r3, r0
    4b9c:	60fb      	str	r3, [r7, #12]
		now -= lastframe;
    4b9e:	4b10      	ldr	r3, [pc, #64]	; (4be0 <_ZN8CFastLED8countFPSEi+0x70>)
    4ba0:	681b      	ldr	r3, [r3, #0]
    4ba2:	68fa      	ldr	r2, [r7, #12]
    4ba4:	1ad3      	subs	r3, r2, r3
    4ba6:	60fb      	str	r3, [r7, #12]
		m_nFPS = (br * 1000) / now;
    4ba8:	4b0c      	ldr	r3, [pc, #48]	; (4bdc <_ZN8CFastLED8countFPSEi+0x6c>)
    4baa:	681b      	ldr	r3, [r3, #0]
    4bac:	22fa      	movs	r2, #250	; 0xfa
    4bae:	0092      	lsls	r2, r2, #2
    4bb0:	4353      	muls	r3, r2
    4bb2:	68f9      	ldr	r1, [r7, #12]
    4bb4:	0018      	movs	r0, r3
    4bb6:	f001 fd03 	bl	65c0 <__aeabi_uidiv>
    4bba:	0003      	movs	r3, r0
    4bbc:	b29a      	uxth	r2, r3
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	805a      	strh	r2, [r3, #2]
    br = 0;
    4bc2:	4b06      	ldr	r3, [pc, #24]	; (4bdc <_ZN8CFastLED8countFPSEi+0x6c>)
    4bc4:	2200      	movs	r2, #0
    4bc6:	601a      	str	r2, [r3, #0]
    lastframe = millis();
    4bc8:	f7fc fd94 	bl	16f4 <millis>
    4bcc:	0002      	movs	r2, r0
    4bce:	4b04      	ldr	r3, [pc, #16]	; (4be0 <_ZN8CFastLED8countFPSEi+0x70>)
    4bd0:	601a      	str	r2, [r3, #0]
  }
}
    4bd2:	46c0      	nop			; (mov r8, r8)
    4bd4:	46bd      	mov	sp, r7
    4bd6:	b004      	add	sp, #16
    4bd8:	bd80      	pop	{r7, pc}
    4bda:	46c0      	nop			; (mov r8, r8)
    4bdc:	20000800 	.word	0x20000800
    4be0:	20000804 	.word	0x20000804

00004be4 <_ZN8CFastLED17setMaxRefreshRateEtb>:

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
    4be4:	b590      	push	{r4, r7, lr}
    4be6:	b083      	sub	sp, #12
    4be8:	af00      	add	r7, sp, #0
    4bea:	6078      	str	r0, [r7, #4]
    4bec:	0008      	movs	r0, r1
    4bee:	0011      	movs	r1, r2
    4bf0:	1cbb      	adds	r3, r7, #2
    4bf2:	1c02      	adds	r2, r0, #0
    4bf4:	801a      	strh	r2, [r3, #0]
    4bf6:	1c7b      	adds	r3, r7, #1
    4bf8:	1c0a      	adds	r2, r1, #0
    4bfa:	701a      	strb	r2, [r3, #0]
  if(constrain) {
    4bfc:	1c7b      	adds	r3, r7, #1
    4bfe:	781b      	ldrb	r3, [r3, #0]
    4c00:	2b00      	cmp	r3, #0
    4c02:	d014      	beq.n	4c2e <_ZN8CFastLED17setMaxRefreshRateEtb+0x4a>
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    4c04:	1cbb      	adds	r3, r7, #2
    4c06:	881b      	ldrh	r3, [r3, #0]
    4c08:	2b00      	cmp	r3, #0
    4c0a:	d022      	beq.n	4c52 <_ZN8CFastLED17setMaxRefreshRateEtb+0x6e>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    4c0c:	687b      	ldr	r3, [r7, #4]
    4c0e:	685c      	ldr	r4, [r3, #4]
    4c10:	1cbb      	adds	r3, r7, #2
    4c12:	881b      	ldrh	r3, [r3, #0]
    4c14:	0019      	movs	r1, r3
    4c16:	4811      	ldr	r0, [pc, #68]	; (4c5c <_ZN8CFastLED17setMaxRefreshRateEtb+0x78>)
    4c18:	f001 fd5c 	bl	66d4 <__aeabi_idiv>
    4c1c:	0003      	movs	r3, r0
    4c1e:	001a      	movs	r2, r3
    4c20:	1e23      	subs	r3, r4, #0
    4c22:	4293      	cmp	r3, r2
    4c24:	d200      	bcs.n	4c28 <_ZN8CFastLED17setMaxRefreshRateEtb+0x44>
    4c26:	0013      	movs	r3, r2
    4c28:	687a      	ldr	r2, [r7, #4]
    4c2a:	6053      	str	r3, [r2, #4]
  } else if(refresh > 0) {
    m_nMinMicros = 1000000 / refresh;
  } else {
    m_nMinMicros = 0;
  }
}
    4c2c:	e011      	b.n	4c52 <_ZN8CFastLED17setMaxRefreshRateEtb+0x6e>
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    }
  } else if(refresh > 0) {
    4c2e:	1cbb      	adds	r3, r7, #2
    4c30:	881b      	ldrh	r3, [r3, #0]
    4c32:	2b00      	cmp	r3, #0
    4c34:	d00a      	beq.n	4c4c <_ZN8CFastLED17setMaxRefreshRateEtb+0x68>
    m_nMinMicros = 1000000 / refresh;
    4c36:	1cbb      	adds	r3, r7, #2
    4c38:	881b      	ldrh	r3, [r3, #0]
    4c3a:	0019      	movs	r1, r3
    4c3c:	4807      	ldr	r0, [pc, #28]	; (4c5c <_ZN8CFastLED17setMaxRefreshRateEtb+0x78>)
    4c3e:	f001 fd49 	bl	66d4 <__aeabi_idiv>
    4c42:	0003      	movs	r3, r0
    4c44:	001a      	movs	r2, r3
    4c46:	687b      	ldr	r3, [r7, #4]
    4c48:	605a      	str	r2, [r3, #4]
  } else {
    m_nMinMicros = 0;
  }
}
    4c4a:	e002      	b.n	4c52 <_ZN8CFastLED17setMaxRefreshRateEtb+0x6e>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    }
  } else if(refresh > 0) {
    m_nMinMicros = 1000000 / refresh;
  } else {
    m_nMinMicros = 0;
    4c4c:	687b      	ldr	r3, [r7, #4]
    4c4e:	2200      	movs	r2, #0
    4c50:	605a      	str	r2, [r3, #4]
  }
}
    4c52:	46c0      	nop			; (mov r8, r8)
    4c54:	46bd      	mov	sp, r7
    4c56:	b003      	add	sp, #12
    4c58:	bd90      	pop	{r4, r7, pc}
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	000f4240 	.word	0x000f4240

00004c60 <_Z41__static_initialization_and_destruction_0ii>:

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    4c60:	b580      	push	{r7, lr}
    4c62:	b082      	sub	sp, #8
    4c64:	af00      	add	r7, sp, #0
    4c66:	6078      	str	r0, [r7, #4]
    4c68:	6039      	str	r1, [r7, #0]
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	2b01      	cmp	r3, #1
    4c6e:	d107      	bne.n	4c80 <_Z41__static_initialization_and_destruction_0ii+0x20>
    4c70:	683b      	ldr	r3, [r7, #0]
    4c72:	4a05      	ldr	r2, [pc, #20]	; (4c88 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    4c74:	4293      	cmp	r3, r2
    4c76:	d103      	bne.n	4c80 <_Z41__static_initialization_and_destruction_0ii+0x20>

FASTLED_NAMESPACE_BEGIN

void *pSmartMatrix = NULL;

CFastLED FastLED;
    4c78:	4b04      	ldr	r3, [pc, #16]	; (4c8c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    4c7a:	0018      	movs	r0, r3
    4c7c:	f7ff febe 	bl	49fc <_ZN8CFastLEDC1Ev>
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    4c80:	46c0      	nop			; (mov r8, r8)
    4c82:	46bd      	mov	sp, r7
    4c84:	b002      	add	sp, #8
    4c86:	bd80      	pop	{r7, pc}
    4c88:	0000ffff 	.word	0x0000ffff
    4c8c:	200007e4 	.word	0x200007e4

00004c90 <_GLOBAL__sub_I_pSmartMatrix>:
    4c90:	b580      	push	{r7, lr}
    4c92:	af00      	add	r7, sp, #0
    4c94:	4b03      	ldr	r3, [pc, #12]	; (4ca4 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
    4c96:	0019      	movs	r1, r3
    4c98:	2001      	movs	r0, #1
    4c9a:	f7ff ffe1 	bl	4c60 <_Z41__static_initialization_and_destruction_0ii>
    4c9e:	46bd      	mov	sp, r7
    4ca0:	bd80      	pop	{r7, pc}
    4ca2:	46c0      	nop			; (mov r8, r8)
    4ca4:	0000ffff 	.word	0x0000ffff

00004ca8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	b08c      	sub	sp, #48	; 0x30
    4cac:	af00      	add	r7, sp, #0
    4cae:	6078      	str	r0, [r7, #4]
    4cb0:	6039      	str	r1, [r7, #0]
    // yellow appear the correct relative brightness,
    // it has to be rendered brighter than all other
    // colors.
    // Level Y1 is a moderate boost, the default.
    // Level Y2 is a strong boost.
    const uint8_t Y1 = 1;
    4cb2:	232c      	movs	r3, #44	; 0x2c
    4cb4:	18fb      	adds	r3, r7, r3
    4cb6:	2201      	movs	r2, #1
    4cb8:	701a      	strb	r2, [r3, #0]
    const uint8_t Y2 = 0;
    4cba:	232b      	movs	r3, #43	; 0x2b
    4cbc:	18fb      	adds	r3, r7, r3
    4cbe:	2200      	movs	r2, #0
    4cc0:	701a      	strb	r2, [r3, #0]
    
    // G2: Whether to divide all greens by two.
    // Depends GREATLY on your particular LEDs
    const uint8_t G2 = 0;
    4cc2:	232a      	movs	r3, #42	; 0x2a
    4cc4:	18fb      	adds	r3, r7, r3
    4cc6:	2200      	movs	r2, #0
    4cc8:	701a      	strb	r2, [r3, #0]
    
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    4cca:	2329      	movs	r3, #41	; 0x29
    4ccc:	18fb      	adds	r3, r7, r3
    4cce:	2200      	movs	r2, #0
    4cd0:	701a      	strb	r2, [r3, #0]
    
    
    uint8_t hue = hsv.hue;
    4cd2:	2328      	movs	r3, #40	; 0x28
    4cd4:	18fb      	adds	r3, r7, r3
    4cd6:	687a      	ldr	r2, [r7, #4]
    4cd8:	7812      	ldrb	r2, [r2, #0]
    4cda:	701a      	strb	r2, [r3, #0]
    uint8_t sat = hsv.sat;
    4cdc:	2327      	movs	r3, #39	; 0x27
    4cde:	18fb      	adds	r3, r7, r3
    4ce0:	687a      	ldr	r2, [r7, #4]
    4ce2:	7852      	ldrb	r2, [r2, #1]
    4ce4:	701a      	strb	r2, [r3, #0]
    uint8_t val = hsv.val;
    4ce6:	2326      	movs	r3, #38	; 0x26
    4ce8:	18fb      	adds	r3, r7, r3
    4cea:	687a      	ldr	r2, [r7, #4]
    4cec:	7892      	ldrb	r2, [r2, #2]
    4cee:	701a      	strb	r2, [r3, #0]
    
    uint8_t offset = hue & 0x1F; // 0..31
    4cf0:	2325      	movs	r3, #37	; 0x25
    4cf2:	18fb      	adds	r3, r7, r3
    4cf4:	2228      	movs	r2, #40	; 0x28
    4cf6:	18ba      	adds	r2, r7, r2
    4cf8:	7812      	ldrb	r2, [r2, #0]
    4cfa:	211f      	movs	r1, #31
    4cfc:	400a      	ands	r2, r1
    4cfe:	701a      	strb	r2, [r3, #0]
    
    // offset8 = offset * 8
    uint8_t offset8 = offset;
    4d00:	2324      	movs	r3, #36	; 0x24
    4d02:	18fb      	adds	r3, r7, r3
    4d04:	2225      	movs	r2, #37	; 0x25
    4d06:	18ba      	adds	r2, r7, r2
    4d08:	7812      	ldrb	r2, [r2, #0]
    4d0a:	701a      	strb	r2, [r3, #0]
        offset8 <<= 1;
        asm volatile("");
        offset8 <<= 1;
#else
        // On ARM and other non-AVR platforms, we just shift 3.
        offset8 <<= 3;
    4d0c:	2324      	movs	r3, #36	; 0x24
    4d0e:	18fb      	adds	r3, r7, r3
    4d10:	2224      	movs	r2, #36	; 0x24
    4d12:	18ba      	adds	r2, r7, r2
    4d14:	7812      	ldrb	r2, [r2, #0]
    4d16:	00d2      	lsls	r2, r2, #3
    4d18:	701a      	strb	r2, [r3, #0]
    4d1a:	2313      	movs	r3, #19
    4d1c:	18fb      	adds	r3, r7, r3
    4d1e:	2224      	movs	r2, #36	; 0x24
    4d20:	18ba      	adds	r2, r7, r2
    4d22:	7812      	ldrb	r2, [r2, #0]
    4d24:	701a      	strb	r2, [r3, #0]
    4d26:	2312      	movs	r3, #18
    4d28:	18fb      	adds	r3, r7, r3
    4d2a:	2255      	movs	r2, #85	; 0x55
    4d2c:	701a      	strb	r2, [r3, #0]
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    4d2e:	2313      	movs	r3, #19
    4d30:	18fb      	adds	r3, r7, r3
    4d32:	781b      	ldrb	r3, [r3, #0]
    4d34:	2212      	movs	r2, #18
    4d36:	18ba      	adds	r2, r7, r2
    4d38:	7812      	ldrb	r2, [r2, #0]
    4d3a:	3201      	adds	r2, #1
    4d3c:	4353      	muls	r3, r2
    4d3e:	121b      	asrs	r3, r3, #8
    4d40:	b2da      	uxtb	r2, r3
#endif
    }
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    4d42:	2322      	movs	r3, #34	; 0x22
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	701a      	strb	r2, [r3, #0]
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    4d48:	2328      	movs	r3, #40	; 0x28
    4d4a:	18fb      	adds	r3, r7, r3
    4d4c:	781b      	ldrb	r3, [r3, #0]
    4d4e:	b25b      	sxtb	r3, r3
    4d50:	2b00      	cmp	r3, #0
    4d52:	da00      	bge.n	4d56 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xae>
    4d54:	e07d      	b.n	4e52 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x1aa>
        // 0XX
        if( ! (hue & 0x40) ) {
    4d56:	2328      	movs	r3, #40	; 0x28
    4d58:	18fb      	adds	r3, r7, r3
    4d5a:	781b      	ldrb	r3, [r3, #0]
    4d5c:	2240      	movs	r2, #64	; 0x40
    4d5e:	4013      	ands	r3, r2
    4d60:	d12d      	bne.n	4dbe <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x116>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    4d62:	2328      	movs	r3, #40	; 0x28
    4d64:	18fb      	adds	r3, r7, r3
    4d66:	781b      	ldrb	r3, [r3, #0]
    4d68:	2220      	movs	r2, #32
    4d6a:	4013      	ands	r3, r2
    4d6c:	d114      	bne.n	4d98 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xf0>
                // 000
                //case 0: // R -> O
                r = K255 - third;
    4d6e:	232f      	movs	r3, #47	; 0x2f
    4d70:	18fb      	adds	r3, r7, r3
    4d72:	2222      	movs	r2, #34	; 0x22
    4d74:	18ba      	adds	r2, r7, r2
    4d76:	7812      	ldrb	r2, [r2, #0]
    4d78:	43d2      	mvns	r2, r2
    4d7a:	701a      	strb	r2, [r3, #0]
                g = third;
    4d7c:	232e      	movs	r3, #46	; 0x2e
    4d7e:	18fb      	adds	r3, r7, r3
    4d80:	2222      	movs	r2, #34	; 0x22
    4d82:	18ba      	adds	r2, r7, r2
    4d84:	7812      	ldrb	r2, [r2, #0]
    4d86:	701a      	strb	r2, [r3, #0]
                b = 0;
    4d88:	232d      	movs	r3, #45	; 0x2d
    4d8a:	18fb      	adds	r3, r7, r3
    4d8c:	2200      	movs	r2, #0
    4d8e:	701a      	strb	r2, [r3, #0]
                FORCE_REFERENCE(b);
    4d90:	232d      	movs	r3, #45	; 0x2d
    4d92:	18fb      	adds	r3, r7, r3
    4d94:	781b      	ldrb	r3, [r3, #0]
    4d96:	e0e0      	b.n	4f5a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2b2>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    4d98:	232f      	movs	r3, #47	; 0x2f
    4d9a:	18fb      	adds	r3, r7, r3
    4d9c:	22ab      	movs	r2, #171	; 0xab
    4d9e:	701a      	strb	r2, [r3, #0]
                    g = K85 + third ;
    4da0:	232e      	movs	r3, #46	; 0x2e
    4da2:	18fb      	adds	r3, r7, r3
    4da4:	2222      	movs	r2, #34	; 0x22
    4da6:	18ba      	adds	r2, r7, r2
    4da8:	7812      	ldrb	r2, [r2, #0]
    4daa:	3255      	adds	r2, #85	; 0x55
    4dac:	701a      	strb	r2, [r3, #0]
                    b = 0;
    4dae:	232d      	movs	r3, #45	; 0x2d
    4db0:	18fb      	adds	r3, r7, r3
    4db2:	2200      	movs	r2, #0
    4db4:	701a      	strb	r2, [r3, #0]
                    FORCE_REFERENCE(b);
    4db6:	232d      	movs	r3, #45	; 0x2d
    4db8:	18fb      	adds	r3, r7, r3
    4dba:	781b      	ldrb	r3, [r3, #0]
    4dbc:	e0cd      	b.n	4f5a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2b2>
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    4dbe:	2328      	movs	r3, #40	; 0x28
    4dc0:	18fb      	adds	r3, r7, r3
    4dc2:	781b      	ldrb	r3, [r3, #0]
    4dc4:	2220      	movs	r2, #32
    4dc6:	4013      	ands	r3, r2
    4dc8:	d12e      	bne.n	4e28 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x180>
    4dca:	2323      	movs	r3, #35	; 0x23
    4dcc:	18fb      	adds	r3, r7, r3
    4dce:	2224      	movs	r2, #36	; 0x24
    4dd0:	18ba      	adds	r2, r7, r2
    4dd2:	7812      	ldrb	r2, [r2, #0]
    4dd4:	701a      	strb	r2, [r3, #0]
    4dd6:	2311      	movs	r3, #17
    4dd8:	18fb      	adds	r3, r7, r3
    4dda:	22aa      	movs	r2, #170	; 0xaa
    4ddc:	701a      	strb	r2, [r3, #0]
    4dde:	2323      	movs	r3, #35	; 0x23
    4de0:	18fb      	adds	r3, r7, r3
    4de2:	781b      	ldrb	r3, [r3, #0]
    4de4:	2211      	movs	r2, #17
    4de6:	18ba      	adds	r2, r7, r2
    4de8:	7812      	ldrb	r2, [r2, #0]
    4dea:	3201      	adds	r2, #1
    4dec:	4353      	muls	r3, r2
    4dee:	121b      	asrs	r3, r3, #8
    4df0:	b2da      	uxtb	r2, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
    4df2:	2320      	movs	r3, #32
    4df4:	18fb      	adds	r3, r7, r3
    4df6:	701a      	strb	r2, [r3, #0]
                    r = K171 - twothirds;
    4df8:	232f      	movs	r3, #47	; 0x2f
    4dfa:	18fb      	adds	r3, r7, r3
    4dfc:	2220      	movs	r2, #32
    4dfe:	18ba      	adds	r2, r7, r2
    4e00:	7812      	ldrb	r2, [r2, #0]
    4e02:	2155      	movs	r1, #85	; 0x55
    4e04:	4249      	negs	r1, r1
    4e06:	1a8a      	subs	r2, r1, r2
    4e08:	701a      	strb	r2, [r3, #0]
                    g = K170 + third;
    4e0a:	232e      	movs	r3, #46	; 0x2e
    4e0c:	18fb      	adds	r3, r7, r3
    4e0e:	2222      	movs	r2, #34	; 0x22
    4e10:	18ba      	adds	r2, r7, r2
    4e12:	7812      	ldrb	r2, [r2, #0]
    4e14:	3a56      	subs	r2, #86	; 0x56
    4e16:	701a      	strb	r2, [r3, #0]
                    b = 0;
    4e18:	232d      	movs	r3, #45	; 0x2d
    4e1a:	18fb      	adds	r3, r7, r3
    4e1c:	2200      	movs	r2, #0
    4e1e:	701a      	strb	r2, [r3, #0]
                    FORCE_REFERENCE(b);
    4e20:	232d      	movs	r3, #45	; 0x2d
    4e22:	18fb      	adds	r3, r7, r3
    4e24:	781b      	ldrb	r3, [r3, #0]
    4e26:	e098      	b.n	4f5a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2b2>
                    FORCE_REFERENCE(b);
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
    4e28:	232f      	movs	r3, #47	; 0x2f
    4e2a:	18fb      	adds	r3, r7, r3
    4e2c:	2200      	movs	r2, #0
    4e2e:	701a      	strb	r2, [r3, #0]
                FORCE_REFERENCE(r);
    4e30:	232f      	movs	r3, #47	; 0x2f
    4e32:	18fb      	adds	r3, r7, r3
    4e34:	781b      	ldrb	r3, [r3, #0]
                g = K255 - third;
    4e36:	232e      	movs	r3, #46	; 0x2e
    4e38:	18fb      	adds	r3, r7, r3
    4e3a:	2222      	movs	r2, #34	; 0x22
    4e3c:	18ba      	adds	r2, r7, r2
    4e3e:	7812      	ldrb	r2, [r2, #0]
    4e40:	43d2      	mvns	r2, r2
    4e42:	701a      	strb	r2, [r3, #0]
                b = third;
    4e44:	232d      	movs	r3, #45	; 0x2d
    4e46:	18fb      	adds	r3, r7, r3
    4e48:	2222      	movs	r2, #34	; 0x22
    4e4a:	18ba      	adds	r2, r7, r2
    4e4c:	7812      	ldrb	r2, [r2, #0]
    4e4e:	701a      	strb	r2, [r3, #0]
    4e50:	e083      	b.n	4f5a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2b2>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    4e52:	2328      	movs	r3, #40	; 0x28
    4e54:	18fb      	adds	r3, r7, r3
    4e56:	781b      	ldrb	r3, [r3, #0]
    4e58:	2240      	movs	r2, #64	; 0x40
    4e5a:	4013      	ands	r3, r2
    4e5c:	d149      	bne.n	4ef2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x24a>
            // 10X
            if( ! ( hue & 0x20) ) {
    4e5e:	2328      	movs	r3, #40	; 0x28
    4e60:	18fb      	adds	r3, r7, r3
    4e62:	781b      	ldrb	r3, [r3, #0]
    4e64:	2220      	movs	r2, #32
    4e66:	4013      	ands	r3, r2
    4e68:	d12e      	bne.n	4ec8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x220>
                // 100
                //case 4: // A -> B
                r = 0;
    4e6a:	232f      	movs	r3, #47	; 0x2f
    4e6c:	18fb      	adds	r3, r7, r3
    4e6e:	2200      	movs	r2, #0
    4e70:	701a      	strb	r2, [r3, #0]
                FORCE_REFERENCE(r);
    4e72:	232f      	movs	r3, #47	; 0x2f
    4e74:	18fb      	adds	r3, r7, r3
    4e76:	781b      	ldrb	r3, [r3, #0]
    4e78:	2321      	movs	r3, #33	; 0x21
    4e7a:	18fb      	adds	r3, r7, r3
    4e7c:	2224      	movs	r2, #36	; 0x24
    4e7e:	18ba      	adds	r2, r7, r2
    4e80:	7812      	ldrb	r2, [r2, #0]
    4e82:	701a      	strb	r2, [r3, #0]
    4e84:	2310      	movs	r3, #16
    4e86:	18fb      	adds	r3, r7, r3
    4e88:	22aa      	movs	r2, #170	; 0xaa
    4e8a:	701a      	strb	r2, [r3, #0]
    4e8c:	2321      	movs	r3, #33	; 0x21
    4e8e:	18fb      	adds	r3, r7, r3
    4e90:	781b      	ldrb	r3, [r3, #0]
    4e92:	2210      	movs	r2, #16
    4e94:	18ba      	adds	r2, r7, r2
    4e96:	7812      	ldrb	r2, [r2, #0]
    4e98:	3201      	adds	r2, #1
    4e9a:	4353      	muls	r3, r2
    4e9c:	121b      	asrs	r3, r3, #8
    4e9e:	b2da      	uxtb	r2, r3
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
    4ea0:	231e      	movs	r3, #30
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	701a      	strb	r2, [r3, #0]
                g = K171 - twothirds; //K170?
    4ea6:	232e      	movs	r3, #46	; 0x2e
    4ea8:	18fb      	adds	r3, r7, r3
    4eaa:	221e      	movs	r2, #30
    4eac:	18ba      	adds	r2, r7, r2
    4eae:	7812      	ldrb	r2, [r2, #0]
    4eb0:	2155      	movs	r1, #85	; 0x55
    4eb2:	4249      	negs	r1, r1
    4eb4:	1a8a      	subs	r2, r1, r2
    4eb6:	701a      	strb	r2, [r3, #0]
                b = K85  + twothirds;
    4eb8:	232d      	movs	r3, #45	; 0x2d
    4eba:	18fb      	adds	r3, r7, r3
    4ebc:	221e      	movs	r2, #30
    4ebe:	18ba      	adds	r2, r7, r2
    4ec0:	7812      	ldrb	r2, [r2, #0]
    4ec2:	3255      	adds	r2, #85	; 0x55
    4ec4:	701a      	strb	r2, [r3, #0]
    4ec6:	e048      	b.n	4f5a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2b2>
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    4ec8:	232f      	movs	r3, #47	; 0x2f
    4eca:	18fb      	adds	r3, r7, r3
    4ecc:	2222      	movs	r2, #34	; 0x22
    4ece:	18ba      	adds	r2, r7, r2
    4ed0:	7812      	ldrb	r2, [r2, #0]
    4ed2:	701a      	strb	r2, [r3, #0]
                g = 0;
    4ed4:	232e      	movs	r3, #46	; 0x2e
    4ed6:	18fb      	adds	r3, r7, r3
    4ed8:	2200      	movs	r2, #0
    4eda:	701a      	strb	r2, [r3, #0]
                FORCE_REFERENCE(g);
    4edc:	232e      	movs	r3, #46	; 0x2e
    4ede:	18fb      	adds	r3, r7, r3
    4ee0:	781b      	ldrb	r3, [r3, #0]
                b = K255 - third;
    4ee2:	232d      	movs	r3, #45	; 0x2d
    4ee4:	18fb      	adds	r3, r7, r3
    4ee6:	2222      	movs	r2, #34	; 0x22
    4ee8:	18ba      	adds	r2, r7, r2
    4eea:	7812      	ldrb	r2, [r2, #0]
    4eec:	43d2      	mvns	r2, r2
    4eee:	701a      	strb	r2, [r3, #0]
    4ef0:	e033      	b.n	4f5a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2b2>
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    4ef2:	2328      	movs	r3, #40	; 0x28
    4ef4:	18fb      	adds	r3, r7, r3
    4ef6:	781b      	ldrb	r3, [r3, #0]
    4ef8:	2220      	movs	r2, #32
    4efa:	4013      	ands	r3, r2
    4efc:	d117      	bne.n	4f2e <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x286>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    4efe:	232f      	movs	r3, #47	; 0x2f
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	2222      	movs	r2, #34	; 0x22
    4f04:	18ba      	adds	r2, r7, r2
    4f06:	7812      	ldrb	r2, [r2, #0]
    4f08:	3255      	adds	r2, #85	; 0x55
    4f0a:	701a      	strb	r2, [r3, #0]
                g = 0;
    4f0c:	232e      	movs	r3, #46	; 0x2e
    4f0e:	18fb      	adds	r3, r7, r3
    4f10:	2200      	movs	r2, #0
    4f12:	701a      	strb	r2, [r3, #0]
                FORCE_REFERENCE(g);
    4f14:	232e      	movs	r3, #46	; 0x2e
    4f16:	18fb      	adds	r3, r7, r3
    4f18:	781b      	ldrb	r3, [r3, #0]
                b = K171 - third;
    4f1a:	232d      	movs	r3, #45	; 0x2d
    4f1c:	18fb      	adds	r3, r7, r3
    4f1e:	2222      	movs	r2, #34	; 0x22
    4f20:	18ba      	adds	r2, r7, r2
    4f22:	7812      	ldrb	r2, [r2, #0]
    4f24:	2155      	movs	r1, #85	; 0x55
    4f26:	4249      	negs	r1, r1
    4f28:	1a8a      	subs	r2, r1, r2
    4f2a:	701a      	strb	r2, [r3, #0]
    4f2c:	e015      	b.n	4f5a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2b2>
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    4f2e:	232f      	movs	r3, #47	; 0x2f
    4f30:	18fb      	adds	r3, r7, r3
    4f32:	2222      	movs	r2, #34	; 0x22
    4f34:	18ba      	adds	r2, r7, r2
    4f36:	7812      	ldrb	r2, [r2, #0]
    4f38:	3a56      	subs	r2, #86	; 0x56
    4f3a:	701a      	strb	r2, [r3, #0]
                g = 0;
    4f3c:	232e      	movs	r3, #46	; 0x2e
    4f3e:	18fb      	adds	r3, r7, r3
    4f40:	2200      	movs	r2, #0
    4f42:	701a      	strb	r2, [r3, #0]
                FORCE_REFERENCE(g);
    4f44:	232e      	movs	r3, #46	; 0x2e
    4f46:	18fb      	adds	r3, r7, r3
    4f48:	781b      	ldrb	r3, [r3, #0]
                b = K85 - third;
    4f4a:	232d      	movs	r3, #45	; 0x2d
    4f4c:	18fb      	adds	r3, r7, r3
    4f4e:	2222      	movs	r2, #34	; 0x22
    4f50:	18ba      	adds	r2, r7, r2
    4f52:	7812      	ldrb	r2, [r2, #0]
    4f54:	2155      	movs	r1, #85	; 0x55
    4f56:	1a8a      	subs	r2, r1, r2
    4f58:	701a      	strb	r2, [r3, #0]
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    4f5a:	2327      	movs	r3, #39	; 0x27
    4f5c:	18fb      	adds	r3, r7, r3
    4f5e:	781b      	ldrb	r3, [r3, #0]
    4f60:	2bff      	cmp	r3, #255	; 0xff
    4f62:	d100      	bne.n	4f66 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2be>
    4f64:	e0af      	b.n	50c6 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x41e>
        if( sat == 0) {
    4f66:	2327      	movs	r3, #39	; 0x27
    4f68:	18fb      	adds	r3, r7, r3
    4f6a:	781b      	ldrb	r3, [r3, #0]
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	d10c      	bne.n	4f8a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2e2>
            r = 255; b = 255; g = 255;
    4f70:	232f      	movs	r3, #47	; 0x2f
    4f72:	18fb      	adds	r3, r7, r3
    4f74:	22ff      	movs	r2, #255	; 0xff
    4f76:	701a      	strb	r2, [r3, #0]
    4f78:	232d      	movs	r3, #45	; 0x2d
    4f7a:	18fb      	adds	r3, r7, r3
    4f7c:	22ff      	movs	r2, #255	; 0xff
    4f7e:	701a      	strb	r2, [r3, #0]
    4f80:	232e      	movs	r3, #46	; 0x2e
    4f82:	18fb      	adds	r3, r7, r3
    4f84:	22ff      	movs	r2, #255	; 0xff
    4f86:	701a      	strb	r2, [r3, #0]
    4f88:	e09d      	b.n	50c6 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x41e>
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    4f8a:	232f      	movs	r3, #47	; 0x2f
    4f8c:	18fb      	adds	r3, r7, r3
    4f8e:	781b      	ldrb	r3, [r3, #0]
    4f90:	2b00      	cmp	r3, #0
    4f92:	d018      	beq.n	4fc6 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x31e>
    4f94:	231f      	movs	r3, #31
    4f96:	18fb      	adds	r3, r7, r3
    4f98:	222f      	movs	r2, #47	; 0x2f
    4f9a:	18ba      	adds	r2, r7, r2
    4f9c:	7812      	ldrb	r2, [r2, #0]
    4f9e:	701a      	strb	r2, [r3, #0]
    4fa0:	230f      	movs	r3, #15
    4fa2:	18fb      	adds	r3, r7, r3
    4fa4:	2227      	movs	r2, #39	; 0x27
    4fa6:	18ba      	adds	r2, r7, r2
    4fa8:	7812      	ldrb	r2, [r2, #0]
    4faa:	701a      	strb	r2, [r3, #0]
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    4fac:	231f      	movs	r3, #31
    4fae:	18fb      	adds	r3, r7, r3
    4fb0:	781b      	ldrb	r3, [r3, #0]
    4fb2:	220f      	movs	r2, #15
    4fb4:	18ba      	adds	r2, r7, r2
    4fb6:	7812      	ldrb	r2, [r2, #0]
    4fb8:	3201      	adds	r2, #1
    4fba:	4353      	muls	r3, r2
    4fbc:	121b      	asrs	r3, r3, #8
    4fbe:	b2da      	uxtb	r2, r3
    4fc0:	232f      	movs	r3, #47	; 0x2f
    4fc2:	18fb      	adds	r3, r7, r3
    4fc4:	701a      	strb	r2, [r3, #0]
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    4fc6:	232e      	movs	r3, #46	; 0x2e
    4fc8:	18fb      	adds	r3, r7, r3
    4fca:	781b      	ldrb	r3, [r3, #0]
    4fcc:	2b00      	cmp	r3, #0
    4fce:	d018      	beq.n	5002 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x35a>
    4fd0:	231d      	movs	r3, #29
    4fd2:	18fb      	adds	r3, r7, r3
    4fd4:	222e      	movs	r2, #46	; 0x2e
    4fd6:	18ba      	adds	r2, r7, r2
    4fd8:	7812      	ldrb	r2, [r2, #0]
    4fda:	701a      	strb	r2, [r3, #0]
    4fdc:	230e      	movs	r3, #14
    4fde:	18fb      	adds	r3, r7, r3
    4fe0:	2227      	movs	r2, #39	; 0x27
    4fe2:	18ba      	adds	r2, r7, r2
    4fe4:	7812      	ldrb	r2, [r2, #0]
    4fe6:	701a      	strb	r2, [r3, #0]
    4fe8:	231d      	movs	r3, #29
    4fea:	18fb      	adds	r3, r7, r3
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	220e      	movs	r2, #14
    4ff0:	18ba      	adds	r2, r7, r2
    4ff2:	7812      	ldrb	r2, [r2, #0]
    4ff4:	3201      	adds	r2, #1
    4ff6:	4353      	muls	r3, r2
    4ff8:	121b      	asrs	r3, r3, #8
    4ffa:	b2da      	uxtb	r2, r3
    4ffc:	232e      	movs	r3, #46	; 0x2e
    4ffe:	18fb      	adds	r3, r7, r3
    5000:	701a      	strb	r2, [r3, #0]
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    5002:	232d      	movs	r3, #45	; 0x2d
    5004:	18fb      	adds	r3, r7, r3
    5006:	781b      	ldrb	r3, [r3, #0]
    5008:	2b00      	cmp	r3, #0
    500a:	d018      	beq.n	503e <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x396>
    500c:	231c      	movs	r3, #28
    500e:	18fb      	adds	r3, r7, r3
    5010:	222d      	movs	r2, #45	; 0x2d
    5012:	18ba      	adds	r2, r7, r2
    5014:	7812      	ldrb	r2, [r2, #0]
    5016:	701a      	strb	r2, [r3, #0]
    5018:	230d      	movs	r3, #13
    501a:	18fb      	adds	r3, r7, r3
    501c:	2227      	movs	r2, #39	; 0x27
    501e:	18ba      	adds	r2, r7, r2
    5020:	7812      	ldrb	r2, [r2, #0]
    5022:	701a      	strb	r2, [r3, #0]
    5024:	231c      	movs	r3, #28
    5026:	18fb      	adds	r3, r7, r3
    5028:	781b      	ldrb	r3, [r3, #0]
    502a:	220d      	movs	r2, #13
    502c:	18ba      	adds	r2, r7, r2
    502e:	7812      	ldrb	r2, [r2, #0]
    5030:	3201      	adds	r2, #1
    5032:	4353      	muls	r3, r2
    5034:	121b      	asrs	r3, r3, #8
    5036:	b2da      	uxtb	r2, r3
    5038:	232d      	movs	r3, #45	; 0x2d
    503a:	18fb      	adds	r3, r7, r3
    503c:	701a      	strb	r2, [r3, #0]
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat) + 1;
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat) + 1;
#endif
            cleanup_R1();
            
            uint8_t desat = 255 - sat;
    503e:	2319      	movs	r3, #25
    5040:	18fb      	adds	r3, r7, r3
    5042:	2227      	movs	r2, #39	; 0x27
    5044:	18ba      	adds	r2, r7, r2
    5046:	7812      	ldrb	r2, [r2, #0]
    5048:	43d2      	mvns	r2, r2
    504a:	701a      	strb	r2, [r3, #0]
    504c:	231b      	movs	r3, #27
    504e:	18fb      	adds	r3, r7, r3
    5050:	2219      	movs	r2, #25
    5052:	18ba      	adds	r2, r7, r2
    5054:	7812      	ldrb	r2, [r2, #0]
    5056:	701a      	strb	r2, [r3, #0]
    5058:	230c      	movs	r3, #12
    505a:	18fb      	adds	r3, r7, r3
    505c:	2219      	movs	r2, #25
    505e:	18ba      	adds	r2, r7, r2
    5060:	7812      	ldrb	r2, [r2, #0]
    5062:	701a      	strb	r2, [r3, #0]
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    5064:	231b      	movs	r3, #27
    5066:	18fb      	adds	r3, r7, r3
    5068:	781b      	ldrb	r3, [r3, #0]
    506a:	220c      	movs	r2, #12
    506c:	18ba      	adds	r2, r7, r2
    506e:	7812      	ldrb	r2, [r2, #0]
    5070:	3201      	adds	r2, #1
    5072:	4353      	muls	r3, r2
    5074:	121b      	asrs	r3, r3, #8
    5076:	b2da      	uxtb	r2, r3
            desat = scale8( desat, desat);
    5078:	2319      	movs	r3, #25
    507a:	18fb      	adds	r3, r7, r3
    507c:	701a      	strb	r2, [r3, #0]
            
            uint8_t brightness_floor = desat;
    507e:	2317      	movs	r3, #23
    5080:	18fb      	adds	r3, r7, r3
    5082:	2219      	movs	r2, #25
    5084:	18ba      	adds	r2, r7, r2
    5086:	7812      	ldrb	r2, [r2, #0]
    5088:	701a      	strb	r2, [r3, #0]
            r += brightness_floor;
    508a:	232f      	movs	r3, #47	; 0x2f
    508c:	18fb      	adds	r3, r7, r3
    508e:	222f      	movs	r2, #47	; 0x2f
    5090:	18b9      	adds	r1, r7, r2
    5092:	2217      	movs	r2, #23
    5094:	18ba      	adds	r2, r7, r2
    5096:	7809      	ldrb	r1, [r1, #0]
    5098:	7812      	ldrb	r2, [r2, #0]
    509a:	188a      	adds	r2, r1, r2
    509c:	701a      	strb	r2, [r3, #0]
            g += brightness_floor;
    509e:	232e      	movs	r3, #46	; 0x2e
    50a0:	18fb      	adds	r3, r7, r3
    50a2:	222e      	movs	r2, #46	; 0x2e
    50a4:	18b9      	adds	r1, r7, r2
    50a6:	2217      	movs	r2, #23
    50a8:	18ba      	adds	r2, r7, r2
    50aa:	7809      	ldrb	r1, [r1, #0]
    50ac:	7812      	ldrb	r2, [r2, #0]
    50ae:	188a      	adds	r2, r1, r2
    50b0:	701a      	strb	r2, [r3, #0]
            b += brightness_floor;
    50b2:	232d      	movs	r3, #45	; 0x2d
    50b4:	18fb      	adds	r3, r7, r3
    50b6:	222d      	movs	r2, #45	; 0x2d
    50b8:	18b9      	adds	r1, r7, r2
    50ba:	2217      	movs	r2, #23
    50bc:	18ba      	adds	r2, r7, r2
    50be:	7809      	ldrb	r1, [r1, #0]
    50c0:	7812      	ldrb	r2, [r2, #0]
    50c2:	188a      	adds	r2, r1, r2
    50c4:	701a      	strb	r2, [r3, #0]
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    50c6:	2326      	movs	r3, #38	; 0x26
    50c8:	18fb      	adds	r3, r7, r3
    50ca:	781b      	ldrb	r3, [r3, #0]
    50cc:	2bff      	cmp	r3, #255	; 0xff
    50ce:	d100      	bne.n	50d2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x42a>
    50d0:	e097      	b.n	5202 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x55a>
    50d2:	231a      	movs	r3, #26
    50d4:	18fb      	adds	r3, r7, r3
    50d6:	2226      	movs	r2, #38	; 0x26
    50d8:	18ba      	adds	r2, r7, r2
    50da:	7812      	ldrb	r2, [r2, #0]
    50dc:	701a      	strb	r2, [r3, #0]
    50de:	2318      	movs	r3, #24
    50e0:	18fb      	adds	r3, r7, r3
    50e2:	2226      	movs	r2, #38	; 0x26
    50e4:	18ba      	adds	r2, r7, r2
    50e6:	7812      	ldrb	r2, [r2, #0]
    50e8:	701a      	strb	r2, [r3, #0]
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    50ea:	231a      	movs	r3, #26
    50ec:	18fb      	adds	r3, r7, r3
    50ee:	781b      	ldrb	r3, [r3, #0]
    50f0:	2218      	movs	r2, #24
    50f2:	18ba      	adds	r2, r7, r2
    50f4:	7812      	ldrb	r2, [r2, #0]
    50f6:	4353      	muls	r3, r2
    50f8:	121b      	asrs	r3, r3, #8
    50fa:	b2d9      	uxtb	r1, r3
    50fc:	231a      	movs	r3, #26
    50fe:	18fb      	adds	r3, r7, r3
    5100:	781b      	ldrb	r3, [r3, #0]
    5102:	2b00      	cmp	r3, #0
    5104:	d006      	beq.n	5114 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x46c>
    5106:	2318      	movs	r3, #24
    5108:	18fb      	adds	r3, r7, r3
    510a:	781b      	ldrb	r3, [r3, #0]
    510c:	2b00      	cmp	r3, #0
    510e:	d001      	beq.n	5114 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x46c>
    5110:	2301      	movs	r3, #1
    5112:	e000      	b.n	5116 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x46e>
    5114:	2300      	movs	r3, #0
    5116:	220b      	movs	r2, #11
    5118:	18ba      	adds	r2, r7, r2
    511a:	18cb      	adds	r3, r1, r3
    511c:	7013      	strb	r3, [r2, #0]
    // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    // uint8_t j = (i == 0) ? 0 : (((int)i * (int)(scale) ) >> 8) + nonzeroscale;
    return j;
    511e:	230b      	movs	r3, #11
    5120:	18fb      	adds	r3, r7, r3
    5122:	781a      	ldrb	r2, [r3, #0]
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
    5124:	2326      	movs	r3, #38	; 0x26
    5126:	18fb      	adds	r3, r7, r3
    5128:	701a      	strb	r2, [r3, #0]
        if( val == 0 ) {
    512a:	2326      	movs	r3, #38	; 0x26
    512c:	18fb      	adds	r3, r7, r3
    512e:	781b      	ldrb	r3, [r3, #0]
    5130:	2b00      	cmp	r3, #0
    5132:	d10c      	bne.n	514e <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x4a6>
            r=0; g=0; b=0;
    5134:	232f      	movs	r3, #47	; 0x2f
    5136:	18fb      	adds	r3, r7, r3
    5138:	2200      	movs	r2, #0
    513a:	701a      	strb	r2, [r3, #0]
    513c:	232e      	movs	r3, #46	; 0x2e
    513e:	18fb      	adds	r3, r7, r3
    5140:	2200      	movs	r2, #0
    5142:	701a      	strb	r2, [r3, #0]
    5144:	232d      	movs	r3, #45	; 0x2d
    5146:	18fb      	adds	r3, r7, r3
    5148:	2200      	movs	r2, #0
    514a:	701a      	strb	r2, [r3, #0]
    514c:	e059      	b.n	5202 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x55a>
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    514e:	232f      	movs	r3, #47	; 0x2f
    5150:	18fb      	adds	r3, r7, r3
    5152:	781b      	ldrb	r3, [r3, #0]
    5154:	2b00      	cmp	r3, #0
    5156:	d018      	beq.n	518a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x4e2>
    5158:	2316      	movs	r3, #22
    515a:	18fb      	adds	r3, r7, r3
    515c:	222f      	movs	r2, #47	; 0x2f
    515e:	18ba      	adds	r2, r7, r2
    5160:	7812      	ldrb	r2, [r2, #0]
    5162:	701a      	strb	r2, [r3, #0]
    5164:	230a      	movs	r3, #10
    5166:	18fb      	adds	r3, r7, r3
    5168:	2226      	movs	r2, #38	; 0x26
    516a:	18ba      	adds	r2, r7, r2
    516c:	7812      	ldrb	r2, [r2, #0]
    516e:	701a      	strb	r2, [r3, #0]
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5170:	2316      	movs	r3, #22
    5172:	18fb      	adds	r3, r7, r3
    5174:	781b      	ldrb	r3, [r3, #0]
    5176:	220a      	movs	r2, #10
    5178:	18ba      	adds	r2, r7, r2
    517a:	7812      	ldrb	r2, [r2, #0]
    517c:	3201      	adds	r2, #1
    517e:	4353      	muls	r3, r2
    5180:	121b      	asrs	r3, r3, #8
    5182:	b2da      	uxtb	r2, r3
    5184:	232f      	movs	r3, #47	; 0x2f
    5186:	18fb      	adds	r3, r7, r3
    5188:	701a      	strb	r2, [r3, #0]
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    518a:	232e      	movs	r3, #46	; 0x2e
    518c:	18fb      	adds	r3, r7, r3
    518e:	781b      	ldrb	r3, [r3, #0]
    5190:	2b00      	cmp	r3, #0
    5192:	d018      	beq.n	51c6 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x51e>
    5194:	2315      	movs	r3, #21
    5196:	18fb      	adds	r3, r7, r3
    5198:	222e      	movs	r2, #46	; 0x2e
    519a:	18ba      	adds	r2, r7, r2
    519c:	7812      	ldrb	r2, [r2, #0]
    519e:	701a      	strb	r2, [r3, #0]
    51a0:	2309      	movs	r3, #9
    51a2:	18fb      	adds	r3, r7, r3
    51a4:	2226      	movs	r2, #38	; 0x26
    51a6:	18ba      	adds	r2, r7, r2
    51a8:	7812      	ldrb	r2, [r2, #0]
    51aa:	701a      	strb	r2, [r3, #0]
    51ac:	2315      	movs	r3, #21
    51ae:	18fb      	adds	r3, r7, r3
    51b0:	781b      	ldrb	r3, [r3, #0]
    51b2:	2209      	movs	r2, #9
    51b4:	18ba      	adds	r2, r7, r2
    51b6:	7812      	ldrb	r2, [r2, #0]
    51b8:	3201      	adds	r2, #1
    51ba:	4353      	muls	r3, r2
    51bc:	121b      	asrs	r3, r3, #8
    51be:	b2da      	uxtb	r2, r3
    51c0:	232e      	movs	r3, #46	; 0x2e
    51c2:	18fb      	adds	r3, r7, r3
    51c4:	701a      	strb	r2, [r3, #0]
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    51c6:	232d      	movs	r3, #45	; 0x2d
    51c8:	18fb      	adds	r3, r7, r3
    51ca:	781b      	ldrb	r3, [r3, #0]
    51cc:	2b00      	cmp	r3, #0
    51ce:	d018      	beq.n	5202 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x55a>
    51d0:	2314      	movs	r3, #20
    51d2:	18fb      	adds	r3, r7, r3
    51d4:	222d      	movs	r2, #45	; 0x2d
    51d6:	18ba      	adds	r2, r7, r2
    51d8:	7812      	ldrb	r2, [r2, #0]
    51da:	701a      	strb	r2, [r3, #0]
    51dc:	2308      	movs	r3, #8
    51de:	18fb      	adds	r3, r7, r3
    51e0:	2226      	movs	r2, #38	; 0x26
    51e2:	18ba      	adds	r2, r7, r2
    51e4:	7812      	ldrb	r2, [r2, #0]
    51e6:	701a      	strb	r2, [r3, #0]
    51e8:	2314      	movs	r3, #20
    51ea:	18fb      	adds	r3, r7, r3
    51ec:	781b      	ldrb	r3, [r3, #0]
    51ee:	2208      	movs	r2, #8
    51f0:	18ba      	adds	r2, r7, r2
    51f2:	7812      	ldrb	r2, [r2, #0]
    51f4:	3201      	adds	r2, #1
    51f6:	4353      	muls	r3, r2
    51f8:	121b      	asrs	r3, r3, #8
    51fa:	b2da      	uxtb	r2, r3
    51fc:	232d      	movs	r3, #45	; 0x2d
    51fe:	18fb      	adds	r3, r7, r3
    5200:	701a      	strb	r2, [r3, #0]
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    5202:	683b      	ldr	r3, [r7, #0]
    5204:	222f      	movs	r2, #47	; 0x2f
    5206:	18ba      	adds	r2, r7, r2
    5208:	7812      	ldrb	r2, [r2, #0]
    520a:	701a      	strb	r2, [r3, #0]
    rgb.g = g;
    520c:	683b      	ldr	r3, [r7, #0]
    520e:	222e      	movs	r2, #46	; 0x2e
    5210:	18ba      	adds	r2, r7, r2
    5212:	7812      	ldrb	r2, [r2, #0]
    5214:	705a      	strb	r2, [r3, #1]
    rgb.b = b;
    5216:	683b      	ldr	r3, [r7, #0]
    5218:	222d      	movs	r2, #45	; 0x2d
    521a:	18ba      	adds	r2, r7, r2
    521c:	7812      	ldrb	r2, [r2, #0]
    521e:	709a      	strb	r2, [r3, #2]
}
    5220:	46c0      	nop			; (mov r8, r8)
    5222:	46bd      	mov	sp, r7
    5224:	b00c      	add	sp, #48	; 0x30
    5226:	bd80      	pop	{r7, pc}

00005228 <_ZN14CLEDController4ledsEv>:

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }

    /// Pointer to the CRGB array for this controller
    CRGB* leds() { return m_Data; }
    5228:	b580      	push	{r7, lr}
    522a:	b082      	sub	sp, #8
    522c:	af00      	add	r7, sp, #0
    522e:	6078      	str	r0, [r7, #4]
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	685b      	ldr	r3, [r3, #4]
    5234:	0018      	movs	r0, r3
    5236:	46bd      	mov	sp, r7
    5238:	b002      	add	sp, #8
    523a:	bd80      	pop	{r7, pc}

0000523c <_Z27calculate_unscaled_power_mWPK4CRGBt>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    523c:	b580      	push	{r7, lr}
    523e:	b08a      	sub	sp, #40	; 0x28
    5240:	af00      	add	r7, sp, #0
    5242:	6078      	str	r0, [r7, #4]
    5244:	000a      	movs	r2, r1
    5246:	1cbb      	adds	r3, r7, #2
    5248:	801a      	strh	r2, [r3, #0]
    uint32_t red32 = 0, green32 = 0, blue32 = 0;
    524a:	2300      	movs	r3, #0
    524c:	627b      	str	r3, [r7, #36]	; 0x24
    524e:	2300      	movs	r3, #0
    5250:	623b      	str	r3, [r7, #32]
    5252:	2300      	movs	r3, #0
    5254:	61fb      	str	r3, [r7, #28]
    const CRGB* firstled = &(ledbuffer[0]);
    5256:	687b      	ldr	r3, [r7, #4]
    5258:	613b      	str	r3, [r7, #16]
    uint8_t* p = (uint8_t*)(firstled);
    525a:	693b      	ldr	r3, [r7, #16]
    525c:	61bb      	str	r3, [r7, #24]

    uint16_t count = numLeds;
    525e:	2316      	movs	r3, #22
    5260:	18fb      	adds	r3, r7, r3
    5262:	1cba      	adds	r2, r7, #2
    5264:	8812      	ldrh	r2, [r2, #0]
    5266:	801a      	strh	r2, [r3, #0]

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5268:	2316      	movs	r3, #22
    526a:	18fb      	adds	r3, r7, r3
    526c:	881b      	ldrh	r3, [r3, #0]
    526e:	2b00      	cmp	r3, #0
    5270:	d01f      	beq.n	52b2 <_Z27calculate_unscaled_power_mWPK4CRGBt+0x76>
        red32   += *p++;
    5272:	69bb      	ldr	r3, [r7, #24]
    5274:	1c5a      	adds	r2, r3, #1
    5276:	61ba      	str	r2, [r7, #24]
    5278:	781b      	ldrb	r3, [r3, #0]
    527a:	001a      	movs	r2, r3
    527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    527e:	189b      	adds	r3, r3, r2
    5280:	627b      	str	r3, [r7, #36]	; 0x24
        green32 += *p++;
    5282:	69bb      	ldr	r3, [r7, #24]
    5284:	1c5a      	adds	r2, r3, #1
    5286:	61ba      	str	r2, [r7, #24]
    5288:	781b      	ldrb	r3, [r3, #0]
    528a:	001a      	movs	r2, r3
    528c:	6a3b      	ldr	r3, [r7, #32]
    528e:	189b      	adds	r3, r3, r2
    5290:	623b      	str	r3, [r7, #32]
        blue32  += *p++;
    5292:	69bb      	ldr	r3, [r7, #24]
    5294:	1c5a      	adds	r2, r3, #1
    5296:	61ba      	str	r2, [r7, #24]
    5298:	781b      	ldrb	r3, [r3, #0]
    529a:	001a      	movs	r2, r3
    529c:	69fb      	ldr	r3, [r7, #28]
    529e:	189b      	adds	r3, r3, r2
    52a0:	61fb      	str	r3, [r7, #28]
        count--;
    52a2:	2316      	movs	r3, #22
    52a4:	18fb      	adds	r3, r7, r3
    52a6:	881a      	ldrh	r2, [r3, #0]
    52a8:	2316      	movs	r3, #22
    52aa:	18fb      	adds	r3, r7, r3
    52ac:	3a01      	subs	r2, #1
    52ae:	801a      	strh	r2, [r3, #0]
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    52b0:	e7da      	b.n	5268 <_Z27calculate_unscaled_power_mWPK4CRGBt+0x2c>
        green32 += *p++;
        blue32  += *p++;
        count--;
    }

    red32   *= gRed_mW;
    52b2:	2350      	movs	r3, #80	; 0x50
    52b4:	001a      	movs	r2, r3
    52b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    52b8:	4353      	muls	r3, r2
    52ba:	627b      	str	r3, [r7, #36]	; 0x24
    green32 *= gGreen_mW;
    52bc:	2337      	movs	r3, #55	; 0x37
    52be:	001a      	movs	r2, r3
    52c0:	6a3b      	ldr	r3, [r7, #32]
    52c2:	4353      	muls	r3, r2
    52c4:	623b      	str	r3, [r7, #32]
    blue32  *= gBlue_mW;
    52c6:	234b      	movs	r3, #75	; 0x4b
    52c8:	001a      	movs	r2, r3
    52ca:	69fb      	ldr	r3, [r7, #28]
    52cc:	4353      	muls	r3, r2
    52ce:	61fb      	str	r3, [r7, #28]

    red32   >>= 8;
    52d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    52d2:	0a1b      	lsrs	r3, r3, #8
    52d4:	627b      	str	r3, [r7, #36]	; 0x24
    green32 >>= 8;
    52d6:	6a3b      	ldr	r3, [r7, #32]
    52d8:	0a1b      	lsrs	r3, r3, #8
    52da:	623b      	str	r3, [r7, #32]
    blue32  >>= 8;
    52dc:	69fb      	ldr	r3, [r7, #28]
    52de:	0a1b      	lsrs	r3, r3, #8
    52e0:	61fb      	str	r3, [r7, #28]

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);
    52e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    52e4:	6a3b      	ldr	r3, [r7, #32]
    52e6:	18d2      	adds	r2, r2, r3
    52e8:	69fb      	ldr	r3, [r7, #28]
    52ea:	18d1      	adds	r1, r2, r3
    52ec:	1cbb      	adds	r3, r7, #2
    52ee:	881a      	ldrh	r2, [r3, #0]
    52f0:	0013      	movs	r3, r2
    52f2:	009b      	lsls	r3, r3, #2
    52f4:	189b      	adds	r3, r3, r2
    52f6:	18cb      	adds	r3, r1, r3
    52f8:	60fb      	str	r3, [r7, #12]

    return total;
    52fa:	68fb      	ldr	r3, [r7, #12]
}
    52fc:	0018      	movs	r0, r3
    52fe:	46bd      	mov	sp, r7
    5300:	b00a      	add	sp, #40	; 0x28
    5302:	bd80      	pop	{r7, pc}

00005304 <_Z37calculate_max_brightness_for_power_mWhm>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    5304:	b590      	push	{r4, r7, lr}
    5306:	b087      	sub	sp, #28
    5308:	af00      	add	r7, sp, #0
    530a:	0002      	movs	r2, r0
    530c:	6039      	str	r1, [r7, #0]
    530e:	1dfb      	adds	r3, r7, #7
    5310:	701a      	strb	r2, [r3, #0]
    uint32_t total_mW = gMCU_mW;
    5312:	237d      	movs	r3, #125	; 0x7d
    5314:	617b      	str	r3, [r7, #20]

    CLEDController *pCur = CLEDController::head();
    5316:	f7ff fb3b 	bl	4990 <_ZN14CLEDController4headEv>
    531a:	0003      	movs	r3, r0
    531c:	613b      	str	r3, [r7, #16]
	while(pCur) {
    531e:	693b      	ldr	r3, [r7, #16]
    5320:	2b00      	cmp	r3, #0
    5322:	d01c      	beq.n	535e <_Z37calculate_max_brightness_for_power_mWhm+0x5a>
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    5324:	693b      	ldr	r3, [r7, #16]
    5326:	0018      	movs	r0, r3
    5328:	f7ff ff7e 	bl	5228 <_ZN14CLEDController4ledsEv>
    532c:	0004      	movs	r4, r0
    532e:	693b      	ldr	r3, [r7, #16]
    5330:	681b      	ldr	r3, [r3, #0]
    5332:	3310      	adds	r3, #16
    5334:	681b      	ldr	r3, [r3, #0]
    5336:	693a      	ldr	r2, [r7, #16]
    5338:	0010      	movs	r0, r2
    533a:	4798      	blx	r3
    533c:	0003      	movs	r3, r0
    533e:	b29b      	uxth	r3, r3
    5340:	0019      	movs	r1, r3
    5342:	0020      	movs	r0, r4
    5344:	f7ff ff7a 	bl	523c <_Z27calculate_unscaled_power_mWPK4CRGBt>
    5348:	0002      	movs	r2, r0
    534a:	697b      	ldr	r3, [r7, #20]
    534c:	189b      	adds	r3, r3, r2
    534e:	617b      	str	r3, [r7, #20]
		pCur = pCur->next();
    5350:	693b      	ldr	r3, [r7, #16]
    5352:	0018      	movs	r0, r3
    5354:	f7ff fb26 	bl	49a4 <_ZN14CLEDController4nextEv>
    5358:	0003      	movs	r3, r0
    535a:	613b      	str	r3, [r7, #16]
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    535c:	e7df      	b.n	531e <_Z37calculate_max_brightness_for_power_mWhm+0x1a>
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    535e:	1dfb      	adds	r3, r7, #7
    5360:	781b      	ldrb	r3, [r3, #0]
    5362:	697a      	ldr	r2, [r7, #20]
    5364:	4353      	muls	r3, r2
    5366:	0a1b      	lsrs	r3, r3, #8
    5368:	60fb      	str	r3, [r7, #12]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    536a:	68fa      	ldr	r2, [r7, #12]
    536c:	683b      	ldr	r3, [r7, #0]
    536e:	429a      	cmp	r2, r3
    5370:	d20c      	bcs.n	538c <_Z37calculate_max_brightness_for_power_mWhm+0x88>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    5372:	4b15      	ldr	r3, [pc, #84]	; (53c8 <_Z37calculate_max_brightness_for_power_mWhm+0xc4>)
    5374:	781b      	ldrb	r3, [r3, #0]
    5376:	2b00      	cmp	r3, #0
    5378:	d005      	beq.n	5386 <_Z37calculate_max_brightness_for_power_mWhm+0x82>
            digitalWrite(gMaxPowerIndicatorLEDPinNumber, LOW);   // turn the LED off
    537a:	4b13      	ldr	r3, [pc, #76]	; (53c8 <_Z37calculate_max_brightness_for_power_mWhm+0xc4>)
    537c:	781b      	ldrb	r3, [r3, #0]
    537e:	2100      	movs	r1, #0
    5380:	0018      	movs	r0, r3
    5382:	f7ff f8f9 	bl	4578 <digitalWrite>
        }
#endif
#if POWER_DEBUG_PRINT == 1
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    5386:	1dfb      	adds	r3, r7, #7
    5388:	781b      	ldrb	r3, [r3, #0]
    538a:	e019      	b.n	53c0 <_Z37calculate_max_brightness_for_power_mWhm+0xbc>
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    538c:	1dfb      	adds	r3, r7, #7
    538e:	781b      	ldrb	r3, [r3, #0]
    5390:	683a      	ldr	r2, [r7, #0]
    5392:	4353      	muls	r3, r2
    5394:	68f9      	ldr	r1, [r7, #12]
    5396:	0018      	movs	r0, r3
    5398:	f001 f912 	bl	65c0 <__aeabi_uidiv>
    539c:	0003      	movs	r3, r0
    539e:	001a      	movs	r2, r3
    53a0:	230b      	movs	r3, #11
    53a2:	18fb      	adds	r3, r7, r3
    53a4:	701a      	strb	r2, [r3, #0]

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    53a6:	4b08      	ldr	r3, [pc, #32]	; (53c8 <_Z37calculate_max_brightness_for_power_mWhm+0xc4>)
    53a8:	781b      	ldrb	r3, [r3, #0]
    53aa:	2b00      	cmp	r3, #0
    53ac:	d005      	beq.n	53ba <_Z37calculate_max_brightness_for_power_mWhm+0xb6>
        digitalWrite( gMaxPowerIndicatorLEDPinNumber, HIGH);   // turn the LED on
    53ae:	4b06      	ldr	r3, [pc, #24]	; (53c8 <_Z37calculate_max_brightness_for_power_mWhm+0xc4>)
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	2101      	movs	r1, #1
    53b4:	0018      	movs	r0, r3
    53b6:	f7ff f8df 	bl	4578 <digitalWrite>
    }
#endif

    return recommended_brightness;
    53ba:	230b      	movs	r3, #11
    53bc:	18fb      	adds	r3, r7, r3
    53be:	781b      	ldrb	r3, [r3, #0]
}
    53c0:	0018      	movs	r0, r3
    53c2:	46bd      	mov	sp, r7
    53c4:	b007      	add	sp, #28
    53c6:	bd90      	pop	{r4, r7, pc}
    53c8:	20000808 	.word	0x20000808

000053cc <_ZN14HardwareSerialD1Ev>:
class HardwareSerial : public Stream
{
	public:
	
	HardwareSerial() {};
	virtual ~HardwareSerial() {};
    53cc:	b580      	push	{r7, lr}
    53ce:	b082      	sub	sp, #8
    53d0:	af00      	add	r7, sp, #0
    53d2:	6078      	str	r0, [r7, #4]
    53d4:	4a07      	ldr	r2, [pc, #28]	; (53f4 <_ZN14HardwareSerialD1Ev+0x28>)
    53d6:	687b      	ldr	r3, [r7, #4]
    53d8:	601a      	str	r2, [r3, #0]
    53da:	2300      	movs	r3, #0
    53dc:	2b00      	cmp	r3, #0
    53de:	d003      	beq.n	53e8 <_ZN14HardwareSerialD1Ev+0x1c>
    53e0:	687b      	ldr	r3, [r7, #4]
    53e2:	0018      	movs	r0, r3
    53e4:	f000 f90c 	bl	5600 <_ZdlPv>
    53e8:	687b      	ldr	r3, [r7, #4]
    53ea:	0018      	movs	r0, r3
    53ec:	46bd      	mov	sp, r7
    53ee:	b002      	add	sp, #8
    53f0:	bd80      	pop	{r7, pc}
    53f2:	46c0      	nop			; (mov r8, r8)
    53f4:	00007b50 	.word	0x00007b50

000053f8 <_ZN14HardwareSerialD0Ev>:
    53f8:	b580      	push	{r7, lr}
    53fa:	b082      	sub	sp, #8
    53fc:	af00      	add	r7, sp, #0
    53fe:	6078      	str	r0, [r7, #4]
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	0018      	movs	r0, r3
    5404:	f7ff ffe2 	bl	53cc <_ZN14HardwareSerialD1Ev>
    5408:	687b      	ldr	r3, [r7, #4]
    540a:	0018      	movs	r0, r3
    540c:	f000 f8f8 	bl	5600 <_ZdlPv>
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	0018      	movs	r0, r3
    5414:	46bd      	mov	sp, r7
    5416:	b002      	add	sp, #8
    5418:	bd80      	pop	{r7, pc}
    541a:	46c0      	nop			; (mov r8, r8)

0000541c <_ZN14HardwareSerial5beginEm>:
	
	virtual void begin(unsigned long) {};
    541c:	b580      	push	{r7, lr}
    541e:	b082      	sub	sp, #8
    5420:	af00      	add	r7, sp, #0
    5422:	6078      	str	r0, [r7, #4]
    5424:	6039      	str	r1, [r7, #0]
    5426:	46c0      	nop			; (mov r8, r8)
    5428:	46bd      	mov	sp, r7
    542a:	b002      	add	sp, #8
    542c:	bd80      	pop	{r7, pc}
    542e:	46c0      	nop			; (mov r8, r8)

00005430 <_ZN14HardwareSerial5beginEmt>:
	virtual void begin(unsigned long baudrate, uint16_t config) {};
    5430:	b580      	push	{r7, lr}
    5432:	b084      	sub	sp, #16
    5434:	af00      	add	r7, sp, #0
    5436:	60f8      	str	r0, [r7, #12]
    5438:	60b9      	str	r1, [r7, #8]
    543a:	1dbb      	adds	r3, r7, #6
    543c:	801a      	strh	r2, [r3, #0]
    543e:	46c0      	nop			; (mov r8, r8)
    5440:	46bd      	mov	sp, r7
    5442:	b004      	add	sp, #16
    5444:	bd80      	pop	{r7, pc}
    5446:	46c0      	nop			; (mov r8, r8)

00005448 <_ZN14HardwareSerial3endEv>:
	virtual void end() {};
    5448:	b580      	push	{r7, lr}
    544a:	b082      	sub	sp, #8
    544c:	af00      	add	r7, sp, #0
    544e:	6078      	str	r0, [r7, #4]
    5450:	46c0      	nop			; (mov r8, r8)
    5452:	46bd      	mov	sp, r7
    5454:	b002      	add	sp, #8
    5456:	bd80      	pop	{r7, pc}

00005458 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial5( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    5458:	b580      	push	{r7, lr}
    545a:	af00      	add	r7, sp, #0
  Serial1.IrqHandler();
    545c:	4b03      	ldr	r3, [pc, #12]	; (546c <SERCOM0_Handler+0x14>)
    545e:	0018      	movs	r0, r3
    5460:	f000 fd06 	bl	5e70 <_ZN4Uart10IrqHandlerEv>
}
    5464:	46c0      	nop			; (mov r8, r8)
    5466:	46bd      	mov	sp, r7
    5468:	bd80      	pop	{r7, pc}
    546a:	46c0      	nop			; (mov r8, r8)
    546c:	20000824 	.word	0x20000824

00005470 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    5470:	b580      	push	{r7, lr}
    5472:	af00      	add	r7, sp, #0
  Serial5.IrqHandler();
    5474:	4b03      	ldr	r3, [pc, #12]	; (5484 <SERCOM5_Handler+0x14>)
    5476:	0018      	movs	r0, r3
    5478:	f000 fcfa 	bl	5e70 <_ZN4Uart10IrqHandlerEv>
}
    547c:	46c0      	nop			; (mov r8, r8)
    547e:	46bd      	mov	sp, r7
    5480:	bd80      	pop	{r7, pc}
    5482:	46c0      	nop			; (mov r8, r8)
    5484:	200008e8 	.word	0x200008e8

00005488 <_ZN4UartD1Ev>:
#include "SERCOM.h"
#include "RingBuffer.h"

#include <cstddef>

class Uart : public HardwareSerial
    5488:	b580      	push	{r7, lr}
    548a:	b082      	sub	sp, #8
    548c:	af00      	add	r7, sp, #0
    548e:	6078      	str	r0, [r7, #4]
    5490:	4a09      	ldr	r2, [pc, #36]	; (54b8 <_ZN4UartD1Ev+0x30>)
    5492:	687b      	ldr	r3, [r7, #4]
    5494:	601a      	str	r2, [r3, #0]
    5496:	687b      	ldr	r3, [r7, #4]
    5498:	0018      	movs	r0, r3
    549a:	f7ff ff97 	bl	53cc <_ZN14HardwareSerialD1Ev>
    549e:	2300      	movs	r3, #0
    54a0:	2b00      	cmp	r3, #0
    54a2:	d003      	beq.n	54ac <_ZN4UartD1Ev+0x24>
    54a4:	687b      	ldr	r3, [r7, #4]
    54a6:	0018      	movs	r0, r3
    54a8:	f000 f8aa 	bl	5600 <_ZdlPv>
    54ac:	687b      	ldr	r3, [r7, #4]
    54ae:	0018      	movs	r0, r3
    54b0:	46bd      	mov	sp, r7
    54b2:	b002      	add	sp, #8
    54b4:	bd80      	pop	{r7, pc}
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	00007b98 	.word	0x00007b98

000054bc <_ZN4UartD0Ev>:
    54bc:	b580      	push	{r7, lr}
    54be:	b082      	sub	sp, #8
    54c0:	af00      	add	r7, sp, #0
    54c2:	6078      	str	r0, [r7, #4]
    54c4:	687b      	ldr	r3, [r7, #4]
    54c6:	0018      	movs	r0, r3
    54c8:	f7ff ffde 	bl	5488 <_ZN4UartD1Ev>
    54cc:	687b      	ldr	r3, [r7, #4]
    54ce:	0018      	movs	r0, r3
    54d0:	f000 f896 	bl	5600 <_ZdlPv>
    54d4:	687b      	ldr	r3, [r7, #4]
    54d6:	0018      	movs	r0, r3
    54d8:	46bd      	mov	sp, r7
    54da:	b002      	add	sp, #8
    54dc:	bd80      	pop	{r7, pc}
    54de:	46c0      	nop			; (mov r8, r8)

000054e0 <_Z41__static_initialization_and_destruction_0ii>:
    54e0:	b580      	push	{r7, lr}
    54e2:	b084      	sub	sp, #16
    54e4:	af02      	add	r7, sp, #8
    54e6:	6078      	str	r0, [r7, #4]
    54e8:	6039      	str	r1, [r7, #0]
    54ea:	687b      	ldr	r3, [r7, #4]
    54ec:	2b01      	cmp	r3, #1
    54ee:	d147      	bne.n	5580 <_Z41__static_initialization_and_destruction_0ii+0xa0>
    54f0:	683b      	ldr	r3, [r7, #0]
    54f2:	4a25      	ldr	r2, [pc, #148]	; (5588 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    54f4:	4293      	cmp	r3, r2
    54f6:	d143      	bne.n	5580 <_Z41__static_initialization_and_destruction_0ii+0xa0>
} ;

const void* g_apTCInstances[TCC_INST_NUM+TC_INST_NUM]={ TCC0, TCC1, TCC2, TC3, TC4, TC5 } ;

// Multi-serial objects instantiation
SERCOM sercom0( SERCOM0 ) ;
    54f8:	4a24      	ldr	r2, [pc, #144]	; (558c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    54fa:	4b25      	ldr	r3, [pc, #148]	; (5590 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    54fc:	0011      	movs	r1, r2
    54fe:	0018      	movs	r0, r3
    5500:	f000 f938 	bl	5774 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    5504:	4a23      	ldr	r2, [pc, #140]	; (5594 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    5506:	4b24      	ldr	r3, [pc, #144]	; (5598 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    5508:	0011      	movs	r1, r2
    550a:	0018      	movs	r0, r3
    550c:	f000 f932 	bl	5774 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    5510:	4a22      	ldr	r2, [pc, #136]	; (559c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    5512:	4b23      	ldr	r3, [pc, #140]	; (55a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    5514:	0011      	movs	r1, r2
    5516:	0018      	movs	r0, r3
    5518:	f000 f92c 	bl	5774 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    551c:	4a21      	ldr	r2, [pc, #132]	; (55a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    551e:	4b22      	ldr	r3, [pc, #136]	; (55a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    5520:	0011      	movs	r1, r2
    5522:	0018      	movs	r0, r3
    5524:	f000 f926 	bl	5774 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    5528:	4a20      	ldr	r2, [pc, #128]	; (55ac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    552a:	4b21      	ldr	r3, [pc, #132]	; (55b0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    552c:	0011      	movs	r1, r2
    552e:	0018      	movs	r0, r3
    5530:	f000 f920 	bl	5774 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    5534:	4a1f      	ldr	r2, [pc, #124]	; (55b4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    5536:	4b20      	ldr	r3, [pc, #128]	; (55b8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    5538:	0011      	movs	r1, r2
    553a:	0018      	movs	r0, r3
    553c:	f000 f91a 	bl	5774 <_ZN6SERCOMC1EP6Sercom>

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    5540:	4913      	ldr	r1, [pc, #76]	; (5590 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    5542:	481e      	ldr	r0, [pc, #120]	; (55bc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    5544:	2301      	movs	r3, #1
    5546:	9301      	str	r3, [sp, #4]
    5548:	2303      	movs	r3, #3
    554a:	9300      	str	r3, [sp, #0]
    554c:	2301      	movs	r3, #1
    554e:	2200      	movs	r2, #0
    5550:	f000 fbb2 	bl	5cb8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    5554:	4a1a      	ldr	r2, [pc, #104]	; (55c0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    5556:	491b      	ldr	r1, [pc, #108]	; (55c4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    5558:	4b18      	ldr	r3, [pc, #96]	; (55bc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    555a:	0018      	movs	r0, r3
    555c:	f001 f828 	bl	65b0 <__aeabi_atexit>
Uart Serial5( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    5560:	4915      	ldr	r1, [pc, #84]	; (55b8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    5562:	4819      	ldr	r0, [pc, #100]	; (55c8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    5564:	2301      	movs	r3, #1
    5566:	9301      	str	r3, [sp, #4]
    5568:	2303      	movs	r3, #3
    556a:	9300      	str	r3, [sp, #0]
    556c:	231e      	movs	r3, #30
    556e:	221f      	movs	r2, #31
    5570:	f000 fba2 	bl	5cb8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    5574:	4a12      	ldr	r2, [pc, #72]	; (55c0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    5576:	4913      	ldr	r1, [pc, #76]	; (55c4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    5578:	4b13      	ldr	r3, [pc, #76]	; (55c8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    557a:	0018      	movs	r0, r3
    557c:	f001 f818 	bl	65b0 <__aeabi_atexit>
}

void SERCOM5_Handler()
{
  Serial5.IrqHandler();
}
    5580:	46c0      	nop			; (mov r8, r8)
    5582:	46bd      	mov	sp, r7
    5584:	b002      	add	sp, #8
    5586:	bd80      	pop	{r7, pc}
    5588:	0000ffff 	.word	0x0000ffff
    558c:	42000800 	.word	0x42000800
    5590:	2000080c 	.word	0x2000080c
    5594:	42000c00 	.word	0x42000c00
    5598:	20000810 	.word	0x20000810
    559c:	42001000 	.word	0x42001000
    55a0:	20000814 	.word	0x20000814
    55a4:	42001400 	.word	0x42001400
    55a8:	20000818 	.word	0x20000818
    55ac:	42001800 	.word	0x42001800
    55b0:	2000081c 	.word	0x2000081c
    55b4:	42001c00 	.word	0x42001c00
    55b8:	20000820 	.word	0x20000820
    55bc:	20000824 	.word	0x20000824
    55c0:	20000000 	.word	0x20000000
    55c4:	00005489 	.word	0x00005489
    55c8:	200008e8 	.word	0x200008e8

000055cc <_GLOBAL__sub_I_g_APinDescription>:
    55cc:	b580      	push	{r7, lr}
    55ce:	af00      	add	r7, sp, #0
    55d0:	4b03      	ldr	r3, [pc, #12]	; (55e0 <_GLOBAL__sub_I_g_APinDescription+0x14>)
    55d2:	0019      	movs	r1, r3
    55d4:	2001      	movs	r0, #1
    55d6:	f7ff ff83 	bl	54e0 <_Z41__static_initialization_and_destruction_0ii>
    55da:	46bd      	mov	sp, r7
    55dc:	bd80      	pop	{r7, pc}
    55de:	46c0      	nop			; (mov r8, r8)
    55e0:	0000ffff 	.word	0x0000ffff

000055e4 <_Znwj>:
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <stdlib.h>

void *operator new(size_t size) {
    55e4:	b580      	push	{r7, lr}
    55e6:	b082      	sub	sp, #8
    55e8:	af00      	add	r7, sp, #0
    55ea:	6078      	str	r0, [r7, #4]
  return malloc(size);
    55ec:	687b      	ldr	r3, [r7, #4]
    55ee:	0018      	movs	r0, r3
    55f0:	f001 fee4 	bl	73bc <malloc>
    55f4:	0003      	movs	r3, r0
}
    55f6:	0018      	movs	r0, r3
    55f8:	46bd      	mov	sp, r7
    55fa:	b002      	add	sp, #8
    55fc:	bd80      	pop	{r7, pc}
    55fe:	46c0      	nop			; (mov r8, r8)

00005600 <_ZdlPv>:

void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
    5600:	b580      	push	{r7, lr}
    5602:	b082      	sub	sp, #8
    5604:	af00      	add	r7, sp, #0
    5606:	6078      	str	r0, [r7, #4]
  free(ptr);
    5608:	687b      	ldr	r3, [r7, #4]
    560a:	0018      	movs	r0, r3
    560c:	f001 fee0 	bl	73d0 <free>
}
    5610:	46c0      	nop			; (mov r8, r8)
    5612:	46bd      	mov	sp, r7
    5614:	b002      	add	sp, #8
    5616:	bd80      	pop	{r7, pc}

00005618 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    5618:	b580      	push	{r7, lr}
    561a:	b086      	sub	sp, #24
    561c:	af00      	add	r7, sp, #0
    561e:	60f8      	str	r0, [r7, #12]
    5620:	60b9      	str	r1, [r7, #8]
    5622:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    5624:	2300      	movs	r3, #0
    5626:	617b      	str	r3, [r7, #20]
  while (size--) {
    5628:	687b      	ldr	r3, [r7, #4]
    562a:	1e5a      	subs	r2, r3, #1
    562c:	607a      	str	r2, [r7, #4]
    562e:	1e5a      	subs	r2, r3, #1
    5630:	4193      	sbcs	r3, r2
    5632:	b2db      	uxtb	r3, r3
    5634:	2b00      	cmp	r3, #0
    5636:	d014      	beq.n	5662 <_ZN5Print5writeEPKhj+0x4a>
    if (write(*buffer++)) n++;
    5638:	68fb      	ldr	r3, [r7, #12]
    563a:	681b      	ldr	r3, [r3, #0]
    563c:	681a      	ldr	r2, [r3, #0]
    563e:	68bb      	ldr	r3, [r7, #8]
    5640:	1c59      	adds	r1, r3, #1
    5642:	60b9      	str	r1, [r7, #8]
    5644:	7819      	ldrb	r1, [r3, #0]
    5646:	68fb      	ldr	r3, [r7, #12]
    5648:	0018      	movs	r0, r3
    564a:	4790      	blx	r2
    564c:	0003      	movs	r3, r0
    564e:	1e5a      	subs	r2, r3, #1
    5650:	4193      	sbcs	r3, r2
    5652:	b2db      	uxtb	r3, r3
    5654:	2b00      	cmp	r3, #0
    5656:	d003      	beq.n	5660 <_ZN5Print5writeEPKhj+0x48>
    5658:	697b      	ldr	r3, [r7, #20]
    565a:	3301      	adds	r3, #1
    565c:	617b      	str	r3, [r7, #20]

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    565e:	e7e3      	b.n	5628 <_ZN5Print5writeEPKhj+0x10>
    if (write(*buffer++)) n++;
    else break;
    5660:	46c0      	nop			; (mov r8, r8)
  }
  return n;
    5662:	697b      	ldr	r3, [r7, #20]
}
    5664:	0018      	movs	r0, r3
    5666:	46bd      	mov	sp, r7
    5668:	b006      	add	sp, #24
    566a:	bd80      	pop	{r7, pc}

0000566c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    566c:	b580      	push	{r7, lr}
    566e:	b082      	sub	sp, #8
    5670:	af00      	add	r7, sp, #0
    5672:	0002      	movs	r2, r0
    5674:	1dfb      	adds	r3, r7, #7
    5676:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    5678:	4b06      	ldr	r3, [pc, #24]	; (5694 <NVIC_EnableIRQ+0x28>)
    567a:	1dfa      	adds	r2, r7, #7
    567c:	7812      	ldrb	r2, [r2, #0]
    567e:	0011      	movs	r1, r2
    5680:	221f      	movs	r2, #31
    5682:	400a      	ands	r2, r1
    5684:	2101      	movs	r1, #1
    5686:	4091      	lsls	r1, r2
    5688:	000a      	movs	r2, r1
    568a:	601a      	str	r2, [r3, #0]
}
    568c:	46c0      	nop			; (mov r8, r8)
    568e:	46bd      	mov	sp, r7
    5690:	b002      	add	sp, #8
    5692:	bd80      	pop	{r7, pc}
    5694:	e000e100 	.word	0xe000e100

00005698 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    5698:	b5b0      	push	{r4, r5, r7, lr}
    569a:	b082      	sub	sp, #8
    569c:	af00      	add	r7, sp, #0
    569e:	0002      	movs	r2, r0
    56a0:	6039      	str	r1, [r7, #0]
    56a2:	1dfb      	adds	r3, r7, #7
    56a4:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    56a6:	1dfb      	adds	r3, r7, #7
    56a8:	781b      	ldrb	r3, [r3, #0]
    56aa:	2b7f      	cmp	r3, #127	; 0x7f
    56ac:	d932      	bls.n	5714 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    56ae:	4c2f      	ldr	r4, [pc, #188]	; (576c <NVIC_SetPriority+0xd4>)
    56b0:	1dfb      	adds	r3, r7, #7
    56b2:	781b      	ldrb	r3, [r3, #0]
    56b4:	001a      	movs	r2, r3
    56b6:	230f      	movs	r3, #15
    56b8:	4013      	ands	r3, r2
    56ba:	3b08      	subs	r3, #8
    56bc:	0899      	lsrs	r1, r3, #2
    56be:	4a2b      	ldr	r2, [pc, #172]	; (576c <NVIC_SetPriority+0xd4>)
    56c0:	1dfb      	adds	r3, r7, #7
    56c2:	781b      	ldrb	r3, [r3, #0]
    56c4:	0018      	movs	r0, r3
    56c6:	230f      	movs	r3, #15
    56c8:	4003      	ands	r3, r0
    56ca:	3b08      	subs	r3, #8
    56cc:	089b      	lsrs	r3, r3, #2
    56ce:	3306      	adds	r3, #6
    56d0:	009b      	lsls	r3, r3, #2
    56d2:	18d3      	adds	r3, r2, r3
    56d4:	3304      	adds	r3, #4
    56d6:	681b      	ldr	r3, [r3, #0]
    56d8:	1dfa      	adds	r2, r7, #7
    56da:	7812      	ldrb	r2, [r2, #0]
    56dc:	0010      	movs	r0, r2
    56de:	2203      	movs	r2, #3
    56e0:	4002      	ands	r2, r0
    56e2:	00d2      	lsls	r2, r2, #3
    56e4:	20ff      	movs	r0, #255	; 0xff
    56e6:	4090      	lsls	r0, r2
    56e8:	0002      	movs	r2, r0
    56ea:	43d2      	mvns	r2, r2
    56ec:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    56ee:	683b      	ldr	r3, [r7, #0]
    56f0:	019b      	lsls	r3, r3, #6
    56f2:	20ff      	movs	r0, #255	; 0xff
    56f4:	4018      	ands	r0, r3
    56f6:	1dfb      	adds	r3, r7, #7
    56f8:	781b      	ldrb	r3, [r3, #0]
    56fa:	001d      	movs	r5, r3
    56fc:	2303      	movs	r3, #3
    56fe:	402b      	ands	r3, r5
    5700:	00db      	lsls	r3, r3, #3
    5702:	4098      	lsls	r0, r3
    5704:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    5706:	431a      	orrs	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    5708:	1d8b      	adds	r3, r1, #6
    570a:	009b      	lsls	r3, r3, #2
    570c:	18e3      	adds	r3, r4, r3
    570e:	3304      	adds	r3, #4
    5710:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    5712:	e027      	b.n	5764 <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    5714:	4c16      	ldr	r4, [pc, #88]	; (5770 <NVIC_SetPriority+0xd8>)
    5716:	1dfb      	adds	r3, r7, #7
    5718:	781b      	ldrb	r3, [r3, #0]
    571a:	b25b      	sxtb	r3, r3
    571c:	089b      	lsrs	r3, r3, #2
    571e:	4914      	ldr	r1, [pc, #80]	; (5770 <NVIC_SetPriority+0xd8>)
    5720:	1dfa      	adds	r2, r7, #7
    5722:	7812      	ldrb	r2, [r2, #0]
    5724:	b252      	sxtb	r2, r2
    5726:	0892      	lsrs	r2, r2, #2
    5728:	32c0      	adds	r2, #192	; 0xc0
    572a:	0092      	lsls	r2, r2, #2
    572c:	5852      	ldr	r2, [r2, r1]
    572e:	1df9      	adds	r1, r7, #7
    5730:	7809      	ldrb	r1, [r1, #0]
    5732:	0008      	movs	r0, r1
    5734:	2103      	movs	r1, #3
    5736:	4001      	ands	r1, r0
    5738:	00c9      	lsls	r1, r1, #3
    573a:	20ff      	movs	r0, #255	; 0xff
    573c:	4088      	lsls	r0, r1
    573e:	0001      	movs	r1, r0
    5740:	43c9      	mvns	r1, r1
    5742:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    5744:	683a      	ldr	r2, [r7, #0]
    5746:	0192      	lsls	r2, r2, #6
    5748:	20ff      	movs	r0, #255	; 0xff
    574a:	4010      	ands	r0, r2
    574c:	1dfa      	adds	r2, r7, #7
    574e:	7812      	ldrb	r2, [r2, #0]
    5750:	0015      	movs	r5, r2
    5752:	2203      	movs	r2, #3
    5754:	402a      	ands	r2, r5
    5756:	00d2      	lsls	r2, r2, #3
    5758:	4090      	lsls	r0, r2
    575a:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    575c:	430a      	orrs	r2, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    575e:	33c0      	adds	r3, #192	; 0xc0
    5760:	009b      	lsls	r3, r3, #2
    5762:	511a      	str	r2, [r3, r4]
}
    5764:	46c0      	nop			; (mov r8, r8)
    5766:	46bd      	mov	sp, r7
    5768:	b002      	add	sp, #8
    576a:	bdb0      	pop	{r4, r5, r7, pc}
    576c:	e000ed00 	.word	0xe000ed00
    5770:	e000e100 	.word	0xe000e100

00005774 <_ZN6SERCOMC1EP6Sercom>:
*/

#include "SERCOM.h"
#include "variant.h"

SERCOM::SERCOM(Sercom* s)
    5774:	b580      	push	{r7, lr}
    5776:	b082      	sub	sp, #8
    5778:	af00      	add	r7, sp, #0
    577a:	6078      	str	r0, [r7, #4]
    577c:	6039      	str	r1, [r7, #0]
{
  sercom = s;
    577e:	687b      	ldr	r3, [r7, #4]
    5780:	683a      	ldr	r2, [r7, #0]
    5782:	601a      	str	r2, [r3, #0]
}
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	0018      	movs	r0, r3
    5788:	46bd      	mov	sp, r7
    578a:	b002      	add	sp, #8
    578c:	bd80      	pop	{r7, pc}
    578e:	46c0      	nop			; (mov r8, r8)

00005790 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
/* 	=========================
 *	===== Sercom UART
 *	=========================
*/
void SERCOM::initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate)
{
    5790:	b580      	push	{r7, lr}
    5792:	b086      	sub	sp, #24
    5794:	af00      	add	r7, sp, #0
    5796:	60f8      	str	r0, [r7, #12]
    5798:	0008      	movs	r0, r1
    579a:	0011      	movs	r1, r2
    579c:	607b      	str	r3, [r7, #4]
    579e:	230b      	movs	r3, #11
    57a0:	18fb      	adds	r3, r7, r3
    57a2:	1c02      	adds	r2, r0, #0
    57a4:	701a      	strb	r2, [r3, #0]
    57a6:	230a      	movs	r3, #10
    57a8:	18fb      	adds	r3, r7, r3
    57aa:	1c0a      	adds	r2, r1, #0
    57ac:	701a      	strb	r2, [r3, #0]
  initClockNVIC();
    57ae:	68fb      	ldr	r3, [r7, #12]
    57b0:	0018      	movs	r0, r3
    57b2:	f000 f99f 	bl	5af4 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    57b6:	68fb      	ldr	r3, [r7, #12]
    57b8:	0018      	movs	r0, r3
    57ba:	f000 f8d1 	bl	5960 <_ZN6SERCOM9resetUARTEv>

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    57be:	68fb      	ldr	r3, [r7, #12]
    57c0:	681b      	ldr	r3, [r3, #0]
    57c2:	220b      	movs	r2, #11
    57c4:	18ba      	adds	r2, r7, r2
    57c6:	7812      	ldrb	r2, [r2, #0]
    57c8:	0092      	lsls	r2, r2, #2
    57ca:	0011      	movs	r1, r2
    57cc:	221c      	movs	r2, #28
    57ce:	4011      	ands	r1, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    57d0:	220a      	movs	r2, #10
    57d2:	18ba      	adds	r2, r7, r2
    57d4:	7812      	ldrb	r2, [r2, #0]
    57d6:	0352      	lsls	r2, r2, #13
    57d8:	0412      	lsls	r2, r2, #16
    57da:	0c12      	lsrs	r2, r2, #16
{
  initClockNVIC();
  resetUART();

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    57dc:	430a      	orrs	r2, r1
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    57de:	601a      	str	r2, [r3, #0]

  //Setting the Interrupt register
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    57e0:	68fb      	ldr	r3, [r7, #12]
    57e2:	681b      	ldr	r3, [r3, #0]
                                SERCOM_USART_INTENSET_ERROR; //All others errors
    57e4:	2284      	movs	r2, #132	; 0x84
    57e6:	759a      	strb	r2, [r3, #22]

  if ( mode == UART_INT_CLOCK )
    57e8:	230b      	movs	r3, #11
    57ea:	18fb      	adds	r3, r7, r3
    57ec:	781b      	ldrb	r3, [r3, #0]
    57ee:	2b01      	cmp	r3, #1
    57f0:	d13b      	bne.n	586a <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xda>
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    57f2:	230a      	movs	r3, #10
    57f4:	18fb      	adds	r3, r7, r3
    57f6:	781b      	ldrb	r3, [r3, #0]
    57f8:	2b01      	cmp	r3, #1
    57fa:	d104      	bne.n	5806 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x76>
      sampleRateValue = 16;
    57fc:	2316      	movs	r3, #22
    57fe:	18fb      	adds	r3, r7, r3
    5800:	2210      	movs	r2, #16
    5802:	801a      	strh	r2, [r3, #0]
    5804:	e003      	b.n	580e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x7e>
    } else {
      sampleRateValue = 8;
    5806:	2316      	movs	r3, #22
    5808:	18fb      	adds	r3, r7, r3
    580a:	2208      	movs	r2, #8
    580c:	801a      	strh	r2, [r3, #0]
    }

    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    580e:	4b19      	ldr	r3, [pc, #100]	; (5874 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xe4>)
    5810:	681b      	ldr	r3, [r3, #0]
    5812:	00d8      	lsls	r0, r3, #3
    5814:	2316      	movs	r3, #22
    5816:	18fb      	adds	r3, r7, r3
    5818:	881b      	ldrh	r3, [r3, #0]
    581a:	687a      	ldr	r2, [r7, #4]
    581c:	4353      	muls	r3, r2
    581e:	0019      	movs	r1, r3
    5820:	f000 fece 	bl	65c0 <__aeabi_uidiv>
    5824:	0003      	movs	r3, r0
    5826:	613b      	str	r3, [r7, #16]

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    5828:	68fb      	ldr	r3, [r7, #12]
    582a:	681a      	ldr	r2, [r3, #0]
    582c:	693b      	ldr	r3, [r7, #16]
    582e:	b2db      	uxtb	r3, r3
    5830:	1c19      	adds	r1, r3, #0
    5832:	2307      	movs	r3, #7
    5834:	400b      	ands	r3, r1
    5836:	b2d9      	uxtb	r1, r3
    5838:	8993      	ldrh	r3, [r2, #12]
    583a:	0348      	lsls	r0, r1, #13
    583c:	04db      	lsls	r3, r3, #19
    583e:	0cdb      	lsrs	r3, r3, #19
    5840:	1c19      	adds	r1, r3, #0
    5842:	1c03      	adds	r3, r0, #0
    5844:	430b      	orrs	r3, r1
    5846:	8193      	strh	r3, [r2, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    5848:	68fb      	ldr	r3, [r7, #12]
    584a:	681a      	ldr	r2, [r3, #0]
    584c:	693b      	ldr	r3, [r7, #16]
    584e:	08db      	lsrs	r3, r3, #3
    5850:	b29b      	uxth	r3, r3
    5852:	04db      	lsls	r3, r3, #19
    5854:	0cdb      	lsrs	r3, r3, #19
    5856:	b299      	uxth	r1, r3
    5858:	8993      	ldrh	r3, [r2, #12]
    585a:	04c9      	lsls	r1, r1, #19
    585c:	0cc8      	lsrs	r0, r1, #19
    585e:	0b5b      	lsrs	r3, r3, #13
    5860:	035b      	lsls	r3, r3, #13
    5862:	1c19      	adds	r1, r3, #0
    5864:	1c03      	adds	r3, r0, #0
    5866:	430b      	orrs	r3, r1
    5868:	8193      	strh	r3, [r2, #12]
  }
}
    586a:	46c0      	nop			; (mov r8, r8)
    586c:	46bd      	mov	sp, r7
    586e:	b006      	add	sp, #24
    5870:	bd80      	pop	{r7, pc}
    5872:	46c0      	nop			; (mov r8, r8)
    5874:	20000034 	.word	0x20000034

00005878 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    5878:	b590      	push	{r4, r7, lr}
    587a:	b083      	sub	sp, #12
    587c:	af00      	add	r7, sp, #0
    587e:	6078      	str	r0, [r7, #4]
    5880:	000c      	movs	r4, r1
    5882:	0010      	movs	r0, r2
    5884:	0019      	movs	r1, r3
    5886:	1cfb      	adds	r3, r7, #3
    5888:	1c22      	adds	r2, r4, #0
    588a:	701a      	strb	r2, [r3, #0]
    588c:	1cbb      	adds	r3, r7, #2
    588e:	1c02      	adds	r2, r0, #0
    5890:	701a      	strb	r2, [r3, #0]
    5892:	1c7b      	adds	r3, r7, #1
    5894:	1c0a      	adds	r2, r1, #0
    5896:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    5898:	687b      	ldr	r3, [r7, #4]
    589a:	681b      	ldr	r3, [r3, #0]
    589c:	687a      	ldr	r2, [r7, #4]
    589e:	6812      	ldr	r2, [r2, #0]
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    58a0:	6811      	ldr	r1, [r2, #0]
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    58a2:	1c7a      	adds	r2, r7, #1
    58a4:	7812      	ldrb	r2, [r2, #0]
    58a6:	3a02      	subs	r2, #2
    58a8:	1e50      	subs	r0, r2, #1
    58aa:	4182      	sbcs	r2, r0
    58ac:	b2d2      	uxtb	r2, r2
    58ae:	0612      	lsls	r2, r2, #24
    58b0:	0010      	movs	r0, r2
    58b2:	22f0      	movs	r2, #240	; 0xf0
    58b4:	0512      	lsls	r2, r2, #20
    58b6:	4002      	ands	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    58b8:	1cb8      	adds	r0, r7, #2
    58ba:	7800      	ldrb	r0, [r0, #0]
    58bc:	0780      	lsls	r0, r0, #30
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    58be:	4302      	orrs	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    58c0:	430a      	orrs	r2, r1
    58c2:	601a      	str	r2, [r3, #0]

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    58c4:	687b      	ldr	r3, [r7, #4]
    58c6:	681b      	ldr	r3, [r3, #0]
    58c8:	687a      	ldr	r2, [r7, #4]
    58ca:	6812      	ldr	r2, [r2, #0]
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    58cc:	6851      	ldr	r1, [r2, #4]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    58ce:	1cfa      	adds	r2, r7, #3
    58d0:	7812      	ldrb	r2, [r2, #0]
    58d2:	2007      	movs	r0, #7
    58d4:	4002      	ands	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    58d6:	2018      	movs	r0, #24
    58d8:	1838      	adds	r0, r7, r0
    58da:	7800      	ldrb	r0, [r0, #0]
    58dc:	0180      	lsls	r0, r0, #6
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    58de:	4302      	orrs	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    58e0:	1c78      	adds	r0, r7, #1
    58e2:	7800      	ldrb	r0, [r0, #0]
    58e4:	2802      	cmp	r0, #2
    58e6:	d003      	beq.n	58f0 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x78>
    58e8:	1c78      	adds	r0, r7, #1
    58ea:	7800      	ldrb	r0, [r0, #0]
    58ec:	0340      	lsls	r0, r0, #13
    58ee:	e000      	b.n	58f2 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x7a>
    58f0:	2000      	movs	r0, #0
    58f2:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    58f4:	430a      	orrs	r2, r1
    58f6:	605a      	str	r2, [r3, #4]
}
    58f8:	46c0      	nop			; (mov r8, r8)
    58fa:	46bd      	mov	sp, r7
    58fc:	b003      	add	sp, #12
    58fe:	bd90      	pop	{r4, r7, pc}

00005900 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    5900:	b590      	push	{r4, r7, lr}
    5902:	b083      	sub	sp, #12
    5904:	af00      	add	r7, sp, #0
    5906:	6078      	str	r0, [r7, #4]
    5908:	0008      	movs	r0, r1
    590a:	0011      	movs	r1, r2
    590c:	1cfb      	adds	r3, r7, #3
    590e:	1c02      	adds	r2, r0, #0
    5910:	701a      	strb	r2, [r3, #0]
    5912:	1cbb      	adds	r3, r7, #2
    5914:	1c0a      	adds	r2, r1, #0
    5916:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    5918:	687b      	ldr	r3, [r7, #4]
    591a:	681b      	ldr	r3, [r3, #0]
    591c:	687a      	ldr	r2, [r7, #4]
    591e:	6812      	ldr	r2, [r2, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    5920:	6811      	ldr	r1, [r2, #0]
}

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    5922:	1cfa      	adds	r2, r7, #3
    5924:	7812      	ldrb	r2, [r2, #0]
    5926:	0412      	lsls	r2, r2, #16
    5928:	0010      	movs	r0, r2
    592a:	22c0      	movs	r2, #192	; 0xc0
    592c:	0292      	lsls	r2, r2, #10
    592e:	4010      	ands	r0, r2
                SERCOM_USART_CTRLA_RXPO(rxPad);
    5930:	1cba      	adds	r2, r7, #2
    5932:	7812      	ldrb	r2, [r2, #0]
    5934:	0512      	lsls	r2, r2, #20
    5936:	0014      	movs	r4, r2
    5938:	22c0      	movs	r2, #192	; 0xc0
    593a:	0392      	lsls	r2, r2, #14
    593c:	4022      	ands	r2, r4
}

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    593e:	4302      	orrs	r2, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    5940:	430a      	orrs	r2, r1
    5942:	601a      	str	r2, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    5944:	687b      	ldr	r3, [r7, #4]
    5946:	681b      	ldr	r3, [r3, #0]
    5948:	687a      	ldr	r2, [r7, #4]
    594a:	6812      	ldr	r2, [r2, #0]
    594c:	6852      	ldr	r2, [r2, #4]
    594e:	21c0      	movs	r1, #192	; 0xc0
    5950:	0289      	lsls	r1, r1, #10
    5952:	430a      	orrs	r2, r1
    5954:	605a      	str	r2, [r3, #4]
}
    5956:	46c0      	nop			; (mov r8, r8)
    5958:	46bd      	mov	sp, r7
    595a:	b003      	add	sp, #12
    595c:	bd90      	pop	{r4, r7, pc}
    595e:	46c0      	nop			; (mov r8, r8)

00005960 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
    5960:	b580      	push	{r7, lr}
    5962:	b082      	sub	sp, #8
    5964:	af00      	add	r7, sp, #0
    5966:	6078      	str	r0, [r7, #4]
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    5968:	687b      	ldr	r3, [r7, #4]
    596a:	681b      	ldr	r3, [r3, #0]
    596c:	681a      	ldr	r2, [r3, #0]
    596e:	2101      	movs	r1, #1
    5970:	430a      	orrs	r2, r1
    5972:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    5974:	687b      	ldr	r3, [r7, #4]
    5976:	681b      	ldr	r3, [r3, #0]
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	07db      	lsls	r3, r3, #31
    597c:	0fdb      	lsrs	r3, r3, #31
    597e:	b2db      	uxtb	r3, r3
    5980:	2b00      	cmp	r3, #0
    5982:	d107      	bne.n	5994 <_ZN6SERCOM9resetUARTEv+0x34>
    5984:	687b      	ldr	r3, [r7, #4]
    5986:	681b      	ldr	r3, [r3, #0]
    5988:	69db      	ldr	r3, [r3, #28]
    598a:	07db      	lsls	r3, r3, #31
    598c:	0fdb      	lsrs	r3, r3, #31
    598e:	b2db      	uxtb	r3, r3
    5990:	2b00      	cmp	r3, #0
    5992:	d001      	beq.n	5998 <_ZN6SERCOM9resetUARTEv+0x38>
    5994:	2301      	movs	r3, #1
    5996:	e000      	b.n	599a <_ZN6SERCOM9resetUARTEv+0x3a>
    5998:	2300      	movs	r3, #0
    599a:	2b00      	cmp	r3, #0
    599c:	d000      	beq.n	59a0 <_ZN6SERCOM9resetUARTEv+0x40>
    599e:	e7e9      	b.n	5974 <_ZN6SERCOM9resetUARTEv+0x14>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    59a0:	46c0      	nop			; (mov r8, r8)
    59a2:	46bd      	mov	sp, r7
    59a4:	b002      	add	sp, #8
    59a6:	bd80      	pop	{r7, pc}

000059a8 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
    59a8:	b580      	push	{r7, lr}
    59aa:	b082      	sub	sp, #8
    59ac:	af00      	add	r7, sp, #0
    59ae:	6078      	str	r0, [r7, #4]
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	681b      	ldr	r3, [r3, #0]
    59b4:	681a      	ldr	r2, [r3, #0]
    59b6:	2102      	movs	r1, #2
    59b8:	430a      	orrs	r2, r1
    59ba:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    59bc:	687b      	ldr	r3, [r7, #4]
    59be:	681b      	ldr	r3, [r3, #0]
    59c0:	69db      	ldr	r3, [r3, #28]
    59c2:	079b      	lsls	r3, r3, #30
    59c4:	0fdb      	lsrs	r3, r3, #31
    59c6:	b2db      	uxtb	r3, r3
    59c8:	2b00      	cmp	r3, #0
    59ca:	d000      	beq.n	59ce <_ZN6SERCOM10enableUARTEv+0x26>
    59cc:	e7f6      	b.n	59bc <_ZN6SERCOM10enableUARTEv+0x14>
}
    59ce:	46c0      	nop			; (mov r8, r8)
    59d0:	46bd      	mov	sp, r7
    59d2:	b002      	add	sp, #8
    59d4:	bd80      	pop	{r7, pc}
    59d6:	46c0      	nop			; (mov r8, r8)

000059d8 <_ZN6SERCOM9flushUARTEv>:

void SERCOM::flushUART()
{
    59d8:	b580      	push	{r7, lr}
    59da:	b082      	sub	sp, #8
    59dc:	af00      	add	r7, sp, #0
    59de:	6078      	str	r0, [r7, #4]
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	0018      	movs	r0, r3
    59e4:	f000 f84a 	bl	5a7c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    59e8:	1e03      	subs	r3, r0, #0
    59ea:	d10b      	bne.n	5a04 <_ZN6SERCOM9flushUARTEv+0x2c>
    return;

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	681b      	ldr	r3, [r3, #0]
    59f0:	7e1b      	ldrb	r3, [r3, #24]
    59f2:	079b      	lsls	r3, r3, #30
    59f4:	0fdb      	lsrs	r3, r3, #31
    59f6:	b2db      	uxtb	r3, r3
    59f8:	2201      	movs	r2, #1
    59fa:	4053      	eors	r3, r2
    59fc:	b2db      	uxtb	r3, r3
    59fe:	2b00      	cmp	r3, #0
    5a00:	d001      	beq.n	5a06 <_ZN6SERCOM9flushUARTEv+0x2e>
    5a02:	e7f3      	b.n	59ec <_ZN6SERCOM9flushUARTEv+0x14>

void SERCOM::flushUART()
{
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    return;
    5a04:	46c0      	nop			; (mov r8, r8)

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
}
    5a06:	46bd      	mov	sp, r7
    5a08:	b002      	add	sp, #8
    5a0a:	bd80      	pop	{r7, pc}

00005a0c <_ZN6SERCOM15clearStatusUARTEv>:

void SERCOM::clearStatusUART()
{
    5a0c:	b580      	push	{r7, lr}
    5a0e:	b082      	sub	sp, #8
    5a10:	af00      	add	r7, sp, #0
    5a12:	6078      	str	r0, [r7, #4]
  //Reset (with 0) the STATUS register
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    5a14:	687b      	ldr	r3, [r7, #4]
    5a16:	681b      	ldr	r3, [r3, #0]
    5a18:	2200      	movs	r2, #0
    5a1a:	835a      	strh	r2, [r3, #26]
}
    5a1c:	46c0      	nop			; (mov r8, r8)
    5a1e:	46bd      	mov	sp, r7
    5a20:	b002      	add	sp, #8
    5a22:	bd80      	pop	{r7, pc}

00005a24 <_ZN6SERCOM17availableDataUARTEv>:

bool SERCOM::availableDataUART()
{
    5a24:	b580      	push	{r7, lr}
    5a26:	b082      	sub	sp, #8
    5a28:	af00      	add	r7, sp, #0
    5a2a:	6078      	str	r0, [r7, #4]
  //RXC : Receive Complete
  return sercom->USART.INTFLAG.bit.RXC;
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	681b      	ldr	r3, [r3, #0]
    5a30:	7e1b      	ldrb	r3, [r3, #24]
    5a32:	075b      	lsls	r3, r3, #29
    5a34:	0fdb      	lsrs	r3, r3, #31
    5a36:	b2db      	uxtb	r3, r3
}
    5a38:	0018      	movs	r0, r3
    5a3a:	46bd      	mov	sp, r7
    5a3c:	b002      	add	sp, #8
    5a3e:	bd80      	pop	{r7, pc}

00005a40 <_ZN6SERCOM11isUARTErrorEv>:

bool SERCOM::isUARTError()
{
    5a40:	b580      	push	{r7, lr}
    5a42:	b082      	sub	sp, #8
    5a44:	af00      	add	r7, sp, #0
    5a46:	6078      	str	r0, [r7, #4]
  return sercom->USART.INTFLAG.bit.ERROR;
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	681b      	ldr	r3, [r3, #0]
    5a4c:	7e1b      	ldrb	r3, [r3, #24]
    5a4e:	061b      	lsls	r3, r3, #24
    5a50:	0fdb      	lsrs	r3, r3, #31
    5a52:	b2db      	uxtb	r3, r3
}
    5a54:	0018      	movs	r0, r3
    5a56:	46bd      	mov	sp, r7
    5a58:	b002      	add	sp, #8
    5a5a:	bd80      	pop	{r7, pc}

00005a5c <_ZN6SERCOM20acknowledgeUARTErrorEv>:

void SERCOM::acknowledgeUARTError()
{
    5a5c:	b580      	push	{r7, lr}
    5a5e:	b082      	sub	sp, #8
    5a60:	af00      	add	r7, sp, #0
    5a62:	6078      	str	r0, [r7, #4]
  sercom->USART.INTFLAG.bit.ERROR = 1;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	681a      	ldr	r2, [r3, #0]
    5a68:	7e13      	ldrb	r3, [r2, #24]
    5a6a:	2180      	movs	r1, #128	; 0x80
    5a6c:	4249      	negs	r1, r1
    5a6e:	430b      	orrs	r3, r1
    5a70:	7613      	strb	r3, [r2, #24]
}
    5a72:	46c0      	nop			; (mov r8, r8)
    5a74:	46bd      	mov	sp, r7
    5a76:	b002      	add	sp, #8
    5a78:	bd80      	pop	{r7, pc}
    5a7a:	46c0      	nop			; (mov r8, r8)

00005a7c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  //PERR : Parity Error
  return sercom->USART.STATUS.bit.PERR;
}

bool SERCOM::isDataRegisterEmptyUART()
{
    5a7c:	b580      	push	{r7, lr}
    5a7e:	b082      	sub	sp, #8
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    5a84:	687b      	ldr	r3, [r7, #4]
    5a86:	681b      	ldr	r3, [r3, #0]
    5a88:	7e1b      	ldrb	r3, [r3, #24]
    5a8a:	07db      	lsls	r3, r3, #31
    5a8c:	0fdb      	lsrs	r3, r3, #31
    5a8e:	b2db      	uxtb	r3, r3
}
    5a90:	0018      	movs	r0, r3
    5a92:	46bd      	mov	sp, r7
    5a94:	b002      	add	sp, #8
    5a96:	bd80      	pop	{r7, pc}

00005a98 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
    5a98:	b580      	push	{r7, lr}
    5a9a:	b082      	sub	sp, #8
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	6078      	str	r0, [r7, #4]
  return sercom->USART.DATA.bit.DATA;
    5aa0:	687b      	ldr	r3, [r7, #4]
    5aa2:	681b      	ldr	r3, [r3, #0]
    5aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5aa6:	05db      	lsls	r3, r3, #23
    5aa8:	0ddb      	lsrs	r3, r3, #23
    5aaa:	b29b      	uxth	r3, r3
    5aac:	b2db      	uxtb	r3, r3
}
    5aae:	0018      	movs	r0, r3
    5ab0:	46bd      	mov	sp, r7
    5ab2:	b002      	add	sp, #8
    5ab4:	bd80      	pop	{r7, pc}
    5ab6:	46c0      	nop			; (mov r8, r8)

00005ab8 <_ZN6SERCOM13writeDataUARTEh>:

int SERCOM::writeDataUART(uint8_t data)
{
    5ab8:	b580      	push	{r7, lr}
    5aba:	b082      	sub	sp, #8
    5abc:	af00      	add	r7, sp, #0
    5abe:	6078      	str	r0, [r7, #4]
    5ac0:	000a      	movs	r2, r1
    5ac2:	1cfb      	adds	r3, r7, #3
    5ac4:	701a      	strb	r2, [r3, #0]
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    5ac6:	687b      	ldr	r3, [r7, #4]
    5ac8:	0018      	movs	r0, r3
    5aca:	f7ff ffd7 	bl	5a7c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    5ace:	0003      	movs	r3, r0
    5ad0:	001a      	movs	r2, r3
    5ad2:	2301      	movs	r3, #1
    5ad4:	4053      	eors	r3, r2
    5ad6:	b2db      	uxtb	r3, r3
    5ad8:	2b00      	cmp	r3, #0
    5ada:	d000      	beq.n	5ade <_ZN6SERCOM13writeDataUARTEh+0x26>
    5adc:	e7f3      	b.n	5ac6 <_ZN6SERCOM13writeDataUARTEh+0xe>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    5ade:	687b      	ldr	r3, [r7, #4]
    5ae0:	681b      	ldr	r3, [r3, #0]
    5ae2:	1cfa      	adds	r2, r7, #3
    5ae4:	7812      	ldrb	r2, [r2, #0]
    5ae6:	b292      	uxth	r2, r2
    5ae8:	851a      	strh	r2, [r3, #40]	; 0x28
  return 1;
    5aea:	2301      	movs	r3, #1
}
    5aec:	0018      	movs	r0, r3
    5aee:	46bd      	mov	sp, r7
    5af0:	b002      	add	sp, #8
    5af2:	bd80      	pop	{r7, pc}

00005af4 <_ZN6SERCOM13initClockNVICEv>:
  }
}


void SERCOM::initClockNVIC( void )
{
    5af4:	b580      	push	{r7, lr}
    5af6:	b084      	sub	sp, #16
    5af8:	af00      	add	r7, sp, #0
    5afa:	6078      	str	r0, [r7, #4]
  uint8_t clockId = 0;
    5afc:	230f      	movs	r3, #15
    5afe:	18fb      	adds	r3, r7, r3
    5b00:	2200      	movs	r2, #0
    5b02:	701a      	strb	r2, [r3, #0]
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
    5b04:	230e      	movs	r3, #14
    5b06:	18fb      	adds	r3, r7, r3
    5b08:	22fe      	movs	r2, #254	; 0xfe
    5b0a:	701a      	strb	r2, [r3, #0]

  if(sercom == SERCOM0)
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	681b      	ldr	r3, [r3, #0]
    5b10:	4a40      	ldr	r2, [pc, #256]	; (5c14 <_ZN6SERCOM13initClockNVICEv+0x120>)
    5b12:	4293      	cmp	r3, r2
    5b14:	d108      	bne.n	5b28 <_ZN6SERCOM13initClockNVICEv+0x34>
  {
    clockId = GCM_SERCOM0_CORE;
    5b16:	230f      	movs	r3, #15
    5b18:	18fb      	adds	r3, r7, r3
    5b1a:	2214      	movs	r2, #20
    5b1c:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM0_IRQn;
    5b1e:	230e      	movs	r3, #14
    5b20:	18fb      	adds	r3, r7, r3
    5b22:	2209      	movs	r2, #9
    5b24:	701a      	strb	r2, [r3, #0]
    5b26:	e044      	b.n	5bb2 <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM1)
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	681b      	ldr	r3, [r3, #0]
    5b2c:	4a3a      	ldr	r2, [pc, #232]	; (5c18 <_ZN6SERCOM13initClockNVICEv+0x124>)
    5b2e:	4293      	cmp	r3, r2
    5b30:	d108      	bne.n	5b44 <_ZN6SERCOM13initClockNVICEv+0x50>
  {
    clockId = GCM_SERCOM1_CORE;
    5b32:	230f      	movs	r3, #15
    5b34:	18fb      	adds	r3, r7, r3
    5b36:	2215      	movs	r2, #21
    5b38:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM1_IRQn;
    5b3a:	230e      	movs	r3, #14
    5b3c:	18fb      	adds	r3, r7, r3
    5b3e:	220a      	movs	r2, #10
    5b40:	701a      	strb	r2, [r3, #0]
    5b42:	e036      	b.n	5bb2 <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM2)
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	681b      	ldr	r3, [r3, #0]
    5b48:	4a34      	ldr	r2, [pc, #208]	; (5c1c <_ZN6SERCOM13initClockNVICEv+0x128>)
    5b4a:	4293      	cmp	r3, r2
    5b4c:	d108      	bne.n	5b60 <_ZN6SERCOM13initClockNVICEv+0x6c>
  {
    clockId = GCM_SERCOM2_CORE;
    5b4e:	230f      	movs	r3, #15
    5b50:	18fb      	adds	r3, r7, r3
    5b52:	2216      	movs	r2, #22
    5b54:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM2_IRQn;
    5b56:	230e      	movs	r3, #14
    5b58:	18fb      	adds	r3, r7, r3
    5b5a:	220b      	movs	r2, #11
    5b5c:	701a      	strb	r2, [r3, #0]
    5b5e:	e028      	b.n	5bb2 <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM3)
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	681b      	ldr	r3, [r3, #0]
    5b64:	4a2e      	ldr	r2, [pc, #184]	; (5c20 <_ZN6SERCOM13initClockNVICEv+0x12c>)
    5b66:	4293      	cmp	r3, r2
    5b68:	d108      	bne.n	5b7c <_ZN6SERCOM13initClockNVICEv+0x88>
  {
    clockId = GCM_SERCOM3_CORE;
    5b6a:	230f      	movs	r3, #15
    5b6c:	18fb      	adds	r3, r7, r3
    5b6e:	2217      	movs	r2, #23
    5b70:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM3_IRQn;
    5b72:	230e      	movs	r3, #14
    5b74:	18fb      	adds	r3, r7, r3
    5b76:	220c      	movs	r2, #12
    5b78:	701a      	strb	r2, [r3, #0]
    5b7a:	e01a      	b.n	5bb2 <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
#if defined(SERCOM4)
  else if(sercom == SERCOM4)
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	681b      	ldr	r3, [r3, #0]
    5b80:	4a28      	ldr	r2, [pc, #160]	; (5c24 <_ZN6SERCOM13initClockNVICEv+0x130>)
    5b82:	4293      	cmp	r3, r2
    5b84:	d108      	bne.n	5b98 <_ZN6SERCOM13initClockNVICEv+0xa4>
  {
    clockId = GCM_SERCOM4_CORE;
    5b86:	230f      	movs	r3, #15
    5b88:	18fb      	adds	r3, r7, r3
    5b8a:	2218      	movs	r2, #24
    5b8c:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM4_IRQn;
    5b8e:	230e      	movs	r3, #14
    5b90:	18fb      	adds	r3, r7, r3
    5b92:	220d      	movs	r2, #13
    5b94:	701a      	strb	r2, [r3, #0]
    5b96:	e00c      	b.n	5bb2 <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
#endif
#if defined(SERCOM5)
  else if(sercom == SERCOM5)
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	4a22      	ldr	r2, [pc, #136]	; (5c28 <_ZN6SERCOM13initClockNVICEv+0x134>)
    5b9e:	4293      	cmp	r3, r2
    5ba0:	d107      	bne.n	5bb2 <_ZN6SERCOM13initClockNVICEv+0xbe>
  {
    clockId = GCM_SERCOM5_CORE;
    5ba2:	230f      	movs	r3, #15
    5ba4:	18fb      	adds	r3, r7, r3
    5ba6:	2219      	movs	r2, #25
    5ba8:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM5_IRQn;
    5baa:	230e      	movs	r3, #14
    5bac:	18fb      	adds	r3, r7, r3
    5bae:	220e      	movs	r2, #14
    5bb0:	701a      	strb	r2, [r3, #0]
  }
#endif

  if ( IdNvic == PendSV_IRQn )
    5bb2:	230e      	movs	r3, #14
    5bb4:	18fb      	adds	r3, r7, r3
    5bb6:	781b      	ldrb	r3, [r3, #0]
    5bb8:	b25b      	sxtb	r3, r3
    5bba:	3302      	adds	r3, #2
    5bbc:	d025      	beq.n	5c0a <_ZN6SERCOM13initClockNVICEv+0x116>
    // We got a problem here
    return ;
  }

  // Setting NVIC
  NVIC_EnableIRQ(IdNvic);
    5bbe:	230e      	movs	r3, #14
    5bc0:	18fb      	adds	r3, r7, r3
    5bc2:	781b      	ldrb	r3, [r3, #0]
    5bc4:	b25b      	sxtb	r3, r3
    5bc6:	0018      	movs	r0, r3
    5bc8:	f7ff fd50 	bl	566c <NVIC_EnableIRQ>
  NVIC_SetPriority (IdNvic, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority */
    5bcc:	230e      	movs	r3, #14
    5bce:	18fb      	adds	r3, r7, r3
    5bd0:	781b      	ldrb	r3, [r3, #0]
    5bd2:	b25b      	sxtb	r3, r3
    5bd4:	2103      	movs	r1, #3
    5bd6:	0018      	movs	r0, r3
    5bd8:	f7ff fd5e 	bl	5698 <NVIC_SetPriority>

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    5bdc:	4913      	ldr	r1, [pc, #76]	; (5c2c <_ZN6SERCOM13initClockNVICEv+0x138>)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;
    5bde:	230f      	movs	r3, #15
    5be0:	18fb      	adds	r3, r7, r3
    5be2:	781b      	ldrb	r3, [r3, #0]
    5be4:	b29b      	uxth	r3, r3
    5be6:	223f      	movs	r2, #63	; 0x3f
    5be8:	4013      	ands	r3, r2
    5bea:	b29b      	uxth	r3, r3
    5bec:	2280      	movs	r2, #128	; 0x80
    5bee:	01d2      	lsls	r2, r2, #7
    5bf0:	4313      	orrs	r3, r2
    5bf2:	b29b      	uxth	r3, r3
    5bf4:	804b      	strh	r3, [r1, #2]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    5bf6:	4b0d      	ldr	r3, [pc, #52]	; (5c2c <_ZN6SERCOM13initClockNVICEv+0x138>)
    5bf8:	785b      	ldrb	r3, [r3, #1]
    5bfa:	b2db      	uxtb	r3, r3
    5bfc:	b25b      	sxtb	r3, r3
    5bfe:	b2db      	uxtb	r3, r3
    5c00:	09db      	lsrs	r3, r3, #7
    5c02:	b2db      	uxtb	r3, r3
    5c04:	2b00      	cmp	r3, #0
    5c06:	d001      	beq.n	5c0c <_ZN6SERCOM13initClockNVICEv+0x118>
    5c08:	e7f5      	b.n	5bf6 <_ZN6SERCOM13initClockNVICEv+0x102>
#endif

  if ( IdNvic == PendSV_IRQn )
  {
    // We got a problem here
    return ;
    5c0a:	46c0      	nop			; (mov r8, r8)

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
  {
    /* Wait for synchronization */
  }
}
    5c0c:	46bd      	mov	sp, r7
    5c0e:	b004      	add	sp, #16
    5c10:	bd80      	pop	{r7, pc}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	42000800 	.word	0x42000800
    5c18:	42000c00 	.word	0x42000c00
    5c1c:	42001000 	.word	0x42001000
    5c20:	42001400 	.word	0x42001400
    5c24:	42001800 	.word	0x42001800
    5c28:	42001c00 	.word	0x42001c00
    5c2c:	40000c00 	.word	0x40000c00

00005c30 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5c30:	b580      	push	{r7, lr}
    5c32:	b082      	sub	sp, #8
    5c34:	af00      	add	r7, sp, #0
    5c36:	6078      	str	r0, [r7, #4]
    5c38:	4a05      	ldr	r2, [pc, #20]	; (5c50 <_ZN5PrintC1Ev+0x20>)
    5c3a:	687b      	ldr	r3, [r7, #4]
    5c3c:	601a      	str	r2, [r3, #0]
    5c3e:	687b      	ldr	r3, [r7, #4]
    5c40:	2200      	movs	r2, #0
    5c42:	605a      	str	r2, [r3, #4]
    5c44:	687b      	ldr	r3, [r7, #4]
    5c46:	0018      	movs	r0, r3
    5c48:	46bd      	mov	sp, r7
    5c4a:	b002      	add	sp, #8
    5c4c:	bd80      	pop	{r7, pc}
    5c4e:	46c0      	nop			; (mov r8, r8)
    5c50:	00007b88 	.word	0x00007b88

00005c54 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    5c54:	b580      	push	{r7, lr}
    5c56:	b082      	sub	sp, #8
    5c58:	af00      	add	r7, sp, #0
    5c5a:	6078      	str	r0, [r7, #4]
    5c5c:	687b      	ldr	r3, [r7, #4]
    5c5e:	0018      	movs	r0, r3
    5c60:	f7ff ffe6 	bl	5c30 <_ZN5PrintC1Ev>
    5c64:	4a05      	ldr	r2, [pc, #20]	; (5c7c <_ZN6StreamC1Ev+0x28>)
    5c66:	687b      	ldr	r3, [r7, #4]
    5c68:	601a      	str	r2, [r3, #0]
    5c6a:	687b      	ldr	r3, [r7, #4]
    5c6c:	22fa      	movs	r2, #250	; 0xfa
    5c6e:	0092      	lsls	r2, r2, #2
    5c70:	609a      	str	r2, [r3, #8]
    5c72:	687b      	ldr	r3, [r7, #4]
    5c74:	0018      	movs	r0, r3
    5c76:	46bd      	mov	sp, r7
    5c78:	b002      	add	sp, #8
    5c7a:	bd80      	pop	{r7, pc}
    5c7c:	00007bd0 	.word	0x00007bd0

00005c80 <_ZN14HardwareSerialC1Ev>:

class HardwareSerial : public Stream
{
	public:
	
	HardwareSerial() {};
    5c80:	b580      	push	{r7, lr}
    5c82:	b082      	sub	sp, #8
    5c84:	af00      	add	r7, sp, #0
    5c86:	6078      	str	r0, [r7, #4]
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	0018      	movs	r0, r3
    5c8c:	f7ff ffe2 	bl	5c54 <_ZN6StreamC1Ev>
    5c90:	4a03      	ldr	r2, [pc, #12]	; (5ca0 <_ZN14HardwareSerialC1Ev+0x20>)
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	601a      	str	r2, [r3, #0]
    5c96:	687b      	ldr	r3, [r7, #4]
    5c98:	0018      	movs	r0, r3
    5c9a:	46bd      	mov	sp, r7
    5c9c:	b002      	add	sp, #8
    5c9e:	bd80      	pop	{r7, pc}
    5ca0:	00007b50 	.word	0x00007b50

00005ca4 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    5ca4:	b580      	push	{r7, lr}
    5ca6:	b082      	sub	sp, #8
    5ca8:	af00      	add	r7, sp, #0
    5caa:	6078      	str	r0, [r7, #4]
    5cac:	2301      	movs	r3, #1
    5cae:	0018      	movs	r0, r3
    5cb0:	46bd      	mov	sp, r7
    5cb2:	b002      	add	sp, #8
    5cb4:	bd80      	pop	{r7, pc}
    5cb6:	46c0      	nop			; (mov r8, r8)

00005cb8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:

#include "Uart.h"
#include "Arduino.h"
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
    5cb8:	b580      	push	{r7, lr}
    5cba:	b084      	sub	sp, #16
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	60f8      	str	r0, [r7, #12]
    5cc0:	60b9      	str	r1, [r7, #8]
    5cc2:	0019      	movs	r1, r3
    5cc4:	1dfb      	adds	r3, r7, #7
    5cc6:	701a      	strb	r2, [r3, #0]
    5cc8:	1dbb      	adds	r3, r7, #6
    5cca:	1c0a      	adds	r2, r1, #0
    5ccc:	701a      	strb	r2, [r3, #0]
    5cce:	68fb      	ldr	r3, [r7, #12]
    5cd0:	0018      	movs	r0, r3
    5cd2:	f7ff ffd5 	bl	5c80 <_ZN14HardwareSerialC1Ev>
    5cd6:	4a13      	ldr	r2, [pc, #76]	; (5d24 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
    5cd8:	68fb      	ldr	r3, [r7, #12]
    5cda:	601a      	str	r2, [r3, #0]
    5cdc:	68fb      	ldr	r3, [r7, #12]
    5cde:	3314      	adds	r3, #20
    5ce0:	0018      	movs	r0, r3
    5ce2:	f000 fbb1 	bl	6448 <_ZN10RingBufferC1Ev>
{
  sercom = _s;
    5ce6:	68fb      	ldr	r3, [r7, #12]
    5ce8:	68ba      	ldr	r2, [r7, #8]
    5cea:	611a      	str	r2, [r3, #16]
  uc_pinRX = _pinRX;
    5cec:	68fb      	ldr	r3, [r7, #12]
    5cee:	1dfa      	adds	r2, r7, #7
    5cf0:	21c0      	movs	r1, #192	; 0xc0
    5cf2:	7812      	ldrb	r2, [r2, #0]
    5cf4:	545a      	strb	r2, [r3, r1]
  uc_pinTX = _pinTX;
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	1dba      	adds	r2, r7, #6
    5cfa:	21c1      	movs	r1, #193	; 0xc1
    5cfc:	7812      	ldrb	r2, [r2, #0]
    5cfe:	545a      	strb	r2, [r3, r1]
  uc_padRX=_padRX ;
    5d00:	68fb      	ldr	r3, [r7, #12]
    5d02:	2218      	movs	r2, #24
    5d04:	18ba      	adds	r2, r7, r2
    5d06:	21c2      	movs	r1, #194	; 0xc2
    5d08:	7812      	ldrb	r2, [r2, #0]
    5d0a:	545a      	strb	r2, [r3, r1]
  uc_padTX=_padTX;
    5d0c:	68fb      	ldr	r3, [r7, #12]
    5d0e:	221c      	movs	r2, #28
    5d10:	18ba      	adds	r2, r7, r2
    5d12:	21c3      	movs	r1, #195	; 0xc3
    5d14:	7812      	ldrb	r2, [r2, #0]
    5d16:	545a      	strb	r2, [r3, r1]
}
    5d18:	68fb      	ldr	r3, [r7, #12]
    5d1a:	0018      	movs	r0, r3
    5d1c:	46bd      	mov	sp, r7
    5d1e:	b004      	add	sp, #16
    5d20:	bd80      	pop	{r7, pc}
    5d22:	46c0      	nop			; (mov r8, r8)
    5d24:	00007b98 	.word	0x00007b98

00005d28 <_ZN4Uart5beginEm>:

void Uart::begin(unsigned long baudrate)
{
    5d28:	b580      	push	{r7, lr}
    5d2a:	b082      	sub	sp, #8
    5d2c:	af00      	add	r7, sp, #0
    5d2e:	6078      	str	r0, [r7, #4]
    5d30:	6039      	str	r1, [r7, #0]
  begin(baudrate, SERIAL_8N1);
    5d32:	687b      	ldr	r3, [r7, #4]
    5d34:	681b      	ldr	r3, [r3, #0]
    5d36:	3324      	adds	r3, #36	; 0x24
    5d38:	681b      	ldr	r3, [r3, #0]
    5d3a:	4a04      	ldr	r2, [pc, #16]	; (5d4c <_ZN4Uart5beginEm+0x24>)
    5d3c:	6839      	ldr	r1, [r7, #0]
    5d3e:	6878      	ldr	r0, [r7, #4]
    5d40:	4798      	blx	r3
}
    5d42:	46c0      	nop			; (mov r8, r8)
    5d44:	46bd      	mov	sp, r7
    5d46:	b002      	add	sp, #8
    5d48:	bd80      	pop	{r7, pc}
    5d4a:	46c0      	nop			; (mov r8, r8)
    5d4c:	00000413 	.word	0x00000413

00005d50 <_ZN4Uart5beginEmt>:

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    5d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d52:	b087      	sub	sp, #28
    5d54:	af02      	add	r7, sp, #8
    5d56:	60f8      	str	r0, [r7, #12]
    5d58:	60b9      	str	r1, [r7, #8]
    5d5a:	1dbb      	adds	r3, r7, #6
    5d5c:	801a      	strh	r2, [r3, #0]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    5d5e:	68fb      	ldr	r3, [r7, #12]
    5d60:	22c0      	movs	r2, #192	; 0xc0
    5d62:	5c9b      	ldrb	r3, [r3, r2]
    5d64:	0018      	movs	r0, r3
    5d66:	68fb      	ldr	r3, [r7, #12]
    5d68:	22c0      	movs	r2, #192	; 0xc0
    5d6a:	5c9b      	ldrb	r3, [r3, r2]
    5d6c:	0019      	movs	r1, r3
    5d6e:	4a2f      	ldr	r2, [pc, #188]	; (5e2c <_ZN4Uart5beginEmt+0xdc>)
    5d70:	000b      	movs	r3, r1
    5d72:	005b      	lsls	r3, r3, #1
    5d74:	185b      	adds	r3, r3, r1
    5d76:	00db      	lsls	r3, r3, #3
    5d78:	18d3      	adds	r3, r2, r3
    5d7a:	3308      	adds	r3, #8
    5d7c:	781b      	ldrb	r3, [r3, #0]
    5d7e:	b25b      	sxtb	r3, r3
    5d80:	0019      	movs	r1, r3
    5d82:	f7fe fc6b 	bl	465c <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    5d86:	68fb      	ldr	r3, [r7, #12]
    5d88:	22c1      	movs	r2, #193	; 0xc1
    5d8a:	5c9b      	ldrb	r3, [r3, r2]
    5d8c:	0018      	movs	r0, r3
    5d8e:	68fb      	ldr	r3, [r7, #12]
    5d90:	22c1      	movs	r2, #193	; 0xc1
    5d92:	5c9b      	ldrb	r3, [r3, r2]
    5d94:	0019      	movs	r1, r3
    5d96:	4a25      	ldr	r2, [pc, #148]	; (5e2c <_ZN4Uart5beginEmt+0xdc>)
    5d98:	000b      	movs	r3, r1
    5d9a:	005b      	lsls	r3, r3, #1
    5d9c:	185b      	adds	r3, r3, r1
    5d9e:	00db      	lsls	r3, r3, #3
    5da0:	18d3      	adds	r3, r2, r3
    5da2:	3308      	adds	r3, #8
    5da4:	781b      	ldrb	r3, [r3, #0]
    5da6:	b25b      	sxtb	r3, r3
    5da8:	0019      	movs	r1, r3
    5daa:	f7fe fc57 	bl	465c <pinPeripheral>

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    5dae:	68fb      	ldr	r3, [r7, #12]
    5db0:	6918      	ldr	r0, [r3, #16]
    5db2:	68bb      	ldr	r3, [r7, #8]
    5db4:	2201      	movs	r2, #1
    5db6:	2101      	movs	r1, #1
    5db8:	f7ff fcea 	bl	5790 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    5dbc:	68fb      	ldr	r3, [r7, #12]
    5dbe:	691c      	ldr	r4, [r3, #16]
    5dc0:	1dbb      	adds	r3, r7, #6
    5dc2:	881a      	ldrh	r2, [r3, #0]
    5dc4:	68fb      	ldr	r3, [r7, #12]
    5dc6:	0011      	movs	r1, r2
    5dc8:	0018      	movs	r0, r3
    5dca:	f000 f8d1 	bl	5f70 <_ZN4Uart15extractCharSizeEt>
    5dce:	0003      	movs	r3, r0
    5dd0:	001d      	movs	r5, r3
    5dd2:	1dbb      	adds	r3, r7, #6
    5dd4:	881a      	ldrh	r2, [r3, #0]
    5dd6:	68fb      	ldr	r3, [r7, #12]
    5dd8:	0011      	movs	r1, r2
    5dda:	0018      	movs	r0, r3
    5ddc:	f000 f8ec 	bl	5fb8 <_ZN4Uart13extractParityEt>
    5de0:	0003      	movs	r3, r0
    5de2:	001e      	movs	r6, r3
    5de4:	1dbb      	adds	r3, r7, #6
    5de6:	881a      	ldrh	r2, [r3, #0]
    5de8:	68fb      	ldr	r3, [r7, #12]
    5dea:	0011      	movs	r1, r2
    5dec:	0018      	movs	r0, r3
    5dee:	f000 f8ab 	bl	5f48 <_ZN4Uart16extractNbStopBitEt>
    5df2:	0003      	movs	r3, r0
    5df4:	9300      	str	r3, [sp, #0]
    5df6:	0033      	movs	r3, r6
    5df8:	2201      	movs	r2, #1
    5dfa:	0029      	movs	r1, r5
    5dfc:	0020      	movs	r0, r4
    5dfe:	f7ff fd3b 	bl	5878 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    5e02:	68fb      	ldr	r3, [r7, #12]
    5e04:	6918      	ldr	r0, [r3, #16]
    5e06:	68fb      	ldr	r3, [r7, #12]
    5e08:	22c3      	movs	r2, #195	; 0xc3
    5e0a:	5c99      	ldrb	r1, [r3, r2]
    5e0c:	68fb      	ldr	r3, [r7, #12]
    5e0e:	22c2      	movs	r2, #194	; 0xc2
    5e10:	5c9b      	ldrb	r3, [r3, r2]
    5e12:	001a      	movs	r2, r3
    5e14:	f7ff fd74 	bl	5900 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    5e18:	68fb      	ldr	r3, [r7, #12]
    5e1a:	691b      	ldr	r3, [r3, #16]
    5e1c:	0018      	movs	r0, r3
    5e1e:	f7ff fdc3 	bl	59a8 <_ZN6SERCOM10enableUARTEv>
}
    5e22:	46c0      	nop			; (mov r8, r8)
    5e24:	46bd      	mov	sp, r7
    5e26:	b005      	add	sp, #20
    5e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e2a:	46c0      	nop			; (mov r8, r8)
    5e2c:	000076f8 	.word	0x000076f8

00005e30 <_ZN4Uart3endEv>:

void Uart::end()
{
    5e30:	b580      	push	{r7, lr}
    5e32:	b082      	sub	sp, #8
    5e34:	af00      	add	r7, sp, #0
    5e36:	6078      	str	r0, [r7, #4]
  sercom->resetUART();
    5e38:	687b      	ldr	r3, [r7, #4]
    5e3a:	691b      	ldr	r3, [r3, #16]
    5e3c:	0018      	movs	r0, r3
    5e3e:	f7ff fd8f 	bl	5960 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	3314      	adds	r3, #20
    5e46:	0018      	movs	r0, r3
    5e48:	f000 fb38 	bl	64bc <_ZN10RingBuffer5clearEv>
}
    5e4c:	46c0      	nop			; (mov r8, r8)
    5e4e:	46bd      	mov	sp, r7
    5e50:	b002      	add	sp, #8
    5e52:	bd80      	pop	{r7, pc}

00005e54 <_ZN4Uart5flushEv>:

void Uart::flush()
{
    5e54:	b580      	push	{r7, lr}
    5e56:	b082      	sub	sp, #8
    5e58:	af00      	add	r7, sp, #0
    5e5a:	6078      	str	r0, [r7, #4]
  sercom->flushUART();
    5e5c:	687b      	ldr	r3, [r7, #4]
    5e5e:	691b      	ldr	r3, [r3, #16]
    5e60:	0018      	movs	r0, r3
    5e62:	f7ff fdb9 	bl	59d8 <_ZN6SERCOM9flushUARTEv>
}
    5e66:	46c0      	nop			; (mov r8, r8)
    5e68:	46bd      	mov	sp, r7
    5e6a:	b002      	add	sp, #8
    5e6c:	bd80      	pop	{r7, pc}
    5e6e:	46c0      	nop			; (mov r8, r8)

00005e70 <_ZN4Uart10IrqHandlerEv>:

void Uart::IrqHandler()
{
    5e70:	b590      	push	{r4, r7, lr}
    5e72:	b083      	sub	sp, #12
    5e74:	af00      	add	r7, sp, #0
    5e76:	6078      	str	r0, [r7, #4]
  if (sercom->availableDataUART()) {
    5e78:	687b      	ldr	r3, [r7, #4]
    5e7a:	691b      	ldr	r3, [r3, #16]
    5e7c:	0018      	movs	r0, r3
    5e7e:	f7ff fdd1 	bl	5a24 <_ZN6SERCOM17availableDataUARTEv>
    5e82:	1e03      	subs	r3, r0, #0
    5e84:	d00c      	beq.n	5ea0 <_ZN4Uart10IrqHandlerEv+0x30>
    rxBuffer.store_char(sercom->readDataUART());
    5e86:	687b      	ldr	r3, [r7, #4]
    5e88:	3314      	adds	r3, #20
    5e8a:	001c      	movs	r4, r3
    5e8c:	687b      	ldr	r3, [r7, #4]
    5e8e:	691b      	ldr	r3, [r3, #16]
    5e90:	0018      	movs	r0, r3
    5e92:	f7ff fe01 	bl	5a98 <_ZN6SERCOM12readDataUARTEv>
    5e96:	0003      	movs	r3, r0
    5e98:	0019      	movs	r1, r3
    5e9a:	0020      	movs	r0, r4
    5e9c:	f000 fae8 	bl	6470 <_ZN10RingBuffer10store_charEh>
  }

  if (sercom->isUARTError()) {
    5ea0:	687b      	ldr	r3, [r7, #4]
    5ea2:	691b      	ldr	r3, [r3, #16]
    5ea4:	0018      	movs	r0, r3
    5ea6:	f7ff fdcb 	bl	5a40 <_ZN6SERCOM11isUARTErrorEv>
    5eaa:	1e03      	subs	r3, r0, #0
    5eac:	d009      	beq.n	5ec2 <_ZN4Uart10IrqHandlerEv+0x52>
    sercom->acknowledgeUARTError();
    5eae:	687b      	ldr	r3, [r7, #4]
    5eb0:	691b      	ldr	r3, [r3, #16]
    5eb2:	0018      	movs	r0, r3
    5eb4:	f7ff fdd2 	bl	5a5c <_ZN6SERCOM20acknowledgeUARTErrorEv>
    // TODO: if (sercom->isBufferOverflowErrorUART()) ....
    // TODO: if (sercom->isFrameErrorUART()) ....
    // TODO: if (sercom->isParityErrorUART()) ....
    sercom->clearStatusUART();
    5eb8:	687b      	ldr	r3, [r7, #4]
    5eba:	691b      	ldr	r3, [r3, #16]
    5ebc:	0018      	movs	r0, r3
    5ebe:	f7ff fda5 	bl	5a0c <_ZN6SERCOM15clearStatusUARTEv>
  }
}
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	46bd      	mov	sp, r7
    5ec6:	b003      	add	sp, #12
    5ec8:	bd90      	pop	{r4, r7, pc}
    5eca:	46c0      	nop			; (mov r8, r8)

00005ecc <_ZN4Uart9availableEv>:

int Uart::available()
{
    5ecc:	b580      	push	{r7, lr}
    5ece:	b082      	sub	sp, #8
    5ed0:	af00      	add	r7, sp, #0
    5ed2:	6078      	str	r0, [r7, #4]
  return rxBuffer.available();
    5ed4:	687b      	ldr	r3, [r7, #4]
    5ed6:	3314      	adds	r3, #20
    5ed8:	0018      	movs	r0, r3
    5eda:	f000 fb29 	bl	6530 <_ZN10RingBuffer9availableEv>
    5ede:	0003      	movs	r3, r0
}
    5ee0:	0018      	movs	r0, r3
    5ee2:	46bd      	mov	sp, r7
    5ee4:	b002      	add	sp, #8
    5ee6:	bd80      	pop	{r7, pc}

00005ee8 <_ZN4Uart4peekEv>:
{
  return (sercom->isDataRegisterEmptyUART() ? 1 : 0);
}

int Uart::peek()
{
    5ee8:	b580      	push	{r7, lr}
    5eea:	b082      	sub	sp, #8
    5eec:	af00      	add	r7, sp, #0
    5eee:	6078      	str	r0, [r7, #4]
  return rxBuffer.peek();
    5ef0:	687b      	ldr	r3, [r7, #4]
    5ef2:	3314      	adds	r3, #20
    5ef4:	0018      	movs	r0, r3
    5ef6:	f000 fb33 	bl	6560 <_ZN10RingBuffer4peekEv>
    5efa:	0003      	movs	r3, r0
}
    5efc:	0018      	movs	r0, r3
    5efe:	46bd      	mov	sp, r7
    5f00:	b002      	add	sp, #8
    5f02:	bd80      	pop	{r7, pc}

00005f04 <_ZN4Uart4readEv>:

int Uart::read()
{
    5f04:	b580      	push	{r7, lr}
    5f06:	b082      	sub	sp, #8
    5f08:	af00      	add	r7, sp, #0
    5f0a:	6078      	str	r0, [r7, #4]
  return rxBuffer.read_char();
    5f0c:	687b      	ldr	r3, [r7, #4]
    5f0e:	3314      	adds	r3, #20
    5f10:	0018      	movs	r0, r3
    5f12:	f000 fae3 	bl	64dc <_ZN10RingBuffer9read_charEv>
    5f16:	0003      	movs	r3, r0
}
    5f18:	0018      	movs	r0, r3
    5f1a:	46bd      	mov	sp, r7
    5f1c:	b002      	add	sp, #8
    5f1e:	bd80      	pop	{r7, pc}

00005f20 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    5f20:	b580      	push	{r7, lr}
    5f22:	b082      	sub	sp, #8
    5f24:	af00      	add	r7, sp, #0
    5f26:	6078      	str	r0, [r7, #4]
    5f28:	000a      	movs	r2, r1
    5f2a:	1cfb      	adds	r3, r7, #3
    5f2c:	701a      	strb	r2, [r3, #0]
  sercom->writeDataUART(data);
    5f2e:	687b      	ldr	r3, [r7, #4]
    5f30:	691a      	ldr	r2, [r3, #16]
    5f32:	1cfb      	adds	r3, r7, #3
    5f34:	781b      	ldrb	r3, [r3, #0]
    5f36:	0019      	movs	r1, r3
    5f38:	0010      	movs	r0, r2
    5f3a:	f7ff fdbd 	bl	5ab8 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    5f3e:	2301      	movs	r3, #1
}
    5f40:	0018      	movs	r0, r3
    5f42:	46bd      	mov	sp, r7
    5f44:	b002      	add	sp, #8
    5f46:	bd80      	pop	{r7, pc}

00005f48 <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
    5f48:	b580      	push	{r7, lr}
    5f4a:	b082      	sub	sp, #8
    5f4c:	af00      	add	r7, sp, #0
    5f4e:	6078      	str	r0, [r7, #4]
    5f50:	000a      	movs	r2, r1
    5f52:	1cbb      	adds	r3, r7, #2
    5f54:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_STOP_BIT_MASK)
    5f56:	1cbb      	adds	r3, r7, #2
    5f58:	881b      	ldrh	r3, [r3, #0]
    5f5a:	22f0      	movs	r2, #240	; 0xf0
    5f5c:	4013      	ands	r3, r2
    5f5e:	2b30      	cmp	r3, #48	; 0x30
    5f60:	d001      	beq.n	5f66 <_ZN4Uart16extractNbStopBitEt+0x1e>
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    5f62:	2300      	movs	r3, #0
    5f64:	e000      	b.n	5f68 <_ZN4Uart16extractNbStopBitEt+0x20>

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
    5f66:	2301      	movs	r3, #1
  }
}
    5f68:	0018      	movs	r0, r3
    5f6a:	46bd      	mov	sp, r7
    5f6c:	b002      	add	sp, #8
    5f6e:	bd80      	pop	{r7, pc}

00005f70 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
    5f70:	b580      	push	{r7, lr}
    5f72:	b082      	sub	sp, #8
    5f74:	af00      	add	r7, sp, #0
    5f76:	6078      	str	r0, [r7, #4]
    5f78:	000a      	movs	r2, r1
    5f7a:	1cbb      	adds	r3, r7, #2
    5f7c:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_DATA_MASK)
    5f7e:	1cbb      	adds	r3, r7, #2
    5f80:	881a      	ldrh	r2, [r3, #0]
    5f82:	23f0      	movs	r3, #240	; 0xf0
    5f84:	011b      	lsls	r3, r3, #4
    5f86:	4013      	ands	r3, r2
    5f88:	2280      	movs	r2, #128	; 0x80
    5f8a:	0092      	lsls	r2, r2, #2
    5f8c:	4293      	cmp	r3, r2
    5f8e:	d009      	beq.n	5fa4 <_ZN4Uart15extractCharSizeEt+0x34>
    5f90:	22c0      	movs	r2, #192	; 0xc0
    5f92:	0092      	lsls	r2, r2, #2
    5f94:	4293      	cmp	r3, r2
    5f96:	d007      	beq.n	5fa8 <_ZN4Uart15extractCharSizeEt+0x38>
    5f98:	2280      	movs	r2, #128	; 0x80
    5f9a:	0052      	lsls	r2, r2, #1
    5f9c:	4293      	cmp	r3, r2
    5f9e:	d105      	bne.n	5fac <_ZN4Uart15extractCharSizeEt+0x3c>
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;
    5fa0:	2305      	movs	r3, #5
    5fa2:	e004      	b.n	5fae <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    5fa4:	2306      	movs	r3, #6
    5fa6:	e002      	b.n	5fae <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    5fa8:	2307      	movs	r3, #7
    5faa:	e000      	b.n	5fae <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    5fac:	2300      	movs	r3, #0

  }
}
    5fae:	0018      	movs	r0, r3
    5fb0:	46bd      	mov	sp, r7
    5fb2:	b002      	add	sp, #8
    5fb4:	bd80      	pop	{r7, pc}
    5fb6:	46c0      	nop			; (mov r8, r8)

00005fb8 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
    5fb8:	b580      	push	{r7, lr}
    5fba:	b082      	sub	sp, #8
    5fbc:	af00      	add	r7, sp, #0
    5fbe:	6078      	str	r0, [r7, #4]
    5fc0:	000a      	movs	r2, r1
    5fc2:	1cbb      	adds	r3, r7, #2
    5fc4:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_PARITY_MASK)
    5fc6:	1cbb      	adds	r3, r7, #2
    5fc8:	881b      	ldrh	r3, [r3, #0]
    5fca:	220f      	movs	r2, #15
    5fcc:	4013      	ands	r3, r2
    5fce:	2b01      	cmp	r3, #1
    5fd0:	d003      	beq.n	5fda <_ZN4Uart13extractParityEt+0x22>
    5fd2:	2b02      	cmp	r3, #2
    5fd4:	d003      	beq.n	5fde <_ZN4Uart13extractParityEt+0x26>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    5fd6:	2302      	movs	r3, #2
    5fd8:	e002      	b.n	5fe0 <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    5fda:	2300      	movs	r3, #0
    5fdc:	e000      	b.n	5fe0 <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
    5fde:	2301      	movs	r3, #1
  }
}
    5fe0:	0018      	movs	r0, r3
    5fe2:	46bd      	mov	sp, r7
    5fe4:	b002      	add	sp, #8
    5fe6:	bd80      	pop	{r7, pc}

00005fe8 <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    5fe8:	b580      	push	{r7, lr}
    5fea:	b082      	sub	sp, #8
    5fec:	af00      	add	r7, sp, #0
    5fee:	6078      	str	r0, [r7, #4]
    5ff0:	6039      	str	r1, [r7, #0]
    5ff2:	687b      	ldr	r3, [r7, #4]
    5ff4:	683a      	ldr	r2, [r7, #0]
    5ff6:	605a      	str	r2, [r3, #4]
    5ff8:	46c0      	nop			; (mov r8, r8)
    5ffa:	46bd      	mov	sp, r7
    5ffc:	b002      	add	sp, #8
    5ffe:	bd80      	pop	{r7, pc}

00006000 <_ZN7Serial_C1ER14USBDeviceClass>:
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    6000:	b580      	push	{r7, lr}
    6002:	b082      	sub	sp, #8
    6004:	af00      	add	r7, sp, #0
    6006:	6078      	str	r0, [r7, #4]
    6008:	6039      	str	r1, [r7, #0]
    600a:	687b      	ldr	r3, [r7, #4]
    600c:	0018      	movs	r0, r3
    600e:	f7ff fe21 	bl	5c54 <_ZN6StreamC1Ev>
    6012:	4a07      	ldr	r2, [pc, #28]	; (6030 <_ZN7Serial_C1ER14USBDeviceClass+0x30>)
    6014:	687b      	ldr	r3, [r7, #4]
    6016:	601a      	str	r2, [r3, #0]
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	683a      	ldr	r2, [r7, #0]
    601c:	611a      	str	r2, [r3, #16]
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	2200      	movs	r2, #0
    6022:	761a      	strb	r2, [r3, #24]
    6024:	687b      	ldr	r3, [r7, #4]
    6026:	0018      	movs	r0, r3
    6028:	46bd      	mov	sp, r7
    602a:	b002      	add	sp, #8
    602c:	bd80      	pop	{r7, pc}
    602e:	46c0      	nop			; (mov r8, r8)
    6030:	00007bf0 	.word	0x00007bf0

00006034 <_Z16CDC_GetInterfacePh>:
{
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
    6034:	b580      	push	{r7, lr}
    6036:	b082      	sub	sp, #8
    6038:	af00      	add	r7, sp, #0
    603a:	6078      	str	r0, [r7, #4]
	interfaceNum[0] += 2;	// uses 2
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	781b      	ldrb	r3, [r3, #0]
    6040:	3302      	adds	r3, #2
    6042:	b2da      	uxtb	r2, r3
    6044:	687b      	ldr	r3, [r7, #4]
    6046:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    6048:	4905      	ldr	r1, [pc, #20]	; (6060 <_Z16CDC_GetInterfacePh+0x2c>)
    604a:	4b06      	ldr	r3, [pc, #24]	; (6064 <_Z16CDC_GetInterfacePh+0x30>)
    604c:	2242      	movs	r2, #66	; 0x42
    604e:	0018      	movs	r0, r3
    6050:	f7fd fd34 	bl	3abc <_ZN14USBDeviceClass11sendControlEPKvm>
    6054:	0003      	movs	r3, r0
}
    6056:	0018      	movs	r0, r3
    6058:	46bd      	mov	sp, r7
    605a:	b002      	add	sp, #8
    605c:	bd80      	pop	{r7, pc}
    605e:	46c0      	nop			; (mov r8, r8)
    6060:	20000044 	.word	0x20000044
    6064:	200007e0 	.word	0x200007e0

00006068 <_Z9CDC_SetupR8USBSetup>:

bool CDC_Setup(USBSetup& setup)
{
    6068:	b580      	push	{r7, lr}
    606a:	b084      	sub	sp, #16
    606c:	af00      	add	r7, sp, #0
    606e:	6078      	str	r0, [r7, #4]
	uint8_t requestType = setup.bmRequestType;
    6070:	230f      	movs	r3, #15
    6072:	18fb      	adds	r3, r7, r3
    6074:	687a      	ldr	r2, [r7, #4]
    6076:	7812      	ldrb	r2, [r2, #0]
    6078:	701a      	strb	r2, [r3, #0]
	uint8_t r = setup.bRequest;
    607a:	230e      	movs	r3, #14
    607c:	18fb      	adds	r3, r7, r3
    607e:	687a      	ldr	r2, [r7, #4]
    6080:	7852      	ldrb	r2, [r2, #1]
    6082:	701a      	strb	r2, [r3, #0]

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    6084:	230f      	movs	r3, #15
    6086:	18fb      	adds	r3, r7, r3
    6088:	781b      	ldrb	r3, [r3, #0]
    608a:	2ba1      	cmp	r3, #161	; 0xa1
    608c:	d10c      	bne.n	60a8 <_Z9CDC_SetupR8USBSetup+0x40>
	{
		if (r == CDC_GET_LINE_CODING)
    608e:	230e      	movs	r3, #14
    6090:	18fb      	adds	r3, r7, r3
    6092:	781b      	ldrb	r3, [r3, #0]
    6094:	2b21      	cmp	r3, #33	; 0x21
    6096:	d107      	bne.n	60a8 <_Z9CDC_SetupR8USBSetup+0x40>
		{
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    6098:	492c      	ldr	r1, [pc, #176]	; (614c <_Z9CDC_SetupR8USBSetup+0xe4>)
    609a:	4b2d      	ldr	r3, [pc, #180]	; (6150 <_Z9CDC_SetupR8USBSetup+0xe8>)
    609c:	2207      	movs	r2, #7
    609e:	0018      	movs	r0, r3
    60a0:	f7fd fd0c 	bl	3abc <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    60a4:	2301      	movs	r3, #1
    60a6:	e04c      	b.n	6142 <_Z9CDC_SetupR8USBSetup+0xda>
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    60a8:	230f      	movs	r3, #15
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	781b      	ldrb	r3, [r3, #0]
    60ae:	2b21      	cmp	r3, #33	; 0x21
    60b0:	d146      	bne.n	6140 <_Z9CDC_SetupR8USBSetup+0xd8>
	{
		if (r == CDC_SET_LINE_CODING)
    60b2:	230e      	movs	r3, #14
    60b4:	18fb      	adds	r3, r7, r3
    60b6:	781b      	ldrb	r3, [r3, #0]
    60b8:	2b20      	cmp	r3, #32
    60ba:	d105      	bne.n	60c8 <_Z9CDC_SetupR8USBSetup+0x60>
		{
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    60bc:	4923      	ldr	r1, [pc, #140]	; (614c <_Z9CDC_SetupR8USBSetup+0xe4>)
    60be:	4b24      	ldr	r3, [pc, #144]	; (6150 <_Z9CDC_SetupR8USBSetup+0xe8>)
    60c0:	2207      	movs	r2, #7
    60c2:	0018      	movs	r0, r3
    60c4:	f7fd fa58 	bl	3578 <_ZN14USBDeviceClass11recvControlEPvm>
		}

		if (r == CDC_SET_CONTROL_LINE_STATE)
    60c8:	230e      	movs	r3, #14
    60ca:	18fb      	adds	r3, r7, r3
    60cc:	781b      	ldrb	r3, [r3, #0]
    60ce:	2b22      	cmp	r3, #34	; 0x22
    60d0:	d103      	bne.n	60da <_Z9CDC_SetupR8USBSetup+0x72>
		{
			_usbLineInfo.lineState = setup.wValueL;
    60d2:	687b      	ldr	r3, [r7, #4]
    60d4:	789a      	ldrb	r2, [r3, #2]
    60d6:	4b1d      	ldr	r3, [pc, #116]	; (614c <_Z9CDC_SetupR8USBSetup+0xe4>)
    60d8:	71da      	strb	r2, [r3, #7]
		}

		if (r == CDC_SET_LINE_CODING || r == CDC_SET_CONTROL_LINE_STATE)
    60da:	230e      	movs	r3, #14
    60dc:	18fb      	adds	r3, r7, r3
    60de:	781b      	ldrb	r3, [r3, #0]
    60e0:	2b20      	cmp	r3, #32
    60e2:	d004      	beq.n	60ee <_Z9CDC_SetupR8USBSetup+0x86>
    60e4:	230e      	movs	r3, #14
    60e6:	18fb      	adds	r3, r7, r3
    60e8:	781b      	ldrb	r3, [r3, #0]
    60ea:	2b22      	cmp	r3, #34	; 0x22
    60ec:	d119      	bne.n	6122 <_Z9CDC_SetupR8USBSetup+0xba>
		{
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed. We check DTR state to determine if host 
			// port is open (bit 0 of lineState).
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    60ee:	4b17      	ldr	r3, [pc, #92]	; (614c <_Z9CDC_SetupR8USBSetup+0xe4>)
    60f0:	681a      	ldr	r2, [r3, #0]
    60f2:	2396      	movs	r3, #150	; 0x96
    60f4:	00db      	lsls	r3, r3, #3
    60f6:	429a      	cmp	r2, r3
    60f8:	d108      	bne.n	610c <_Z9CDC_SetupR8USBSetup+0xa4>
    60fa:	4b14      	ldr	r3, [pc, #80]	; (614c <_Z9CDC_SetupR8USBSetup+0xe4>)
    60fc:	79db      	ldrb	r3, [r3, #7]
    60fe:	b2db      	uxtb	r3, r3
    6100:	001a      	movs	r2, r3
    6102:	2301      	movs	r3, #1
    6104:	4013      	ands	r3, r2
    6106:	d101      	bne.n	610c <_Z9CDC_SetupR8USBSetup+0xa4>
    6108:	2301      	movs	r3, #1
    610a:	e000      	b.n	610e <_Z9CDC_SetupR8USBSetup+0xa6>
    610c:	2300      	movs	r3, #0
    610e:	2b00      	cmp	r3, #0
    6110:	d003      	beq.n	611a <_Z9CDC_SetupR8USBSetup+0xb2>
			{
				initiateReset(250);
    6112:	20fa      	movs	r0, #250	; 0xfa
    6114:	f7fb fbc0 	bl	1898 <initiateReset>
    6118:	e001      	b.n	611e <_Z9CDC_SetupR8USBSetup+0xb6>
			}
			else
			{
				cancelReset();
    611a:	f7fb fbcb 	bl	18b4 <cancelReset>
			}
			return false;
    611e:	2300      	movs	r3, #0
    6120:	e00f      	b.n	6142 <_Z9CDC_SetupR8USBSetup+0xda>
		}

		if (CDC_SEND_BREAK == r)
    6122:	230e      	movs	r3, #14
    6124:	18fb      	adds	r3, r7, r3
    6126:	781b      	ldrb	r3, [r3, #0]
    6128:	2b23      	cmp	r3, #35	; 0x23
    612a:	d109      	bne.n	6140 <_Z9CDC_SetupR8USBSetup+0xd8>
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    612c:	687b      	ldr	r3, [r7, #4]
    612e:	78db      	ldrb	r3, [r3, #3]
    6130:	021b      	lsls	r3, r3, #8
    6132:	687a      	ldr	r2, [r7, #4]
    6134:	7892      	ldrb	r2, [r2, #2]
    6136:	431a      	orrs	r2, r3
    6138:	4b06      	ldr	r3, [pc, #24]	; (6154 <_Z9CDC_SetupR8USBSetup+0xec>)
    613a:	601a      	str	r2, [r3, #0]
			return false;
    613c:	2300      	movs	r3, #0
    613e:	e000      	b.n	6142 <_Z9CDC_SetupR8USBSetup+0xda>
		}
	}
	return false;
    6140:	2300      	movs	r3, #0
}
    6142:	0018      	movs	r0, r3
    6144:	46bd      	mov	sp, r7
    6146:	b004      	add	sp, #16
    6148:	bd80      	pop	{r7, pc}
    614a:	46c0      	nop			; (mov r8, r8)
    614c:	20000038 	.word	0x20000038
    6150:	200007e0 	.word	0x200007e0
    6154:	20000040 	.word	0x20000040

00006158 <_ZN7Serial_9availableEv>:
void Serial_::end(void)
{
}

int Serial_::available(void)
{
    6158:	b580      	push	{r7, lr}
    615a:	b082      	sub	sp, #8
    615c:	af00      	add	r7, sp, #0
    615e:	6078      	str	r0, [r7, #4]
	return usb.available(CDC_ENDPOINT_OUT);
    6160:	687b      	ldr	r3, [r7, #4]
    6162:	691b      	ldr	r3, [r3, #16]
    6164:	2102      	movs	r1, #2
    6166:	0018      	movs	r0, r3
    6168:	f7fd fa3e 	bl	35e8 <_ZN14USBDeviceClass9availableEm>
    616c:	0003      	movs	r3, r0
}
    616e:	0018      	movs	r0, r3
    6170:	46bd      	mov	sp, r7
    6172:	b002      	add	sp, #8
    6174:	bd80      	pop	{r7, pc}
    6176:	46c0      	nop			; (mov r8, r8)

00006178 <_ZN7Serial_17availableForWriteEv>:

int Serial_::availableForWrite(void)
{
    6178:	b580      	push	{r7, lr}
    617a:	b082      	sub	sp, #8
    617c:	af00      	add	r7, sp, #0
    617e:	6078      	str	r0, [r7, #4]
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
    6180:	233f      	movs	r3, #63	; 0x3f
}
    6182:	0018      	movs	r0, r3
    6184:	46bd      	mov	sp, r7
    6186:	b002      	add	sp, #8
    6188:	bd80      	pop	{r7, pc}
    618a:	46c0      	nop			; (mov r8, r8)

0000618c <_ZN7Serial_4peekEv>:

int _serialPeek = -1;

int Serial_::peek(void)
{
    618c:	b580      	push	{r7, lr}
    618e:	b082      	sub	sp, #8
    6190:	af00      	add	r7, sp, #0
    6192:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1)
    6194:	4b0b      	ldr	r3, [pc, #44]	; (61c4 <_ZN7Serial_4peekEv+0x38>)
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	3301      	adds	r3, #1
    619a:	d002      	beq.n	61a2 <_ZN7Serial_4peekEv+0x16>
		return _serialPeek;
    619c:	4b09      	ldr	r3, [pc, #36]	; (61c4 <_ZN7Serial_4peekEv+0x38>)
    619e:	681b      	ldr	r3, [r3, #0]
    61a0:	e00b      	b.n	61ba <_ZN7Serial_4peekEv+0x2e>
	_serialPeek = read();
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	681b      	ldr	r3, [r3, #0]
    61a6:	330c      	adds	r3, #12
    61a8:	681b      	ldr	r3, [r3, #0]
    61aa:	687a      	ldr	r2, [r7, #4]
    61ac:	0010      	movs	r0, r2
    61ae:	4798      	blx	r3
    61b0:	0002      	movs	r2, r0
    61b2:	4b04      	ldr	r3, [pc, #16]	; (61c4 <_ZN7Serial_4peekEv+0x38>)
    61b4:	601a      	str	r2, [r3, #0]
	return _serialPeek;
    61b6:	4b03      	ldr	r3, [pc, #12]	; (61c4 <_ZN7Serial_4peekEv+0x38>)
    61b8:	681b      	ldr	r3, [r3, #0]
}
    61ba:	0018      	movs	r0, r3
    61bc:	46bd      	mov	sp, r7
    61be:	b002      	add	sp, #8
    61c0:	bd80      	pop	{r7, pc}
    61c2:	46c0      	nop			; (mov r8, r8)
    61c4:	20000088 	.word	0x20000088

000061c8 <_ZN7Serial_4readEv>:

int Serial_::read(void)
{
    61c8:	b580      	push	{r7, lr}
    61ca:	b084      	sub	sp, #16
    61cc:	af00      	add	r7, sp, #0
    61ce:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1) {
    61d0:	4b0b      	ldr	r3, [pc, #44]	; (6200 <_ZN7Serial_4readEv+0x38>)
    61d2:	681b      	ldr	r3, [r3, #0]
    61d4:	3301      	adds	r3, #1
    61d6:	d008      	beq.n	61ea <_ZN7Serial_4readEv+0x22>
		int res = _serialPeek;
    61d8:	4b09      	ldr	r3, [pc, #36]	; (6200 <_ZN7Serial_4readEv+0x38>)
    61da:	681b      	ldr	r3, [r3, #0]
    61dc:	60fb      	str	r3, [r7, #12]
		_serialPeek = -1;
    61de:	4b08      	ldr	r3, [pc, #32]	; (6200 <_ZN7Serial_4readEv+0x38>)
    61e0:	2201      	movs	r2, #1
    61e2:	4252      	negs	r2, r2
    61e4:	601a      	str	r2, [r3, #0]
		return res;
    61e6:	68fb      	ldr	r3, [r7, #12]
    61e8:	e006      	b.n	61f8 <_ZN7Serial_4readEv+0x30>
	}
	return usb.recv(CDC_ENDPOINT_OUT);
    61ea:	687b      	ldr	r3, [r7, #4]
    61ec:	691b      	ldr	r3, [r3, #16]
    61ee:	2102      	movs	r1, #2
    61f0:	0018      	movs	r0, r3
    61f2:	f7fd fab9 	bl	3768 <_ZN14USBDeviceClass4recvEm>
    61f6:	0003      	movs	r3, r0
}
    61f8:	0018      	movs	r0, r3
    61fa:	46bd      	mov	sp, r7
    61fc:	b004      	add	sp, #16
    61fe:	bd80      	pop	{r7, pc}
    6200:	20000088 	.word	0x20000088

00006204 <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
    6204:	b580      	push	{r7, lr}
    6206:	b082      	sub	sp, #8
    6208:	af00      	add	r7, sp, #0
    620a:	6078      	str	r0, [r7, #4]
	usb.flush(CDC_ENDPOINT_IN);
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	691b      	ldr	r3, [r3, #16]
    6210:	2103      	movs	r1, #3
    6212:	0018      	movs	r0, r3
    6214:	f7fd f976 	bl	3504 <_ZN14USBDeviceClass5flushEm>
}
    6218:	46c0      	nop			; (mov r8, r8)
    621a:	46bd      	mov	sp, r7
    621c:	b002      	add	sp, #8
    621e:	bd80      	pop	{r7, pc}

00006220 <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
    6220:	b580      	push	{r7, lr}
    6222:	b086      	sub	sp, #24
    6224:	af00      	add	r7, sp, #0
    6226:	60f8      	str	r0, [r7, #12]
    6228:	60b9      	str	r1, [r7, #8]
    622a:	607a      	str	r2, [r7, #4]
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    622c:	68fb      	ldr	r3, [r7, #12]
    622e:	6918      	ldr	r0, [r3, #16]
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	68ba      	ldr	r2, [r7, #8]
    6234:	2103      	movs	r1, #3
    6236:	f7fd fb41 	bl	38bc <_ZN14USBDeviceClass4sendEmPKvm>
    623a:	0003      	movs	r3, r0
    623c:	617b      	str	r3, [r7, #20]

	if (r > 0) {
    623e:	697b      	ldr	r3, [r7, #20]
    6240:	2b00      	cmp	r3, #0
    6242:	d001      	beq.n	6248 <_ZN7Serial_5writeEPKhj+0x28>
		return r;
    6244:	697b      	ldr	r3, [r7, #20]
    6246:	e005      	b.n	6254 <_ZN7Serial_5writeEPKhj+0x34>
	} else {
		setWriteError();
    6248:	68fb      	ldr	r3, [r7, #12]
    624a:	2101      	movs	r1, #1
    624c:	0018      	movs	r0, r3
    624e:	f7ff fecb 	bl	5fe8 <_ZN5Print13setWriteErrorEi>
		return 0;
    6252:	2300      	movs	r3, #0
	}
}
    6254:	0018      	movs	r0, r3
    6256:	46bd      	mov	sp, r7
    6258:	b006      	add	sp, #24
    625a:	bd80      	pop	{r7, pc}

0000625c <_ZN7Serial_5writeEh>:

size_t Serial_::write(uint8_t c) {
    625c:	b580      	push	{r7, lr}
    625e:	b082      	sub	sp, #8
    6260:	af00      	add	r7, sp, #0
    6262:	6078      	str	r0, [r7, #4]
    6264:	000a      	movs	r2, r1
    6266:	1cfb      	adds	r3, r7, #3
    6268:	701a      	strb	r2, [r3, #0]
	return write(&c, 1);
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	681b      	ldr	r3, [r3, #0]
    626e:	3304      	adds	r3, #4
    6270:	681b      	ldr	r3, [r3, #0]
    6272:	1cf9      	adds	r1, r7, #3
    6274:	6878      	ldr	r0, [r7, #4]
    6276:	2201      	movs	r2, #1
    6278:	4798      	blx	r3
    627a:	0003      	movs	r3, r0
}
    627c:	0018      	movs	r0, r3
    627e:	46bd      	mov	sp, r7
    6280:	b002      	add	sp, #8
    6282:	bd80      	pop	{r7, pc}

00006284 <_Z41__static_initialization_and_destruction_0ii>:

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ Serial(USBDevice);
    6284:	b580      	push	{r7, lr}
    6286:	b082      	sub	sp, #8
    6288:	af00      	add	r7, sp, #0
    628a:	6078      	str	r0, [r7, #4]
    628c:	6039      	str	r1, [r7, #0]
    628e:	687b      	ldr	r3, [r7, #4]
    6290:	2b01      	cmp	r3, #1
    6292:	d109      	bne.n	62a8 <_Z41__static_initialization_and_destruction_0ii+0x24>
    6294:	683b      	ldr	r3, [r7, #0]
    6296:	4a06      	ldr	r2, [pc, #24]	; (62b0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    6298:	4293      	cmp	r3, r2
    629a:	d105      	bne.n	62a8 <_Z41__static_initialization_and_destruction_0ii+0x24>
    629c:	4a05      	ldr	r2, [pc, #20]	; (62b4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    629e:	4b06      	ldr	r3, [pc, #24]	; (62b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    62a0:	0011      	movs	r1, r2
    62a2:	0018      	movs	r0, r3
    62a4:	f7ff feac 	bl	6000 <_ZN7Serial_C1ER14USBDeviceClass>
    62a8:	46c0      	nop			; (mov r8, r8)
    62aa:	46bd      	mov	sp, r7
    62ac:	b002      	add	sp, #8
    62ae:	bd80      	pop	{r7, pc}
    62b0:	0000ffff 	.word	0x0000ffff
    62b4:	200007e0 	.word	0x200007e0
    62b8:	200009ac 	.word	0x200009ac

000062bc <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    62bc:	b580      	push	{r7, lr}
    62be:	af00      	add	r7, sp, #0
    62c0:	4b03      	ldr	r3, [pc, #12]	; (62d0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x14>)
    62c2:	0019      	movs	r1, r3
    62c4:	2001      	movs	r0, #1
    62c6:	f7ff ffdd 	bl	6284 <_Z41__static_initialization_and_destruction_0ii>
    62ca:	46bd      	mov	sp, r7
    62cc:	bd80      	pop	{r7, pc}
    62ce:	46c0      	nop			; (mov r8, r8)
    62d0:	0000ffff 	.word	0x0000ffff

000062d4 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    62d4:	b580      	push	{r7, lr}
    62d6:	b086      	sub	sp, #24
    62d8:	af00      	add	r7, sp, #0
    62da:	6078      	str	r0, [r7, #4]
    62dc:	6039      	str	r1, [r7, #0]
	int sent = 0;
    62de:	2300      	movs	r3, #0
    62e0:	617b      	str	r3, [r7, #20]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	685b      	ldr	r3, [r3, #4]
    62e6:	613b      	str	r3, [r7, #16]
    62e8:	693b      	ldr	r3, [r7, #16]
    62ea:	2b00      	cmp	r3, #0
    62ec:	d017      	beq.n	631e <_ZN13PluggableUSB_12getInterfaceEPh+0x4a>
		int res = node->getInterface(interfaceCount);
    62ee:	693b      	ldr	r3, [r7, #16]
    62f0:	681b      	ldr	r3, [r3, #0]
    62f2:	3304      	adds	r3, #4
    62f4:	681b      	ldr	r3, [r3, #0]
    62f6:	6839      	ldr	r1, [r7, #0]
    62f8:	693a      	ldr	r2, [r7, #16]
    62fa:	0010      	movs	r0, r2
    62fc:	4798      	blx	r3
    62fe:	0003      	movs	r3, r0
    6300:	60fb      	str	r3, [r7, #12]
		if (res < 0)
    6302:	68fb      	ldr	r3, [r7, #12]
    6304:	2b00      	cmp	r3, #0
    6306:	da02      	bge.n	630e <_ZN13PluggableUSB_12getInterfaceEPh+0x3a>
			return -1;
    6308:	2301      	movs	r3, #1
    630a:	425b      	negs	r3, r3
    630c:	e008      	b.n	6320 <_ZN13PluggableUSB_12getInterfaceEPh+0x4c>
		sent += res;
    630e:	697a      	ldr	r2, [r7, #20]
    6310:	68fb      	ldr	r3, [r7, #12]
    6312:	18d3      	adds	r3, r2, r3
    6314:	617b      	str	r3, [r7, #20]

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    6316:	693b      	ldr	r3, [r7, #16]
    6318:	68db      	ldr	r3, [r3, #12]
    631a:	613b      	str	r3, [r7, #16]
    631c:	e7e4      	b.n	62e8 <_ZN13PluggableUSB_12getInterfaceEPh+0x14>
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
		sent += res;
	}
	return sent;
    631e:	697b      	ldr	r3, [r7, #20]
}
    6320:	0018      	movs	r0, r3
    6322:	46bd      	mov	sp, r7
    6324:	b006      	add	sp, #24
    6326:	bd80      	pop	{r7, pc}

00006328 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    6328:	b580      	push	{r7, lr}
    632a:	b084      	sub	sp, #16
    632c:	af00      	add	r7, sp, #0
    632e:	6078      	str	r0, [r7, #4]
    6330:	6039      	str	r1, [r7, #0]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    6332:	687b      	ldr	r3, [r7, #4]
    6334:	685b      	ldr	r3, [r3, #4]
    6336:	60fb      	str	r3, [r7, #12]
    6338:	68fb      	ldr	r3, [r7, #12]
    633a:	2b00      	cmp	r3, #0
    633c:	d012      	beq.n	6364 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x3c>
		int ret = node->getDescriptor(setup);
    633e:	68fb      	ldr	r3, [r7, #12]
    6340:	681b      	ldr	r3, [r3, #0]
    6342:	3308      	adds	r3, #8
    6344:	681b      	ldr	r3, [r3, #0]
    6346:	6839      	ldr	r1, [r7, #0]
    6348:	68fa      	ldr	r2, [r7, #12]
    634a:	0010      	movs	r0, r2
    634c:	4798      	blx	r3
    634e:	0003      	movs	r3, r0
    6350:	60bb      	str	r3, [r7, #8]
		// ret!=0 -> request has been processed
		if (ret)
    6352:	68bb      	ldr	r3, [r7, #8]
    6354:	2b00      	cmp	r3, #0
    6356:	d001      	beq.n	635c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
			return ret;
    6358:	68bb      	ldr	r3, [r7, #8]
    635a:	e004      	b.n	6366 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x3e>
}

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    635c:	68fb      	ldr	r3, [r7, #12]
    635e:	68db      	ldr	r3, [r3, #12]
    6360:	60fb      	str	r3, [r7, #12]
    6362:	e7e9      	b.n	6338 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
		int ret = node->getDescriptor(setup);
		// ret!=0 -> request has been processed
		if (ret)
			return ret;
	}
	return 0;
    6364:	2300      	movs	r3, #0
}
    6366:	0018      	movs	r0, r3
    6368:	46bd      	mov	sp, r7
    636a:	b004      	add	sp, #16
    636c:	bd80      	pop	{r7, pc}
    636e:	46c0      	nop			; (mov r8, r8)

00006370 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    6370:	b580      	push	{r7, lr}
    6372:	b084      	sub	sp, #16
    6374:	af00      	add	r7, sp, #0
    6376:	6078      	str	r0, [r7, #4]
    6378:	6039      	str	r1, [r7, #0]
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    637a:	687b      	ldr	r3, [r7, #4]
    637c:	685b      	ldr	r3, [r3, #4]
    637e:	60fb      	str	r3, [r7, #12]
    6380:	68fb      	ldr	r3, [r7, #12]
    6382:	2b00      	cmp	r3, #0
    6384:	d010      	beq.n	63a8 <_ZN13PluggableUSB_12getShortNameEPc+0x38>
               iSerialNum += node->getShortName(iSerialNum);
    6386:	68fb      	ldr	r3, [r7, #12]
    6388:	681b      	ldr	r3, [r3, #0]
    638a:	330c      	adds	r3, #12
    638c:	681b      	ldr	r3, [r3, #0]
    638e:	6839      	ldr	r1, [r7, #0]
    6390:	68fa      	ldr	r2, [r7, #12]
    6392:	0010      	movs	r0, r2
    6394:	4798      	blx	r3
    6396:	0003      	movs	r3, r0
    6398:	001a      	movs	r2, r3
    639a:	683b      	ldr	r3, [r7, #0]
    639c:	189b      	adds	r3, r3, r2
    639e:	603b      	str	r3, [r7, #0]
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    63a0:	68fb      	ldr	r3, [r7, #12]
    63a2:	68db      	ldr	r3, [r3, #12]
    63a4:	60fb      	str	r3, [r7, #12]
    63a6:	e7eb      	b.n	6380 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
               iSerialNum += node->getShortName(iSerialNum);
       }
       *iSerialNum = 0;
    63a8:	683b      	ldr	r3, [r7, #0]
    63aa:	2200      	movs	r2, #0
    63ac:	701a      	strb	r2, [r3, #0]
}
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	46bd      	mov	sp, r7
    63b2:	b004      	add	sp, #16
    63b4:	bd80      	pop	{r7, pc}
    63b6:	46c0      	nop			; (mov r8, r8)

000063b8 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    63b8:	b580      	push	{r7, lr}
    63ba:	b084      	sub	sp, #16
    63bc:	af00      	add	r7, sp, #0
    63be:	6078      	str	r0, [r7, #4]
    63c0:	6039      	str	r1, [r7, #0]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	685b      	ldr	r3, [r3, #4]
    63c6:	60fb      	str	r3, [r7, #12]
    63c8:	68fb      	ldr	r3, [r7, #12]
    63ca:	2b00      	cmp	r3, #0
    63cc:	d00e      	beq.n	63ec <_ZN13PluggableUSB_5setupER8USBSetup+0x34>
		if (node->setup(setup)) {
    63ce:	68fb      	ldr	r3, [r7, #12]
    63d0:	681b      	ldr	r3, [r3, #0]
    63d2:	681b      	ldr	r3, [r3, #0]
    63d4:	6839      	ldr	r1, [r7, #0]
    63d6:	68fa      	ldr	r2, [r7, #12]
    63d8:	0010      	movs	r0, r2
    63da:	4798      	blx	r3
    63dc:	1e03      	subs	r3, r0, #0
    63de:	d001      	beq.n	63e4 <_ZN13PluggableUSB_5setupER8USBSetup+0x2c>
			return true;
    63e0:	2301      	movs	r3, #1
    63e2:	e004      	b.n	63ee <_ZN13PluggableUSB_5setupER8USBSetup+0x36>
}

bool PluggableUSB_::setup(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    63e4:	68fb      	ldr	r3, [r7, #12]
    63e6:	68db      	ldr	r3, [r3, #12]
    63e8:	60fb      	str	r3, [r7, #12]
    63ea:	e7ed      	b.n	63c8 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
		if (node->setup(setup)) {
			return true;
		}
	}
	return false;
    63ec:	2300      	movs	r3, #0
}
    63ee:	0018      	movs	r0, r3
    63f0:	46bd      	mov	sp, r7
    63f2:	b004      	add	sp, #16
    63f4:	bd80      	pop	{r7, pc}
    63f6:	46c0      	nop			; (mov r8, r8)

000063f8 <_Z12PluggableUSBv>:
	return true;
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
    63f8:	b580      	push	{r7, lr}
    63fa:	af00      	add	r7, sp, #0
	static PluggableUSB_ obj;
    63fc:	4b07      	ldr	r3, [pc, #28]	; (641c <_Z12PluggableUSBv+0x24>)
    63fe:	681b      	ldr	r3, [r3, #0]
    6400:	2201      	movs	r2, #1
    6402:	4013      	ands	r3, r2
    6404:	d106      	bne.n	6414 <_Z12PluggableUSBv+0x1c>
    6406:	4b06      	ldr	r3, [pc, #24]	; (6420 <_Z12PluggableUSBv+0x28>)
    6408:	0018      	movs	r0, r3
    640a:	f000 f80b 	bl	6424 <_ZN13PluggableUSB_C1Ev>
    640e:	4b03      	ldr	r3, [pc, #12]	; (641c <_Z12PluggableUSBv+0x24>)
    6410:	2201      	movs	r2, #1
    6412:	601a      	str	r2, [r3, #0]
	return obj;
    6414:	4b02      	ldr	r3, [pc, #8]	; (6420 <_Z12PluggableUSBv+0x28>)
}
    6416:	0018      	movs	r0, r3
    6418:	46bd      	mov	sp, r7
    641a:	bd80      	pop	{r7, pc}
    641c:	200009c8 	.word	0x200009c8
    6420:	200009cc 	.word	0x200009cc

00006424 <_ZN13PluggableUSB_C1Ev>:

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
    6424:	b580      	push	{r7, lr}
    6426:	b082      	sub	sp, #8
    6428:	af00      	add	r7, sp, #0
    642a:	6078      	str	r0, [r7, #4]
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	2202      	movs	r2, #2
    6430:	701a      	strb	r2, [r3, #0]
    6432:	687b      	ldr	r3, [r7, #4]
    6434:	2204      	movs	r2, #4
    6436:	705a      	strb	r2, [r3, #1]
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	2200      	movs	r2, #0
    643c:	605a      	str	r2, [r3, #4]
{
	// Empty
}
    643e:	687b      	ldr	r3, [r7, #4]
    6440:	0018      	movs	r0, r3
    6442:	46bd      	mov	sp, r7
    6444:	b002      	add	sp, #8
    6446:	bd80      	pop	{r7, pc}

00006448 <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    6448:	b580      	push	{r7, lr}
    644a:	b082      	sub	sp, #8
    644c:	af00      	add	r7, sp, #0
    644e:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    6450:	687b      	ldr	r3, [r7, #4]
    6452:	22a4      	movs	r2, #164	; 0xa4
    6454:	2100      	movs	r1, #0
    6456:	0018      	movs	r0, r3
    6458:	f000 ffcd 	bl	73f6 <memset>
    clear();
    645c:	687b      	ldr	r3, [r7, #4]
    645e:	0018      	movs	r0, r3
    6460:	f000 f82c 	bl	64bc <_ZN10RingBuffer5clearEv>
}
    6464:	687b      	ldr	r3, [r7, #4]
    6466:	0018      	movs	r0, r3
    6468:	46bd      	mov	sp, r7
    646a:	b002      	add	sp, #8
    646c:	bd80      	pop	{r7, pc}
    646e:	46c0      	nop			; (mov r8, r8)

00006470 <_ZN10RingBuffer10store_charEh>:

void RingBuffer::store_char( uint8_t c )
{
    6470:	b580      	push	{r7, lr}
    6472:	b084      	sub	sp, #16
    6474:	af00      	add	r7, sp, #0
    6476:	6078      	str	r0, [r7, #4]
    6478:	000a      	movs	r2, r1
    647a:	1cfb      	adds	r3, r7, #3
    647c:	701a      	strb	r2, [r3, #0]
  int i = nextIndex(_iHead);
    647e:	687b      	ldr	r3, [r7, #4]
    6480:	22a4      	movs	r2, #164	; 0xa4
    6482:	589a      	ldr	r2, [r3, r2]
    6484:	687b      	ldr	r3, [r7, #4]
    6486:	0011      	movs	r1, r2
    6488:	0018      	movs	r0, r3
    648a:	f000 f881 	bl	6590 <_ZN10RingBuffer9nextIndexEi>
    648e:	0003      	movs	r3, r0
    6490:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
    6492:	687b      	ldr	r3, [r7, #4]
    6494:	22a8      	movs	r2, #168	; 0xa8
    6496:	589a      	ldr	r2, [r3, r2]
    6498:	68fb      	ldr	r3, [r7, #12]
    649a:	429a      	cmp	r2, r3
    649c:	d00a      	beq.n	64b4 <_ZN10RingBuffer10store_charEh+0x44>
  {
    _aucBuffer[_iHead] = c ;
    649e:	687b      	ldr	r3, [r7, #4]
    64a0:	22a4      	movs	r2, #164	; 0xa4
    64a2:	589b      	ldr	r3, [r3, r2]
    64a4:	687a      	ldr	r2, [r7, #4]
    64a6:	1cf9      	adds	r1, r7, #3
    64a8:	7809      	ldrb	r1, [r1, #0]
    64aa:	54d1      	strb	r1, [r2, r3]
    _iHead = i ;
    64ac:	687b      	ldr	r3, [r7, #4]
    64ae:	21a4      	movs	r1, #164	; 0xa4
    64b0:	68fa      	ldr	r2, [r7, #12]
    64b2:	505a      	str	r2, [r3, r1]
  }
}
    64b4:	46c0      	nop			; (mov r8, r8)
    64b6:	46bd      	mov	sp, r7
    64b8:	b004      	add	sp, #16
    64ba:	bd80      	pop	{r7, pc}

000064bc <_ZN10RingBuffer5clearEv>:

void RingBuffer::clear()
{
    64bc:	b580      	push	{r7, lr}
    64be:	b082      	sub	sp, #8
    64c0:	af00      	add	r7, sp, #0
    64c2:	6078      	str	r0, [r7, #4]
	_iHead = 0;
    64c4:	687b      	ldr	r3, [r7, #4]
    64c6:	22a4      	movs	r2, #164	; 0xa4
    64c8:	2100      	movs	r1, #0
    64ca:	5099      	str	r1, [r3, r2]
	_iTail = 0;
    64cc:	687b      	ldr	r3, [r7, #4]
    64ce:	22a8      	movs	r2, #168	; 0xa8
    64d0:	2100      	movs	r1, #0
    64d2:	5099      	str	r1, [r3, r2]
}
    64d4:	46c0      	nop			; (mov r8, r8)
    64d6:	46bd      	mov	sp, r7
    64d8:	b002      	add	sp, #8
    64da:	bd80      	pop	{r7, pc}

000064dc <_ZN10RingBuffer9read_charEv>:

int RingBuffer::read_char()
{
    64dc:	b580      	push	{r7, lr}
    64de:	b084      	sub	sp, #16
    64e0:	af00      	add	r7, sp, #0
    64e2:	6078      	str	r0, [r7, #4]
	if(_iTail == _iHead)
    64e4:	687b      	ldr	r3, [r7, #4]
    64e6:	22a8      	movs	r2, #168	; 0xa8
    64e8:	589a      	ldr	r2, [r3, r2]
    64ea:	687b      	ldr	r3, [r7, #4]
    64ec:	21a4      	movs	r1, #164	; 0xa4
    64ee:	585b      	ldr	r3, [r3, r1]
    64f0:	429a      	cmp	r2, r3
    64f2:	d102      	bne.n	64fa <_ZN10RingBuffer9read_charEv+0x1e>
		return -1;
    64f4:	2301      	movs	r3, #1
    64f6:	425b      	negs	r3, r3
    64f8:	e016      	b.n	6528 <_ZN10RingBuffer9read_charEv+0x4c>

	uint8_t value = _aucBuffer[_iTail];
    64fa:	687b      	ldr	r3, [r7, #4]
    64fc:	22a8      	movs	r2, #168	; 0xa8
    64fe:	589a      	ldr	r2, [r3, r2]
    6500:	230f      	movs	r3, #15
    6502:	18fb      	adds	r3, r7, r3
    6504:	6879      	ldr	r1, [r7, #4]
    6506:	5c8a      	ldrb	r2, [r1, r2]
    6508:	701a      	strb	r2, [r3, #0]
	_iTail = nextIndex(_iTail);
    650a:	687b      	ldr	r3, [r7, #4]
    650c:	22a8      	movs	r2, #168	; 0xa8
    650e:	589a      	ldr	r2, [r3, r2]
    6510:	687b      	ldr	r3, [r7, #4]
    6512:	0011      	movs	r1, r2
    6514:	0018      	movs	r0, r3
    6516:	f000 f83b 	bl	6590 <_ZN10RingBuffer9nextIndexEi>
    651a:	0001      	movs	r1, r0
    651c:	687b      	ldr	r3, [r7, #4]
    651e:	22a8      	movs	r2, #168	; 0xa8
    6520:	5099      	str	r1, [r3, r2]

	return value;
    6522:	230f      	movs	r3, #15
    6524:	18fb      	adds	r3, r7, r3
    6526:	781b      	ldrb	r3, [r3, #0]
}
    6528:	0018      	movs	r0, r3
    652a:	46bd      	mov	sp, r7
    652c:	b004      	add	sp, #16
    652e:	bd80      	pop	{r7, pc}

00006530 <_ZN10RingBuffer9availableEv>:

int RingBuffer::available()
{
    6530:	b580      	push	{r7, lr}
    6532:	b084      	sub	sp, #16
    6534:	af00      	add	r7, sp, #0
    6536:	6078      	str	r0, [r7, #4]
	int delta = _iHead - _iTail;
    6538:	687b      	ldr	r3, [r7, #4]
    653a:	22a4      	movs	r2, #164	; 0xa4
    653c:	589a      	ldr	r2, [r3, r2]
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	21a8      	movs	r1, #168	; 0xa8
    6542:	585b      	ldr	r3, [r3, r1]
    6544:	1ad3      	subs	r3, r2, r3
    6546:	60fb      	str	r3, [r7, #12]

	if(delta < 0)
    6548:	68fb      	ldr	r3, [r7, #12]
    654a:	2b00      	cmp	r3, #0
    654c:	da02      	bge.n	6554 <_ZN10RingBuffer9availableEv+0x24>
		return SERIAL_BUFFER_SIZE + delta;
    654e:	68fb      	ldr	r3, [r7, #12]
    6550:	33a4      	adds	r3, #164	; 0xa4
    6552:	e000      	b.n	6556 <_ZN10RingBuffer9availableEv+0x26>
	else
		return delta;
    6554:	68fb      	ldr	r3, [r7, #12]
}
    6556:	0018      	movs	r0, r3
    6558:	46bd      	mov	sp, r7
    655a:	b004      	add	sp, #16
    655c:	bd80      	pop	{r7, pc}
    655e:	46c0      	nop			; (mov r8, r8)

00006560 <_ZN10RingBuffer4peekEv>:

int RingBuffer::peek()
{
    6560:	b580      	push	{r7, lr}
    6562:	b082      	sub	sp, #8
    6564:	af00      	add	r7, sp, #0
    6566:	6078      	str	r0, [r7, #4]
	if(_iTail == _iHead)
    6568:	687b      	ldr	r3, [r7, #4]
    656a:	22a8      	movs	r2, #168	; 0xa8
    656c:	589a      	ldr	r2, [r3, r2]
    656e:	687b      	ldr	r3, [r7, #4]
    6570:	21a4      	movs	r1, #164	; 0xa4
    6572:	585b      	ldr	r3, [r3, r1]
    6574:	429a      	cmp	r2, r3
    6576:	d102      	bne.n	657e <_ZN10RingBuffer4peekEv+0x1e>
		return -1;
    6578:	2301      	movs	r3, #1
    657a:	425b      	negs	r3, r3
    657c:	e004      	b.n	6588 <_ZN10RingBuffer4peekEv+0x28>

	return _aucBuffer[_iTail];
    657e:	687b      	ldr	r3, [r7, #4]
    6580:	22a8      	movs	r2, #168	; 0xa8
    6582:	589b      	ldr	r3, [r3, r2]
    6584:	687a      	ldr	r2, [r7, #4]
    6586:	5cd3      	ldrb	r3, [r2, r3]
}
    6588:	0018      	movs	r0, r3
    658a:	46bd      	mov	sp, r7
    658c:	b002      	add	sp, #8
    658e:	bd80      	pop	{r7, pc}

00006590 <_ZN10RingBuffer9nextIndexEi>:

int RingBuffer::nextIndex(int index)
{
    6590:	b580      	push	{r7, lr}
    6592:	b082      	sub	sp, #8
    6594:	af00      	add	r7, sp, #0
    6596:	6078      	str	r0, [r7, #4]
    6598:	6039      	str	r1, [r7, #0]
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    659a:	683b      	ldr	r3, [r7, #0]
    659c:	3301      	adds	r3, #1
    659e:	21a4      	movs	r1, #164	; 0xa4
    65a0:	0018      	movs	r0, r3
    65a2:	f000 f893 	bl	66cc <__aeabi_uidivmod>
    65a6:	000b      	movs	r3, r1
}
    65a8:	0018      	movs	r0, r3
    65aa:	46bd      	mov	sp, r7
    65ac:	b002      	add	sp, #8
    65ae:	bd80      	pop	{r7, pc}

000065b0 <__aeabi_atexit>:
    65b0:	000b      	movs	r3, r1
    65b2:	b510      	push	{r4, lr}
    65b4:	0001      	movs	r1, r0
    65b6:	0018      	movs	r0, r3
    65b8:	f000 fecc 	bl	7354 <__cxa_atexit>
    65bc:	bd10      	pop	{r4, pc}
	...

000065c0 <__aeabi_uidiv>:
    65c0:	2200      	movs	r2, #0
    65c2:	0843      	lsrs	r3, r0, #1
    65c4:	428b      	cmp	r3, r1
    65c6:	d374      	bcc.n	66b2 <__aeabi_uidiv+0xf2>
    65c8:	0903      	lsrs	r3, r0, #4
    65ca:	428b      	cmp	r3, r1
    65cc:	d35f      	bcc.n	668e <__aeabi_uidiv+0xce>
    65ce:	0a03      	lsrs	r3, r0, #8
    65d0:	428b      	cmp	r3, r1
    65d2:	d344      	bcc.n	665e <__aeabi_uidiv+0x9e>
    65d4:	0b03      	lsrs	r3, r0, #12
    65d6:	428b      	cmp	r3, r1
    65d8:	d328      	bcc.n	662c <__aeabi_uidiv+0x6c>
    65da:	0c03      	lsrs	r3, r0, #16
    65dc:	428b      	cmp	r3, r1
    65de:	d30d      	bcc.n	65fc <__aeabi_uidiv+0x3c>
    65e0:	22ff      	movs	r2, #255	; 0xff
    65e2:	0209      	lsls	r1, r1, #8
    65e4:	ba12      	rev	r2, r2
    65e6:	0c03      	lsrs	r3, r0, #16
    65e8:	428b      	cmp	r3, r1
    65ea:	d302      	bcc.n	65f2 <__aeabi_uidiv+0x32>
    65ec:	1212      	asrs	r2, r2, #8
    65ee:	0209      	lsls	r1, r1, #8
    65f0:	d065      	beq.n	66be <__aeabi_uidiv+0xfe>
    65f2:	0b03      	lsrs	r3, r0, #12
    65f4:	428b      	cmp	r3, r1
    65f6:	d319      	bcc.n	662c <__aeabi_uidiv+0x6c>
    65f8:	e000      	b.n	65fc <__aeabi_uidiv+0x3c>
    65fa:	0a09      	lsrs	r1, r1, #8
    65fc:	0bc3      	lsrs	r3, r0, #15
    65fe:	428b      	cmp	r3, r1
    6600:	d301      	bcc.n	6606 <__aeabi_uidiv+0x46>
    6602:	03cb      	lsls	r3, r1, #15
    6604:	1ac0      	subs	r0, r0, r3
    6606:	4152      	adcs	r2, r2
    6608:	0b83      	lsrs	r3, r0, #14
    660a:	428b      	cmp	r3, r1
    660c:	d301      	bcc.n	6612 <__aeabi_uidiv+0x52>
    660e:	038b      	lsls	r3, r1, #14
    6610:	1ac0      	subs	r0, r0, r3
    6612:	4152      	adcs	r2, r2
    6614:	0b43      	lsrs	r3, r0, #13
    6616:	428b      	cmp	r3, r1
    6618:	d301      	bcc.n	661e <__aeabi_uidiv+0x5e>
    661a:	034b      	lsls	r3, r1, #13
    661c:	1ac0      	subs	r0, r0, r3
    661e:	4152      	adcs	r2, r2
    6620:	0b03      	lsrs	r3, r0, #12
    6622:	428b      	cmp	r3, r1
    6624:	d301      	bcc.n	662a <__aeabi_uidiv+0x6a>
    6626:	030b      	lsls	r3, r1, #12
    6628:	1ac0      	subs	r0, r0, r3
    662a:	4152      	adcs	r2, r2
    662c:	0ac3      	lsrs	r3, r0, #11
    662e:	428b      	cmp	r3, r1
    6630:	d301      	bcc.n	6636 <__aeabi_uidiv+0x76>
    6632:	02cb      	lsls	r3, r1, #11
    6634:	1ac0      	subs	r0, r0, r3
    6636:	4152      	adcs	r2, r2
    6638:	0a83      	lsrs	r3, r0, #10
    663a:	428b      	cmp	r3, r1
    663c:	d301      	bcc.n	6642 <__aeabi_uidiv+0x82>
    663e:	028b      	lsls	r3, r1, #10
    6640:	1ac0      	subs	r0, r0, r3
    6642:	4152      	adcs	r2, r2
    6644:	0a43      	lsrs	r3, r0, #9
    6646:	428b      	cmp	r3, r1
    6648:	d301      	bcc.n	664e <__aeabi_uidiv+0x8e>
    664a:	024b      	lsls	r3, r1, #9
    664c:	1ac0      	subs	r0, r0, r3
    664e:	4152      	adcs	r2, r2
    6650:	0a03      	lsrs	r3, r0, #8
    6652:	428b      	cmp	r3, r1
    6654:	d301      	bcc.n	665a <__aeabi_uidiv+0x9a>
    6656:	020b      	lsls	r3, r1, #8
    6658:	1ac0      	subs	r0, r0, r3
    665a:	4152      	adcs	r2, r2
    665c:	d2cd      	bcs.n	65fa <__aeabi_uidiv+0x3a>
    665e:	09c3      	lsrs	r3, r0, #7
    6660:	428b      	cmp	r3, r1
    6662:	d301      	bcc.n	6668 <__aeabi_uidiv+0xa8>
    6664:	01cb      	lsls	r3, r1, #7
    6666:	1ac0      	subs	r0, r0, r3
    6668:	4152      	adcs	r2, r2
    666a:	0983      	lsrs	r3, r0, #6
    666c:	428b      	cmp	r3, r1
    666e:	d301      	bcc.n	6674 <__aeabi_uidiv+0xb4>
    6670:	018b      	lsls	r3, r1, #6
    6672:	1ac0      	subs	r0, r0, r3
    6674:	4152      	adcs	r2, r2
    6676:	0943      	lsrs	r3, r0, #5
    6678:	428b      	cmp	r3, r1
    667a:	d301      	bcc.n	6680 <__aeabi_uidiv+0xc0>
    667c:	014b      	lsls	r3, r1, #5
    667e:	1ac0      	subs	r0, r0, r3
    6680:	4152      	adcs	r2, r2
    6682:	0903      	lsrs	r3, r0, #4
    6684:	428b      	cmp	r3, r1
    6686:	d301      	bcc.n	668c <__aeabi_uidiv+0xcc>
    6688:	010b      	lsls	r3, r1, #4
    668a:	1ac0      	subs	r0, r0, r3
    668c:	4152      	adcs	r2, r2
    668e:	08c3      	lsrs	r3, r0, #3
    6690:	428b      	cmp	r3, r1
    6692:	d301      	bcc.n	6698 <__aeabi_uidiv+0xd8>
    6694:	00cb      	lsls	r3, r1, #3
    6696:	1ac0      	subs	r0, r0, r3
    6698:	4152      	adcs	r2, r2
    669a:	0883      	lsrs	r3, r0, #2
    669c:	428b      	cmp	r3, r1
    669e:	d301      	bcc.n	66a4 <__aeabi_uidiv+0xe4>
    66a0:	008b      	lsls	r3, r1, #2
    66a2:	1ac0      	subs	r0, r0, r3
    66a4:	4152      	adcs	r2, r2
    66a6:	0843      	lsrs	r3, r0, #1
    66a8:	428b      	cmp	r3, r1
    66aa:	d301      	bcc.n	66b0 <__aeabi_uidiv+0xf0>
    66ac:	004b      	lsls	r3, r1, #1
    66ae:	1ac0      	subs	r0, r0, r3
    66b0:	4152      	adcs	r2, r2
    66b2:	1a41      	subs	r1, r0, r1
    66b4:	d200      	bcs.n	66b8 <__aeabi_uidiv+0xf8>
    66b6:	4601      	mov	r1, r0
    66b8:	4152      	adcs	r2, r2
    66ba:	4610      	mov	r0, r2
    66bc:	4770      	bx	lr
    66be:	e7ff      	b.n	66c0 <__aeabi_uidiv+0x100>
    66c0:	b501      	push	{r0, lr}
    66c2:	2000      	movs	r0, #0
    66c4:	f000 f8f0 	bl	68a8 <__aeabi_idiv0>
    66c8:	bd02      	pop	{r1, pc}
    66ca:	46c0      	nop			; (mov r8, r8)

000066cc <__aeabi_uidivmod>:
    66cc:	2900      	cmp	r1, #0
    66ce:	d0f7      	beq.n	66c0 <__aeabi_uidiv+0x100>
    66d0:	e776      	b.n	65c0 <__aeabi_uidiv>
    66d2:	4770      	bx	lr

000066d4 <__aeabi_idiv>:
    66d4:	4603      	mov	r3, r0
    66d6:	430b      	orrs	r3, r1
    66d8:	d47f      	bmi.n	67da <__aeabi_idiv+0x106>
    66da:	2200      	movs	r2, #0
    66dc:	0843      	lsrs	r3, r0, #1
    66de:	428b      	cmp	r3, r1
    66e0:	d374      	bcc.n	67cc <__aeabi_idiv+0xf8>
    66e2:	0903      	lsrs	r3, r0, #4
    66e4:	428b      	cmp	r3, r1
    66e6:	d35f      	bcc.n	67a8 <__aeabi_idiv+0xd4>
    66e8:	0a03      	lsrs	r3, r0, #8
    66ea:	428b      	cmp	r3, r1
    66ec:	d344      	bcc.n	6778 <__aeabi_idiv+0xa4>
    66ee:	0b03      	lsrs	r3, r0, #12
    66f0:	428b      	cmp	r3, r1
    66f2:	d328      	bcc.n	6746 <__aeabi_idiv+0x72>
    66f4:	0c03      	lsrs	r3, r0, #16
    66f6:	428b      	cmp	r3, r1
    66f8:	d30d      	bcc.n	6716 <__aeabi_idiv+0x42>
    66fa:	22ff      	movs	r2, #255	; 0xff
    66fc:	0209      	lsls	r1, r1, #8
    66fe:	ba12      	rev	r2, r2
    6700:	0c03      	lsrs	r3, r0, #16
    6702:	428b      	cmp	r3, r1
    6704:	d302      	bcc.n	670c <__aeabi_idiv+0x38>
    6706:	1212      	asrs	r2, r2, #8
    6708:	0209      	lsls	r1, r1, #8
    670a:	d065      	beq.n	67d8 <__aeabi_idiv+0x104>
    670c:	0b03      	lsrs	r3, r0, #12
    670e:	428b      	cmp	r3, r1
    6710:	d319      	bcc.n	6746 <__aeabi_idiv+0x72>
    6712:	e000      	b.n	6716 <__aeabi_idiv+0x42>
    6714:	0a09      	lsrs	r1, r1, #8
    6716:	0bc3      	lsrs	r3, r0, #15
    6718:	428b      	cmp	r3, r1
    671a:	d301      	bcc.n	6720 <__aeabi_idiv+0x4c>
    671c:	03cb      	lsls	r3, r1, #15
    671e:	1ac0      	subs	r0, r0, r3
    6720:	4152      	adcs	r2, r2
    6722:	0b83      	lsrs	r3, r0, #14
    6724:	428b      	cmp	r3, r1
    6726:	d301      	bcc.n	672c <__aeabi_idiv+0x58>
    6728:	038b      	lsls	r3, r1, #14
    672a:	1ac0      	subs	r0, r0, r3
    672c:	4152      	adcs	r2, r2
    672e:	0b43      	lsrs	r3, r0, #13
    6730:	428b      	cmp	r3, r1
    6732:	d301      	bcc.n	6738 <__aeabi_idiv+0x64>
    6734:	034b      	lsls	r3, r1, #13
    6736:	1ac0      	subs	r0, r0, r3
    6738:	4152      	adcs	r2, r2
    673a:	0b03      	lsrs	r3, r0, #12
    673c:	428b      	cmp	r3, r1
    673e:	d301      	bcc.n	6744 <__aeabi_idiv+0x70>
    6740:	030b      	lsls	r3, r1, #12
    6742:	1ac0      	subs	r0, r0, r3
    6744:	4152      	adcs	r2, r2
    6746:	0ac3      	lsrs	r3, r0, #11
    6748:	428b      	cmp	r3, r1
    674a:	d301      	bcc.n	6750 <__aeabi_idiv+0x7c>
    674c:	02cb      	lsls	r3, r1, #11
    674e:	1ac0      	subs	r0, r0, r3
    6750:	4152      	adcs	r2, r2
    6752:	0a83      	lsrs	r3, r0, #10
    6754:	428b      	cmp	r3, r1
    6756:	d301      	bcc.n	675c <__aeabi_idiv+0x88>
    6758:	028b      	lsls	r3, r1, #10
    675a:	1ac0      	subs	r0, r0, r3
    675c:	4152      	adcs	r2, r2
    675e:	0a43      	lsrs	r3, r0, #9
    6760:	428b      	cmp	r3, r1
    6762:	d301      	bcc.n	6768 <__aeabi_idiv+0x94>
    6764:	024b      	lsls	r3, r1, #9
    6766:	1ac0      	subs	r0, r0, r3
    6768:	4152      	adcs	r2, r2
    676a:	0a03      	lsrs	r3, r0, #8
    676c:	428b      	cmp	r3, r1
    676e:	d301      	bcc.n	6774 <__aeabi_idiv+0xa0>
    6770:	020b      	lsls	r3, r1, #8
    6772:	1ac0      	subs	r0, r0, r3
    6774:	4152      	adcs	r2, r2
    6776:	d2cd      	bcs.n	6714 <__aeabi_idiv+0x40>
    6778:	09c3      	lsrs	r3, r0, #7
    677a:	428b      	cmp	r3, r1
    677c:	d301      	bcc.n	6782 <__aeabi_idiv+0xae>
    677e:	01cb      	lsls	r3, r1, #7
    6780:	1ac0      	subs	r0, r0, r3
    6782:	4152      	adcs	r2, r2
    6784:	0983      	lsrs	r3, r0, #6
    6786:	428b      	cmp	r3, r1
    6788:	d301      	bcc.n	678e <__aeabi_idiv+0xba>
    678a:	018b      	lsls	r3, r1, #6
    678c:	1ac0      	subs	r0, r0, r3
    678e:	4152      	adcs	r2, r2
    6790:	0943      	lsrs	r3, r0, #5
    6792:	428b      	cmp	r3, r1
    6794:	d301      	bcc.n	679a <__aeabi_idiv+0xc6>
    6796:	014b      	lsls	r3, r1, #5
    6798:	1ac0      	subs	r0, r0, r3
    679a:	4152      	adcs	r2, r2
    679c:	0903      	lsrs	r3, r0, #4
    679e:	428b      	cmp	r3, r1
    67a0:	d301      	bcc.n	67a6 <__aeabi_idiv+0xd2>
    67a2:	010b      	lsls	r3, r1, #4
    67a4:	1ac0      	subs	r0, r0, r3
    67a6:	4152      	adcs	r2, r2
    67a8:	08c3      	lsrs	r3, r0, #3
    67aa:	428b      	cmp	r3, r1
    67ac:	d301      	bcc.n	67b2 <__aeabi_idiv+0xde>
    67ae:	00cb      	lsls	r3, r1, #3
    67b0:	1ac0      	subs	r0, r0, r3
    67b2:	4152      	adcs	r2, r2
    67b4:	0883      	lsrs	r3, r0, #2
    67b6:	428b      	cmp	r3, r1
    67b8:	d301      	bcc.n	67be <__aeabi_idiv+0xea>
    67ba:	008b      	lsls	r3, r1, #2
    67bc:	1ac0      	subs	r0, r0, r3
    67be:	4152      	adcs	r2, r2
    67c0:	0843      	lsrs	r3, r0, #1
    67c2:	428b      	cmp	r3, r1
    67c4:	d301      	bcc.n	67ca <__aeabi_idiv+0xf6>
    67c6:	004b      	lsls	r3, r1, #1
    67c8:	1ac0      	subs	r0, r0, r3
    67ca:	4152      	adcs	r2, r2
    67cc:	1a41      	subs	r1, r0, r1
    67ce:	d200      	bcs.n	67d2 <__aeabi_idiv+0xfe>
    67d0:	4601      	mov	r1, r0
    67d2:	4152      	adcs	r2, r2
    67d4:	4610      	mov	r0, r2
    67d6:	4770      	bx	lr
    67d8:	e05d      	b.n	6896 <__aeabi_idiv+0x1c2>
    67da:	0fca      	lsrs	r2, r1, #31
    67dc:	d000      	beq.n	67e0 <__aeabi_idiv+0x10c>
    67de:	4249      	negs	r1, r1
    67e0:	1003      	asrs	r3, r0, #32
    67e2:	d300      	bcc.n	67e6 <__aeabi_idiv+0x112>
    67e4:	4240      	negs	r0, r0
    67e6:	4053      	eors	r3, r2
    67e8:	2200      	movs	r2, #0
    67ea:	469c      	mov	ip, r3
    67ec:	0903      	lsrs	r3, r0, #4
    67ee:	428b      	cmp	r3, r1
    67f0:	d32d      	bcc.n	684e <__aeabi_idiv+0x17a>
    67f2:	0a03      	lsrs	r3, r0, #8
    67f4:	428b      	cmp	r3, r1
    67f6:	d312      	bcc.n	681e <__aeabi_idiv+0x14a>
    67f8:	22fc      	movs	r2, #252	; 0xfc
    67fa:	0189      	lsls	r1, r1, #6
    67fc:	ba12      	rev	r2, r2
    67fe:	0a03      	lsrs	r3, r0, #8
    6800:	428b      	cmp	r3, r1
    6802:	d30c      	bcc.n	681e <__aeabi_idiv+0x14a>
    6804:	0189      	lsls	r1, r1, #6
    6806:	1192      	asrs	r2, r2, #6
    6808:	428b      	cmp	r3, r1
    680a:	d308      	bcc.n	681e <__aeabi_idiv+0x14a>
    680c:	0189      	lsls	r1, r1, #6
    680e:	1192      	asrs	r2, r2, #6
    6810:	428b      	cmp	r3, r1
    6812:	d304      	bcc.n	681e <__aeabi_idiv+0x14a>
    6814:	0189      	lsls	r1, r1, #6
    6816:	d03a      	beq.n	688e <__aeabi_idiv+0x1ba>
    6818:	1192      	asrs	r2, r2, #6
    681a:	e000      	b.n	681e <__aeabi_idiv+0x14a>
    681c:	0989      	lsrs	r1, r1, #6
    681e:	09c3      	lsrs	r3, r0, #7
    6820:	428b      	cmp	r3, r1
    6822:	d301      	bcc.n	6828 <__aeabi_idiv+0x154>
    6824:	01cb      	lsls	r3, r1, #7
    6826:	1ac0      	subs	r0, r0, r3
    6828:	4152      	adcs	r2, r2
    682a:	0983      	lsrs	r3, r0, #6
    682c:	428b      	cmp	r3, r1
    682e:	d301      	bcc.n	6834 <__aeabi_idiv+0x160>
    6830:	018b      	lsls	r3, r1, #6
    6832:	1ac0      	subs	r0, r0, r3
    6834:	4152      	adcs	r2, r2
    6836:	0943      	lsrs	r3, r0, #5
    6838:	428b      	cmp	r3, r1
    683a:	d301      	bcc.n	6840 <__aeabi_idiv+0x16c>
    683c:	014b      	lsls	r3, r1, #5
    683e:	1ac0      	subs	r0, r0, r3
    6840:	4152      	adcs	r2, r2
    6842:	0903      	lsrs	r3, r0, #4
    6844:	428b      	cmp	r3, r1
    6846:	d301      	bcc.n	684c <__aeabi_idiv+0x178>
    6848:	010b      	lsls	r3, r1, #4
    684a:	1ac0      	subs	r0, r0, r3
    684c:	4152      	adcs	r2, r2
    684e:	08c3      	lsrs	r3, r0, #3
    6850:	428b      	cmp	r3, r1
    6852:	d301      	bcc.n	6858 <__aeabi_idiv+0x184>
    6854:	00cb      	lsls	r3, r1, #3
    6856:	1ac0      	subs	r0, r0, r3
    6858:	4152      	adcs	r2, r2
    685a:	0883      	lsrs	r3, r0, #2
    685c:	428b      	cmp	r3, r1
    685e:	d301      	bcc.n	6864 <__aeabi_idiv+0x190>
    6860:	008b      	lsls	r3, r1, #2
    6862:	1ac0      	subs	r0, r0, r3
    6864:	4152      	adcs	r2, r2
    6866:	d2d9      	bcs.n	681c <__aeabi_idiv+0x148>
    6868:	0843      	lsrs	r3, r0, #1
    686a:	428b      	cmp	r3, r1
    686c:	d301      	bcc.n	6872 <__aeabi_idiv+0x19e>
    686e:	004b      	lsls	r3, r1, #1
    6870:	1ac0      	subs	r0, r0, r3
    6872:	4152      	adcs	r2, r2
    6874:	1a41      	subs	r1, r0, r1
    6876:	d200      	bcs.n	687a <__aeabi_idiv+0x1a6>
    6878:	4601      	mov	r1, r0
    687a:	4663      	mov	r3, ip
    687c:	4152      	adcs	r2, r2
    687e:	105b      	asrs	r3, r3, #1
    6880:	4610      	mov	r0, r2
    6882:	d301      	bcc.n	6888 <__aeabi_idiv+0x1b4>
    6884:	4240      	negs	r0, r0
    6886:	2b00      	cmp	r3, #0
    6888:	d500      	bpl.n	688c <__aeabi_idiv+0x1b8>
    688a:	4249      	negs	r1, r1
    688c:	4770      	bx	lr
    688e:	4663      	mov	r3, ip
    6890:	105b      	asrs	r3, r3, #1
    6892:	d300      	bcc.n	6896 <__aeabi_idiv+0x1c2>
    6894:	4240      	negs	r0, r0
    6896:	b501      	push	{r0, lr}
    6898:	2000      	movs	r0, #0
    689a:	f000 f805 	bl	68a8 <__aeabi_idiv0>
    689e:	bd02      	pop	{r1, pc}

000068a0 <__aeabi_idivmod>:
    68a0:	2900      	cmp	r1, #0
    68a2:	d0f8      	beq.n	6896 <__aeabi_idiv+0x1c2>
    68a4:	e716      	b.n	66d4 <__aeabi_idiv>
    68a6:	4770      	bx	lr

000068a8 <__aeabi_idiv0>:
    68a8:	4770      	bx	lr
    68aa:	46c0      	nop			; (mov r8, r8)

000068ac <__aeabi_cdrcmple>:
    68ac:	4684      	mov	ip, r0
    68ae:	1c10      	adds	r0, r2, #0
    68b0:	4662      	mov	r2, ip
    68b2:	468c      	mov	ip, r1
    68b4:	1c19      	adds	r1, r3, #0
    68b6:	4663      	mov	r3, ip
    68b8:	e000      	b.n	68bc <__aeabi_cdcmpeq>
    68ba:	46c0      	nop			; (mov r8, r8)

000068bc <__aeabi_cdcmpeq>:
    68bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    68be:	f000 f8f5 	bl	6aac <__ledf2>
    68c2:	2800      	cmp	r0, #0
    68c4:	d401      	bmi.n	68ca <__aeabi_cdcmpeq+0xe>
    68c6:	2100      	movs	r1, #0
    68c8:	42c8      	cmn	r0, r1
    68ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000068cc <__aeabi_dcmpeq>:
    68cc:	b510      	push	{r4, lr}
    68ce:	f000 f849 	bl	6964 <__eqdf2>
    68d2:	4240      	negs	r0, r0
    68d4:	3001      	adds	r0, #1
    68d6:	bd10      	pop	{r4, pc}

000068d8 <__aeabi_dcmplt>:
    68d8:	b510      	push	{r4, lr}
    68da:	f000 f8e7 	bl	6aac <__ledf2>
    68de:	2800      	cmp	r0, #0
    68e0:	db01      	blt.n	68e6 <__aeabi_dcmplt+0xe>
    68e2:	2000      	movs	r0, #0
    68e4:	bd10      	pop	{r4, pc}
    68e6:	2001      	movs	r0, #1
    68e8:	bd10      	pop	{r4, pc}
    68ea:	46c0      	nop			; (mov r8, r8)

000068ec <__aeabi_dcmple>:
    68ec:	b510      	push	{r4, lr}
    68ee:	f000 f8dd 	bl	6aac <__ledf2>
    68f2:	2800      	cmp	r0, #0
    68f4:	dd01      	ble.n	68fa <__aeabi_dcmple+0xe>
    68f6:	2000      	movs	r0, #0
    68f8:	bd10      	pop	{r4, pc}
    68fa:	2001      	movs	r0, #1
    68fc:	bd10      	pop	{r4, pc}
    68fe:	46c0      	nop			; (mov r8, r8)

00006900 <__aeabi_dcmpgt>:
    6900:	b510      	push	{r4, lr}
    6902:	f000 f86f 	bl	69e4 <__gedf2>
    6906:	2800      	cmp	r0, #0
    6908:	dc01      	bgt.n	690e <__aeabi_dcmpgt+0xe>
    690a:	2000      	movs	r0, #0
    690c:	bd10      	pop	{r4, pc}
    690e:	2001      	movs	r0, #1
    6910:	bd10      	pop	{r4, pc}
    6912:	46c0      	nop			; (mov r8, r8)

00006914 <__aeabi_dcmpge>:
    6914:	b510      	push	{r4, lr}
    6916:	f000 f865 	bl	69e4 <__gedf2>
    691a:	2800      	cmp	r0, #0
    691c:	da01      	bge.n	6922 <__aeabi_dcmpge+0xe>
    691e:	2000      	movs	r0, #0
    6920:	bd10      	pop	{r4, pc}
    6922:	2001      	movs	r0, #1
    6924:	bd10      	pop	{r4, pc}
    6926:	46c0      	nop			; (mov r8, r8)

00006928 <__aeabi_d2uiz>:
    6928:	b570      	push	{r4, r5, r6, lr}
    692a:	2200      	movs	r2, #0
    692c:	4b0c      	ldr	r3, [pc, #48]	; (6960 <__aeabi_d2uiz+0x38>)
    692e:	0004      	movs	r4, r0
    6930:	000d      	movs	r5, r1
    6932:	f7ff ffef 	bl	6914 <__aeabi_dcmpge>
    6936:	2800      	cmp	r0, #0
    6938:	d104      	bne.n	6944 <__aeabi_d2uiz+0x1c>
    693a:	0020      	movs	r0, r4
    693c:	0029      	movs	r1, r5
    693e:	f000 fc73 	bl	7228 <__aeabi_d2iz>
    6942:	bd70      	pop	{r4, r5, r6, pc}
    6944:	4b06      	ldr	r3, [pc, #24]	; (6960 <__aeabi_d2uiz+0x38>)
    6946:	2200      	movs	r2, #0
    6948:	0020      	movs	r0, r4
    694a:	0029      	movs	r1, r5
    694c:	f000 f918 	bl	6b80 <__aeabi_dsub>
    6950:	f000 fc6a 	bl	7228 <__aeabi_d2iz>
    6954:	2380      	movs	r3, #128	; 0x80
    6956:	061b      	lsls	r3, r3, #24
    6958:	469c      	mov	ip, r3
    695a:	4460      	add	r0, ip
    695c:	e7f1      	b.n	6942 <__aeabi_d2uiz+0x1a>
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	41e00000 	.word	0x41e00000

00006964 <__eqdf2>:
    6964:	b5f0      	push	{r4, r5, r6, r7, lr}
    6966:	465f      	mov	r7, fp
    6968:	4656      	mov	r6, sl
    696a:	464d      	mov	r5, r9
    696c:	4644      	mov	r4, r8
    696e:	b4f0      	push	{r4, r5, r6, r7}
    6970:	031f      	lsls	r7, r3, #12
    6972:	005c      	lsls	r4, r3, #1
    6974:	0fdb      	lsrs	r3, r3, #31
    6976:	469a      	mov	sl, r3
    6978:	4b19      	ldr	r3, [pc, #100]	; (69e0 <__eqdf2+0x7c>)
    697a:	030e      	lsls	r6, r1, #12
    697c:	004d      	lsls	r5, r1, #1
    697e:	0fc9      	lsrs	r1, r1, #31
    6980:	4680      	mov	r8, r0
    6982:	0b36      	lsrs	r6, r6, #12
    6984:	0d6d      	lsrs	r5, r5, #21
    6986:	468b      	mov	fp, r1
    6988:	4691      	mov	r9, r2
    698a:	0b3f      	lsrs	r7, r7, #12
    698c:	0d64      	lsrs	r4, r4, #21
    698e:	429d      	cmp	r5, r3
    6990:	d019      	beq.n	69c6 <__eqdf2+0x62>
    6992:	4b13      	ldr	r3, [pc, #76]	; (69e0 <__eqdf2+0x7c>)
    6994:	429c      	cmp	r4, r3
    6996:	d01b      	beq.n	69d0 <__eqdf2+0x6c>
    6998:	2301      	movs	r3, #1
    699a:	42a5      	cmp	r5, r4
    699c:	d006      	beq.n	69ac <__eqdf2+0x48>
    699e:	0018      	movs	r0, r3
    69a0:	bc3c      	pop	{r2, r3, r4, r5}
    69a2:	4690      	mov	r8, r2
    69a4:	4699      	mov	r9, r3
    69a6:	46a2      	mov	sl, r4
    69a8:	46ab      	mov	fp, r5
    69aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69ac:	42be      	cmp	r6, r7
    69ae:	d1f6      	bne.n	699e <__eqdf2+0x3a>
    69b0:	45c8      	cmp	r8, r9
    69b2:	d1f4      	bne.n	699e <__eqdf2+0x3a>
    69b4:	45d3      	cmp	fp, sl
    69b6:	d010      	beq.n	69da <__eqdf2+0x76>
    69b8:	2d00      	cmp	r5, #0
    69ba:	d1f0      	bne.n	699e <__eqdf2+0x3a>
    69bc:	4330      	orrs	r0, r6
    69be:	0003      	movs	r3, r0
    69c0:	1e5a      	subs	r2, r3, #1
    69c2:	4193      	sbcs	r3, r2
    69c4:	e7eb      	b.n	699e <__eqdf2+0x3a>
    69c6:	0031      	movs	r1, r6
    69c8:	2301      	movs	r3, #1
    69ca:	4301      	orrs	r1, r0
    69cc:	d1e7      	bne.n	699e <__eqdf2+0x3a>
    69ce:	e7e0      	b.n	6992 <__eqdf2+0x2e>
    69d0:	433a      	orrs	r2, r7
    69d2:	2301      	movs	r3, #1
    69d4:	2a00      	cmp	r2, #0
    69d6:	d1e2      	bne.n	699e <__eqdf2+0x3a>
    69d8:	e7de      	b.n	6998 <__eqdf2+0x34>
    69da:	2300      	movs	r3, #0
    69dc:	e7df      	b.n	699e <__eqdf2+0x3a>
    69de:	46c0      	nop			; (mov r8, r8)
    69e0:	000007ff 	.word	0x000007ff

000069e4 <__gedf2>:
    69e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69e6:	465f      	mov	r7, fp
    69e8:	4644      	mov	r4, r8
    69ea:	4656      	mov	r6, sl
    69ec:	464d      	mov	r5, r9
    69ee:	b4f0      	push	{r4, r5, r6, r7}
    69f0:	031f      	lsls	r7, r3, #12
    69f2:	0b3c      	lsrs	r4, r7, #12
    69f4:	4f2c      	ldr	r7, [pc, #176]	; (6aa8 <__gedf2+0xc4>)
    69f6:	030e      	lsls	r6, r1, #12
    69f8:	004d      	lsls	r5, r1, #1
    69fa:	46a3      	mov	fp, r4
    69fc:	005c      	lsls	r4, r3, #1
    69fe:	4684      	mov	ip, r0
    6a00:	0b36      	lsrs	r6, r6, #12
    6a02:	0d6d      	lsrs	r5, r5, #21
    6a04:	0fc9      	lsrs	r1, r1, #31
    6a06:	4690      	mov	r8, r2
    6a08:	0d64      	lsrs	r4, r4, #21
    6a0a:	0fdb      	lsrs	r3, r3, #31
    6a0c:	42bd      	cmp	r5, r7
    6a0e:	d02b      	beq.n	6a68 <__gedf2+0x84>
    6a10:	4f25      	ldr	r7, [pc, #148]	; (6aa8 <__gedf2+0xc4>)
    6a12:	42bc      	cmp	r4, r7
    6a14:	d02e      	beq.n	6a74 <__gedf2+0x90>
    6a16:	2d00      	cmp	r5, #0
    6a18:	d10e      	bne.n	6a38 <__gedf2+0x54>
    6a1a:	4330      	orrs	r0, r6
    6a1c:	0007      	movs	r7, r0
    6a1e:	4681      	mov	r9, r0
    6a20:	4278      	negs	r0, r7
    6a22:	4178      	adcs	r0, r7
    6a24:	2c00      	cmp	r4, #0
    6a26:	d117      	bne.n	6a58 <__gedf2+0x74>
    6a28:	465f      	mov	r7, fp
    6a2a:	433a      	orrs	r2, r7
    6a2c:	d114      	bne.n	6a58 <__gedf2+0x74>
    6a2e:	464b      	mov	r3, r9
    6a30:	2000      	movs	r0, #0
    6a32:	2b00      	cmp	r3, #0
    6a34:	d00a      	beq.n	6a4c <__gedf2+0x68>
    6a36:	e006      	b.n	6a46 <__gedf2+0x62>
    6a38:	2c00      	cmp	r4, #0
    6a3a:	d102      	bne.n	6a42 <__gedf2+0x5e>
    6a3c:	4658      	mov	r0, fp
    6a3e:	4302      	orrs	r2, r0
    6a40:	d001      	beq.n	6a46 <__gedf2+0x62>
    6a42:	4299      	cmp	r1, r3
    6a44:	d01a      	beq.n	6a7c <__gedf2+0x98>
    6a46:	2301      	movs	r3, #1
    6a48:	4248      	negs	r0, r1
    6a4a:	4318      	orrs	r0, r3
    6a4c:	bc3c      	pop	{r2, r3, r4, r5}
    6a4e:	4690      	mov	r8, r2
    6a50:	4699      	mov	r9, r3
    6a52:	46a2      	mov	sl, r4
    6a54:	46ab      	mov	fp, r5
    6a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a58:	2800      	cmp	r0, #0
    6a5a:	d0f2      	beq.n	6a42 <__gedf2+0x5e>
    6a5c:	4258      	negs	r0, r3
    6a5e:	4158      	adcs	r0, r3
    6a60:	2201      	movs	r2, #1
    6a62:	4240      	negs	r0, r0
    6a64:	4310      	orrs	r0, r2
    6a66:	e7f1      	b.n	6a4c <__gedf2+0x68>
    6a68:	0037      	movs	r7, r6
    6a6a:	4307      	orrs	r7, r0
    6a6c:	d0d0      	beq.n	6a10 <__gedf2+0x2c>
    6a6e:	2002      	movs	r0, #2
    6a70:	4240      	negs	r0, r0
    6a72:	e7eb      	b.n	6a4c <__gedf2+0x68>
    6a74:	465f      	mov	r7, fp
    6a76:	4317      	orrs	r7, r2
    6a78:	d0cd      	beq.n	6a16 <__gedf2+0x32>
    6a7a:	e7f8      	b.n	6a6e <__gedf2+0x8a>
    6a7c:	42a5      	cmp	r5, r4
    6a7e:	dce2      	bgt.n	6a46 <__gedf2+0x62>
    6a80:	db05      	blt.n	6a8e <__gedf2+0xaa>
    6a82:	455e      	cmp	r6, fp
    6a84:	d8df      	bhi.n	6a46 <__gedf2+0x62>
    6a86:	d008      	beq.n	6a9a <__gedf2+0xb6>
    6a88:	2000      	movs	r0, #0
    6a8a:	455e      	cmp	r6, fp
    6a8c:	d2de      	bcs.n	6a4c <__gedf2+0x68>
    6a8e:	4248      	negs	r0, r1
    6a90:	4148      	adcs	r0, r1
    6a92:	2301      	movs	r3, #1
    6a94:	4240      	negs	r0, r0
    6a96:	4318      	orrs	r0, r3
    6a98:	e7d8      	b.n	6a4c <__gedf2+0x68>
    6a9a:	45c4      	cmp	ip, r8
    6a9c:	d8d3      	bhi.n	6a46 <__gedf2+0x62>
    6a9e:	2000      	movs	r0, #0
    6aa0:	45c4      	cmp	ip, r8
    6aa2:	d3f4      	bcc.n	6a8e <__gedf2+0xaa>
    6aa4:	e7d2      	b.n	6a4c <__gedf2+0x68>
    6aa6:	46c0      	nop			; (mov r8, r8)
    6aa8:	000007ff 	.word	0x000007ff

00006aac <__ledf2>:
    6aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aae:	465f      	mov	r7, fp
    6ab0:	464d      	mov	r5, r9
    6ab2:	4644      	mov	r4, r8
    6ab4:	4656      	mov	r6, sl
    6ab6:	b4f0      	push	{r4, r5, r6, r7}
    6ab8:	031c      	lsls	r4, r3, #12
    6aba:	0b24      	lsrs	r4, r4, #12
    6abc:	46a4      	mov	ip, r4
    6abe:	4c2f      	ldr	r4, [pc, #188]	; (6b7c <__ledf2+0xd0>)
    6ac0:	030f      	lsls	r7, r1, #12
    6ac2:	004d      	lsls	r5, r1, #1
    6ac4:	005e      	lsls	r6, r3, #1
    6ac6:	0fc9      	lsrs	r1, r1, #31
    6ac8:	4680      	mov	r8, r0
    6aca:	0b3f      	lsrs	r7, r7, #12
    6acc:	0d6d      	lsrs	r5, r5, #21
    6ace:	468b      	mov	fp, r1
    6ad0:	4691      	mov	r9, r2
    6ad2:	0d76      	lsrs	r6, r6, #21
    6ad4:	0fdb      	lsrs	r3, r3, #31
    6ad6:	42a5      	cmp	r5, r4
    6ad8:	d020      	beq.n	6b1c <__ledf2+0x70>
    6ada:	4c28      	ldr	r4, [pc, #160]	; (6b7c <__ledf2+0xd0>)
    6adc:	42a6      	cmp	r6, r4
    6ade:	d022      	beq.n	6b26 <__ledf2+0x7a>
    6ae0:	2d00      	cmp	r5, #0
    6ae2:	d112      	bne.n	6b0a <__ledf2+0x5e>
    6ae4:	4338      	orrs	r0, r7
    6ae6:	4244      	negs	r4, r0
    6ae8:	4144      	adcs	r4, r0
    6aea:	2e00      	cmp	r6, #0
    6aec:	d020      	beq.n	6b30 <__ledf2+0x84>
    6aee:	2c00      	cmp	r4, #0
    6af0:	d00d      	beq.n	6b0e <__ledf2+0x62>
    6af2:	425c      	negs	r4, r3
    6af4:	4163      	adcs	r3, r4
    6af6:	2401      	movs	r4, #1
    6af8:	425b      	negs	r3, r3
    6afa:	431c      	orrs	r4, r3
    6afc:	0020      	movs	r0, r4
    6afe:	bc3c      	pop	{r2, r3, r4, r5}
    6b00:	4690      	mov	r8, r2
    6b02:	4699      	mov	r9, r3
    6b04:	46a2      	mov	sl, r4
    6b06:	46ab      	mov	fp, r5
    6b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b0a:	2e00      	cmp	r6, #0
    6b0c:	d017      	beq.n	6b3e <__ledf2+0x92>
    6b0e:	455b      	cmp	r3, fp
    6b10:	d019      	beq.n	6b46 <__ledf2+0x9a>
    6b12:	465b      	mov	r3, fp
    6b14:	425c      	negs	r4, r3
    6b16:	2301      	movs	r3, #1
    6b18:	431c      	orrs	r4, r3
    6b1a:	e7ef      	b.n	6afc <__ledf2+0x50>
    6b1c:	0039      	movs	r1, r7
    6b1e:	2402      	movs	r4, #2
    6b20:	4301      	orrs	r1, r0
    6b22:	d1eb      	bne.n	6afc <__ledf2+0x50>
    6b24:	e7d9      	b.n	6ada <__ledf2+0x2e>
    6b26:	4661      	mov	r1, ip
    6b28:	2402      	movs	r4, #2
    6b2a:	4311      	orrs	r1, r2
    6b2c:	d1e6      	bne.n	6afc <__ledf2+0x50>
    6b2e:	e7d7      	b.n	6ae0 <__ledf2+0x34>
    6b30:	4661      	mov	r1, ip
    6b32:	430a      	orrs	r2, r1
    6b34:	d1db      	bne.n	6aee <__ledf2+0x42>
    6b36:	2400      	movs	r4, #0
    6b38:	2800      	cmp	r0, #0
    6b3a:	d0df      	beq.n	6afc <__ledf2+0x50>
    6b3c:	e7e9      	b.n	6b12 <__ledf2+0x66>
    6b3e:	4661      	mov	r1, ip
    6b40:	430a      	orrs	r2, r1
    6b42:	d1e4      	bne.n	6b0e <__ledf2+0x62>
    6b44:	e7e5      	b.n	6b12 <__ledf2+0x66>
    6b46:	42b5      	cmp	r5, r6
    6b48:	dd03      	ble.n	6b52 <__ledf2+0xa6>
    6b4a:	2201      	movs	r2, #1
    6b4c:	425c      	negs	r4, r3
    6b4e:	4314      	orrs	r4, r2
    6b50:	e7d4      	b.n	6afc <__ledf2+0x50>
    6b52:	42b5      	cmp	r5, r6
    6b54:	dbcd      	blt.n	6af2 <__ledf2+0x46>
    6b56:	4567      	cmp	r7, ip
    6b58:	d8db      	bhi.n	6b12 <__ledf2+0x66>
    6b5a:	d009      	beq.n	6b70 <__ledf2+0xc4>
    6b5c:	2400      	movs	r4, #0
    6b5e:	4567      	cmp	r7, ip
    6b60:	d2cc      	bcs.n	6afc <__ledf2+0x50>
    6b62:	4659      	mov	r1, fp
    6b64:	424c      	negs	r4, r1
    6b66:	4161      	adcs	r1, r4
    6b68:	2401      	movs	r4, #1
    6b6a:	4249      	negs	r1, r1
    6b6c:	430c      	orrs	r4, r1
    6b6e:	e7c5      	b.n	6afc <__ledf2+0x50>
    6b70:	45c8      	cmp	r8, r9
    6b72:	d8ce      	bhi.n	6b12 <__ledf2+0x66>
    6b74:	2400      	movs	r4, #0
    6b76:	45c8      	cmp	r8, r9
    6b78:	d3f3      	bcc.n	6b62 <__ledf2+0xb6>
    6b7a:	e7bf      	b.n	6afc <__ledf2+0x50>
    6b7c:	000007ff 	.word	0x000007ff

00006b80 <__aeabi_dsub>:
    6b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b82:	4657      	mov	r7, sl
    6b84:	464e      	mov	r6, r9
    6b86:	4645      	mov	r5, r8
    6b88:	b4e0      	push	{r5, r6, r7}
    6b8a:	000e      	movs	r6, r1
    6b8c:	0011      	movs	r1, r2
    6b8e:	0ff2      	lsrs	r2, r6, #31
    6b90:	4692      	mov	sl, r2
    6b92:	00c5      	lsls	r5, r0, #3
    6b94:	0f42      	lsrs	r2, r0, #29
    6b96:	0318      	lsls	r0, r3, #12
    6b98:	0337      	lsls	r7, r6, #12
    6b9a:	0074      	lsls	r4, r6, #1
    6b9c:	0a40      	lsrs	r0, r0, #9
    6b9e:	0f4e      	lsrs	r6, r1, #29
    6ba0:	0a7f      	lsrs	r7, r7, #9
    6ba2:	4330      	orrs	r0, r6
    6ba4:	4ecf      	ldr	r6, [pc, #828]	; (6ee4 <__aeabi_dsub+0x364>)
    6ba6:	4317      	orrs	r7, r2
    6ba8:	005a      	lsls	r2, r3, #1
    6baa:	0d64      	lsrs	r4, r4, #21
    6bac:	0d52      	lsrs	r2, r2, #21
    6bae:	0fdb      	lsrs	r3, r3, #31
    6bb0:	00c9      	lsls	r1, r1, #3
    6bb2:	42b2      	cmp	r2, r6
    6bb4:	d100      	bne.n	6bb8 <__aeabi_dsub+0x38>
    6bb6:	e0e5      	b.n	6d84 <__aeabi_dsub+0x204>
    6bb8:	2601      	movs	r6, #1
    6bba:	4073      	eors	r3, r6
    6bbc:	1aa6      	subs	r6, r4, r2
    6bbe:	46b4      	mov	ip, r6
    6bc0:	4553      	cmp	r3, sl
    6bc2:	d100      	bne.n	6bc6 <__aeabi_dsub+0x46>
    6bc4:	e0af      	b.n	6d26 <__aeabi_dsub+0x1a6>
    6bc6:	2e00      	cmp	r6, #0
    6bc8:	dc00      	bgt.n	6bcc <__aeabi_dsub+0x4c>
    6bca:	e10d      	b.n	6de8 <__aeabi_dsub+0x268>
    6bcc:	2a00      	cmp	r2, #0
    6bce:	d13a      	bne.n	6c46 <__aeabi_dsub+0xc6>
    6bd0:	0003      	movs	r3, r0
    6bd2:	430b      	orrs	r3, r1
    6bd4:	d000      	beq.n	6bd8 <__aeabi_dsub+0x58>
    6bd6:	e0e4      	b.n	6da2 <__aeabi_dsub+0x222>
    6bd8:	076b      	lsls	r3, r5, #29
    6bda:	d009      	beq.n	6bf0 <__aeabi_dsub+0x70>
    6bdc:	230f      	movs	r3, #15
    6bde:	402b      	ands	r3, r5
    6be0:	2b04      	cmp	r3, #4
    6be2:	d005      	beq.n	6bf0 <__aeabi_dsub+0x70>
    6be4:	1d2b      	adds	r3, r5, #4
    6be6:	42ab      	cmp	r3, r5
    6be8:	41ad      	sbcs	r5, r5
    6bea:	426d      	negs	r5, r5
    6bec:	197f      	adds	r7, r7, r5
    6bee:	001d      	movs	r5, r3
    6bf0:	023b      	lsls	r3, r7, #8
    6bf2:	d400      	bmi.n	6bf6 <__aeabi_dsub+0x76>
    6bf4:	e088      	b.n	6d08 <__aeabi_dsub+0x188>
    6bf6:	4bbb      	ldr	r3, [pc, #748]	; (6ee4 <__aeabi_dsub+0x364>)
    6bf8:	3401      	adds	r4, #1
    6bfa:	429c      	cmp	r4, r3
    6bfc:	d100      	bne.n	6c00 <__aeabi_dsub+0x80>
    6bfe:	e110      	b.n	6e22 <__aeabi_dsub+0x2a2>
    6c00:	003a      	movs	r2, r7
    6c02:	4bb9      	ldr	r3, [pc, #740]	; (6ee8 <__aeabi_dsub+0x368>)
    6c04:	4651      	mov	r1, sl
    6c06:	401a      	ands	r2, r3
    6c08:	2301      	movs	r3, #1
    6c0a:	0750      	lsls	r0, r2, #29
    6c0c:	08ed      	lsrs	r5, r5, #3
    6c0e:	0252      	lsls	r2, r2, #9
    6c10:	0564      	lsls	r4, r4, #21
    6c12:	4305      	orrs	r5, r0
    6c14:	0b12      	lsrs	r2, r2, #12
    6c16:	0d64      	lsrs	r4, r4, #21
    6c18:	400b      	ands	r3, r1
    6c1a:	2100      	movs	r1, #0
    6c1c:	0028      	movs	r0, r5
    6c1e:	0312      	lsls	r2, r2, #12
    6c20:	0d0d      	lsrs	r5, r1, #20
    6c22:	0b12      	lsrs	r2, r2, #12
    6c24:	0564      	lsls	r4, r4, #21
    6c26:	052d      	lsls	r5, r5, #20
    6c28:	4315      	orrs	r5, r2
    6c2a:	0862      	lsrs	r2, r4, #1
    6c2c:	4caf      	ldr	r4, [pc, #700]	; (6eec <__aeabi_dsub+0x36c>)
    6c2e:	07db      	lsls	r3, r3, #31
    6c30:	402c      	ands	r4, r5
    6c32:	4314      	orrs	r4, r2
    6c34:	0064      	lsls	r4, r4, #1
    6c36:	0864      	lsrs	r4, r4, #1
    6c38:	431c      	orrs	r4, r3
    6c3a:	0021      	movs	r1, r4
    6c3c:	bc1c      	pop	{r2, r3, r4}
    6c3e:	4690      	mov	r8, r2
    6c40:	4699      	mov	r9, r3
    6c42:	46a2      	mov	sl, r4
    6c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c46:	4ba7      	ldr	r3, [pc, #668]	; (6ee4 <__aeabi_dsub+0x364>)
    6c48:	429c      	cmp	r4, r3
    6c4a:	d0c5      	beq.n	6bd8 <__aeabi_dsub+0x58>
    6c4c:	2380      	movs	r3, #128	; 0x80
    6c4e:	041b      	lsls	r3, r3, #16
    6c50:	4318      	orrs	r0, r3
    6c52:	4663      	mov	r3, ip
    6c54:	2b38      	cmp	r3, #56	; 0x38
    6c56:	dd00      	ble.n	6c5a <__aeabi_dsub+0xda>
    6c58:	e0fd      	b.n	6e56 <__aeabi_dsub+0x2d6>
    6c5a:	2b1f      	cmp	r3, #31
    6c5c:	dd00      	ble.n	6c60 <__aeabi_dsub+0xe0>
    6c5e:	e130      	b.n	6ec2 <__aeabi_dsub+0x342>
    6c60:	4662      	mov	r2, ip
    6c62:	2320      	movs	r3, #32
    6c64:	1a9b      	subs	r3, r3, r2
    6c66:	0002      	movs	r2, r0
    6c68:	409a      	lsls	r2, r3
    6c6a:	4666      	mov	r6, ip
    6c6c:	4690      	mov	r8, r2
    6c6e:	000a      	movs	r2, r1
    6c70:	4099      	lsls	r1, r3
    6c72:	40f2      	lsrs	r2, r6
    6c74:	4646      	mov	r6, r8
    6c76:	1e4b      	subs	r3, r1, #1
    6c78:	4199      	sbcs	r1, r3
    6c7a:	4332      	orrs	r2, r6
    6c7c:	4311      	orrs	r1, r2
    6c7e:	4663      	mov	r3, ip
    6c80:	0002      	movs	r2, r0
    6c82:	40da      	lsrs	r2, r3
    6c84:	1a69      	subs	r1, r5, r1
    6c86:	428d      	cmp	r5, r1
    6c88:	419b      	sbcs	r3, r3
    6c8a:	000d      	movs	r5, r1
    6c8c:	1aba      	subs	r2, r7, r2
    6c8e:	425b      	negs	r3, r3
    6c90:	1ad7      	subs	r7, r2, r3
    6c92:	023b      	lsls	r3, r7, #8
    6c94:	d535      	bpl.n	6d02 <__aeabi_dsub+0x182>
    6c96:	027a      	lsls	r2, r7, #9
    6c98:	0a53      	lsrs	r3, r2, #9
    6c9a:	4698      	mov	r8, r3
    6c9c:	4643      	mov	r3, r8
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	d100      	bne.n	6ca4 <__aeabi_dsub+0x124>
    6ca2:	e0c4      	b.n	6e2e <__aeabi_dsub+0x2ae>
    6ca4:	4640      	mov	r0, r8
    6ca6:	f000 fb37 	bl	7318 <__clzsi2>
    6caa:	0003      	movs	r3, r0
    6cac:	3b08      	subs	r3, #8
    6cae:	2b1f      	cmp	r3, #31
    6cb0:	dd00      	ble.n	6cb4 <__aeabi_dsub+0x134>
    6cb2:	e0c5      	b.n	6e40 <__aeabi_dsub+0x2c0>
    6cb4:	2220      	movs	r2, #32
    6cb6:	0029      	movs	r1, r5
    6cb8:	1ad2      	subs	r2, r2, r3
    6cba:	4647      	mov	r7, r8
    6cbc:	40d1      	lsrs	r1, r2
    6cbe:	409f      	lsls	r7, r3
    6cc0:	000a      	movs	r2, r1
    6cc2:	409d      	lsls	r5, r3
    6cc4:	433a      	orrs	r2, r7
    6cc6:	429c      	cmp	r4, r3
    6cc8:	dd00      	ble.n	6ccc <__aeabi_dsub+0x14c>
    6cca:	e0c0      	b.n	6e4e <__aeabi_dsub+0x2ce>
    6ccc:	1b1c      	subs	r4, r3, r4
    6cce:	1c63      	adds	r3, r4, #1
    6cd0:	2b1f      	cmp	r3, #31
    6cd2:	dd00      	ble.n	6cd6 <__aeabi_dsub+0x156>
    6cd4:	e0e4      	b.n	6ea0 <__aeabi_dsub+0x320>
    6cd6:	2120      	movs	r1, #32
    6cd8:	0014      	movs	r4, r2
    6cda:	0028      	movs	r0, r5
    6cdc:	1ac9      	subs	r1, r1, r3
    6cde:	40d8      	lsrs	r0, r3
    6ce0:	408c      	lsls	r4, r1
    6ce2:	408d      	lsls	r5, r1
    6ce4:	4304      	orrs	r4, r0
    6ce6:	40da      	lsrs	r2, r3
    6ce8:	1e68      	subs	r0, r5, #1
    6cea:	4185      	sbcs	r5, r0
    6cec:	0017      	movs	r7, r2
    6cee:	4325      	orrs	r5, r4
    6cf0:	2400      	movs	r4, #0
    6cf2:	e771      	b.n	6bd8 <__aeabi_dsub+0x58>
    6cf4:	4642      	mov	r2, r8
    6cf6:	4663      	mov	r3, ip
    6cf8:	431a      	orrs	r2, r3
    6cfa:	d100      	bne.n	6cfe <__aeabi_dsub+0x17e>
    6cfc:	e24c      	b.n	7198 <__aeabi_dsub+0x618>
    6cfe:	4667      	mov	r7, ip
    6d00:	4645      	mov	r5, r8
    6d02:	076b      	lsls	r3, r5, #29
    6d04:	d000      	beq.n	6d08 <__aeabi_dsub+0x188>
    6d06:	e769      	b.n	6bdc <__aeabi_dsub+0x5c>
    6d08:	2301      	movs	r3, #1
    6d0a:	4651      	mov	r1, sl
    6d0c:	0778      	lsls	r0, r7, #29
    6d0e:	08ed      	lsrs	r5, r5, #3
    6d10:	08fa      	lsrs	r2, r7, #3
    6d12:	400b      	ands	r3, r1
    6d14:	4305      	orrs	r5, r0
    6d16:	4973      	ldr	r1, [pc, #460]	; (6ee4 <__aeabi_dsub+0x364>)
    6d18:	428c      	cmp	r4, r1
    6d1a:	d038      	beq.n	6d8e <__aeabi_dsub+0x20e>
    6d1c:	0312      	lsls	r2, r2, #12
    6d1e:	0564      	lsls	r4, r4, #21
    6d20:	0b12      	lsrs	r2, r2, #12
    6d22:	0d64      	lsrs	r4, r4, #21
    6d24:	e779      	b.n	6c1a <__aeabi_dsub+0x9a>
    6d26:	2e00      	cmp	r6, #0
    6d28:	dc00      	bgt.n	6d2c <__aeabi_dsub+0x1ac>
    6d2a:	e09a      	b.n	6e62 <__aeabi_dsub+0x2e2>
    6d2c:	2a00      	cmp	r2, #0
    6d2e:	d047      	beq.n	6dc0 <__aeabi_dsub+0x240>
    6d30:	4a6c      	ldr	r2, [pc, #432]	; (6ee4 <__aeabi_dsub+0x364>)
    6d32:	4294      	cmp	r4, r2
    6d34:	d100      	bne.n	6d38 <__aeabi_dsub+0x1b8>
    6d36:	e74f      	b.n	6bd8 <__aeabi_dsub+0x58>
    6d38:	2280      	movs	r2, #128	; 0x80
    6d3a:	0412      	lsls	r2, r2, #16
    6d3c:	4310      	orrs	r0, r2
    6d3e:	4662      	mov	r2, ip
    6d40:	2a38      	cmp	r2, #56	; 0x38
    6d42:	dc00      	bgt.n	6d46 <__aeabi_dsub+0x1c6>
    6d44:	e108      	b.n	6f58 <__aeabi_dsub+0x3d8>
    6d46:	4301      	orrs	r1, r0
    6d48:	1e48      	subs	r0, r1, #1
    6d4a:	4181      	sbcs	r1, r0
    6d4c:	2200      	movs	r2, #0
    6d4e:	b2c9      	uxtb	r1, r1
    6d50:	1949      	adds	r1, r1, r5
    6d52:	19d2      	adds	r2, r2, r7
    6d54:	42a9      	cmp	r1, r5
    6d56:	41bf      	sbcs	r7, r7
    6d58:	000d      	movs	r5, r1
    6d5a:	427f      	negs	r7, r7
    6d5c:	18bf      	adds	r7, r7, r2
    6d5e:	023a      	lsls	r2, r7, #8
    6d60:	d400      	bmi.n	6d64 <__aeabi_dsub+0x1e4>
    6d62:	e142      	b.n	6fea <__aeabi_dsub+0x46a>
    6d64:	4a5f      	ldr	r2, [pc, #380]	; (6ee4 <__aeabi_dsub+0x364>)
    6d66:	3401      	adds	r4, #1
    6d68:	4294      	cmp	r4, r2
    6d6a:	d100      	bne.n	6d6e <__aeabi_dsub+0x1ee>
    6d6c:	e14e      	b.n	700c <__aeabi_dsub+0x48c>
    6d6e:	2001      	movs	r0, #1
    6d70:	4a5d      	ldr	r2, [pc, #372]	; (6ee8 <__aeabi_dsub+0x368>)
    6d72:	0869      	lsrs	r1, r5, #1
    6d74:	403a      	ands	r2, r7
    6d76:	4028      	ands	r0, r5
    6d78:	4308      	orrs	r0, r1
    6d7a:	07d5      	lsls	r5, r2, #31
    6d7c:	4305      	orrs	r5, r0
    6d7e:	0857      	lsrs	r7, r2, #1
    6d80:	469a      	mov	sl, r3
    6d82:	e729      	b.n	6bd8 <__aeabi_dsub+0x58>
    6d84:	0006      	movs	r6, r0
    6d86:	430e      	orrs	r6, r1
    6d88:	d000      	beq.n	6d8c <__aeabi_dsub+0x20c>
    6d8a:	e717      	b.n	6bbc <__aeabi_dsub+0x3c>
    6d8c:	e714      	b.n	6bb8 <__aeabi_dsub+0x38>
    6d8e:	0029      	movs	r1, r5
    6d90:	4311      	orrs	r1, r2
    6d92:	d100      	bne.n	6d96 <__aeabi_dsub+0x216>
    6d94:	e1f9      	b.n	718a <__aeabi_dsub+0x60a>
    6d96:	2180      	movs	r1, #128	; 0x80
    6d98:	0309      	lsls	r1, r1, #12
    6d9a:	430a      	orrs	r2, r1
    6d9c:	0312      	lsls	r2, r2, #12
    6d9e:	0b12      	lsrs	r2, r2, #12
    6da0:	e73b      	b.n	6c1a <__aeabi_dsub+0x9a>
    6da2:	2301      	movs	r3, #1
    6da4:	425b      	negs	r3, r3
    6da6:	4698      	mov	r8, r3
    6da8:	44c4      	add	ip, r8
    6daa:	4663      	mov	r3, ip
    6dac:	2b00      	cmp	r3, #0
    6dae:	d172      	bne.n	6e96 <__aeabi_dsub+0x316>
    6db0:	1a69      	subs	r1, r5, r1
    6db2:	428d      	cmp	r5, r1
    6db4:	419b      	sbcs	r3, r3
    6db6:	1a3f      	subs	r7, r7, r0
    6db8:	425b      	negs	r3, r3
    6dba:	1aff      	subs	r7, r7, r3
    6dbc:	000d      	movs	r5, r1
    6dbe:	e768      	b.n	6c92 <__aeabi_dsub+0x112>
    6dc0:	0002      	movs	r2, r0
    6dc2:	430a      	orrs	r2, r1
    6dc4:	d100      	bne.n	6dc8 <__aeabi_dsub+0x248>
    6dc6:	e707      	b.n	6bd8 <__aeabi_dsub+0x58>
    6dc8:	2201      	movs	r2, #1
    6dca:	4252      	negs	r2, r2
    6dcc:	4690      	mov	r8, r2
    6dce:	44c4      	add	ip, r8
    6dd0:	4662      	mov	r2, ip
    6dd2:	2a00      	cmp	r2, #0
    6dd4:	d000      	beq.n	6dd8 <__aeabi_dsub+0x258>
    6dd6:	e0e6      	b.n	6fa6 <__aeabi_dsub+0x426>
    6dd8:	1869      	adds	r1, r5, r1
    6dda:	42a9      	cmp	r1, r5
    6ddc:	41b6      	sbcs	r6, r6
    6dde:	183f      	adds	r7, r7, r0
    6de0:	4276      	negs	r6, r6
    6de2:	19f7      	adds	r7, r6, r7
    6de4:	000d      	movs	r5, r1
    6de6:	e7ba      	b.n	6d5e <__aeabi_dsub+0x1de>
    6de8:	2e00      	cmp	r6, #0
    6dea:	d000      	beq.n	6dee <__aeabi_dsub+0x26e>
    6dec:	e080      	b.n	6ef0 <__aeabi_dsub+0x370>
    6dee:	1c62      	adds	r2, r4, #1
    6df0:	0552      	lsls	r2, r2, #21
    6df2:	0d52      	lsrs	r2, r2, #21
    6df4:	2a01      	cmp	r2, #1
    6df6:	dc00      	bgt.n	6dfa <__aeabi_dsub+0x27a>
    6df8:	e0f9      	b.n	6fee <__aeabi_dsub+0x46e>
    6dfa:	1a6a      	subs	r2, r5, r1
    6dfc:	4691      	mov	r9, r2
    6dfe:	454d      	cmp	r5, r9
    6e00:	41b6      	sbcs	r6, r6
    6e02:	1a3a      	subs	r2, r7, r0
    6e04:	4276      	negs	r6, r6
    6e06:	1b92      	subs	r2, r2, r6
    6e08:	4690      	mov	r8, r2
    6e0a:	0212      	lsls	r2, r2, #8
    6e0c:	d400      	bmi.n	6e10 <__aeabi_dsub+0x290>
    6e0e:	e099      	b.n	6f44 <__aeabi_dsub+0x3c4>
    6e10:	1b4d      	subs	r5, r1, r5
    6e12:	42a9      	cmp	r1, r5
    6e14:	4189      	sbcs	r1, r1
    6e16:	1bc7      	subs	r7, r0, r7
    6e18:	4249      	negs	r1, r1
    6e1a:	1a7a      	subs	r2, r7, r1
    6e1c:	4690      	mov	r8, r2
    6e1e:	469a      	mov	sl, r3
    6e20:	e73c      	b.n	6c9c <__aeabi_dsub+0x11c>
    6e22:	4652      	mov	r2, sl
    6e24:	2301      	movs	r3, #1
    6e26:	2500      	movs	r5, #0
    6e28:	4013      	ands	r3, r2
    6e2a:	2200      	movs	r2, #0
    6e2c:	e6f5      	b.n	6c1a <__aeabi_dsub+0x9a>
    6e2e:	0028      	movs	r0, r5
    6e30:	f000 fa72 	bl	7318 <__clzsi2>
    6e34:	3020      	adds	r0, #32
    6e36:	0003      	movs	r3, r0
    6e38:	3b08      	subs	r3, #8
    6e3a:	2b1f      	cmp	r3, #31
    6e3c:	dc00      	bgt.n	6e40 <__aeabi_dsub+0x2c0>
    6e3e:	e739      	b.n	6cb4 <__aeabi_dsub+0x134>
    6e40:	002a      	movs	r2, r5
    6e42:	3828      	subs	r0, #40	; 0x28
    6e44:	4082      	lsls	r2, r0
    6e46:	2500      	movs	r5, #0
    6e48:	429c      	cmp	r4, r3
    6e4a:	dc00      	bgt.n	6e4e <__aeabi_dsub+0x2ce>
    6e4c:	e73e      	b.n	6ccc <__aeabi_dsub+0x14c>
    6e4e:	4f26      	ldr	r7, [pc, #152]	; (6ee8 <__aeabi_dsub+0x368>)
    6e50:	1ae4      	subs	r4, r4, r3
    6e52:	4017      	ands	r7, r2
    6e54:	e6c0      	b.n	6bd8 <__aeabi_dsub+0x58>
    6e56:	4301      	orrs	r1, r0
    6e58:	1e48      	subs	r0, r1, #1
    6e5a:	4181      	sbcs	r1, r0
    6e5c:	2200      	movs	r2, #0
    6e5e:	b2c9      	uxtb	r1, r1
    6e60:	e710      	b.n	6c84 <__aeabi_dsub+0x104>
    6e62:	2e00      	cmp	r6, #0
    6e64:	d000      	beq.n	6e68 <__aeabi_dsub+0x2e8>
    6e66:	e0f1      	b.n	704c <__aeabi_dsub+0x4cc>
    6e68:	1c62      	adds	r2, r4, #1
    6e6a:	4694      	mov	ip, r2
    6e6c:	0552      	lsls	r2, r2, #21
    6e6e:	0d52      	lsrs	r2, r2, #21
    6e70:	2a01      	cmp	r2, #1
    6e72:	dc00      	bgt.n	6e76 <__aeabi_dsub+0x2f6>
    6e74:	e0a0      	b.n	6fb8 <__aeabi_dsub+0x438>
    6e76:	4a1b      	ldr	r2, [pc, #108]	; (6ee4 <__aeabi_dsub+0x364>)
    6e78:	4594      	cmp	ip, r2
    6e7a:	d100      	bne.n	6e7e <__aeabi_dsub+0x2fe>
    6e7c:	e0c5      	b.n	700a <__aeabi_dsub+0x48a>
    6e7e:	1869      	adds	r1, r5, r1
    6e80:	42a9      	cmp	r1, r5
    6e82:	4192      	sbcs	r2, r2
    6e84:	183f      	adds	r7, r7, r0
    6e86:	4252      	negs	r2, r2
    6e88:	19d2      	adds	r2, r2, r7
    6e8a:	0849      	lsrs	r1, r1, #1
    6e8c:	07d5      	lsls	r5, r2, #31
    6e8e:	430d      	orrs	r5, r1
    6e90:	0857      	lsrs	r7, r2, #1
    6e92:	4664      	mov	r4, ip
    6e94:	e6a0      	b.n	6bd8 <__aeabi_dsub+0x58>
    6e96:	4b13      	ldr	r3, [pc, #76]	; (6ee4 <__aeabi_dsub+0x364>)
    6e98:	429c      	cmp	r4, r3
    6e9a:	d000      	beq.n	6e9e <__aeabi_dsub+0x31e>
    6e9c:	e6d9      	b.n	6c52 <__aeabi_dsub+0xd2>
    6e9e:	e69b      	b.n	6bd8 <__aeabi_dsub+0x58>
    6ea0:	0011      	movs	r1, r2
    6ea2:	3c1f      	subs	r4, #31
    6ea4:	40e1      	lsrs	r1, r4
    6ea6:	000c      	movs	r4, r1
    6ea8:	2b20      	cmp	r3, #32
    6eaa:	d100      	bne.n	6eae <__aeabi_dsub+0x32e>
    6eac:	e080      	b.n	6fb0 <__aeabi_dsub+0x430>
    6eae:	2140      	movs	r1, #64	; 0x40
    6eb0:	1acb      	subs	r3, r1, r3
    6eb2:	409a      	lsls	r2, r3
    6eb4:	4315      	orrs	r5, r2
    6eb6:	1e6a      	subs	r2, r5, #1
    6eb8:	4195      	sbcs	r5, r2
    6eba:	2700      	movs	r7, #0
    6ebc:	4325      	orrs	r5, r4
    6ebe:	2400      	movs	r4, #0
    6ec0:	e71f      	b.n	6d02 <__aeabi_dsub+0x182>
    6ec2:	4663      	mov	r3, ip
    6ec4:	0002      	movs	r2, r0
    6ec6:	3b20      	subs	r3, #32
    6ec8:	40da      	lsrs	r2, r3
    6eca:	4663      	mov	r3, ip
    6ecc:	2b20      	cmp	r3, #32
    6ece:	d071      	beq.n	6fb4 <__aeabi_dsub+0x434>
    6ed0:	2340      	movs	r3, #64	; 0x40
    6ed2:	4666      	mov	r6, ip
    6ed4:	1b9b      	subs	r3, r3, r6
    6ed6:	4098      	lsls	r0, r3
    6ed8:	4301      	orrs	r1, r0
    6eda:	1e48      	subs	r0, r1, #1
    6edc:	4181      	sbcs	r1, r0
    6ede:	4311      	orrs	r1, r2
    6ee0:	2200      	movs	r2, #0
    6ee2:	e6cf      	b.n	6c84 <__aeabi_dsub+0x104>
    6ee4:	000007ff 	.word	0x000007ff
    6ee8:	ff7fffff 	.word	0xff7fffff
    6eec:	800fffff 	.word	0x800fffff
    6ef0:	2c00      	cmp	r4, #0
    6ef2:	d048      	beq.n	6f86 <__aeabi_dsub+0x406>
    6ef4:	4cca      	ldr	r4, [pc, #808]	; (7220 <__aeabi_dsub+0x6a0>)
    6ef6:	42a2      	cmp	r2, r4
    6ef8:	d100      	bne.n	6efc <__aeabi_dsub+0x37c>
    6efa:	e0a2      	b.n	7042 <__aeabi_dsub+0x4c2>
    6efc:	4274      	negs	r4, r6
    6efe:	46a1      	mov	r9, r4
    6f00:	2480      	movs	r4, #128	; 0x80
    6f02:	0424      	lsls	r4, r4, #16
    6f04:	4327      	orrs	r7, r4
    6f06:	464c      	mov	r4, r9
    6f08:	2c38      	cmp	r4, #56	; 0x38
    6f0a:	dd00      	ble.n	6f0e <__aeabi_dsub+0x38e>
    6f0c:	e0db      	b.n	70c6 <__aeabi_dsub+0x546>
    6f0e:	2c1f      	cmp	r4, #31
    6f10:	dd00      	ble.n	6f14 <__aeabi_dsub+0x394>
    6f12:	e144      	b.n	719e <__aeabi_dsub+0x61e>
    6f14:	464e      	mov	r6, r9
    6f16:	2420      	movs	r4, #32
    6f18:	1ba4      	subs	r4, r4, r6
    6f1a:	003e      	movs	r6, r7
    6f1c:	40a6      	lsls	r6, r4
    6f1e:	46a2      	mov	sl, r4
    6f20:	46b0      	mov	r8, r6
    6f22:	464c      	mov	r4, r9
    6f24:	002e      	movs	r6, r5
    6f26:	40e6      	lsrs	r6, r4
    6f28:	46b4      	mov	ip, r6
    6f2a:	4646      	mov	r6, r8
    6f2c:	4664      	mov	r4, ip
    6f2e:	4326      	orrs	r6, r4
    6f30:	4654      	mov	r4, sl
    6f32:	40a5      	lsls	r5, r4
    6f34:	1e6c      	subs	r4, r5, #1
    6f36:	41a5      	sbcs	r5, r4
    6f38:	0034      	movs	r4, r6
    6f3a:	432c      	orrs	r4, r5
    6f3c:	464d      	mov	r5, r9
    6f3e:	40ef      	lsrs	r7, r5
    6f40:	1b0d      	subs	r5, r1, r4
    6f42:	e028      	b.n	6f96 <__aeabi_dsub+0x416>
    6f44:	464a      	mov	r2, r9
    6f46:	4643      	mov	r3, r8
    6f48:	464d      	mov	r5, r9
    6f4a:	431a      	orrs	r2, r3
    6f4c:	d000      	beq.n	6f50 <__aeabi_dsub+0x3d0>
    6f4e:	e6a5      	b.n	6c9c <__aeabi_dsub+0x11c>
    6f50:	2300      	movs	r3, #0
    6f52:	2400      	movs	r4, #0
    6f54:	2500      	movs	r5, #0
    6f56:	e6de      	b.n	6d16 <__aeabi_dsub+0x196>
    6f58:	2a1f      	cmp	r2, #31
    6f5a:	dc5a      	bgt.n	7012 <__aeabi_dsub+0x492>
    6f5c:	4666      	mov	r6, ip
    6f5e:	2220      	movs	r2, #32
    6f60:	1b92      	subs	r2, r2, r6
    6f62:	0006      	movs	r6, r0
    6f64:	4096      	lsls	r6, r2
    6f66:	4691      	mov	r9, r2
    6f68:	46b0      	mov	r8, r6
    6f6a:	4662      	mov	r2, ip
    6f6c:	000e      	movs	r6, r1
    6f6e:	40d6      	lsrs	r6, r2
    6f70:	4642      	mov	r2, r8
    6f72:	4316      	orrs	r6, r2
    6f74:	464a      	mov	r2, r9
    6f76:	4091      	lsls	r1, r2
    6f78:	1e4a      	subs	r2, r1, #1
    6f7a:	4191      	sbcs	r1, r2
    6f7c:	0002      	movs	r2, r0
    6f7e:	4660      	mov	r0, ip
    6f80:	4331      	orrs	r1, r6
    6f82:	40c2      	lsrs	r2, r0
    6f84:	e6e4      	b.n	6d50 <__aeabi_dsub+0x1d0>
    6f86:	003c      	movs	r4, r7
    6f88:	432c      	orrs	r4, r5
    6f8a:	d05a      	beq.n	7042 <__aeabi_dsub+0x4c2>
    6f8c:	43f4      	mvns	r4, r6
    6f8e:	46a1      	mov	r9, r4
    6f90:	2c00      	cmp	r4, #0
    6f92:	d152      	bne.n	703a <__aeabi_dsub+0x4ba>
    6f94:	1b4d      	subs	r5, r1, r5
    6f96:	42a9      	cmp	r1, r5
    6f98:	4189      	sbcs	r1, r1
    6f9a:	1bc7      	subs	r7, r0, r7
    6f9c:	4249      	negs	r1, r1
    6f9e:	1a7f      	subs	r7, r7, r1
    6fa0:	0014      	movs	r4, r2
    6fa2:	469a      	mov	sl, r3
    6fa4:	e675      	b.n	6c92 <__aeabi_dsub+0x112>
    6fa6:	4a9e      	ldr	r2, [pc, #632]	; (7220 <__aeabi_dsub+0x6a0>)
    6fa8:	4294      	cmp	r4, r2
    6faa:	d000      	beq.n	6fae <__aeabi_dsub+0x42e>
    6fac:	e6c7      	b.n	6d3e <__aeabi_dsub+0x1be>
    6fae:	e613      	b.n	6bd8 <__aeabi_dsub+0x58>
    6fb0:	2200      	movs	r2, #0
    6fb2:	e77f      	b.n	6eb4 <__aeabi_dsub+0x334>
    6fb4:	2000      	movs	r0, #0
    6fb6:	e78f      	b.n	6ed8 <__aeabi_dsub+0x358>
    6fb8:	2c00      	cmp	r4, #0
    6fba:	d000      	beq.n	6fbe <__aeabi_dsub+0x43e>
    6fbc:	e0c8      	b.n	7150 <__aeabi_dsub+0x5d0>
    6fbe:	003b      	movs	r3, r7
    6fc0:	432b      	orrs	r3, r5
    6fc2:	d100      	bne.n	6fc6 <__aeabi_dsub+0x446>
    6fc4:	e10f      	b.n	71e6 <__aeabi_dsub+0x666>
    6fc6:	0003      	movs	r3, r0
    6fc8:	430b      	orrs	r3, r1
    6fca:	d100      	bne.n	6fce <__aeabi_dsub+0x44e>
    6fcc:	e604      	b.n	6bd8 <__aeabi_dsub+0x58>
    6fce:	1869      	adds	r1, r5, r1
    6fd0:	42a9      	cmp	r1, r5
    6fd2:	419b      	sbcs	r3, r3
    6fd4:	183f      	adds	r7, r7, r0
    6fd6:	425b      	negs	r3, r3
    6fd8:	19df      	adds	r7, r3, r7
    6fda:	023b      	lsls	r3, r7, #8
    6fdc:	d400      	bmi.n	6fe0 <__aeabi_dsub+0x460>
    6fde:	e11a      	b.n	7216 <__aeabi_dsub+0x696>
    6fe0:	4b90      	ldr	r3, [pc, #576]	; (7224 <__aeabi_dsub+0x6a4>)
    6fe2:	000d      	movs	r5, r1
    6fe4:	401f      	ands	r7, r3
    6fe6:	4664      	mov	r4, ip
    6fe8:	e5f6      	b.n	6bd8 <__aeabi_dsub+0x58>
    6fea:	469a      	mov	sl, r3
    6fec:	e689      	b.n	6d02 <__aeabi_dsub+0x182>
    6fee:	003a      	movs	r2, r7
    6ff0:	432a      	orrs	r2, r5
    6ff2:	2c00      	cmp	r4, #0
    6ff4:	d15c      	bne.n	70b0 <__aeabi_dsub+0x530>
    6ff6:	2a00      	cmp	r2, #0
    6ff8:	d175      	bne.n	70e6 <__aeabi_dsub+0x566>
    6ffa:	0002      	movs	r2, r0
    6ffc:	430a      	orrs	r2, r1
    6ffe:	d100      	bne.n	7002 <__aeabi_dsub+0x482>
    7000:	e0ca      	b.n	7198 <__aeabi_dsub+0x618>
    7002:	0007      	movs	r7, r0
    7004:	000d      	movs	r5, r1
    7006:	469a      	mov	sl, r3
    7008:	e5e6      	b.n	6bd8 <__aeabi_dsub+0x58>
    700a:	4664      	mov	r4, ip
    700c:	2200      	movs	r2, #0
    700e:	2500      	movs	r5, #0
    7010:	e681      	b.n	6d16 <__aeabi_dsub+0x196>
    7012:	4662      	mov	r2, ip
    7014:	0006      	movs	r6, r0
    7016:	3a20      	subs	r2, #32
    7018:	40d6      	lsrs	r6, r2
    701a:	4662      	mov	r2, ip
    701c:	46b0      	mov	r8, r6
    701e:	2a20      	cmp	r2, #32
    7020:	d100      	bne.n	7024 <__aeabi_dsub+0x4a4>
    7022:	e0b7      	b.n	7194 <__aeabi_dsub+0x614>
    7024:	2240      	movs	r2, #64	; 0x40
    7026:	4666      	mov	r6, ip
    7028:	1b92      	subs	r2, r2, r6
    702a:	4090      	lsls	r0, r2
    702c:	4301      	orrs	r1, r0
    702e:	4642      	mov	r2, r8
    7030:	1e48      	subs	r0, r1, #1
    7032:	4181      	sbcs	r1, r0
    7034:	4311      	orrs	r1, r2
    7036:	2200      	movs	r2, #0
    7038:	e68a      	b.n	6d50 <__aeabi_dsub+0x1d0>
    703a:	4c79      	ldr	r4, [pc, #484]	; (7220 <__aeabi_dsub+0x6a0>)
    703c:	42a2      	cmp	r2, r4
    703e:	d000      	beq.n	7042 <__aeabi_dsub+0x4c2>
    7040:	e761      	b.n	6f06 <__aeabi_dsub+0x386>
    7042:	0007      	movs	r7, r0
    7044:	000d      	movs	r5, r1
    7046:	0014      	movs	r4, r2
    7048:	469a      	mov	sl, r3
    704a:	e5c5      	b.n	6bd8 <__aeabi_dsub+0x58>
    704c:	2c00      	cmp	r4, #0
    704e:	d141      	bne.n	70d4 <__aeabi_dsub+0x554>
    7050:	003c      	movs	r4, r7
    7052:	432c      	orrs	r4, r5
    7054:	d078      	beq.n	7148 <__aeabi_dsub+0x5c8>
    7056:	43f4      	mvns	r4, r6
    7058:	46a1      	mov	r9, r4
    705a:	2c00      	cmp	r4, #0
    705c:	d020      	beq.n	70a0 <__aeabi_dsub+0x520>
    705e:	4c70      	ldr	r4, [pc, #448]	; (7220 <__aeabi_dsub+0x6a0>)
    7060:	42a2      	cmp	r2, r4
    7062:	d071      	beq.n	7148 <__aeabi_dsub+0x5c8>
    7064:	464c      	mov	r4, r9
    7066:	2c38      	cmp	r4, #56	; 0x38
    7068:	dd00      	ble.n	706c <__aeabi_dsub+0x4ec>
    706a:	e0b2      	b.n	71d2 <__aeabi_dsub+0x652>
    706c:	2c1f      	cmp	r4, #31
    706e:	dd00      	ble.n	7072 <__aeabi_dsub+0x4f2>
    7070:	e0bc      	b.n	71ec <__aeabi_dsub+0x66c>
    7072:	2620      	movs	r6, #32
    7074:	1b34      	subs	r4, r6, r4
    7076:	46a2      	mov	sl, r4
    7078:	003c      	movs	r4, r7
    707a:	4656      	mov	r6, sl
    707c:	40b4      	lsls	r4, r6
    707e:	464e      	mov	r6, r9
    7080:	46a0      	mov	r8, r4
    7082:	002c      	movs	r4, r5
    7084:	40f4      	lsrs	r4, r6
    7086:	46a4      	mov	ip, r4
    7088:	4644      	mov	r4, r8
    708a:	4666      	mov	r6, ip
    708c:	4334      	orrs	r4, r6
    708e:	46a4      	mov	ip, r4
    7090:	4654      	mov	r4, sl
    7092:	40a5      	lsls	r5, r4
    7094:	4664      	mov	r4, ip
    7096:	1e6e      	subs	r6, r5, #1
    7098:	41b5      	sbcs	r5, r6
    709a:	4325      	orrs	r5, r4
    709c:	464c      	mov	r4, r9
    709e:	40e7      	lsrs	r7, r4
    70a0:	186d      	adds	r5, r5, r1
    70a2:	428d      	cmp	r5, r1
    70a4:	4189      	sbcs	r1, r1
    70a6:	183f      	adds	r7, r7, r0
    70a8:	4249      	negs	r1, r1
    70aa:	19cf      	adds	r7, r1, r7
    70ac:	0014      	movs	r4, r2
    70ae:	e656      	b.n	6d5e <__aeabi_dsub+0x1de>
    70b0:	2a00      	cmp	r2, #0
    70b2:	d12f      	bne.n	7114 <__aeabi_dsub+0x594>
    70b4:	0002      	movs	r2, r0
    70b6:	430a      	orrs	r2, r1
    70b8:	d100      	bne.n	70bc <__aeabi_dsub+0x53c>
    70ba:	e084      	b.n	71c6 <__aeabi_dsub+0x646>
    70bc:	0007      	movs	r7, r0
    70be:	000d      	movs	r5, r1
    70c0:	469a      	mov	sl, r3
    70c2:	4c57      	ldr	r4, [pc, #348]	; (7220 <__aeabi_dsub+0x6a0>)
    70c4:	e588      	b.n	6bd8 <__aeabi_dsub+0x58>
    70c6:	433d      	orrs	r5, r7
    70c8:	1e6f      	subs	r7, r5, #1
    70ca:	41bd      	sbcs	r5, r7
    70cc:	b2ec      	uxtb	r4, r5
    70ce:	2700      	movs	r7, #0
    70d0:	1b0d      	subs	r5, r1, r4
    70d2:	e760      	b.n	6f96 <__aeabi_dsub+0x416>
    70d4:	4c52      	ldr	r4, [pc, #328]	; (7220 <__aeabi_dsub+0x6a0>)
    70d6:	42a2      	cmp	r2, r4
    70d8:	d036      	beq.n	7148 <__aeabi_dsub+0x5c8>
    70da:	4274      	negs	r4, r6
    70dc:	2680      	movs	r6, #128	; 0x80
    70de:	0436      	lsls	r6, r6, #16
    70e0:	46a1      	mov	r9, r4
    70e2:	4337      	orrs	r7, r6
    70e4:	e7be      	b.n	7064 <__aeabi_dsub+0x4e4>
    70e6:	0002      	movs	r2, r0
    70e8:	430a      	orrs	r2, r1
    70ea:	d100      	bne.n	70ee <__aeabi_dsub+0x56e>
    70ec:	e574      	b.n	6bd8 <__aeabi_dsub+0x58>
    70ee:	1a6a      	subs	r2, r5, r1
    70f0:	4690      	mov	r8, r2
    70f2:	4545      	cmp	r5, r8
    70f4:	41b6      	sbcs	r6, r6
    70f6:	1a3a      	subs	r2, r7, r0
    70f8:	4276      	negs	r6, r6
    70fa:	1b92      	subs	r2, r2, r6
    70fc:	4694      	mov	ip, r2
    70fe:	0212      	lsls	r2, r2, #8
    7100:	d400      	bmi.n	7104 <__aeabi_dsub+0x584>
    7102:	e5f7      	b.n	6cf4 <__aeabi_dsub+0x174>
    7104:	1b4d      	subs	r5, r1, r5
    7106:	42a9      	cmp	r1, r5
    7108:	4189      	sbcs	r1, r1
    710a:	1bc7      	subs	r7, r0, r7
    710c:	4249      	negs	r1, r1
    710e:	1a7f      	subs	r7, r7, r1
    7110:	469a      	mov	sl, r3
    7112:	e561      	b.n	6bd8 <__aeabi_dsub+0x58>
    7114:	0002      	movs	r2, r0
    7116:	430a      	orrs	r2, r1
    7118:	d03a      	beq.n	7190 <__aeabi_dsub+0x610>
    711a:	08ed      	lsrs	r5, r5, #3
    711c:	077c      	lsls	r4, r7, #29
    711e:	432c      	orrs	r4, r5
    7120:	2580      	movs	r5, #128	; 0x80
    7122:	08fa      	lsrs	r2, r7, #3
    7124:	032d      	lsls	r5, r5, #12
    7126:	422a      	tst	r2, r5
    7128:	d008      	beq.n	713c <__aeabi_dsub+0x5bc>
    712a:	08c7      	lsrs	r7, r0, #3
    712c:	422f      	tst	r7, r5
    712e:	d105      	bne.n	713c <__aeabi_dsub+0x5bc>
    7130:	0745      	lsls	r5, r0, #29
    7132:	002c      	movs	r4, r5
    7134:	003a      	movs	r2, r7
    7136:	469a      	mov	sl, r3
    7138:	08c9      	lsrs	r1, r1, #3
    713a:	430c      	orrs	r4, r1
    713c:	0f67      	lsrs	r7, r4, #29
    713e:	00d2      	lsls	r2, r2, #3
    7140:	00e5      	lsls	r5, r4, #3
    7142:	4317      	orrs	r7, r2
    7144:	4c36      	ldr	r4, [pc, #216]	; (7220 <__aeabi_dsub+0x6a0>)
    7146:	e547      	b.n	6bd8 <__aeabi_dsub+0x58>
    7148:	0007      	movs	r7, r0
    714a:	000d      	movs	r5, r1
    714c:	0014      	movs	r4, r2
    714e:	e543      	b.n	6bd8 <__aeabi_dsub+0x58>
    7150:	003a      	movs	r2, r7
    7152:	432a      	orrs	r2, r5
    7154:	d043      	beq.n	71de <__aeabi_dsub+0x65e>
    7156:	0002      	movs	r2, r0
    7158:	430a      	orrs	r2, r1
    715a:	d019      	beq.n	7190 <__aeabi_dsub+0x610>
    715c:	08ed      	lsrs	r5, r5, #3
    715e:	077c      	lsls	r4, r7, #29
    7160:	432c      	orrs	r4, r5
    7162:	2580      	movs	r5, #128	; 0x80
    7164:	08fa      	lsrs	r2, r7, #3
    7166:	032d      	lsls	r5, r5, #12
    7168:	422a      	tst	r2, r5
    716a:	d007      	beq.n	717c <__aeabi_dsub+0x5fc>
    716c:	08c6      	lsrs	r6, r0, #3
    716e:	422e      	tst	r6, r5
    7170:	d104      	bne.n	717c <__aeabi_dsub+0x5fc>
    7172:	0747      	lsls	r7, r0, #29
    7174:	003c      	movs	r4, r7
    7176:	0032      	movs	r2, r6
    7178:	08c9      	lsrs	r1, r1, #3
    717a:	430c      	orrs	r4, r1
    717c:	00d7      	lsls	r7, r2, #3
    717e:	0f62      	lsrs	r2, r4, #29
    7180:	00e5      	lsls	r5, r4, #3
    7182:	4317      	orrs	r7, r2
    7184:	469a      	mov	sl, r3
    7186:	4c26      	ldr	r4, [pc, #152]	; (7220 <__aeabi_dsub+0x6a0>)
    7188:	e526      	b.n	6bd8 <__aeabi_dsub+0x58>
    718a:	2200      	movs	r2, #0
    718c:	2500      	movs	r5, #0
    718e:	e544      	b.n	6c1a <__aeabi_dsub+0x9a>
    7190:	4c23      	ldr	r4, [pc, #140]	; (7220 <__aeabi_dsub+0x6a0>)
    7192:	e521      	b.n	6bd8 <__aeabi_dsub+0x58>
    7194:	2000      	movs	r0, #0
    7196:	e749      	b.n	702c <__aeabi_dsub+0x4ac>
    7198:	2300      	movs	r3, #0
    719a:	2500      	movs	r5, #0
    719c:	e5bb      	b.n	6d16 <__aeabi_dsub+0x196>
    719e:	464c      	mov	r4, r9
    71a0:	003e      	movs	r6, r7
    71a2:	3c20      	subs	r4, #32
    71a4:	40e6      	lsrs	r6, r4
    71a6:	464c      	mov	r4, r9
    71a8:	46b4      	mov	ip, r6
    71aa:	2c20      	cmp	r4, #32
    71ac:	d031      	beq.n	7212 <__aeabi_dsub+0x692>
    71ae:	2440      	movs	r4, #64	; 0x40
    71b0:	464e      	mov	r6, r9
    71b2:	1ba6      	subs	r6, r4, r6
    71b4:	40b7      	lsls	r7, r6
    71b6:	433d      	orrs	r5, r7
    71b8:	1e6c      	subs	r4, r5, #1
    71ba:	41a5      	sbcs	r5, r4
    71bc:	4664      	mov	r4, ip
    71be:	432c      	orrs	r4, r5
    71c0:	2700      	movs	r7, #0
    71c2:	1b0d      	subs	r5, r1, r4
    71c4:	e6e7      	b.n	6f96 <__aeabi_dsub+0x416>
    71c6:	2280      	movs	r2, #128	; 0x80
    71c8:	2300      	movs	r3, #0
    71ca:	0312      	lsls	r2, r2, #12
    71cc:	4c14      	ldr	r4, [pc, #80]	; (7220 <__aeabi_dsub+0x6a0>)
    71ce:	2500      	movs	r5, #0
    71d0:	e5a1      	b.n	6d16 <__aeabi_dsub+0x196>
    71d2:	433d      	orrs	r5, r7
    71d4:	1e6f      	subs	r7, r5, #1
    71d6:	41bd      	sbcs	r5, r7
    71d8:	2700      	movs	r7, #0
    71da:	b2ed      	uxtb	r5, r5
    71dc:	e760      	b.n	70a0 <__aeabi_dsub+0x520>
    71de:	0007      	movs	r7, r0
    71e0:	000d      	movs	r5, r1
    71e2:	4c0f      	ldr	r4, [pc, #60]	; (7220 <__aeabi_dsub+0x6a0>)
    71e4:	e4f8      	b.n	6bd8 <__aeabi_dsub+0x58>
    71e6:	0007      	movs	r7, r0
    71e8:	000d      	movs	r5, r1
    71ea:	e4f5      	b.n	6bd8 <__aeabi_dsub+0x58>
    71ec:	464e      	mov	r6, r9
    71ee:	003c      	movs	r4, r7
    71f0:	3e20      	subs	r6, #32
    71f2:	40f4      	lsrs	r4, r6
    71f4:	46a0      	mov	r8, r4
    71f6:	464c      	mov	r4, r9
    71f8:	2c20      	cmp	r4, #32
    71fa:	d00e      	beq.n	721a <__aeabi_dsub+0x69a>
    71fc:	2440      	movs	r4, #64	; 0x40
    71fe:	464e      	mov	r6, r9
    7200:	1ba4      	subs	r4, r4, r6
    7202:	40a7      	lsls	r7, r4
    7204:	433d      	orrs	r5, r7
    7206:	1e6f      	subs	r7, r5, #1
    7208:	41bd      	sbcs	r5, r7
    720a:	4644      	mov	r4, r8
    720c:	2700      	movs	r7, #0
    720e:	4325      	orrs	r5, r4
    7210:	e746      	b.n	70a0 <__aeabi_dsub+0x520>
    7212:	2700      	movs	r7, #0
    7214:	e7cf      	b.n	71b6 <__aeabi_dsub+0x636>
    7216:	000d      	movs	r5, r1
    7218:	e573      	b.n	6d02 <__aeabi_dsub+0x182>
    721a:	2700      	movs	r7, #0
    721c:	e7f2      	b.n	7204 <__aeabi_dsub+0x684>
    721e:	46c0      	nop			; (mov r8, r8)
    7220:	000007ff 	.word	0x000007ff
    7224:	ff7fffff 	.word	0xff7fffff

00007228 <__aeabi_d2iz>:
    7228:	030b      	lsls	r3, r1, #12
    722a:	b530      	push	{r4, r5, lr}
    722c:	4d13      	ldr	r5, [pc, #76]	; (727c <__aeabi_d2iz+0x54>)
    722e:	0b1a      	lsrs	r2, r3, #12
    7230:	004b      	lsls	r3, r1, #1
    7232:	0d5b      	lsrs	r3, r3, #21
    7234:	0fc9      	lsrs	r1, r1, #31
    7236:	2400      	movs	r4, #0
    7238:	42ab      	cmp	r3, r5
    723a:	dd11      	ble.n	7260 <__aeabi_d2iz+0x38>
    723c:	4c10      	ldr	r4, [pc, #64]	; (7280 <__aeabi_d2iz+0x58>)
    723e:	42a3      	cmp	r3, r4
    7240:	dc10      	bgt.n	7264 <__aeabi_d2iz+0x3c>
    7242:	2480      	movs	r4, #128	; 0x80
    7244:	0364      	lsls	r4, r4, #13
    7246:	4322      	orrs	r2, r4
    7248:	4c0e      	ldr	r4, [pc, #56]	; (7284 <__aeabi_d2iz+0x5c>)
    724a:	1ae4      	subs	r4, r4, r3
    724c:	2c1f      	cmp	r4, #31
    724e:	dd0c      	ble.n	726a <__aeabi_d2iz+0x42>
    7250:	480d      	ldr	r0, [pc, #52]	; (7288 <__aeabi_d2iz+0x60>)
    7252:	1ac3      	subs	r3, r0, r3
    7254:	40da      	lsrs	r2, r3
    7256:	0013      	movs	r3, r2
    7258:	425c      	negs	r4, r3
    725a:	2900      	cmp	r1, #0
    725c:	d100      	bne.n	7260 <__aeabi_d2iz+0x38>
    725e:	001c      	movs	r4, r3
    7260:	0020      	movs	r0, r4
    7262:	bd30      	pop	{r4, r5, pc}
    7264:	4b09      	ldr	r3, [pc, #36]	; (728c <__aeabi_d2iz+0x64>)
    7266:	18cc      	adds	r4, r1, r3
    7268:	e7fa      	b.n	7260 <__aeabi_d2iz+0x38>
    726a:	40e0      	lsrs	r0, r4
    726c:	4c08      	ldr	r4, [pc, #32]	; (7290 <__aeabi_d2iz+0x68>)
    726e:	46a4      	mov	ip, r4
    7270:	4463      	add	r3, ip
    7272:	409a      	lsls	r2, r3
    7274:	0013      	movs	r3, r2
    7276:	4303      	orrs	r3, r0
    7278:	e7ee      	b.n	7258 <__aeabi_d2iz+0x30>
    727a:	46c0      	nop			; (mov r8, r8)
    727c:	000003fe 	.word	0x000003fe
    7280:	0000041d 	.word	0x0000041d
    7284:	00000433 	.word	0x00000433
    7288:	00000413 	.word	0x00000413
    728c:	7fffffff 	.word	0x7fffffff
    7290:	fffffbed 	.word	0xfffffbed

00007294 <__aeabi_i2d>:
    7294:	b570      	push	{r4, r5, r6, lr}
    7296:	2800      	cmp	r0, #0
    7298:	d030      	beq.n	72fc <__aeabi_i2d+0x68>
    729a:	17c3      	asrs	r3, r0, #31
    729c:	18c4      	adds	r4, r0, r3
    729e:	405c      	eors	r4, r3
    72a0:	0fc5      	lsrs	r5, r0, #31
    72a2:	0020      	movs	r0, r4
    72a4:	f000 f838 	bl	7318 <__clzsi2>
    72a8:	4b17      	ldr	r3, [pc, #92]	; (7308 <__aeabi_i2d+0x74>)
    72aa:	4a18      	ldr	r2, [pc, #96]	; (730c <__aeabi_i2d+0x78>)
    72ac:	1a1b      	subs	r3, r3, r0
    72ae:	1ad2      	subs	r2, r2, r3
    72b0:	2a1f      	cmp	r2, #31
    72b2:	dd18      	ble.n	72e6 <__aeabi_i2d+0x52>
    72b4:	4a16      	ldr	r2, [pc, #88]	; (7310 <__aeabi_i2d+0x7c>)
    72b6:	1ad2      	subs	r2, r2, r3
    72b8:	4094      	lsls	r4, r2
    72ba:	2200      	movs	r2, #0
    72bc:	0324      	lsls	r4, r4, #12
    72be:	055b      	lsls	r3, r3, #21
    72c0:	0b24      	lsrs	r4, r4, #12
    72c2:	0d5b      	lsrs	r3, r3, #21
    72c4:	2100      	movs	r1, #0
    72c6:	0010      	movs	r0, r2
    72c8:	0324      	lsls	r4, r4, #12
    72ca:	0d0a      	lsrs	r2, r1, #20
    72cc:	0512      	lsls	r2, r2, #20
    72ce:	0b24      	lsrs	r4, r4, #12
    72d0:	4314      	orrs	r4, r2
    72d2:	4a10      	ldr	r2, [pc, #64]	; (7314 <__aeabi_i2d+0x80>)
    72d4:	051b      	lsls	r3, r3, #20
    72d6:	4014      	ands	r4, r2
    72d8:	431c      	orrs	r4, r3
    72da:	0064      	lsls	r4, r4, #1
    72dc:	07ed      	lsls	r5, r5, #31
    72de:	0864      	lsrs	r4, r4, #1
    72e0:	432c      	orrs	r4, r5
    72e2:	0021      	movs	r1, r4
    72e4:	bd70      	pop	{r4, r5, r6, pc}
    72e6:	0021      	movs	r1, r4
    72e8:	4091      	lsls	r1, r2
    72ea:	000a      	movs	r2, r1
    72ec:	210b      	movs	r1, #11
    72ee:	1a08      	subs	r0, r1, r0
    72f0:	40c4      	lsrs	r4, r0
    72f2:	055b      	lsls	r3, r3, #21
    72f4:	0324      	lsls	r4, r4, #12
    72f6:	0b24      	lsrs	r4, r4, #12
    72f8:	0d5b      	lsrs	r3, r3, #21
    72fa:	e7e3      	b.n	72c4 <__aeabi_i2d+0x30>
    72fc:	2500      	movs	r5, #0
    72fe:	2300      	movs	r3, #0
    7300:	2400      	movs	r4, #0
    7302:	2200      	movs	r2, #0
    7304:	e7de      	b.n	72c4 <__aeabi_i2d+0x30>
    7306:	46c0      	nop			; (mov r8, r8)
    7308:	0000041e 	.word	0x0000041e
    730c:	00000433 	.word	0x00000433
    7310:	00000413 	.word	0x00000413
    7314:	800fffff 	.word	0x800fffff

00007318 <__clzsi2>:
    7318:	211c      	movs	r1, #28
    731a:	2301      	movs	r3, #1
    731c:	041b      	lsls	r3, r3, #16
    731e:	4298      	cmp	r0, r3
    7320:	d301      	bcc.n	7326 <__clzsi2+0xe>
    7322:	0c00      	lsrs	r0, r0, #16
    7324:	3910      	subs	r1, #16
    7326:	0a1b      	lsrs	r3, r3, #8
    7328:	4298      	cmp	r0, r3
    732a:	d301      	bcc.n	7330 <__clzsi2+0x18>
    732c:	0a00      	lsrs	r0, r0, #8
    732e:	3908      	subs	r1, #8
    7330:	091b      	lsrs	r3, r3, #4
    7332:	4298      	cmp	r0, r3
    7334:	d301      	bcc.n	733a <__clzsi2+0x22>
    7336:	0900      	lsrs	r0, r0, #4
    7338:	3904      	subs	r1, #4
    733a:	a202      	add	r2, pc, #8	; (adr r2, 7344 <__clzsi2+0x2c>)
    733c:	5c10      	ldrb	r0, [r2, r0]
    733e:	1840      	adds	r0, r0, r1
    7340:	4770      	bx	lr
    7342:	46c0      	nop			; (mov r8, r8)
    7344:	02020304 	.word	0x02020304
    7348:	01010101 	.word	0x01010101
	...

00007354 <__cxa_atexit>:
    7354:	b570      	push	{r4, r5, r6, lr}
    7356:	4c05      	ldr	r4, [pc, #20]	; (736c <__cxa_atexit+0x18>)
    7358:	0005      	movs	r5, r0
    735a:	0013      	movs	r3, r2
    735c:	1e20      	subs	r0, r4, #0
    735e:	d004      	beq.n	736a <__cxa_atexit+0x16>
    7360:	000a      	movs	r2, r1
    7362:	2002      	movs	r0, #2
    7364:	0029      	movs	r1, r5
    7366:	e000      	b.n	736a <__cxa_atexit+0x16>
    7368:	bf00      	nop
    736a:	bd70      	pop	{r4, r5, r6, pc}
    736c:	00000000 	.word	0x00000000

00007370 <__libc_init_array>:
    7370:	4b0e      	ldr	r3, [pc, #56]	; (73ac <__libc_init_array+0x3c>)
    7372:	b570      	push	{r4, r5, r6, lr}
    7374:	2500      	movs	r5, #0
    7376:	001e      	movs	r6, r3
    7378:	4c0d      	ldr	r4, [pc, #52]	; (73b0 <__libc_init_array+0x40>)
    737a:	1ae4      	subs	r4, r4, r3
    737c:	10a4      	asrs	r4, r4, #2
    737e:	42a5      	cmp	r5, r4
    7380:	d004      	beq.n	738c <__libc_init_array+0x1c>
    7382:	00ab      	lsls	r3, r5, #2
    7384:	58f3      	ldr	r3, [r6, r3]
    7386:	4798      	blx	r3
    7388:	3501      	adds	r5, #1
    738a:	e7f8      	b.n	737e <__libc_init_array+0xe>
    738c:	f000 f900 	bl	7590 <_init>
    7390:	4b08      	ldr	r3, [pc, #32]	; (73b4 <__libc_init_array+0x44>)
    7392:	2500      	movs	r5, #0
    7394:	001e      	movs	r6, r3
    7396:	4c08      	ldr	r4, [pc, #32]	; (73b8 <__libc_init_array+0x48>)
    7398:	1ae4      	subs	r4, r4, r3
    739a:	10a4      	asrs	r4, r4, #2
    739c:	42a5      	cmp	r5, r4
    739e:	d004      	beq.n	73aa <__libc_init_array+0x3a>
    73a0:	00ab      	lsls	r3, r5, #2
    73a2:	58f3      	ldr	r3, [r6, r3]
    73a4:	4798      	blx	r3
    73a6:	3501      	adds	r5, #1
    73a8:	e7f8      	b.n	739c <__libc_init_array+0x2c>
    73aa:	bd70      	pop	{r4, r5, r6, pc}
    73ac:	200000f0 	.word	0x200000f0
    73b0:	200000f0 	.word	0x200000f0
    73b4:	200000f0 	.word	0x200000f0
    73b8:	20000108 	.word	0x20000108

000073bc <malloc>:
    73bc:	b510      	push	{r4, lr}
    73be:	4b03      	ldr	r3, [pc, #12]	; (73cc <malloc+0x10>)
    73c0:	0001      	movs	r1, r0
    73c2:	6818      	ldr	r0, [r3, #0]
    73c4:	f000 f866 	bl	7494 <_malloc_r>
    73c8:	bd10      	pop	{r4, pc}
    73ca:	46c0      	nop			; (mov r8, r8)
    73cc:	200000ec 	.word	0x200000ec

000073d0 <free>:
    73d0:	b510      	push	{r4, lr}
    73d2:	4b03      	ldr	r3, [pc, #12]	; (73e0 <free+0x10>)
    73d4:	0001      	movs	r1, r0
    73d6:	6818      	ldr	r0, [r3, #0]
    73d8:	f000 f816 	bl	7408 <_free_r>
    73dc:	bd10      	pop	{r4, pc}
    73de:	46c0      	nop			; (mov r8, r8)
    73e0:	200000ec 	.word	0x200000ec

000073e4 <memcpy>:
    73e4:	2300      	movs	r3, #0
    73e6:	b510      	push	{r4, lr}
    73e8:	429a      	cmp	r2, r3
    73ea:	d003      	beq.n	73f4 <memcpy+0x10>
    73ec:	5ccc      	ldrb	r4, [r1, r3]
    73ee:	54c4      	strb	r4, [r0, r3]
    73f0:	3301      	adds	r3, #1
    73f2:	e7f9      	b.n	73e8 <memcpy+0x4>
    73f4:	bd10      	pop	{r4, pc}

000073f6 <memset>:
    73f6:	0003      	movs	r3, r0
    73f8:	1882      	adds	r2, r0, r2
    73fa:	4293      	cmp	r3, r2
    73fc:	d002      	beq.n	7404 <memset+0xe>
    73fe:	7019      	strb	r1, [r3, #0]
    7400:	3301      	adds	r3, #1
    7402:	e7fa      	b.n	73fa <memset+0x4>
    7404:	4770      	bx	lr
	...

00007408 <_free_r>:
    7408:	b530      	push	{r4, r5, lr}
    740a:	2900      	cmp	r1, #0
    740c:	d03e      	beq.n	748c <_free_r+0x84>
    740e:	3904      	subs	r1, #4
    7410:	680b      	ldr	r3, [r1, #0]
    7412:	2b00      	cmp	r3, #0
    7414:	da00      	bge.n	7418 <_free_r+0x10>
    7416:	18c9      	adds	r1, r1, r3
    7418:	4a1d      	ldr	r2, [pc, #116]	; (7490 <_free_r+0x88>)
    741a:	6813      	ldr	r3, [r2, #0]
    741c:	0014      	movs	r4, r2
    741e:	2b00      	cmp	r3, #0
    7420:	d102      	bne.n	7428 <_free_r+0x20>
    7422:	604b      	str	r3, [r1, #4]
    7424:	6011      	str	r1, [r2, #0]
    7426:	e031      	b.n	748c <_free_r+0x84>
    7428:	428b      	cmp	r3, r1
    742a:	d90d      	bls.n	7448 <_free_r+0x40>
    742c:	680a      	ldr	r2, [r1, #0]
    742e:	1888      	adds	r0, r1, r2
    7430:	4283      	cmp	r3, r0
    7432:	d103      	bne.n	743c <_free_r+0x34>
    7434:	6818      	ldr	r0, [r3, #0]
    7436:	685b      	ldr	r3, [r3, #4]
    7438:	1882      	adds	r2, r0, r2
    743a:	600a      	str	r2, [r1, #0]
    743c:	604b      	str	r3, [r1, #4]
    743e:	6021      	str	r1, [r4, #0]
    7440:	e024      	b.n	748c <_free_r+0x84>
    7442:	428a      	cmp	r2, r1
    7444:	d803      	bhi.n	744e <_free_r+0x46>
    7446:	0013      	movs	r3, r2
    7448:	685a      	ldr	r2, [r3, #4]
    744a:	2a00      	cmp	r2, #0
    744c:	d1f9      	bne.n	7442 <_free_r+0x3a>
    744e:	681d      	ldr	r5, [r3, #0]
    7450:	195c      	adds	r4, r3, r5
    7452:	428c      	cmp	r4, r1
    7454:	d10b      	bne.n	746e <_free_r+0x66>
    7456:	6809      	ldr	r1, [r1, #0]
    7458:	1869      	adds	r1, r5, r1
    745a:	1858      	adds	r0, r3, r1
    745c:	6019      	str	r1, [r3, #0]
    745e:	4282      	cmp	r2, r0
    7460:	d114      	bne.n	748c <_free_r+0x84>
    7462:	6810      	ldr	r0, [r2, #0]
    7464:	6852      	ldr	r2, [r2, #4]
    7466:	1841      	adds	r1, r0, r1
    7468:	6019      	str	r1, [r3, #0]
    746a:	605a      	str	r2, [r3, #4]
    746c:	e00e      	b.n	748c <_free_r+0x84>
    746e:	428c      	cmp	r4, r1
    7470:	d902      	bls.n	7478 <_free_r+0x70>
    7472:	230c      	movs	r3, #12
    7474:	6003      	str	r3, [r0, #0]
    7476:	e009      	b.n	748c <_free_r+0x84>
    7478:	6808      	ldr	r0, [r1, #0]
    747a:	180c      	adds	r4, r1, r0
    747c:	42a2      	cmp	r2, r4
    747e:	d103      	bne.n	7488 <_free_r+0x80>
    7480:	6814      	ldr	r4, [r2, #0]
    7482:	6852      	ldr	r2, [r2, #4]
    7484:	1820      	adds	r0, r4, r0
    7486:	6008      	str	r0, [r1, #0]
    7488:	604a      	str	r2, [r1, #4]
    748a:	6059      	str	r1, [r3, #4]
    748c:	bd30      	pop	{r4, r5, pc}
    748e:	46c0      	nop			; (mov r8, r8)
    7490:	200009d8 	.word	0x200009d8

00007494 <_malloc_r>:
    7494:	2303      	movs	r3, #3
    7496:	b570      	push	{r4, r5, r6, lr}
    7498:	1ccd      	adds	r5, r1, #3
    749a:	439d      	bics	r5, r3
    749c:	3508      	adds	r5, #8
    749e:	0006      	movs	r6, r0
    74a0:	2d0c      	cmp	r5, #12
    74a2:	d201      	bcs.n	74a8 <_malloc_r+0x14>
    74a4:	250c      	movs	r5, #12
    74a6:	e005      	b.n	74b4 <_malloc_r+0x20>
    74a8:	2d00      	cmp	r5, #0
    74aa:	da03      	bge.n	74b4 <_malloc_r+0x20>
    74ac:	230c      	movs	r3, #12
    74ae:	2000      	movs	r0, #0
    74b0:	6033      	str	r3, [r6, #0]
    74b2:	e040      	b.n	7536 <_malloc_r+0xa2>
    74b4:	42a9      	cmp	r1, r5
    74b6:	d8f9      	bhi.n	74ac <_malloc_r+0x18>
    74b8:	4b1f      	ldr	r3, [pc, #124]	; (7538 <_malloc_r+0xa4>)
    74ba:	681c      	ldr	r4, [r3, #0]
    74bc:	001a      	movs	r2, r3
    74be:	0021      	movs	r1, r4
    74c0:	2900      	cmp	r1, #0
    74c2:	d013      	beq.n	74ec <_malloc_r+0x58>
    74c4:	680b      	ldr	r3, [r1, #0]
    74c6:	1b5b      	subs	r3, r3, r5
    74c8:	d40d      	bmi.n	74e6 <_malloc_r+0x52>
    74ca:	2b0b      	cmp	r3, #11
    74cc:	d902      	bls.n	74d4 <_malloc_r+0x40>
    74ce:	600b      	str	r3, [r1, #0]
    74d0:	18cc      	adds	r4, r1, r3
    74d2:	e01e      	b.n	7512 <_malloc_r+0x7e>
    74d4:	428c      	cmp	r4, r1
    74d6:	d102      	bne.n	74de <_malloc_r+0x4a>
    74d8:	6863      	ldr	r3, [r4, #4]
    74da:	6013      	str	r3, [r2, #0]
    74dc:	e01a      	b.n	7514 <_malloc_r+0x80>
    74de:	684b      	ldr	r3, [r1, #4]
    74e0:	6063      	str	r3, [r4, #4]
    74e2:	000c      	movs	r4, r1
    74e4:	e016      	b.n	7514 <_malloc_r+0x80>
    74e6:	000c      	movs	r4, r1
    74e8:	6849      	ldr	r1, [r1, #4]
    74ea:	e7e9      	b.n	74c0 <_malloc_r+0x2c>
    74ec:	4c13      	ldr	r4, [pc, #76]	; (753c <_malloc_r+0xa8>)
    74ee:	6823      	ldr	r3, [r4, #0]
    74f0:	2b00      	cmp	r3, #0
    74f2:	d103      	bne.n	74fc <_malloc_r+0x68>
    74f4:	0030      	movs	r0, r6
    74f6:	f000 f823 	bl	7540 <_sbrk_r>
    74fa:	6020      	str	r0, [r4, #0]
    74fc:	0029      	movs	r1, r5
    74fe:	0030      	movs	r0, r6
    7500:	f000 f81e 	bl	7540 <_sbrk_r>
    7504:	1c43      	adds	r3, r0, #1
    7506:	d0d1      	beq.n	74ac <_malloc_r+0x18>
    7508:	2303      	movs	r3, #3
    750a:	1cc4      	adds	r4, r0, #3
    750c:	439c      	bics	r4, r3
    750e:	42a0      	cmp	r0, r4
    7510:	d10a      	bne.n	7528 <_malloc_r+0x94>
    7512:	6025      	str	r5, [r4, #0]
    7514:	0020      	movs	r0, r4
    7516:	2207      	movs	r2, #7
    7518:	300b      	adds	r0, #11
    751a:	1d23      	adds	r3, r4, #4
    751c:	4390      	bics	r0, r2
    751e:	1ac3      	subs	r3, r0, r3
    7520:	d009      	beq.n	7536 <_malloc_r+0xa2>
    7522:	425a      	negs	r2, r3
    7524:	50e2      	str	r2, [r4, r3]
    7526:	e006      	b.n	7536 <_malloc_r+0xa2>
    7528:	1a21      	subs	r1, r4, r0
    752a:	0030      	movs	r0, r6
    752c:	f000 f808 	bl	7540 <_sbrk_r>
    7530:	1c43      	adds	r3, r0, #1
    7532:	d1ee      	bne.n	7512 <_malloc_r+0x7e>
    7534:	e7ba      	b.n	74ac <_malloc_r+0x18>
    7536:	bd70      	pop	{r4, r5, r6, pc}
    7538:	200009d8 	.word	0x200009d8
    753c:	200009d4 	.word	0x200009d4

00007540 <_sbrk_r>:
    7540:	2300      	movs	r3, #0
    7542:	b570      	push	{r4, r5, r6, lr}
    7544:	4c06      	ldr	r4, [pc, #24]	; (7560 <_sbrk_r+0x20>)
    7546:	0005      	movs	r5, r0
    7548:	0008      	movs	r0, r1
    754a:	6023      	str	r3, [r4, #0]
    754c:	f000 f812 	bl	7574 <_sbrk>
    7550:	1c43      	adds	r3, r0, #1
    7552:	d103      	bne.n	755c <_sbrk_r+0x1c>
    7554:	6823      	ldr	r3, [r4, #0]
    7556:	2b00      	cmp	r3, #0
    7558:	d000      	beq.n	755c <_sbrk_r+0x1c>
    755a:	602b      	str	r3, [r5, #0]
    755c:	bd70      	pop	{r4, r5, r6, pc}
    755e:	46c0      	nop			; (mov r8, r8)
    7560:	200009e0 	.word	0x200009e0

00007564 <strlen>:
    7564:	2300      	movs	r3, #0
    7566:	5cc2      	ldrb	r2, [r0, r3]
    7568:	3301      	adds	r3, #1
    756a:	2a00      	cmp	r2, #0
    756c:	d1fb      	bne.n	7566 <strlen+0x2>
    756e:	1e58      	subs	r0, r3, #1
    7570:	4770      	bx	lr
	...

00007574 <_sbrk>:
    7574:	4a04      	ldr	r2, [pc, #16]	; (7588 <_sbrk+0x14>)
    7576:	6813      	ldr	r3, [r2, #0]
    7578:	2b00      	cmp	r3, #0
    757a:	d003      	beq.n	7584 <_sbrk+0x10>
    757c:	1818      	adds	r0, r3, r0
    757e:	6010      	str	r0, [r2, #0]
    7580:	0018      	movs	r0, r3
    7582:	4770      	bx	lr
    7584:	4b01      	ldr	r3, [pc, #4]	; (758c <_sbrk+0x18>)
    7586:	e7f9      	b.n	757c <_sbrk+0x8>
    7588:	200009dc 	.word	0x200009dc
    758c:	200009e4 	.word	0x200009e4

00007590 <_init>:
    7590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7592:	46c0      	nop			; (mov r8, r8)
    7594:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7596:	bc08      	pop	{r3}
    7598:	469e      	mov	lr, r3
    759a:	4770      	bx	lr

0000759c <_fini>:
    759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    759e:	46c0      	nop			; (mov r8, r8)
    75a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    75a2:	bc08      	pop	{r3}
    75a4:	469e      	mov	lr, r3
    75a6:	4770      	bx	lr

000075a8 <_ZTV16APA102ControllerILh6ELh9EL6EOrder136ELh4EE>:
	...
    75b0:	07f9 0000 083d 0000 0881 0000 01c5 0000     ....=...........
    75c0:	0249 0000 03c5 0000 089d 0000               I...........

000075cc <_ZTV19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE>:
	...
    75d4:	07f9 0000 083d 0000 1611 0000 01c5 0000     ....=...........
    75e4:	0249 0000 03c5 0000 1611 0000               I...........

000075f0 <_ZTV14CLEDController>:
	...
    75f8:	1611 0000 1611 0000 1611 0000 01c5 0000     ................
    7608:	0249 0000 03c5 0000                         I.......

00007610 <_ZL15STRING_LANGUAGE>:
    7610:	0304 0409                                   ....

00007614 <_ZL14STRING_PRODUCT>:
    7614:	6546 7461 6568 2072 304d 0000               Feather M0..

00007620 <_ZL19STRING_MANUFACTURER>:
    7620:	6441 6661 7572 7469 0000 0000               Adafruit....

0000762c <_ZL21USB_DeviceDescriptorB>:
    762c:	0112 0200 02ef 4001 239a 800b 0100 0201     .......@.#......
    763c:	0103 0000                                   ....

00007640 <_ZL20USB_DeviceDescriptor>:
    7640:	0112 0200 0000 4000 239a 800b 0100 0201     .......@.#......
    7650:	0103 0000 3b9e 0000 3bfa 0000 3d30 0000     .....;...;..0=..
    7660:	3c48 0000 3d30 0000 3c8c 0000 3ca0 0000     H<..0=...<...<..
    7670:	3cb0 0000 3cb4 0000 3cc4 0000 3d08 0000     .<...<...<...=..
    7680:	3d18 0000                                   .=..

00007684 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    768c:	2955 0000 2729 0000 2ac1 0000               U)..)'...*..

00007698 <_ZTV9EPHandler>:
	...
    76a0:	1611 0000 1611 0000 1611 0000 42f2 0000     .............B..
    76b0:	4288 0000 42a4 0000 42c0 0000 42d6 0000     .B...B...B...B..
    76c0:	4288 0000 48da 0000 46e4 0000 46e4 0000     .B...H...F...F..
    76d0:	46e4 0000 46e4 0000 46e4 0000 46e4 0000     .F...F...F...F..
    76e0:	46e4 0000 46e4 0000 46a0 0000 46a0 0000     .F...F...F...F..
    76f0:	46a0 0000 46a0 0000                         .F...F..

000076f8 <g_APinDescription>:
    76f8:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    7708:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    7718:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    7728:	0000 0000 000e 0000 0008 0000 0004 0000     ................
    7738:	00ff ffff ffff 000e 0000 0000 0009 0000     ................
    7748:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    7758:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    7768:	00ff 0000 0000 0010 0000 0000 000f 0000     ................
    7778:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    7788:	0000 0000 0014 0000 0005 0000 002c 0000     ............,...
    7798:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    77a8:	0008 0000 0004 0000 00ff ffff ffff 0005     ................
    77b8:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    77c8:	0006 0100 0100 0006 0000 0000 0007 0000     ................
    77d8:	0004 0000 001c 0000 0007 0101 0101 0007     ................
    77e8:	0000 0000 0012 0000 0004 0000 001c 0000     ................
    77f8:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    7808:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    7818:	0000 0000 0013 0000 0005 0000 002c 0000     ............,...
    7828:	00ff 0003 0003 0003 0000 0000 0011 0000     ................
    7838:	0004 0000 001c 0000 00ff 0201 0201 0001     ................
    7848:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    7858:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    7868:	0001 0000 0018 0000 0002 0400 0400 0008     ................
    7878:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    7888:	0003 0401 0401 0009 0000 0000 0004 0000     ................
    7898:	0001 0000 0000 0000 0004 ffff ffff 0004     ................
    78a8:	0000 0000 0005 0000 0001 0000 0000 0000     ................
    78b8:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    78c8:	0001 0000 0000 0000 000a ffff ffff 0002     ................
    78d8:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    78e8:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    78f8:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    7908:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    7918:	00ff ffff ffff 000c 0001 0000 000a 0000     ................
    7928:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    7938:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    7948:	00ff ffff ffff 000b 0001 0000 0003 0000     ................
    7958:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    7968:	0000 0000 001b 0000 000b 0000 0004 0000     ................
    7978:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    7988:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    7998:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    79a8:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    79b8:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    79c8:	0001 0000 0016 0000 0003 0000 0000 0000     ................
    79d8:	00ff ffff ffff 00ff 0001 0000 0017 0000     ................
    79e8:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    79f8:	0000 0000 0016 0000 0002 0000 0000 0000     ................
    7a08:	00ff ffff ffff 00ff 0000 0000 0017 0000     ................
    7a18:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    7a28:	0000 0000 0013 0000 0002 0000 0000 0000     ................
    7a38:	00ff ffff ffff 00ff 0000 0000 0010 0000     ................
    7a48:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    7a58:	0000 0000 0012 0000 0002 0000 0000 0000     ................
    7a68:	00ff ffff ffff 00ff 0000 0000 0011 0000     ................
    7a78:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    7a88:	0000 0000 000d 0000 0004 0000 000c 0000     ................
    7a98:	00ff 0001 ffff 000d 0000 0000 0015 0000     ................
    7aa8:	0005 0000 000c 0000 00ff 0003 ffff 00ff     ................
    7ab8:	0000 0000 0006 0000 0004 0000 000c 0000     ................
    7ac8:	00ff 0100 ffff 00ff 0000 0000 0007 0000     ................
    7ad8:	0004 0000 000c 0000 00ff 0101 ffff 00ff     ................
    7ae8:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    7af8:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    7b08:	0001 0000 0002 0000 0014 ffff ffff 0002     ................
    7b18:	0000 0000 0006 0000 0001 0000 0002 0000     ................
    7b28:	0006 0100 0100 0006 0000 0000 0007 0000     ................
    7b38:	0001 0000 0002 0000 0007 0101 0101 0007     ................

00007b48 <_ZTV14HardwareSerial>:
	...
    7b50:	1611 0000 5619 0000 1611 0000 1611 0000     .....V..........
    7b60:	1611 0000 1611 0000 0000 0000 0000 0000     ................
    7b70:	541d 0000 5431 0000 5449 0000 1611 0000     .T..1T..IT......

00007b80 <_ZTV5Print>:
	...
    7b88:	1611 0000 5619 0000                         .....V..

00007b90 <_ZTV4Uart>:
	...
    7b98:	5f21 0000 5619 0000 5ecd 0000 5f05 0000     !_...V...^..._..
    7ba8:	5ee9 0000 5e55 0000 5489 0000 54bd 0000     .^..U^...T...T..
    7bb8:	5d29 0000 5d51 0000 5e31 0000 5ca5 0000     )]..Q]..1^...\..

00007bc8 <_ZTV6Stream>:
	...
    7bd0:	1611 0000 5619 0000 1611 0000 1611 0000     .....V..........
    7be0:	1611 0000 1611 0000                         ........

00007be8 <_ZTV7Serial_>:
	...
    7bf0:	625d 0000 6221 0000 6159 0000 61c9 0000     ]b..!b..Ya...a..
    7c00:	618d 0000 6205 0000 6179 0000 0043 0000     .a...b..ya..C...

00007c10 <__EH_FRAME_BEGIN__>:
    7c10:	0000 0000                                   ....

Disassembly of section .ramfunc:

00007c14 <banzai>:
static inline bool nvmReady(void) {
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
}

__attribute__ ((long_call, section (".ramfunc")))
static void banzai() {
    7c14:	b580      	push	{r7, lr}
    7c16:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    7c18:	b672      	cpsid	i
	__disable_irq();

	// Avoid erasing the application if APP_START is < than the minimum bootloader size
	// This could happen if without_bootloader linker script was chosen
	// Minimum bootloader size in SAMD21 family is 512bytes (RM section 22.6.5)
	if (APP_START < (0x200 + 4)) {
    7c1a:	4b17      	ldr	r3, [pc, #92]	; (7c78 <banzai+0x64>)
    7c1c:	3304      	adds	r3, #4
    7c1e:	4a17      	ldr	r2, [pc, #92]	; (7c7c <banzai+0x68>)
    7c20:	4293      	cmp	r3, r2
    7c22:	d925      	bls.n	7c70 <banzai+0x5c>
		goto reset;
	}

	// Erase application
	while (!nvmReady())
    7c24:	f7f9 fe28 	bl	1878 <nvmReady>
    7c28:	0003      	movs	r3, r0
    7c2a:	001a      	movs	r2, r3
    7c2c:	2301      	movs	r3, #1
    7c2e:	4053      	eors	r3, r2
    7c30:	b2db      	uxtb	r3, r3
    7c32:	2b00      	cmp	r3, #0
    7c34:	d000      	beq.n	7c38 <banzai+0x24>
    7c36:	e7f5      	b.n	7c24 <banzai+0x10>
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    7c38:	4911      	ldr	r1, [pc, #68]	; (7c80 <banzai+0x6c>)
    7c3a:	4b11      	ldr	r3, [pc, #68]	; (7c80 <banzai+0x6c>)
    7c3c:	8b1b      	ldrh	r3, [r3, #24]
    7c3e:	b29b      	uxth	r3, r3
    7c40:	2220      	movs	r2, #32
    7c42:	32ff      	adds	r2, #255	; 0xff
    7c44:	4313      	orrs	r3, r2
    7c46:	b29b      	uxth	r3, r3
    7c48:	830b      	strh	r3, [r1, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    7c4a:	4b0d      	ldr	r3, [pc, #52]	; (7c80 <banzai+0x6c>)
    7c4c:	4a0a      	ldr	r2, [pc, #40]	; (7c78 <banzai+0x64>)
    7c4e:	3204      	adds	r2, #4
    7c50:	0892      	lsrs	r2, r2, #2
    7c52:	0052      	lsls	r2, r2, #1
    7c54:	61da      	str	r2, [r3, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    7c56:	4b0a      	ldr	r3, [pc, #40]	; (7c80 <banzai+0x6c>)
    7c58:	4a0a      	ldr	r2, [pc, #40]	; (7c84 <banzai+0x70>)
    7c5a:	801a      	strh	r2, [r3, #0]
	while (!nvmReady())
    7c5c:	f7f9 fe0c 	bl	1878 <nvmReady>
    7c60:	0003      	movs	r3, r0
    7c62:	001a      	movs	r2, r3
    7c64:	2301      	movs	r3, #1
    7c66:	4053      	eors	r3, r2
    7c68:	b2db      	uxtb	r3, r3
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	d001      	beq.n	7c72 <banzai+0x5e>
    7c6e:	e7f5      	b.n	7c5c <banzai+0x48>

	// Avoid erasing the application if APP_START is < than the minimum bootloader size
	// This could happen if without_bootloader linker script was chosen
	// Minimum bootloader size in SAMD21 family is 512bytes (RM section 22.6.5)
	if (APP_START < (0x200 + 4)) {
		goto reset;
    7c70:	46c0      	nop			; (mov r8, r8)
	while (!nvmReady())
		;

reset:
	// Reset the device
	NVIC_SystemReset() ;
    7c72:	f7f9 fdf3 	bl	185c <NVIC_SystemReset>

	while (true);
    7c76:	e7fe      	b.n	7c76 <banzai+0x62>
    7c78:	00000000 	.word	0x00000000
    7c7c:	00000203 	.word	0x00000203
    7c80:	41004000 	.word	0x41004000
    7c84:	ffffa502 	.word	0xffffa502
