
2_side_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008740  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  20000000  00008740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c94  20000120  00008860  00020120  2**4
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
  5 .debug_info   00054738  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00006b9d  00000000  00000000  000748d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0001d756  00000000  00000000  0007b476  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000cc0  00000000  00000000  00098bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000046a8  00000000  00000000  0009988c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001e605  00000000  00000000  0009df34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001644b  00000000  00000000  000bc539  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000902d7  00000000  00000000  000d2984  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002ac4  00000000  00000000  00162c5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__text_start__>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	20008000 	.word	0x20008000
  return malloc(size);
       4:	00001281 	.word	0x00001281
       8:	00001269 	.word	0x00001269
       c:	000006a5 	.word	0x000006a5
	...
      2c:	00001269 	.word	0x00001269
	...
      38:	00001269 	.word	0x00001269
      3c:	000012e1 	.word	0x000012e1
      40:	00001269 	.word	0x00001269
      44:	00001269 	.word	0x00001269
      48:	00001269 	.word	0x00001269
      4c:	00001269 	.word	0x00001269
      50:	00001269 	.word	0x00001269
      54:	00001269 	.word	0x00001269
      58:	000006c1 	.word	0x000006c1
      5c:	0000126d 	.word	0x0000126d
      60:	00001269 	.word	0x00001269
      64:	00003ffd 	.word	0x00003ffd
      68:	00001269 	.word	0x00001269
      6c:	00001269 	.word	0x00001269
      70:	00001269 	.word	0x00001269
      74:	00001269 	.word	0x00001269
      78:	0000400d 	.word	0x0000400d
      7c:	00001269 	.word	0x00001269
      80:	00001269 	.word	0x00001269
      84:	00001269 	.word	0x00001269
      88:	00001269 	.word	0x00001269
      8c:	00001269 	.word	0x00001269
      90:	00000000 	.word	0x00000000
      94:	00001269 	.word	0x00001269
      98:	00001269 	.word	0x00001269
      9c:	00001269 	.word	0x00001269
      a0:	00001269 	.word	0x00001269
      a4:	00001269 	.word	0x00001269
      a8:	00001269 	.word	0x00001269
      ac:	00001269 	.word	0x00001269
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000120 	.word	0x20000120
      d4:	00000000 	.word	0x00000000
      d8:	0000873c 	.word	0x0000873c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000124 	.word	0x20000124
     108:	0000873c 	.word	0x0000873c
     10c:	20000118 	.word	0x20000118
     110:	00000000 	.word	0x00000000

00000114 <_ZN14CLEDController4sizeEv>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     114:	6940      	ldr	r0, [r0, #20]
     116:	4770      	bx	lr

00000118 <_ZNK14CLEDController17getMaxRefreshRateEv>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     118:	2000      	movs	r0, #0
     11a:	4770      	bx	lr

0000011c <_ZN3Pin6selectEv>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     11c:	6842      	ldr	r2, [r0, #4]
     11e:	68c1      	ldr	r1, [r0, #12]
     120:	6813      	ldr	r3, [r2, #0]
     122:	430b      	orrs	r3, r1
     124:	6013      	str	r3, [r2, #0]
	port_t hival() __attribute__ ((always_inline)) { return *mPort | mPinMask;  }
	port_t loval() __attribute__ ((always_inline)) { return *mPort & ~mPinMask; }
	port_ptr_t  port() __attribute__ ((always_inline)) { return mPort; }
	port_t mask() __attribute__ ((always_inline)) { return mPinMask; }

	virtual void select() { hi(); }
     126:	4770      	bx	lr

00000128 <_ZN3Pin7releaseEv>:

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     128:	6842      	ldr	r2, [r0, #4]
     12a:	68c1      	ldr	r1, [r0, #12]
     12c:	6813      	ldr	r3, [r2, #0]
     12e:	438b      	bics	r3, r1
     130:	6013      	str	r3, [r2, #0]
	port_t loval() __attribute__ ((always_inline)) { return *mPort & ~mPinMask; }
	port_ptr_t  port() __attribute__ ((always_inline)) { return mPort; }
	port_t mask() __attribute__ ((always_inline)) { return mPinMask; }

	virtual void select() { hi(); }
	virtual void release() { lo(); }
     132:	4770      	bx	lr

00000134 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh.constprop.14>:

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     134:	4b33      	ldr	r3, [pc, #204]	; (204 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh.constprop.14+0xd0>)
     136:	4834      	ldr	r0, [pc, #208]	; (208 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh.constprop.14+0xd4>)
     138:	6819      	ldr	r1, [r3, #0]
     13a:	6802      	ldr	r2, [r0, #0]
     13c:	680b      	ldr	r3, [r1, #0]
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
     13e:	b530      	push	{r4, r5, lr}
     140:	4393      	bics	r3, r2
     142:	600b      	str	r3, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     144:	4b31      	ldr	r3, [pc, #196]	; (20c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh.constprop.14+0xd8>)
     146:	4a32      	ldr	r2, [pc, #200]	; (210 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh.constprop.14+0xdc>)
     148:	681b      	ldr	r3, [r3, #0]
     14a:	6815      	ldr	r5, [r2, #0]
     14c:	681c      	ldr	r4, [r3, #0]
     14e:	432c      	orrs	r4, r5
     150:	601c      	str	r4, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     152:	6815      	ldr	r5, [r2, #0]
     154:	681c      	ldr	r4, [r3, #0]
     156:	43ac      	bics	r4, r5
     158:	601c      	str	r4, [r3, #0]
     15a:	6805      	ldr	r5, [r0, #0]
     15c:	680c      	ldr	r4, [r1, #0]
     15e:	43ac      	bics	r4, r5
     160:	600c      	str	r4, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     162:	6815      	ldr	r5, [r2, #0]
     164:	681c      	ldr	r4, [r3, #0]
     166:	432c      	orrs	r4, r5
     168:	601c      	str	r4, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     16a:	6815      	ldr	r5, [r2, #0]
     16c:	681c      	ldr	r4, [r3, #0]
     16e:	43ac      	bics	r4, r5
     170:	601c      	str	r4, [r3, #0]
     172:	6805      	ldr	r5, [r0, #0]
     174:	680c      	ldr	r4, [r1, #0]
     176:	43ac      	bics	r4, r5
     178:	600c      	str	r4, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     17a:	6815      	ldr	r5, [r2, #0]
     17c:	681c      	ldr	r4, [r3, #0]
     17e:	432c      	orrs	r4, r5
     180:	601c      	str	r4, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     182:	6815      	ldr	r5, [r2, #0]
     184:	681c      	ldr	r4, [r3, #0]
     186:	43ac      	bics	r4, r5
     188:	601c      	str	r4, [r3, #0]
     18a:	6805      	ldr	r5, [r0, #0]
     18c:	680c      	ldr	r4, [r1, #0]
     18e:	43ac      	bics	r4, r5
     190:	600c      	str	r4, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     192:	6815      	ldr	r5, [r2, #0]
     194:	681c      	ldr	r4, [r3, #0]
     196:	432c      	orrs	r4, r5
     198:	601c      	str	r4, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     19a:	6815      	ldr	r5, [r2, #0]
     19c:	681c      	ldr	r4, [r3, #0]
     19e:	43ac      	bics	r4, r5
     1a0:	601c      	str	r4, [r3, #0]
     1a2:	6805      	ldr	r5, [r0, #0]
     1a4:	680c      	ldr	r4, [r1, #0]
     1a6:	43ac      	bics	r4, r5
     1a8:	600c      	str	r4, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     1aa:	6815      	ldr	r5, [r2, #0]
     1ac:	681c      	ldr	r4, [r3, #0]
     1ae:	432c      	orrs	r4, r5
     1b0:	601c      	str	r4, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     1b2:	6815      	ldr	r5, [r2, #0]
     1b4:	681c      	ldr	r4, [r3, #0]
     1b6:	43ac      	bics	r4, r5
     1b8:	601c      	str	r4, [r3, #0]
     1ba:	6805      	ldr	r5, [r0, #0]
     1bc:	680c      	ldr	r4, [r1, #0]
     1be:	43ac      	bics	r4, r5
     1c0:	600c      	str	r4, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     1c2:	6815      	ldr	r5, [r2, #0]
     1c4:	681c      	ldr	r4, [r3, #0]
     1c6:	432c      	orrs	r4, r5
     1c8:	601c      	str	r4, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     1ca:	6815      	ldr	r5, [r2, #0]
     1cc:	681c      	ldr	r4, [r3, #0]
     1ce:	43ac      	bics	r4, r5
     1d0:	601c      	str	r4, [r3, #0]
     1d2:	6805      	ldr	r5, [r0, #0]
     1d4:	680c      	ldr	r4, [r1, #0]
     1d6:	43ac      	bics	r4, r5
     1d8:	600c      	str	r4, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     1da:	6815      	ldr	r5, [r2, #0]
     1dc:	681c      	ldr	r4, [r3, #0]
     1de:	432c      	orrs	r4, r5
     1e0:	601c      	str	r4, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     1e2:	6815      	ldr	r5, [r2, #0]
     1e4:	681c      	ldr	r4, [r3, #0]
     1e6:	43ac      	bics	r4, r5
     1e8:	601c      	str	r4, [r3, #0]
     1ea:	6804      	ldr	r4, [r0, #0]
     1ec:	6808      	ldr	r0, [r1, #0]
     1ee:	43a0      	bics	r0, r4
     1f0:	6008      	str	r0, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     1f2:	6810      	ldr	r0, [r2, #0]
     1f4:	6819      	ldr	r1, [r3, #0]
     1f6:	4301      	orrs	r1, r0
     1f8:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     1fa:	6811      	ldr	r1, [r2, #0]
     1fc:	681a      	ldr	r2, [r3, #0]
     1fe:	438a      	bics	r2, r1
     200:	601a      	str	r2, [r3, #0]
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
     202:	bd30      	pop	{r4, r5, pc}
     204:	20000150 	.word	0x20000150
     208:	20000154 	.word	0x20000154
     20c:	20000144 	.word	0x20000144
     210:	20000148 	.word	0x20000148

00000214 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     214:	b570      	push	{r4, r5, r6, lr}
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
     216:	2601      	movs	r6, #1
     218:	2394      	movs	r3, #148	; 0x94
     21a:	0032      	movs	r2, r6
     21c:	4c1d      	ldr	r4, [pc, #116]	; (294 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x80>)
     21e:	0005      	movs	r5, r0
     220:	58e3      	ldr	r3, [r4, r3]
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     222:	2006      	movs	r0, #6
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
     224:	409a      	lsls	r2, r3
     226:	4b1c      	ldr	r3, [pc, #112]	; (298 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x84>)
     228:	601a      	str	r2, [r3, #0]
		sPort = portOutputRegister(digitalPinToPort(PIN));
     22a:	2390      	movs	r3, #144	; 0x90
     22c:	56e3      	ldrsb	r3, [r4, r3]
     22e:	4a1b      	ldr	r2, [pc, #108]	; (29c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x88>)
     230:	01db      	lsls	r3, r3, #7
     232:	1899      	adds	r1, r3, r2
     234:	4a1a      	ldr	r2, [pc, #104]	; (2a0 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x8c>)
     236:	6011      	str	r1, [r2, #0]
		sInPort = portInputRegister(digitalPinToPort(PIN));
     238:	4a1a      	ldr	r2, [pc, #104]	; (2a4 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x90>)
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     23a:	2101      	movs	r1, #1
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
		sPort = portOutputRegister(digitalPinToPort(PIN));
		sInPort = portInputRegister(digitalPinToPort(PIN));
     23c:	4694      	mov	ip, r2
     23e:	4a1a      	ldr	r2, [pc, #104]	; (2a8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x94>)
     240:	4463      	add	r3, ip
     242:	6013      	str	r3, [r2, #0]
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     244:	f003 f840 	bl	32c8 <pinMode>
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
     248:	23dc      	movs	r3, #220	; 0xdc
     24a:	58e3      	ldr	r3, [r4, r3]
		sPort = portOutputRegister(digitalPinToPort(PIN));
     24c:	4a13      	ldr	r2, [pc, #76]	; (29c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x88>)
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
     24e:	409e      	lsls	r6, r3
     250:	4b16      	ldr	r3, [pc, #88]	; (2ac <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x98>)
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     252:	2009      	movs	r0, #9
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
     254:	601e      	str	r6, [r3, #0]
		sPort = portOutputRegister(digitalPinToPort(PIN));
     256:	23d8      	movs	r3, #216	; 0xd8
     258:	56e3      	ldrsb	r3, [r4, r3]
     25a:	01db      	lsls	r3, r3, #7
     25c:	1899      	adds	r1, r3, r2
     25e:	4a14      	ldr	r2, [pc, #80]	; (2b0 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x9c>)
     260:	6011      	str	r1, [r2, #0]
		sInPort = portInputRegister(digitalPinToPort(PIN));
     262:	4a10      	ldr	r2, [pc, #64]	; (2a4 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x90>)
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     264:	2101      	movs	r1, #1
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
		sPort = portOutputRegister(digitalPinToPort(PIN));
		sInPort = portInputRegister(digitalPinToPort(PIN));
     266:	4694      	mov	ip, r2
     268:	4a12      	ldr	r2, [pc, #72]	; (2b4 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0xa0>)
     26a:	4463      	add	r3, ip
     26c:	6013      	str	r3, [r2, #0]
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     26e:	f003 f82b 	bl	32c8 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     272:	69a8      	ldr	r0, [r5, #24]
     274:	2800      	cmp	r0, #0
     276:	d009      	beq.n	28c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x78>
     278:	6803      	ldr	r3, [r0, #0]
     27a:	4a0f      	ldr	r2, [pc, #60]	; (2b8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0xa4>)
     27c:	685b      	ldr	r3, [r3, #4]
     27e:	4293      	cmp	r3, r2
     280:	d105      	bne.n	28e <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x7a>

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     282:	6842      	ldr	r2, [r0, #4]
     284:	68c1      	ldr	r1, [r0, #12]
     286:	6813      	ldr	r3, [r2, #0]
     288:	438b      	bics	r3, r1
     28a:	6013      	str	r3, [r2, #0]
		mSPI.init();
	}
     28c:	bd70      	pop	{r4, r5, r6, pc}
     28e:	4798      	blx	r3
     290:	e7fc      	b.n	28c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x78>
     292:	46c0      	nop			; (mov r8, r8)
     294:	0000804c 	.word	0x0000804c
     298:	20000154 	.word	0x20000154
     29c:	41004410 	.word	0x41004410
     2a0:	20000150 	.word	0x20000150
     2a4:	41004420 	.word	0x41004420
     2a8:	2000014c 	.word	0x2000014c
     2ac:	20000148 	.word	0x20000148
     2b0:	20000144 	.word	0x20000144
     2b4:	20000140 	.word	0x20000140
     2b8:	00000129 	.word	0x00000129

000002bc <_ZN14CLEDController9clearLedsEi>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     2be:	0006      	movs	r6, r0
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     2c0:	2000      	movs	r0, #0
     2c2:	b08b      	sub	sp, #44	; 0x2c
     2c4:	ad01      	add	r5, sp, #4
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     2c6:	6837      	ldr	r7, [r6, #0]
     2c8:	7028      	strb	r0, [r5, #0]
     2ca:	7068      	strb	r0, [r5, #1]
     2cc:	70a8      	strb	r0, [r5, #2]
     2ce:	683c      	ldr	r4, [r7, #0]
     2d0:	4a49      	ldr	r2, [pc, #292]	; (3f8 <_ZN14CLEDController9clearLedsEi+0x13c>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     2d2:	ab02      	add	r3, sp, #8
     2d4:	7018      	strb	r0, [r3, #0]
     2d6:	7058      	strb	r0, [r3, #1]
     2d8:	7098      	strb	r0, [r3, #2]
     2da:	4294      	cmp	r4, r2
     2dc:	d14f      	bne.n	37e <_ZN14CLEDController9clearLedsEi+0xc2>
     2de:	7cb2      	ldrb	r2, [r6, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     2e0:	ac03      	add	r4, sp, #12
     2e2:	9503      	str	r5, [sp, #12]
     2e4:	6061      	str	r1, [r4, #4]
     2e6:	60a1      	str	r1, [r4, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     2e8:	74a0      	strb	r0, [r4, #18]
        g = rhs.g;
     2ea:	74e0      	strb	r0, [r4, #19]
        b = rhs.b;
     2ec:	7520      	strb	r0, [r4, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     2ee:	2a01      	cmp	r2, #1
     2f0:	d00e      	beq.n	310 <_ZN14CLEDController9clearLedsEi+0x54>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     2f2:	7460      	strb	r0, [r4, #17]
     2f4:	7420      	strb	r0, [r4, #16]
     2f6:	73e0      	strb	r0, [r4, #15]
     2f8:	73a0      	strb	r0, [r4, #14]
     2fa:	7360      	strb	r0, [r4, #13]
     2fc:	7320      	strb	r0, [r4, #12]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     2fe:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     300:	0021      	movs	r1, r4
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     302:	7563      	strb	r3, [r4, #21]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     304:	61a3      	str	r3, [r4, #24]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     306:	0030      	movs	r0, r6
     308:	69bb      	ldr	r3, [r7, #24]
     30a:	4798      	blx	r3

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     30c:	b00b      	add	sp, #44	; 0x2c
     30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static byte R = 0;
            R++;
     310:	493a      	ldr	r1, [pc, #232]	; (3fc <_ZN14CLEDController9clearLedsEi+0x140>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     312:	3007      	adds	r0, #7
     314:	780b      	ldrb	r3, [r1, #0]
     316:	3301      	adds	r3, #1
     318:	4003      	ands	r3, r0
     31a:	700b      	strb	r3, [r1, #0]
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     31c:	421a      	tst	r2, r3
     31e:	d133      	bne.n	388 <_ZN14CLEDController9clearLedsEi+0xcc>
     320:	2140      	movs	r1, #64	; 0x40
            R &= (0x01 << ditherBits) - 1;

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;
     322:	2200      	movs	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     324:	0798      	lsls	r0, r3, #30
     326:	d500      	bpl.n	32a <_ZN14CLEDController9clearLedsEi+0x6e>
     328:	000a      	movs	r2, r1
                if(R & 0x04) { Q |= 0x20; }
     32a:	2104      	movs	r1, #4
     32c:	4219      	tst	r1, r3
     32e:	d002      	beq.n	336 <_ZN14CLEDController9clearLedsEi+0x7a>
     330:	2320      	movs	r3, #32
     332:	431a      	orrs	r2, r3
     334:	b2d2      	uxtb	r2, r2
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     336:	7ca1      	ldrb	r1, [r4, #18]
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     338:	3210      	adds	r2, #16
     33a:	b2d5      	uxtb	r5, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     33c:	2900      	cmp	r1, #0
     33e:	d126      	bne.n	38e <_ZN14CLEDController9clearLedsEi+0xd2>
     340:	73e1      	strb	r1, [r4, #15]
                    d[i] = scale8(Q, e[i]);
     342:	7321      	strb	r1, [r4, #12]
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     344:	7ce1      	ldrb	r1, [r4, #19]
                    e[i] = s ? (256/s) + 1 : 0;
     346:	2900      	cmp	r1, #0
     348:	d137      	bne.n	3ba <_ZN14CLEDController9clearLedsEi+0xfe>
     34a:	7421      	strb	r1, [r4, #16]
                    d[i] = scale8(Q, e[i]);
     34c:	7361      	strb	r1, [r4, #13]
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     34e:	7d21      	ldrb	r1, [r4, #20]
                    e[i] = s ? (256/s) + 1 : 0;
     350:	2900      	cmp	r1, #0
     352:	d048      	beq.n	3e6 <_ZN14CLEDController9clearLedsEi+0x12a>
     354:	2080      	movs	r0, #128	; 0x80
     356:	0040      	lsls	r0, r0, #1
     358:	f005 fd36 	bl	5dc8 <__aeabi_idiv>
     35c:	b2c0      	uxtb	r0, r0
     35e:	1c43      	adds	r3, r0, #1
     360:	b2db      	uxtb	r3, r3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     362:	1c5a      	adds	r2, r3, #1
     364:	4355      	muls	r5, r2
     366:	122d      	asrs	r5, r5, #8
     368:	7463      	strb	r3, [r4, #17]
     36a:	b2ea      	uxtb	r2, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     36c:	2d00      	cmp	r5, #0
     36e:	d000      	beq.n	372 <_ZN14CLEDController9clearLedsEi+0xb6>
     370:	3a01      	subs	r2, #1
     372:	73a2      	strb	r2, [r4, #14]
#endif
                    if(e[i]) e[i]--;
     374:	2b00      	cmp	r3, #0
     376:	d000      	beq.n	37a <_ZN14CLEDController9clearLedsEi+0xbe>
     378:	7460      	strb	r0, [r4, #17]
     37a:	6837      	ldr	r7, [r6, #0]
     37c:	e7bf      	b.n	2fe <_ZN14CLEDController9clearLedsEi+0x42>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     37e:	000a      	movs	r2, r1
     380:	0030      	movs	r0, r6
     382:	0029      	movs	r1, r5
     384:	47a0      	blx	r4

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     386:	e7c1      	b.n	30c <_ZN14CLEDController9clearLedsEi+0x50>
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     388:	21c0      	movs	r1, #192	; 0xc0
     38a:	2280      	movs	r2, #128	; 0x80
     38c:	e7ca      	b.n	324 <_ZN14CLEDController9clearLedsEi+0x68>
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     38e:	2080      	movs	r0, #128	; 0x80
     390:	0040      	lsls	r0, r0, #1
     392:	f005 fd19 	bl	5dc8 <__aeabi_idiv>
     396:	b2c0      	uxtb	r0, r0
     398:	1c42      	adds	r2, r0, #1
     39a:	b2d2      	uxtb	r2, r2
     39c:	1c53      	adds	r3, r2, #1
     39e:	436b      	muls	r3, r5
     3a0:	121b      	asrs	r3, r3, #8
     3a2:	73e2      	strb	r2, [r4, #15]
     3a4:	b2d9      	uxtb	r1, r3
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     3a6:	2b00      	cmp	r3, #0
     3a8:	d021      	beq.n	3ee <_ZN14CLEDController9clearLedsEi+0x132>
     3aa:	3901      	subs	r1, #1
     3ac:	7321      	strb	r1, [r4, #12]
#endif
                    if(e[i]) e[i]--;
     3ae:	2a00      	cmp	r2, #0
     3b0:	d0c8      	beq.n	344 <_ZN14CLEDController9clearLedsEi+0x88>
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     3b2:	7ce1      	ldrb	r1, [r4, #19]
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
#endif
                    if(e[i]) e[i]--;
     3b4:	73e0      	strb	r0, [r4, #15]
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     3b6:	2900      	cmp	r1, #0
     3b8:	d0c7      	beq.n	34a <_ZN14CLEDController9clearLedsEi+0x8e>
     3ba:	2080      	movs	r0, #128	; 0x80
     3bc:	0040      	lsls	r0, r0, #1
     3be:	f005 fd03 	bl	5dc8 <__aeabi_idiv>
     3c2:	b2c0      	uxtb	r0, r0
     3c4:	1c42      	adds	r2, r0, #1
     3c6:	b2d2      	uxtb	r2, r2
     3c8:	1c53      	adds	r3, r2, #1
     3ca:	436b      	muls	r3, r5
     3cc:	121b      	asrs	r3, r3, #8
     3ce:	7422      	strb	r2, [r4, #16]
     3d0:	b2d9      	uxtb	r1, r3
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     3d2:	2b00      	cmp	r3, #0
     3d4:	d00d      	beq.n	3f2 <_ZN14CLEDController9clearLedsEi+0x136>
     3d6:	3901      	subs	r1, #1
     3d8:	7361      	strb	r1, [r4, #13]
#endif
                    if(e[i]) e[i]--;
     3da:	2a00      	cmp	r2, #0
     3dc:	d0b7      	beq.n	34e <_ZN14CLEDController9clearLedsEi+0x92>
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     3de:	7d21      	ldrb	r1, [r4, #20]
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
#endif
                    if(e[i]) e[i]--;
     3e0:	7420      	strb	r0, [r4, #16]
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     3e2:	2900      	cmp	r1, #0
     3e4:	d1b6      	bne.n	354 <_ZN14CLEDController9clearLedsEi+0x98>
     3e6:	7461      	strb	r1, [r4, #17]
                    d[i] = scale8(Q, e[i]);
     3e8:	73a1      	strb	r1, [r4, #14]
     3ea:	6837      	ldr	r7, [r6, #0]
     3ec:	e787      	b.n	2fe <_ZN14CLEDController9clearLedsEi+0x42>
     3ee:	7321      	strb	r1, [r4, #12]
     3f0:	e7dd      	b.n	3ae <_ZN14CLEDController9clearLedsEi+0xf2>
     3f2:	7361      	strb	r1, [r4, #13]
     3f4:	e7f1      	b.n	3da <_ZN14CLEDController9clearLedsEi+0x11e>
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	00000521 	.word	0x00000521
     3fc:	2000013c 	.word	0x2000013c

00000400 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     400:	b570      	push	{r4, r5, r6, lr}
     402:	b088      	sub	sp, #32
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     404:	ac01      	add	r4, sp, #4
     406:	6062      	str	r2, [r4, #4]
     408:	60a2      	str	r2, [r4, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     40a:	781a      	ldrb	r2, [r3, #0]
     40c:	9101      	str	r1, [sp, #4]
     40e:	74a2      	strb	r2, [r4, #18]
        g = rhs.g;
     410:	785a      	ldrb	r2, [r3, #1]

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     412:	0005      	movs	r5, r0
     414:	74e2      	strb	r2, [r4, #19]
        b = rhs.b;
     416:	789b      	ldrb	r3, [r3, #2]
     418:	7c80      	ldrb	r0, [r0, #18]
     41a:	7523      	strb	r3, [r4, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     41c:	2801      	cmp	r0, #1
     41e:	d011      	beq.n	444 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x44>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     420:	2300      	movs	r3, #0
     422:	7463      	strb	r3, [r4, #17]
     424:	7423      	strb	r3, [r4, #16]
     426:	73e3      	strb	r3, [r4, #15]
     428:	73a3      	strb	r3, [r4, #14]
     42a:	7363      	strb	r3, [r4, #13]
     42c:	7323      	strb	r3, [r4, #12]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     42e:	2303      	movs	r3, #3
     430:	7563      	strb	r3, [r4, #21]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     432:	2300      	movs	r3, #0
     434:	61a3      	str	r3, [r4, #24]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     436:	682b      	ldr	r3, [r5, #0]
     438:	0021      	movs	r1, r4
     43a:	699b      	ldr	r3, [r3, #24]
     43c:	0028      	movs	r0, r5
     43e:	4798      	blx	r3
  }
     440:	b008      	add	sp, #32
     442:	bd70      	pop	{r4, r5, r6, pc}
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     444:	2107      	movs	r1, #7
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static byte R = 0;
            R++;
     446:	4a35      	ldr	r2, [pc, #212]	; (51c <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x11c>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     448:	7813      	ldrb	r3, [r2, #0]
     44a:	3301      	adds	r3, #1
     44c:	400b      	ands	r3, r1
     44e:	7013      	strb	r3, [r2, #0]
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     450:	4218      	tst	r0, r3
     452:	d12d      	bne.n	4b0 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xb0>
            R &= (0x01 << ditherBits) - 1;

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;
     454:	2200      	movs	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     456:	3139      	adds	r1, #57	; 0x39
                if(R & 0x02) { Q |= 0x40; }
     458:	0798      	lsls	r0, r3, #30
     45a:	d500      	bpl.n	45e <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x5e>
     45c:	000a      	movs	r2, r1
                if(R & 0x04) { Q |= 0x20; }
     45e:	2104      	movs	r1, #4
     460:	4219      	tst	r1, r3
     462:	d002      	beq.n	46a <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x6a>
     464:	2320      	movs	r3, #32
     466:	431a      	orrs	r2, r3
     468:	b2d2      	uxtb	r2, r2
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     46a:	7ca1      	ldrb	r1, [r4, #18]
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     46c:	3210      	adds	r2, #16
     46e:	b2d6      	uxtb	r6, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     470:	2900      	cmp	r1, #0
     472:	d120      	bne.n	4b6 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xb6>
     474:	73e1      	strb	r1, [r4, #15]
                    d[i] = scale8(Q, e[i]);
     476:	7321      	strb	r1, [r4, #12]
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     478:	7ce1      	ldrb	r1, [r4, #19]
                    e[i] = s ? (256/s) + 1 : 0;
     47a:	2900      	cmp	r1, #0
     47c:	d131      	bne.n	4e2 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xe2>
     47e:	7421      	strb	r1, [r4, #16]
                    d[i] = scale8(Q, e[i]);
     480:	7361      	strb	r1, [r4, #13]
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     482:	7d21      	ldrb	r1, [r4, #20]
                    e[i] = s ? (256/s) + 1 : 0;
     484:	2900      	cmp	r1, #0
     486:	d042      	beq.n	50e <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x10e>
     488:	2080      	movs	r0, #128	; 0x80
     48a:	0040      	lsls	r0, r0, #1
     48c:	f005 fc9c 	bl	5dc8 <__aeabi_idiv>
     490:	b2c0      	uxtb	r0, r0
     492:	1c43      	adds	r3, r0, #1
     494:	b2db      	uxtb	r3, r3
     496:	1c5a      	adds	r2, r3, #1
     498:	4356      	muls	r6, r2
     49a:	1236      	asrs	r6, r6, #8
     49c:	7463      	strb	r3, [r4, #17]
     49e:	b2f2      	uxtb	r2, r6
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     4a0:	2e00      	cmp	r6, #0
     4a2:	d000      	beq.n	4a6 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xa6>
     4a4:	3a01      	subs	r2, #1
     4a6:	73a2      	strb	r2, [r4, #14]
#endif
                    if(e[i]) e[i]--;
     4a8:	2b00      	cmp	r3, #0
     4aa:	d0c0      	beq.n	42e <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x2e>
     4ac:	7460      	strb	r0, [r4, #17]
     4ae:	e7be      	b.n	42e <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x2e>
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     4b0:	21c0      	movs	r1, #192	; 0xc0
     4b2:	2280      	movs	r2, #128	; 0x80
     4b4:	e7d0      	b.n	458 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x58>
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     4b6:	2080      	movs	r0, #128	; 0x80
     4b8:	0040      	lsls	r0, r0, #1
     4ba:	f005 fc85 	bl	5dc8 <__aeabi_idiv>
     4be:	b2c0      	uxtb	r0, r0
     4c0:	1c42      	adds	r2, r0, #1
     4c2:	b2d2      	uxtb	r2, r2
     4c4:	1c53      	adds	r3, r2, #1
     4c6:	4373      	muls	r3, r6
     4c8:	121b      	asrs	r3, r3, #8
     4ca:	73e2      	strb	r2, [r4, #15]
     4cc:	b2d9      	uxtb	r1, r3
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     4ce:	2b00      	cmp	r3, #0
     4d0:	d020      	beq.n	514 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x114>
     4d2:	3901      	subs	r1, #1
     4d4:	7321      	strb	r1, [r4, #12]
#endif
                    if(e[i]) e[i]--;
     4d6:	2a00      	cmp	r2, #0
     4d8:	d0ce      	beq.n	478 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x78>
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     4da:	7ce1      	ldrb	r1, [r4, #19]
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
#endif
                    if(e[i]) e[i]--;
     4dc:	73e0      	strb	r0, [r4, #15]
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     4de:	2900      	cmp	r1, #0
     4e0:	d0cd      	beq.n	47e <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x7e>
     4e2:	2080      	movs	r0, #128	; 0x80
     4e4:	0040      	lsls	r0, r0, #1
     4e6:	f005 fc6f 	bl	5dc8 <__aeabi_idiv>
     4ea:	b2c0      	uxtb	r0, r0
     4ec:	1c42      	adds	r2, r0, #1
     4ee:	b2d2      	uxtb	r2, r2
     4f0:	1c53      	adds	r3, r2, #1
     4f2:	4373      	muls	r3, r6
     4f4:	121b      	asrs	r3, r3, #8
     4f6:	7422      	strb	r2, [r4, #16]
     4f8:	b2d9      	uxtb	r1, r3
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     4fa:	2b00      	cmp	r3, #0
     4fc:	d00c      	beq.n	518 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x118>
     4fe:	3901      	subs	r1, #1
     500:	7361      	strb	r1, [r4, #13]
#endif
                    if(e[i]) e[i]--;
     502:	2a00      	cmp	r2, #0
     504:	d0bd      	beq.n	482 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x82>
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     506:	7d21      	ldrb	r1, [r4, #20]
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
#endif
                    if(e[i]) e[i]--;
     508:	7420      	strb	r0, [r4, #16]
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     50a:	2900      	cmp	r1, #0
     50c:	d1bc      	bne.n	488 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x88>
     50e:	7461      	strb	r1, [r4, #17]
                    d[i] = scale8(Q, e[i]);
     510:	73a1      	strb	r1, [r4, #14]
     512:	e78c      	b.n	42e <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x2e>
     514:	7321      	strb	r1, [r4, #12]
     516:	e7de      	b.n	4d6 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xd6>
     518:	7361      	strb	r1, [r4, #13]
     51a:	e7f2      	b.n	502 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x102>
     51c:	2000013c 	.word	0x2000013c

00000520 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     520:	b570      	push	{r4, r5, r6, lr}
     522:	b088      	sub	sp, #32
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     524:	ac01      	add	r4, sp, #4
     526:	6062      	str	r2, [r4, #4]
     528:	60a2      	str	r2, [r4, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     52a:	781a      	ldrb	r2, [r3, #0]
     52c:	9101      	str	r1, [sp, #4]
     52e:	74a2      	strb	r2, [r4, #18]
        g = rhs.g;
     530:	785a      	ldrb	r2, [r3, #1]

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     532:	0005      	movs	r5, r0
     534:	74e2      	strb	r2, [r4, #19]
        b = rhs.b;
     536:	789b      	ldrb	r3, [r3, #2]
     538:	7c80      	ldrb	r0, [r0, #18]
     53a:	7523      	strb	r3, [r4, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     53c:	2801      	cmp	r0, #1
     53e:	d010      	beq.n	562 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x42>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     540:	2300      	movs	r3, #0
     542:	7463      	strb	r3, [r4, #17]
     544:	7423      	strb	r3, [r4, #16]
     546:	73e3      	strb	r3, [r4, #15]
     548:	73a3      	strb	r3, [r4, #14]
     54a:	7363      	strb	r3, [r4, #13]
     54c:	7323      	strb	r3, [r4, #12]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     54e:	2300      	movs	r3, #0
     550:	7563      	strb	r3, [r4, #21]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     552:	61a3      	str	r3, [r4, #24]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     554:	682b      	ldr	r3, [r5, #0]
     556:	0021      	movs	r1, r4
     558:	699b      	ldr	r3, [r3, #24]
     55a:	0028      	movs	r0, r5
     55c:	4798      	blx	r3
  }
     55e:	b008      	add	sp, #32
     560:	bd70      	pop	{r4, r5, r6, pc}
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     562:	2107      	movs	r1, #7
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static byte R = 0;
            R++;
     564:	4a35      	ldr	r2, [pc, #212]	; (63c <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x11c>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     566:	7813      	ldrb	r3, [r2, #0]
     568:	3301      	adds	r3, #1
     56a:	400b      	ands	r3, r1
     56c:	7013      	strb	r3, [r2, #0]
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     56e:	4218      	tst	r0, r3
     570:	d12d      	bne.n	5ce <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xae>
            R &= (0x01 << ditherBits) - 1;

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;
     572:	2200      	movs	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     574:	3139      	adds	r1, #57	; 0x39
                if(R & 0x02) { Q |= 0x40; }
     576:	0798      	lsls	r0, r3, #30
     578:	d500      	bpl.n	57c <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x5c>
     57a:	000a      	movs	r2, r1
                if(R & 0x04) { Q |= 0x20; }
     57c:	2104      	movs	r1, #4
     57e:	4219      	tst	r1, r3
     580:	d002      	beq.n	588 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x68>
     582:	2320      	movs	r3, #32
     584:	431a      	orrs	r2, r3
     586:	b2d2      	uxtb	r2, r2
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     588:	7ca1      	ldrb	r1, [r4, #18]
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     58a:	3210      	adds	r2, #16
     58c:	b2d6      	uxtb	r6, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     58e:	2900      	cmp	r1, #0
     590:	d120      	bne.n	5d4 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xb4>
     592:	73e1      	strb	r1, [r4, #15]
                    d[i] = scale8(Q, e[i]);
     594:	7321      	strb	r1, [r4, #12]
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     596:	7ce1      	ldrb	r1, [r4, #19]
                    e[i] = s ? (256/s) + 1 : 0;
     598:	2900      	cmp	r1, #0
     59a:	d131      	bne.n	600 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xe0>
     59c:	7421      	strb	r1, [r4, #16]
                    d[i] = scale8(Q, e[i]);
     59e:	7361      	strb	r1, [r4, #13]
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     5a0:	7d21      	ldrb	r1, [r4, #20]
                    e[i] = s ? (256/s) + 1 : 0;
     5a2:	2900      	cmp	r1, #0
     5a4:	d042      	beq.n	62c <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x10c>
     5a6:	2080      	movs	r0, #128	; 0x80
     5a8:	0040      	lsls	r0, r0, #1
     5aa:	f005 fc0d 	bl	5dc8 <__aeabi_idiv>
     5ae:	b2c0      	uxtb	r0, r0
     5b0:	1c43      	adds	r3, r0, #1
     5b2:	b2db      	uxtb	r3, r3
     5b4:	1c5a      	adds	r2, r3, #1
     5b6:	4356      	muls	r6, r2
     5b8:	1236      	asrs	r6, r6, #8
     5ba:	7463      	strb	r3, [r4, #17]
     5bc:	b2f2      	uxtb	r2, r6
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     5be:	2e00      	cmp	r6, #0
     5c0:	d000      	beq.n	5c4 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xa4>
     5c2:	3a01      	subs	r2, #1
     5c4:	73a2      	strb	r2, [r4, #14]
#endif
                    if(e[i]) e[i]--;
     5c6:	2b00      	cmp	r3, #0
     5c8:	d0c1      	beq.n	54e <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x2e>
     5ca:	7460      	strb	r0, [r4, #17]
     5cc:	e7bf      	b.n	54e <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x2e>
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     5ce:	21c0      	movs	r1, #192	; 0xc0
     5d0:	2280      	movs	r2, #128	; 0x80
     5d2:	e7d0      	b.n	576 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x56>
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5d4:	2080      	movs	r0, #128	; 0x80
     5d6:	0040      	lsls	r0, r0, #1
     5d8:	f005 fbf6 	bl	5dc8 <__aeabi_idiv>
     5dc:	b2c0      	uxtb	r0, r0
     5de:	1c42      	adds	r2, r0, #1
     5e0:	b2d2      	uxtb	r2, r2
     5e2:	1c53      	adds	r3, r2, #1
     5e4:	4373      	muls	r3, r6
     5e6:	121b      	asrs	r3, r3, #8
     5e8:	73e2      	strb	r2, [r4, #15]
     5ea:	b2d9      	uxtb	r1, r3
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     5ec:	2b00      	cmp	r3, #0
     5ee:	d020      	beq.n	632 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x112>
     5f0:	3901      	subs	r1, #1
     5f2:	7321      	strb	r1, [r4, #12]
#endif
                    if(e[i]) e[i]--;
     5f4:	2a00      	cmp	r2, #0
     5f6:	d0ce      	beq.n	596 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x76>
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     5f8:	7ce1      	ldrb	r1, [r4, #19]
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
#endif
                    if(e[i]) e[i]--;
     5fa:	73e0      	strb	r0, [r4, #15]
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5fc:	2900      	cmp	r1, #0
     5fe:	d0cd      	beq.n	59c <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x7c>
     600:	2080      	movs	r0, #128	; 0x80
     602:	0040      	lsls	r0, r0, #1
     604:	f005 fbe0 	bl	5dc8 <__aeabi_idiv>
     608:	b2c0      	uxtb	r0, r0
     60a:	1c42      	adds	r2, r0, #1
     60c:	b2d2      	uxtb	r2, r2
     60e:	1c53      	adds	r3, r2, #1
     610:	4373      	muls	r3, r6
     612:	121b      	asrs	r3, r3, #8
     614:	7422      	strb	r2, [r4, #16]
     616:	b2d9      	uxtb	r1, r3
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     618:	2b00      	cmp	r3, #0
     61a:	d00c      	beq.n	636 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x116>
     61c:	3901      	subs	r1, #1
     61e:	7361      	strb	r1, [r4, #13]
#endif
                    if(e[i]) e[i]--;
     620:	2a00      	cmp	r2, #0
     622:	d0bd      	beq.n	5a0 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x80>
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     624:	7d21      	ldrb	r1, [r4, #20]
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
#endif
                    if(e[i]) e[i]--;
     626:	7420      	strb	r0, [r4, #16]
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     628:	2900      	cmp	r1, #0
     62a:	d1bc      	bne.n	5a6 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x86>
     62c:	7461      	strb	r1, [r4, #17]
                    d[i] = scale8(Q, e[i]);
     62e:	73a1      	strb	r1, [r4, #14]
     630:	e78d      	b.n	54e <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x2e>
     632:	7321      	strb	r1, [r4, #12]
     634:	e7de      	b.n	5f4 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xd4>
     636:	7361      	strb	r1, [r4, #13]
     638:	e7f2      	b.n	620 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x100>
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	2000013c 	.word	0x2000013c

00000640 <HardFault_HandlerC>:
  volatile unsigned long _DFSR ;
  volatile unsigned long _AFSR ;
  volatile unsigned long _BFAR ;
  volatile unsigned long _MMAR ;
 
  stacked_r0 = ((unsigned long)hardfault_args[0]) ;
     640:	6803      	ldr	r3, [r0, #0]

static uint32_t chnl = 0;  // DMA channel
volatile uint32_t dmadone;

extern "C" {
void HardFault_HandlerC(unsigned long *hardfault_args){
     642:	b08e      	sub	sp, #56	; 0x38
  volatile unsigned long _DFSR ;
  volatile unsigned long _AFSR ;
  volatile unsigned long _BFAR ;
  volatile unsigned long _MMAR ;
 
  stacked_r0 = ((unsigned long)hardfault_args[0]) ;
     644:	9300      	str	r3, [sp, #0]
  stacked_r1 = ((unsigned long)hardfault_args[1]) ;
     646:	6843      	ldr	r3, [r0, #4]
     648:	9301      	str	r3, [sp, #4]
  stacked_r2 = ((unsigned long)hardfault_args[2]) ;
     64a:	6883      	ldr	r3, [r0, #8]
     64c:	9302      	str	r3, [sp, #8]
  stacked_r3 = ((unsigned long)hardfault_args[3]) ;
     64e:	68c3      	ldr	r3, [r0, #12]
     650:	9303      	str	r3, [sp, #12]
  stacked_r12 = ((unsigned long)hardfault_args[4]) ;
     652:	6903      	ldr	r3, [r0, #16]
     654:	9304      	str	r3, [sp, #16]
  stacked_lr = ((unsigned long)hardfault_args[5]) ;
     656:	6943      	ldr	r3, [r0, #20]
     658:	9305      	str	r3, [sp, #20]
  stacked_pc = ((unsigned long)hardfault_args[6]) ;
     65a:	6983      	ldr	r3, [r0, #24]
     65c:	9306      	str	r3, [sp, #24]
  stacked_psr = ((unsigned long)hardfault_args[7]) ;
     65e:	69c3      	ldr	r3, [r0, #28]
     660:	9307      	str	r3, [sp, #28]
 
  // Configurable Fault Status Register
  // Consists of MMSR, BFSR and UFSR
  _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
     662:	4b0a      	ldr	r3, [pc, #40]	; (68c <HardFault_HandlerC+0x4c>)
     664:	681b      	ldr	r3, [r3, #0]
     666:	9308      	str	r3, [sp, #32]
 
  // Hard Fault Status Register
  _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
     668:	4b09      	ldr	r3, [pc, #36]	; (690 <HardFault_HandlerC+0x50>)
     66a:	681b      	ldr	r3, [r3, #0]
     66c:	9309      	str	r3, [sp, #36]	; 0x24
 
  // Debug Fault Status Register
  _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
     66e:	4b09      	ldr	r3, [pc, #36]	; (694 <HardFault_HandlerC+0x54>)
     670:	681b      	ldr	r3, [r3, #0]
     672:	930a      	str	r3, [sp, #40]	; 0x28
 
  // Auxiliary Fault Status Register
  _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
     674:	4b08      	ldr	r3, [pc, #32]	; (698 <HardFault_HandlerC+0x58>)
     676:	681b      	ldr	r3, [r3, #0]
     678:	930b      	str	r3, [sp, #44]	; 0x2c
 
  // Read the Fault Address Registers. These may not contain valid values.
  // Check BFARVALID/MMARVALID to see if they are valid values
  // MemManage Fault Address Register
  _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
     67a:	4b08      	ldr	r3, [pc, #32]	; (69c <HardFault_HandlerC+0x5c>)
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	930d      	str	r3, [sp, #52]	; 0x34
  // Bus Fault Address Register
  _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
     680:	4b07      	ldr	r3, [pc, #28]	; (6a0 <HardFault_HandlerC+0x60>)
     682:	681b      	ldr	r3, [r3, #0]
     684:	930c      	str	r3, [sp, #48]	; 0x30
 
  __asm("BKPT #0\n") ; // Break into the debugger
     686:	be00      	bkpt	0x0000
}
     688:	b00e      	add	sp, #56	; 0x38
     68a:	4770      	bx	lr
     68c:	e000ed28 	.word	0xe000ed28
     690:	e000ed2c 	.word	0xe000ed2c
     694:	e000ed30 	.word	0xe000ed30
     698:	e000ed3c 	.word	0xe000ed3c
     69c:	e000ed34 	.word	0xe000ed34
     6a0:	e000ed38 	.word	0xe000ed38

000006a4 <HardFault_Handler>:
    " mrs r0, msp      \n"
  "_HALT:              \n"
    " ldr r1,[r0,#20]  \n"
    " b HardFault_HandlerC \n"
    " bkpt #0          \n"
  );
     6a4:	2004      	movs	r0, #4
     6a6:	4671      	mov	r1, lr
     6a8:	4208      	tst	r0, r1
     6aa:	d002      	beq.n	6b2 <_MSP>
     6ac:	f3ef 8009 	mrs	r0, PSP
     6b0:	e001      	b.n	6b6 <_HALT>

000006b2 <_MSP>:
     6b2:	f3ef 8008 	mrs	r0, MSP

000006b6 <_HALT>:
     6b6:	6941      	ldr	r1, [r0, #20]
     6b8:	e7c2      	b.n	640 <HardFault_HandlerC>
     6ba:	be00      	bkpt	0x0000
}
     6bc:	4770      	bx	lr
     6be:	46c0      	nop			; (mov r8, r8)

000006c0 <DMAC_Handler>:

void DMAC_Handler() {
     6c0:	b510      	push	{r4, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     6c2:	b672      	cpsid	i
  // interrupts DMAC_CHINTENCLR_TERR DMAC_CHINTENCLR_TCMPL DMAC_CHINTENCLR_SUSP
  uint8_t active_channel;
  // disable irqs ?
  __disable_irq();
  active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk; // get channel number
  DMAC->CHID.reg = DMAC_CHID_ID(active_channel);
     6c4:	210f      	movs	r1, #15
void DMAC_Handler() {
  // interrupts DMAC_CHINTENCLR_TERR DMAC_CHINTENCLR_TCMPL DMAC_CHINTENCLR_SUSP
  uint8_t active_channel;
  // disable irqs ?
  __disable_irq();
  active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk; // get channel number
     6c6:	4b0e      	ldr	r3, [pc, #56]	; (700 <DMAC_Handler+0x40>)
     6c8:	8c1a      	ldrh	r2, [r3, #32]
  DMAC->CHID.reg = DMAC_CHID_ID(active_channel);
     6ca:	400a      	ands	r2, r1
     6cc:	3130      	adds	r1, #48	; 0x30
     6ce:	545a      	strb	r2, [r3, r1]
  dmadone = DMAC->CHINTFLAG.reg;
     6d0:	224e      	movs	r2, #78	; 0x4e
     6d2:	5c9b      	ldrb	r3, [r3, r2]
     6d4:	4a0b      	ldr	r2, [pc, #44]	; (704 <DMAC_Handler+0x44>)
     6d6:	b2db      	uxtb	r3, r3
     6d8:	6013      	str	r3, [r2, #0]
  if(dmadone == 1)
     6da:	6813      	ldr	r3, [r2, #0]
     6dc:	2b01      	cmp	r3, #1
     6de:	d009      	beq.n	6f4 <DMAC_Handler+0x34>
  {
	// error 
	Serial.println("error");
  }
  DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL; // clear
     6e0:	234e      	movs	r3, #78	; 0x4e
     6e2:	2102      	movs	r1, #2
     6e4:	4a06      	ldr	r2, [pc, #24]	; (700 <DMAC_Handler+0x40>)
     6e6:	54d1      	strb	r1, [r2, r3]
  DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     6e8:	3901      	subs	r1, #1
     6ea:	54d1      	strb	r1, [r2, r3]
  DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     6ec:	3103      	adds	r1, #3
     6ee:	54d1      	strb	r1, [r2, r3]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     6f0:	b662      	cpsie	i
  __enable_irq();
}
     6f2:	bd10      	pop	{r4, pc}
  DMAC->CHID.reg = DMAC_CHID_ID(active_channel);
  dmadone = DMAC->CHINTFLAG.reg;
  if(dmadone == 1)
  {
	// error 
	Serial.println("error");
     6f4:	4904      	ldr	r1, [pc, #16]	; (708 <DMAC_Handler+0x48>)
     6f6:	4805      	ldr	r0, [pc, #20]	; (70c <DMAC_Handler+0x4c>)
     6f8:	f000 fea0 	bl	143c <_ZN5Print7printlnEPKc>
     6fc:	e7f0      	b.n	6e0 <DMAC_Handler+0x20>
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	41004800 	.word	0x41004800
     704:	20000310 	.word	0x20000310
     708:	00007f14 	.word	0x00007f14
     70c:	200005f0 	.word	0x200005f0

00000710 <setup>:
  ADCsync();
  ADC->CTRLA.bit.ENABLE = 0x01;
  ADCsync();
}

void setup() {
     710:	b510      	push	{r4, lr}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     712:	2401      	movs	r4, #1
     714:	4952      	ldr	r1, [pc, #328]	; (860 <setup+0x150>)
     716:	b082      	sub	sp, #8
     718:	680b      	ldr	r3, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     71a:	4852      	ldr	r0, [pc, #328]	; (864 <setup+0x154>)
     71c:	4023      	ands	r3, r4
     71e:	d11d      	bne.n	75c <setup+0x4c>
     720:	4a51      	ldr	r2, [pc, #324]	; (868 <setup+0x158>)
     722:	6043      	str	r3, [r0, #4]
     724:	6002      	str	r2, [r0, #0]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     726:	22ff      	movs	r2, #255	; 0xff
     728:	6143      	str	r3, [r0, #20]
        m_pNext = NULL;
     72a:	6083      	str	r3, [r0, #8]
        if(m_pHead==NULL) { m_pHead = this; }
     72c:	4b4f      	ldr	r3, [pc, #316]	; (86c <setup+0x15c>)
     72e:	7302      	strb	r2, [r0, #12]
     730:	7342      	strb	r2, [r0, #13]
     732:	7382      	strb	r2, [r0, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     734:	73c2      	strb	r2, [r0, #15]
     736:	7402      	strb	r2, [r0, #16]
     738:	7442      	strb	r2, [r0, #17]
     73a:	681a      	ldr	r2, [r3, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     73c:	7484      	strb	r4, [r0, #18]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     73e:	2a00      	cmp	r2, #0
     740:	d100      	bne.n	744 <setup+0x34>
     742:	e08a      	b.n	85a <setup+0x14a>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     744:	4b4a      	ldr	r3, [pc, #296]	; (870 <setup+0x160>)
     746:	681a      	ldr	r2, [r3, #0]
     748:	2a00      	cmp	r2, #0
     74a:	d000      	beq.n	74e <setup+0x3e>
     74c:	6090      	str	r0, [r2, #8]
        m_pTail = this;
     74e:	6018      	str	r0, [r3, #0]
	inline void writeLed(uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((always_inline)) {
		mSPI.writeByte(0xFF); mSPI.writeByte(b0); mSPI.writeByte(b1); mSPI.writeByte(b2);
	}

public:
	APA102Controller() {}
     750:	4b48      	ldr	r3, [pc, #288]	; (874 <setup+0x164>)
     752:	6003      	str	r3, [r0, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
     754:	2300      	movs	r3, #0
     756:	6183      	str	r3, [r0, #24]
     758:	3301      	adds	r3, #1
     75a:	600b      	str	r3, [r1, #0]
     75c:	4c46      	ldr	r4, [pc, #280]	; (878 <setup+0x168>)
     75e:	2300      	movs	r3, #0
     760:	223c      	movs	r2, #60	; 0x3c
     762:	0021      	movs	r1, r4
     764:	f003 fa64 	bl	3c30 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
     768:	22b0      	movs	r2, #176	; 0xb0
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     76a:	23ff      	movs	r3, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
     76c:	7342      	strb	r2, [r0, #13]
        b = (colorcode >>  0) & 0xFF;
     76e:	3240      	adds	r2, #64	; 0x40
     770:	7382      	strb	r2, [r0, #14]
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     772:	4942      	ldr	r1, [pc, #264]	; (87c <setup+0x16c>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     774:	4a42      	ldr	r2, [pc, #264]	; (880 <setup+0x170>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     776:	7303      	strb	r3, [r0, #12]
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     778:	60d1      	str	r1, [r2, #12]
     77a:	4942      	ldr	r1, [pc, #264]	; (884 <setup+0x174>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     77c:	7013      	strb	r3, [r2, #0]
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     77e:	6091      	str	r1, [r2, #8]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     780:	2200      	movs	r2, #0
     782:	4669      	mov	r1, sp
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     784:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     786:	704b      	strb	r3, [r1, #1]
     788:	700a      	strb	r2, [r1, #0]
     78a:	708a      	strb	r2, [r1, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     78c:	a901      	add	r1, sp, #4
     78e:	f003 fb13 	bl	3db8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
  // keine ahnung obs auswirkung hat, meine PowerBank hat 2.1A darum hab ich mal 2A max eingestellt. Sollte die Helligkeit automatisch regeln wenn zuviele Leds zu hell eingestellt sind
  FastLED.setMaxPowerInVoltsAndMilliamps(5, 2000);

  // alle leds gleiche farbe
  CHSV color(0, 255, 0) ; // rot
  fill_solid(leds.data(), leds.size(), color);
     792:	aa01      	add	r2, sp, #4
     794:	213c      	movs	r1, #60	; 0x3c
     796:	0020      	movs	r0, r4
     798:	f003 fa3a 	bl	3c10 <_Z10fill_solidP4CRGBiRKS_>

  Serial.begin(9600);
     79c:	2196      	movs	r1, #150	; 0x96
     79e:	483a      	ldr	r0, [pc, #232]	; (888 <setup+0x178>)
     7a0:	0189      	lsls	r1, r1, #6
     7a2:	f001 f98b 	bl	1abc <_ZN7Serial_5beginEm>
  analogWriteResolution(10);
     7a6:	200a      	movs	r0, #10
     7a8:	f002 fcbe 	bl	3128 <analogWriteResolution>
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
}

void adc_init() {
  analogRead(ADCPIN);  // do some pin init  pinPeripheral()
     7ac:	200e      	movs	r0, #14
     7ae:	f002 fd07 	bl	31c0 <analogRead>
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
     7b2:	2202      	movs	r2, #2
     7b4:	4935      	ldr	r1, [pc, #212]	; (88c <setup+0x17c>)
     7b6:	780b      	ldrb	r3, [r1, #0]
     7b8:	4393      	bics	r3, r2
     7ba:	700b      	strb	r3, [r1, #0]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     7bc:	7e4b      	ldrb	r3, [r1, #25]
     7be:	4a33      	ldr	r2, [pc, #204]	; (88c <setup+0x17c>)
     7c0:	09db      	lsrs	r3, r3, #7
     7c2:	d1fb      	bne.n	7bc <setup+0xac>
  analogRead(ADCPIN);  // do some pin init  pinPeripheral()
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
  ADCsync();
  //ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; //  2.2297 V Supply VDDANA
  //ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain select as 1X
  ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;  // default
     7c4:	21f0      	movs	r1, #240	; 0xf0
     7c6:	6913      	ldr	r3, [r2, #16]
     7c8:	0509      	lsls	r1, r1, #20
     7ca:	430b      	orrs	r3, r1
  ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 0 Pegel bei 3.3V / 2 -> 1.65 V
     7cc:	210f      	movs	r1, #15
  analogRead(ADCPIN);  // do some pin init  pinPeripheral()
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
  ADCsync();
  //ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; //  2.2297 V Supply VDDANA
  //ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain select as 1X
  ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;  // default
     7ce:	6113      	str	r3, [r2, #16]
  ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 0 Pegel bei 3.3V / 2 -> 1.65 V
     7d0:	7853      	ldrb	r3, [r2, #1]
     7d2:	438b      	bics	r3, r1
     7d4:	2102      	movs	r1, #2
     7d6:	430b      	orrs	r3, r1
     7d8:	7053      	strb	r3, [r2, #1]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     7da:	7e53      	ldrb	r3, [r2, #25]
     7dc:	492b      	ldr	r1, [pc, #172]	; (88c <setup+0x17c>)
     7de:	09db      	lsrs	r3, r3, #7
     7e0:	d1fb      	bne.n	7da <setup+0xca>
  //ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; //  2.2297 V Supply VDDANA
  //ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain select as 1X
  ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;  // default
  ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 0 Pegel bei 3.3V / 2 -> 1.65 V
  ADCsync();    //  ref 31.6.16
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[ADCPIN].ulADCChannelNumber;
     7e2:	201f      	movs	r0, #31
     7e4:	3361      	adds	r3, #97	; 0x61
     7e6:	4a2a      	ldr	r2, [pc, #168]	; (890 <setup+0x180>)
     7e8:	33ff      	adds	r3, #255	; 0xff
     7ea:	5cd2      	ldrb	r2, [r2, r3]
     7ec:	690b      	ldr	r3, [r1, #16]
     7ee:	4002      	ands	r2, r0
     7f0:	4383      	bics	r3, r0
     7f2:	4313      	orrs	r3, r2
     7f4:	610b      	str	r3, [r1, #16]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     7f6:	7e4b      	ldrb	r3, [r1, #25]
     7f8:	4a24      	ldr	r2, [pc, #144]	; (88c <setup+0x17c>)
     7fa:	09db      	lsrs	r3, r3, #7
     7fc:	d1fb      	bne.n	7f6 <setup+0xe6>
  ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;  // default
  ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 0 Pegel bei 3.3V / 2 -> 1.65 V
  ADCsync();    //  ref 31.6.16
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[ADCPIN].ulADCChannelNumber;
  ADCsync();
  ADC->AVGCTRL.reg = 0;       // no averaging
     7fe:	7093      	strb	r3, [r2, #2]
  ADC->SAMPCTRL.reg = 0x00;  ; //sample length in 1/2 CLK_ADC cycles
     800:	70d3      	strb	r3, [r2, #3]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     802:	7e53      	ldrb	r3, [r2, #25]
     804:	4921      	ldr	r1, [pc, #132]	; (88c <setup+0x17c>)
     806:	09db      	lsrs	r3, r3, #7
     808:	d1fb      	bne.n	802 <setup+0xf2>
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[ADCPIN].ulADCChannelNumber;
  ADCsync();
  ADC->AVGCTRL.reg = 0;       // no averaging
  ADC->SAMPCTRL.reg = 0x00;  ; //sample length in 1/2 CLK_ADC cycles
  ADCsync();
  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256 | ADC_CTRLB_FREERUN | ADC_CTRLB_RESSEL_10BIT; // 48Mhz / 64 = 750kHz, 1samples = 6clocks => 750kHz / 6 = 125Khz. Mit Averaging -> 125kHz / 8 = 15.625kHz
     80a:	4b22      	ldr	r3, [pc, #136]	; (894 <setup+0x184>)
     80c:	808b      	strh	r3, [r1, #4]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     80e:	7e4b      	ldrb	r3, [r1, #25]
     810:	4a1e      	ldr	r2, [pc, #120]	; (88c <setup+0x17c>)
     812:	09db      	lsrs	r3, r3, #7
     814:	d1fb      	bne.n	80e <setup+0xfe>
  ADC->AVGCTRL.reg = 0;       // no averaging
  ADC->SAMPCTRL.reg = 0x00;  ; //sample length in 1/2 CLK_ADC cycles
  ADCsync();
  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256 | ADC_CTRLB_FREERUN | ADC_CTRLB_RESSEL_10BIT; // 48Mhz / 64 = 750kHz, 1samples = 6clocks => 750kHz / 6 = 125Khz. Mit Averaging -> 125kHz / 8 = 15.625kHz
  ADCsync();
  ADC->CTRLA.bit.ENABLE = 0x01;
     816:	2302      	movs	r3, #2
     818:	7811      	ldrb	r1, [r2, #0]
     81a:	430b      	orrs	r3, r1
     81c:	7013      	strb	r3, [r2, #0]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     81e:	7e53      	ldrb	r3, [r2, #25]
     820:	09db      	lsrs	r3, r3, #7
     822:	d1fc      	bne.n	81e <setup+0x10e>
}


void dma_init() {
  // probably on by default
  PM->AHBMASK.reg |= PM_AHBMASK_DMAC ;
     824:	2220      	movs	r2, #32
     826:	4b1c      	ldr	r3, [pc, #112]	; (898 <setup+0x188>)
  Serial.begin(9600);
  analogWriteResolution(10);
  // analogWrite(A0, 64);  // test with DAC
  adc_init();
  dma_init();
  fft = arduinoFFT();
     828:	a801      	add	r0, sp, #4
}


void dma_init() {
  // probably on by default
  PM->AHBMASK.reg |= PM_AHBMASK_DMAC ;
     82a:	6959      	ldr	r1, [r3, #20]
     82c:	430a      	orrs	r2, r1
     82e:	615a      	str	r2, [r3, #20]
  PM->APBBMASK.reg |= PM_APBBMASK_DMAC ;
     830:	2210      	movs	r2, #16
     832:	69d9      	ldr	r1, [r3, #28]
     834:	430a      	orrs	r2, r1
     836:	61da      	str	r2, [r3, #28]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     838:	2240      	movs	r2, #64	; 0x40
     83a:	4b18      	ldr	r3, [pc, #96]	; (89c <setup+0x18c>)
     83c:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ( DMAC_IRQn ) ;

  DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     83e:	4b18      	ldr	r3, [pc, #96]	; (8a0 <setup+0x190>)
     840:	4a18      	ldr	r2, [pc, #96]	; (8a4 <setup+0x194>)
     842:	635a      	str	r2, [r3, #52]	; 0x34
  DMAC->WRBADDR.reg = (uint32_t)wrb;
     844:	4a18      	ldr	r2, [pc, #96]	; (8a8 <setup+0x198>)
     846:	639a      	str	r2, [r3, #56]	; 0x38
  DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     848:	4a18      	ldr	r2, [pc, #96]	; (8ac <setup+0x19c>)
     84a:	801a      	strh	r2, [r3, #0]
  Serial.begin(9600);
  analogWriteResolution(10);
  // analogWrite(A0, 64);  // test with DAC
  adc_init();
  dma_init();
  fft = arduinoFFT();
     84c:	f002 fe0c 	bl	3468 <_ZN10arduinoFFTC1Ev>
     850:	a801      	add	r0, sp, #4
     852:	f002 fe0b 	bl	346c <_ZN10arduinoFFTD1Ev>
}
     856:	b002      	add	sp, #8
     858:	bd10      	pop	{r4, pc}

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     85a:	6018      	str	r0, [r3, #0]
     85c:	e772      	b.n	744 <setup+0x34>
     85e:	46c0      	nop			; (mov r8, r8)
     860:	20000158 	.word	0x20000158
     864:	2000015c 	.word	0x2000015c
     868:	00007ed8 	.word	0x00007ed8
     86c:	20000be0 	.word	0x20000be0
     870:	20000bf0 	.word	0x20000bf0
     874:	00007ef8 	.word	0x00007ef8
     878:	20000534 	.word	0x20000534
     87c:	00003f05 	.word	0x00003f05
     880:	20000bd0 	.word	0x20000bd0
     884:	00002710 	.word	0x00002710
     888:	200005f0 	.word	0x200005f0
     88c:	42004000 	.word	0x42004000
     890:	0000804c 	.word	0x0000804c
     894:	00000624 	.word	0x00000624
     898:	40000400 	.word	0x40000400
     89c:	e000e100 	.word	0xe000e100
     8a0:	41004800 	.word	0x41004800
     8a4:	20000180 	.word	0x20000180
     8a8:	20000250 	.word	0x20000250
     8ac:	00000f02 	.word	0x00000f02

000008b0 <loop>:


uint8_t h = 0;

void loop() {
     8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b2:	465f      	mov	r7, fp
     8b4:	4656      	mov	r6, sl
     8b6:	464d      	mov	r5, r9
     8b8:	4644      	mov	r4, r8
     8ba:	b4f0      	push	{r4, r5, r6, r7}
     8bc:	4c91      	ldr	r4, [pc, #580]	; (b04 <loop+0x254>)
}

void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     8be:	4e92      	ldr	r6, [pc, #584]	; (b08 <loop+0x258>)
}


uint8_t h = 0;

void loop() {
     8c0:	44a5      	add	sp, r4
  
  uint32_t t_dma = micros();
     8c2:	f000 fd21 	bl	1308 <micros>
  Serial.print("dma start");
     8c6:	4b91      	ldr	r3, [pc, #580]	; (b0c <loop+0x25c>)
     8c8:	4991      	ldr	r1, [pc, #580]	; (b10 <loop+0x260>)

uint8_t h = 0;

void loop() {
  
  uint32_t t_dma = micros();
     8ca:	0007      	movs	r7, r0
  Serial.print("dma start");
     8cc:	0018      	movs	r0, r3
     8ce:	469a      	mov	sl, r3
     8d0:	f000 fda4 	bl	141c <_ZN5Print5printEPKc>
}

void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     8d4:	233f      	movs	r3, #63	; 0x3f
     8d6:	469b      	mov	fp, r3
     8d8:	2300      	movs	r3, #0
     8da:	4698      	mov	r8, r3
     8dc:	465b      	mov	r3, fp
     8de:	4642      	mov	r2, r8
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     8e0:	2440      	movs	r4, #64	; 0x40
}

void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     8e2:	54f2      	strb	r2, [r6, r3]
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     8e4:	2202      	movs	r2, #2
     8e6:	5d33      	ldrb	r3, [r6, r4]
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
  temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(0) |
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
  dmadone = 0;
     8e8:	4d8a      	ldr	r5, [pc, #552]	; (b14 <loop+0x264>)

void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     8ea:	4393      	bics	r3, r2
  DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     8ec:	3a01      	subs	r2, #1

void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     8ee:	5533      	strb	r3, [r6, r4]
  DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     8f0:	5532      	strb	r2, [r6, r4]
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
     8f2:	6933      	ldr	r3, [r6, #16]
  descriptor.descaddr = 0;
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
  descriptor.btcnt =  hwords;
  descriptor.dstaddr = (uint32_t)rxdata + hwords * 2; // end address
  descriptor.btctrl =  DMAC_BTCTRL_BEATSIZE_HWORD | DMAC_BTCTRL_DSTINC | DMAC_BTCTRL_VALID;
  memcpy(&descriptor_section[chnl], &descriptor, sizeof(dmacdescriptor));
     8f4:	4888      	ldr	r0, [pc, #544]	; (b18 <loop+0x268>)
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
  DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
     8f6:	4393      	bics	r3, r2
     8f8:	6133      	str	r3, [r6, #16]
  temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(0) |
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     8fa:	4b88      	ldr	r3, [pc, #544]	; (b1c <loop+0x26c>)
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
     8fc:	3206      	adds	r2, #6
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
  DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
  temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(0) |
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     8fe:	6473      	str	r3, [r6, #68]	; 0x44
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
     900:	234d      	movs	r3, #77	; 0x4d
     902:	54f2      	strb	r2, [r6, r3]
  dmadone = 0;
     904:	4643      	mov	r3, r8
     906:	602b      	str	r3, [r5, #0]
  descriptor.descaddr = 0;
     908:	4b85      	ldr	r3, [pc, #532]	; (b20 <loop+0x270>)
     90a:	4642      	mov	r2, r8
     90c:	4699      	mov	r9, r3
     90e:	60da      	str	r2, [r3, #12]
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
     910:	464a      	mov	r2, r9
     912:	4b84      	ldr	r3, [pc, #528]	; (b24 <loop+0x274>)
  descriptor.btcnt =  hwords;
  descriptor.dstaddr = (uint32_t)rxdata + hwords * 2; // end address
  descriptor.btctrl =  DMAC_BTCTRL_BEATSIZE_HWORD | DMAC_BTCTRL_DSTINC | DMAC_BTCTRL_VALID;
  memcpy(&descriptor_section[chnl], &descriptor, sizeof(dmacdescriptor));
     914:	4649      	mov	r1, r9
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
  dmadone = 0;
  descriptor.descaddr = 0;
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
     916:	6053      	str	r3, [r2, #4]
  descriptor.btcnt =  hwords;
     918:	2380      	movs	r3, #128	; 0x80
     91a:	005b      	lsls	r3, r3, #1
     91c:	8053      	strh	r3, [r2, #2]
  descriptor.dstaddr = (uint32_t)rxdata + hwords * 2; // end address
     91e:	464b      	mov	r3, r9
     920:	4a81      	ldr	r2, [pc, #516]	; (b28 <loop+0x278>)
     922:	609a      	str	r2, [r3, #8]
  descriptor.btctrl =  DMAC_BTCTRL_BEATSIZE_HWORD | DMAC_BTCTRL_DSTINC | DMAC_BTCTRL_VALID;
     924:	464a      	mov	r2, r9
     926:	4b81      	ldr	r3, [pc, #516]	; (b2c <loop+0x27c>)
     928:	8013      	strh	r3, [r2, #0]
  memcpy(&descriptor_section[chnl], &descriptor, sizeof(dmacdescriptor));
     92a:	2210      	movs	r2, #16
     92c:	f007 f9ee 	bl	7d0c <memcpy>

  // start channel
  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     930:	4642      	mov	r2, r8
     932:	465b      	mov	r3, fp
     934:	54f2      	strb	r2, [r6, r3]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     936:	5d32      	ldrb	r2, [r6, r4]
     938:	3b3d      	subs	r3, #61	; 0x3d
     93a:	4313      	orrs	r3, r2
     93c:	5533      	strb	r3, [r6, r4]
  uint32_t t_dma = micros();
  Serial.print("dma start");
  adc_dma(adcbuf, HWORDS);
  while (!dmadone) // await DMA done isr
  {
    if(micros() - t_dma > 400000) // dma failed -> reset it
     93e:	4b7c      	ldr	r3, [pc, #496]	; (b30 <loop+0x280>)
     940:	4698      	mov	r8, r3
     942:	e005      	b.n	950 <loop+0xa0>
     944:	f000 fce0 	bl	1308 <micros>
     948:	1bc0      	subs	r0, r0, r7
     94a:	4540      	cmp	r0, r8
     94c:	d900      	bls.n	950 <loop+0xa0>
     94e:	e0a7      	b.n	aa0 <loop+0x1f0>
void loop() {
  
  uint32_t t_dma = micros();
  Serial.print("dma start");
  adc_dma(adcbuf, HWORDS);
  while (!dmadone) // await DMA done isr
     950:	682c      	ldr	r4, [r5, #0]
     952:	2c00      	cmp	r4, #0
     954:	d0f6      	beq.n	944 <loop+0x94>
    if(micros() - t_dma > 400000) // dma failed -> reset it
    {
		adc_dma(adcbuf, HWORDS);	
    }
  }
  uint32_t t = micros() - t_dma;
     956:	f000 fcd7 	bl	1308 <micros>
  Serial.print(" dma done ");
     95a:	4976      	ldr	r1, [pc, #472]	; (b34 <loop+0x284>)
    if(micros() - t_dma > 400000) // dma failed -> reset it
    {
		adc_dma(adcbuf, HWORDS);	
    }
  }
  uint32_t t = micros() - t_dma;
     95c:	1bc7      	subs	r7, r0, r7
  Serial.print(" dma done ");
     95e:	4650      	mov	r0, sl
     960:	f000 fd5c 	bl	141c <_ZN5Print5printEPKc>
  Serial.println(t);
     964:	0039      	movs	r1, r7
     966:	220a      	movs	r2, #10
     968:	4650      	mov	r0, sl
     96a:	f000 fd81 	bl	1470 <_ZN5Print7printlnEmi>
  delay(1);
     96e:	2001      	movs	r0, #1
     970:	f000 fd00 	bl	1374 <delay>
  
  std::array<double, HWORDS> samplesArray = {0};
     974:	2280      	movs	r2, #128	; 0x80
     976:	2681      	movs	r6, #129	; 0x81
     978:	af04      	add	r7, sp, #16
     97a:	003d      	movs	r5, r7
     97c:	0112      	lsls	r2, r2, #4
     97e:	2100      	movs	r1, #0
     980:	a804      	add	r0, sp, #16
     982:	f007 f9cc 	bl	7d1e <memset>
     986:	0136      	lsls	r6, r6, #4
     988:	4c6b      	ldr	r4, [pc, #428]	; (b38 <loop+0x288>)
     98a:	446e      	add	r6, sp
  std::array<double, HWORDS> complexArray = {0};
  for (int i = 0; i < HWORDS; i++)
  {
    samplesArray[i] = (3.3 / 1024.0 * adcbuf[i]) - (3.3/2); // scale to 10bit resolution (2^10 = 1024)
     98c:	8820      	ldrh	r0, [r4, #0]
     98e:	f007 f8d7 	bl	7b40 <__aeabi_i2d>
     992:	4a6a      	ldr	r2, [pc, #424]	; (b3c <loop+0x28c>)
     994:	4b6a      	ldr	r3, [pc, #424]	; (b40 <loop+0x290>)
     996:	f006 faaf 	bl	6ef8 <__aeabi_dmul>
     99a:	4a68      	ldr	r2, [pc, #416]	; (b3c <loop+0x28c>)
     99c:	4b69      	ldr	r3, [pc, #420]	; (b44 <loop+0x294>)
     99e:	f006 fd25 	bl	73ec <__aeabi_dsub>
     9a2:	c503      	stmia	r5!, {r0, r1}
     9a4:	3402      	adds	r4, #2
  Serial.println(t);
  delay(1);
  
  std::array<double, HWORDS> samplesArray = {0};
  std::array<double, HWORDS> complexArray = {0};
  for (int i = 0; i < HWORDS; i++)
     9a6:	42ae      	cmp	r6, r5
     9a8:	d1f0      	bne.n	98c <loop+0xdc>
     9aa:	2280      	movs	r2, #128	; 0x80
     9ac:	2100      	movs	r1, #0
     9ae:	0112      	lsls	r2, r2, #4
     9b0:	0030      	movs	r0, r6
     9b2:	f007 f9b4 	bl	7d1e <memset>
  {
    Serial.print("0 4096 ");
    Serial.println(adcbuf[i]);
  }*/
  
  fft.Windowing(samplesArray.data(),samplesArray.size(), FFT_WIN_TYP_HAMMING, FFT_FORWARD);  
     9b6:	2501      	movs	r5, #1
     9b8:	2280      	movs	r2, #128	; 0x80
     9ba:	4c63      	ldr	r4, [pc, #396]	; (b48 <loop+0x298>)
     9bc:	2301      	movs	r3, #1
     9be:	0052      	lsls	r2, r2, #1
     9c0:	a904      	add	r1, sp, #16
     9c2:	0020      	movs	r0, r4
     9c4:	9500      	str	r5, [sp, #0]
     9c6:	f002 ff19 	bl	37fc <_ZN10arduinoFFT9WindowingEPdthh>
  fft.Compute(samplesArray.data(), complexArray.data(), samplesArray.size(), FFT_FORWARD);
     9ca:	2380      	movs	r3, #128	; 0x80
     9cc:	0032      	movs	r2, r6
     9ce:	005b      	lsls	r3, r3, #1
     9d0:	a904      	add	r1, sp, #16
     9d2:	0020      	movs	r0, r4
     9d4:	9500      	str	r5, [sp, #0]
     9d6:	f002 fec7 	bl	3768 <_ZN10arduinoFFT7ComputeEPdS0_th>
  fft.ComplexToMagnitude(samplesArray.data(), complexArray.data(), samplesArray.size());
     9da:	2380      	movs	r3, #128	; 0x80
     9dc:	0032      	movs	r2, r6
     9de:	005b      	lsls	r3, r3, #1
     9e0:	a904      	add	r1, sp, #16
     9e2:	0020      	movs	r0, r4
     9e4:	f002 fed6 	bl	3794 <_ZN10arduinoFFT18ComplexToMagnitudeEPdS0_t>
  // in samples stehen jetzt die fft werte (index 0 bis samples->size()/2)
  double peak = fft.MajorPeak(samplesArray.data(), samplesArray.size(), 15625);
     9e8:	2200      	movs	r2, #0
     9ea:	4b58      	ldr	r3, [pc, #352]	; (b4c <loop+0x29c>)
     9ec:	a904      	add	r1, sp, #16
     9ee:	9200      	str	r2, [sp, #0]
     9f0:	9301      	str	r3, [sp, #4]
     9f2:	2280      	movs	r2, #128	; 0x80
     9f4:	0020      	movs	r0, r4
     9f6:	0052      	lsls	r2, r2, #1
     9f8:	f003 f86e 	bl	3ad8 <_ZN10arduinoFFT9MajorPeakEPdtd>
     9fc:	000b      	movs	r3, r1
  Serial.print(peak); Serial.println(" Hz");
     9fe:	2102      	movs	r1, #2
  
  fft.Windowing(samplesArray.data(),samplesArray.size(), FFT_WIN_TYP_HAMMING, FFT_FORWARD);  
  fft.Compute(samplesArray.data(), complexArray.data(), samplesArray.size(), FFT_FORWARD);
  fft.ComplexToMagnitude(samplesArray.data(), complexArray.data(), samplesArray.size());
  // in samples stehen jetzt die fft werte (index 0 bis samples->size()/2)
  double peak = fft.MajorPeak(samplesArray.data(), samplesArray.size(), 15625);
     a00:	0002      	movs	r2, r0
  Serial.print(peak); Serial.println(" Hz");
     a02:	9100      	str	r1, [sp, #0]
     a04:	4650      	mov	r0, sl
     a06:	f000 fe8f 	bl	1728 <_ZN5Print5printEdi>
     a0a:	4650      	mov	r0, sl
     a0c:	4950      	ldr	r1, [pc, #320]	; (b50 <loop+0x2a0>)
     a0e:	f000 fd15 	bl	143c <_ZN5Print7printlnEPKc>
     a12:	4b50      	ldr	r3, [pc, #320]	; (b54 <loop+0x2a4>)
     a14:	ae03      	add	r6, sp, #12
     a16:	4698      	mov	r8, r3
     a18:	235a      	movs	r3, #90	; 0x5a
     a1a:	4443      	add	r3, r8
     a1c:	469b      	mov	fp, r3
     a1e:	4b4e      	ldr	r3, [pc, #312]	; (b58 <loop+0x2a8>)
     a20:	4699      	mov	r9, r3
     a22:	23ff      	movs	r3, #255	; 0xff
     a24:	469a      	mov	sl, r3
     a26:	4643      	mov	r3, r8
     a28:	46b8      	mov	r8, r7
     a2a:	001f      	movs	r7, r3
  
  // print out
  for(int i = 0; i < 30; i++)
  { 
      double val = samplesArray[i] / 10 * 255;
     a2c:	4641      	mov	r1, r8
     a2e:	2200      	movs	r2, #0
     a30:	6808      	ldr	r0, [r1, #0]
     a32:	6849      	ldr	r1, [r1, #4]
     a34:	4b49      	ldr	r3, [pc, #292]	; (b5c <loop+0x2ac>)
     a36:	f005 fe3b 	bl	66b0 <__aeabi_ddiv>
     a3a:	2200      	movs	r2, #0
     a3c:	4b48      	ldr	r3, [pc, #288]	; (b60 <loop+0x2b0>)
     a3e:	f006 fa5b 	bl	6ef8 <__aeabi_dmul>
      if(val > 255) {
     a42:	4b47      	ldr	r3, [pc, #284]	; (b60 <loop+0x2b0>)
     a44:	2200      	movs	r2, #0
  Serial.print(peak); Serial.println(" Hz");
  
  // print out
  for(int i = 0; i < 30; i++)
  { 
      double val = samplesArray[i] / 10 * 255;
     a46:	0004      	movs	r4, r0
     a48:	000d      	movs	r5, r1
      if(val > 255) {
     a4a:	f005 fad3 	bl	5ff4 <__aeabi_dcmpgt>
     a4e:	23ff      	movs	r3, #255	; 0xff
     a50:	2800      	cmp	r0, #0
     a52:	d104      	bne.n	a5e <loop+0x1ae>
     a54:	0020      	movs	r0, r4
     a56:	0029      	movs	r1, r5
     a58:	f005 fae0 	bl	601c <__aeabi_d2uiz>
     a5c:	b2c3      	uxtb	r3, r0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     a5e:	464a      	mov	r2, r9
     a60:	7812      	ldrb	r2, [r2, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     a62:	0039      	movs	r1, r7
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     a64:	7032      	strb	r2, [r6, #0]
     a66:	4652      	mov	r2, sl
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     a68:	0030      	movs	r0, r6
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     a6a:	70b3      	strb	r3, [r6, #2]
     a6c:	7072      	strb	r2, [r6, #1]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     a6e:	f003 f9a3 	bl	3db8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
     a72:	2308      	movs	r3, #8
     a74:	469c      	mov	ip, r3
     a76:	3703      	adds	r7, #3
     a78:	44e0      	add	r8, ip
  // in samples stehen jetzt die fft werte (index 0 bis samples->size()/2)
  double peak = fft.MajorPeak(samplesArray.data(), samplesArray.size(), 15625);
  Serial.print(peak); Serial.println(" Hz");
  
  // print out
  for(int i = 0; i < 30; i++)
     a7a:	45bb      	cmp	fp, r7
     a7c:	d1d6      	bne.n	a2c <loop+0x17c>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     a7e:	4839      	ldr	r0, [pc, #228]	; (b64 <loop+0x2b4>)
     a80:	7801      	ldrb	r1, [r0, #0]
     a82:	f003 f901 	bl	3c88 <_ZN8CFastLED4showEh>
      CHSV color(h, 255, static_cast<uint8_t>(val)) ; 
      leds[i] = color;
      //leds[59-i] = color;
  }
  FastLED.show();
  h += 1;
     a86:	464b      	mov	r3, r9
     a88:	464a      	mov	r2, r9
     a8a:	781b      	ldrb	r3, [r3, #0]
     a8c:	3301      	adds	r3, #1
     a8e:	7013      	strb	r3, [r2, #0]

}
     a90:	4b35      	ldr	r3, [pc, #212]	; (b68 <loop+0x2b8>)
     a92:	449d      	add	sp, r3
     a94:	bc3c      	pop	{r2, r3, r4, r5}
     a96:	4690      	mov	r8, r2
     a98:	4699      	mov	r9, r3
     a9a:	46a2      	mov	sl, r4
     a9c:	46ab      	mov	fp, r5
     a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     aa0:	233f      	movs	r3, #63	; 0x3f
     aa2:	54f4      	strb	r4, [r6, r3]
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     aa4:	3301      	adds	r3, #1
     aa6:	469b      	mov	fp, r3
     aa8:	2202      	movs	r2, #2
     aaa:	5cf3      	ldrb	r3, [r6, r3]
  descriptor.descaddr = 0;
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
  descriptor.btcnt =  hwords;
  descriptor.dstaddr = (uint32_t)rxdata + hwords * 2; // end address
  descriptor.btctrl =  DMAC_BTCTRL_BEATSIZE_HWORD | DMAC_BTCTRL_DSTINC | DMAC_BTCTRL_VALID;
  memcpy(&descriptor_section[chnl], &descriptor, sizeof(dmacdescriptor));
     aac:	4649      	mov	r1, r9

void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     aae:	4393      	bics	r3, r2
     ab0:	465a      	mov	r2, fp
     ab2:	54b3      	strb	r3, [r6, r2]
  DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     ab4:	465b      	mov	r3, fp
     ab6:	3a3f      	subs	r2, #63	; 0x3f
     ab8:	54f2      	strb	r2, [r6, r3]
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
     aba:	6933      	ldr	r3, [r6, #16]
  descriptor.descaddr = 0;
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
  descriptor.btcnt =  hwords;
  descriptor.dstaddr = (uint32_t)rxdata + hwords * 2; // end address
  descriptor.btctrl =  DMAC_BTCTRL_BEATSIZE_HWORD | DMAC_BTCTRL_DSTINC | DMAC_BTCTRL_VALID;
  memcpy(&descriptor_section[chnl], &descriptor, sizeof(dmacdescriptor));
     abc:	4816      	ldr	r0, [pc, #88]	; (b18 <loop+0x268>)
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
  DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
     abe:	4393      	bics	r3, r2
     ac0:	6133      	str	r3, [r6, #16]
  temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(0) |
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     ac2:	4b16      	ldr	r3, [pc, #88]	; (b1c <loop+0x26c>)
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
     ac4:	3206      	adds	r2, #6
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
  DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
  temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(0) |
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     ac6:	6473      	str	r3, [r6, #68]	; 0x44
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
     ac8:	234d      	movs	r3, #77	; 0x4d
     aca:	54f2      	strb	r2, [r6, r3]
  dmadone = 0;
  descriptor.descaddr = 0;
     acc:	464b      	mov	r3, r9
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
     ace:	464a      	mov	r2, r9
  temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(0) |
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
  dmadone = 0;
  descriptor.descaddr = 0;
     ad0:	60dc      	str	r4, [r3, #12]
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
     ad2:	4b14      	ldr	r3, [pc, #80]	; (b24 <loop+0x274>)
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
  temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(0) |
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
  dmadone = 0;
     ad4:	602c      	str	r4, [r5, #0]
  descriptor.descaddr = 0;
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
     ad6:	6053      	str	r3, [r2, #4]
  descriptor.btcnt =  hwords;
     ad8:	2380      	movs	r3, #128	; 0x80
     ada:	005b      	lsls	r3, r3, #1
     adc:	8053      	strh	r3, [r2, #2]
  descriptor.dstaddr = (uint32_t)rxdata + hwords * 2; // end address
     ade:	464b      	mov	r3, r9
     ae0:	4a11      	ldr	r2, [pc, #68]	; (b28 <loop+0x278>)
     ae2:	609a      	str	r2, [r3, #8]
  descriptor.btctrl =  DMAC_BTCTRL_BEATSIZE_HWORD | DMAC_BTCTRL_DSTINC | DMAC_BTCTRL_VALID;
     ae4:	464a      	mov	r2, r9
     ae6:	4b11      	ldr	r3, [pc, #68]	; (b2c <loop+0x27c>)
     ae8:	8013      	strh	r3, [r2, #0]
  memcpy(&descriptor_section[chnl], &descriptor, sizeof(dmacdescriptor));
     aea:	2210      	movs	r2, #16
     aec:	f007 f90e 	bl	7d0c <memcpy>

  // start channel
  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     af0:	233f      	movs	r3, #63	; 0x3f
     af2:	54f4      	strb	r4, [r6, r3]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     af4:	465b      	mov	r3, fp
     af6:	5cf2      	ldrb	r2, [r6, r3]
     af8:	3b3e      	subs	r3, #62	; 0x3e
     afa:	4313      	orrs	r3, r2
     afc:	465a      	mov	r2, fp
     afe:	54b3      	strb	r3, [r6, r2]
     b00:	e726      	b.n	950 <loop+0xa0>
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	ffffefec 	.word	0xffffefec
     b08:	41004800 	.word	0x41004800
     b0c:	200005f0 	.word	0x200005f0
     b10:	00007f1c 	.word	0x00007f1c
     b14:	20000310 	.word	0x20000310
     b18:	20000180 	.word	0x20000180
     b1c:	00802700 	.word	0x00802700
     b20:	20000320 	.word	0x20000320
     b24:	4200401a 	.word	0x4200401a
     b28:	20000534 	.word	0x20000534
     b2c:	00000901 	.word	0x00000901
     b30:	00061a80 	.word	0x00061a80
     b34:	00007f28 	.word	0x00007f28
     b38:	20000334 	.word	0x20000334
     b3c:	66666666 	.word	0x66666666
     b40:	3f6a6666 	.word	0x3f6a6666
     b44:	3ffa6666 	.word	0x3ffa6666
     b48:	20000240 	.word	0x20000240
     b4c:	40ce8480 	.word	0x40ce8480
     b50:	00007f34 	.word	0x00007f34
     b54:	20000534 	.word	0x20000534
     b58:	20000330 	.word	0x20000330
     b5c:	40240000 	.word	0x40240000
     b60:	406fe000 	.word	0x406fe000
     b64:	20000bd0 	.word	0x20000bd0
     b68:	00001014 	.word	0x00001014

00000b6c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
     b6c:	b570      	push	{r4, r5, r6, lr}
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     b6e:	4c49      	ldr	r4, [pc, #292]	; (c94 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x128>)
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     b70:	b243      	sxtb	r3, r0
     b72:	6822      	ldr	r2, [r4, #0]
     b74:	2b00      	cmp	r3, #0
     b76:	da00      	bge.n	b7a <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xe>
     b78:	e087      	b.n	c8a <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x11e>
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     b7a:	4b47      	ldr	r3, [pc, #284]	; (c98 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x12c>)
     b7c:	6819      	ldr	r1, [r3, #0]
     b7e:	680b      	ldr	r3, [r1, #0]
     b80:	4393      	bics	r3, r2
     b82:	600b      	str	r3, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     b84:	4b45      	ldr	r3, [pc, #276]	; (c9c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x130>)
     b86:	4a46      	ldr	r2, [pc, #280]	; (ca0 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x134>)
     b88:	681b      	ldr	r3, [r3, #0]
     b8a:	6816      	ldr	r6, [r2, #0]
     b8c:	681d      	ldr	r5, [r3, #0]
     b8e:	4335      	orrs	r5, r6
     b90:	601d      	str	r5, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     b92:	6816      	ldr	r6, [r2, #0]
     b94:	681d      	ldr	r5, [r3, #0]
     b96:	43b5      	bics	r5, r6
     b98:	601d      	str	r5, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     b9a:	6826      	ldr	r6, [r4, #0]
     b9c:	0645      	lsls	r5, r0, #25
     b9e:	d55f      	bpl.n	c60 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xf4>
     ba0:	680d      	ldr	r5, [r1, #0]
     ba2:	4335      	orrs	r5, r6
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     ba4:	600d      	str	r5, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     ba6:	6816      	ldr	r6, [r2, #0]
     ba8:	681d      	ldr	r5, [r3, #0]
     baa:	4335      	orrs	r5, r6
     bac:	601d      	str	r5, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     bae:	6816      	ldr	r6, [r2, #0]
     bb0:	681d      	ldr	r5, [r3, #0]
     bb2:	43b5      	bics	r5, r6
     bb4:	601d      	str	r5, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     bb6:	6826      	ldr	r6, [r4, #0]
     bb8:	0685      	lsls	r5, r0, #26
     bba:	d560      	bpl.n	c7e <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x112>
     bbc:	680d      	ldr	r5, [r1, #0]
     bbe:	4335      	orrs	r5, r6
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     bc0:	600d      	str	r5, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     bc2:	6816      	ldr	r6, [r2, #0]
     bc4:	681d      	ldr	r5, [r3, #0]
     bc6:	4335      	orrs	r5, r6
     bc8:	601d      	str	r5, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     bca:	6816      	ldr	r6, [r2, #0]
     bcc:	681d      	ldr	r5, [r3, #0]
     bce:	43b5      	bics	r5, r6
     bd0:	601d      	str	r5, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     bd2:	6826      	ldr	r6, [r4, #0]
     bd4:	06c5      	lsls	r5, r0, #27
     bd6:	d54f      	bpl.n	c78 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x10c>
     bd8:	680d      	ldr	r5, [r1, #0]
     bda:	4335      	orrs	r5, r6
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     bdc:	600d      	str	r5, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     bde:	6816      	ldr	r6, [r2, #0]
     be0:	681d      	ldr	r5, [r3, #0]
     be2:	4335      	orrs	r5, r6
     be4:	601d      	str	r5, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     be6:	6816      	ldr	r6, [r2, #0]
     be8:	681d      	ldr	r5, [r3, #0]
     bea:	43b5      	bics	r5, r6
     bec:	601d      	str	r5, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     bee:	6826      	ldr	r6, [r4, #0]
     bf0:	0705      	lsls	r5, r0, #28
     bf2:	d53e      	bpl.n	c72 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x106>
     bf4:	680d      	ldr	r5, [r1, #0]
     bf6:	4335      	orrs	r5, r6
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     bf8:	600d      	str	r5, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     bfa:	6816      	ldr	r6, [r2, #0]
     bfc:	681d      	ldr	r5, [r3, #0]
     bfe:	4335      	orrs	r5, r6
     c00:	601d      	str	r5, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     c02:	6816      	ldr	r6, [r2, #0]
     c04:	681d      	ldr	r5, [r3, #0]
     c06:	43b5      	bics	r5, r6
     c08:	601d      	str	r5, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     c0a:	6826      	ldr	r6, [r4, #0]
     c0c:	0745      	lsls	r5, r0, #29
     c0e:	d52d      	bpl.n	c6c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x100>
     c10:	680d      	ldr	r5, [r1, #0]
     c12:	4335      	orrs	r5, r6
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     c14:	600d      	str	r5, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     c16:	6816      	ldr	r6, [r2, #0]
     c18:	681d      	ldr	r5, [r3, #0]
     c1a:	4335      	orrs	r5, r6
     c1c:	601d      	str	r5, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     c1e:	6816      	ldr	r6, [r2, #0]
     c20:	681d      	ldr	r5, [r3, #0]
     c22:	43b5      	bics	r5, r6
     c24:	601d      	str	r5, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     c26:	6826      	ldr	r6, [r4, #0]
     c28:	0785      	lsls	r5, r0, #30
     c2a:	d51c      	bpl.n	c66 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xfa>
     c2c:	680d      	ldr	r5, [r1, #0]
     c2e:	4335      	orrs	r5, r6
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     c30:	600d      	str	r5, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     c32:	6816      	ldr	r6, [r2, #0]
     c34:	681d      	ldr	r5, [r3, #0]
     c36:	4335      	orrs	r5, r6
     c38:	601d      	str	r5, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     c3a:	6816      	ldr	r6, [r2, #0]
     c3c:	681d      	ldr	r5, [r3, #0]
     c3e:	43b5      	bics	r5, r6
     c40:	601d      	str	r5, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     c42:	6824      	ldr	r4, [r4, #0]
     c44:	07c0      	lsls	r0, r0, #31
     c46:	d41d      	bmi.n	c84 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x118>
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     c48:	6808      	ldr	r0, [r1, #0]
     c4a:	43a0      	bics	r0, r4
     c4c:	6008      	str	r0, [r1, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     c4e:	6810      	ldr	r0, [r2, #0]
     c50:	6819      	ldr	r1, [r3, #0]
     c52:	4301      	orrs	r1, r0
     c54:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     c56:	6811      	ldr	r1, [r2, #0]
     c58:	681a      	ldr	r2, [r3, #0]
     c5a:	438a      	bics	r2, r1
     c5c:	601a      	str	r2, [r3, #0]
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
     c5e:	bd70      	pop	{r4, r5, r6, pc}
     c60:	680d      	ldr	r5, [r1, #0]
     c62:	43b5      	bics	r5, r6
     c64:	e79e      	b.n	ba4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x38>
     c66:	680d      	ldr	r5, [r1, #0]
     c68:	43b5      	bics	r5, r6
     c6a:	e7e1      	b.n	c30 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xc4>
     c6c:	680d      	ldr	r5, [r1, #0]
     c6e:	43b5      	bics	r5, r6
     c70:	e7d0      	b.n	c14 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xa8>
     c72:	680d      	ldr	r5, [r1, #0]
     c74:	43b5      	bics	r5, r6
     c76:	e7bf      	b.n	bf8 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x8c>
     c78:	680d      	ldr	r5, [r1, #0]
     c7a:	43b5      	bics	r5, r6
     c7c:	e7ae      	b.n	bdc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x70>
     c7e:	680d      	ldr	r5, [r1, #0]
     c80:	43b5      	bics	r5, r6
     c82:	e79d      	b.n	bc0 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x54>
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     c84:	6808      	ldr	r0, [r1, #0]
     c86:	4320      	orrs	r0, r4
     c88:	e7e0      	b.n	c4c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xe0>
     c8a:	4b03      	ldr	r3, [pc, #12]	; (c98 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x12c>)
     c8c:	6819      	ldr	r1, [r3, #0]
     c8e:	680b      	ldr	r3, [r1, #0]
     c90:	4313      	orrs	r3, r2
     c92:	e776      	b.n	b82 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x16>
     c94:	20000154 	.word	0x20000154
     c98:	20000150 	.word	0x20000150
     c9c:	20000144 	.word	0x20000144
     ca0:	20000148 	.word	0x20000148

00000ca4 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca6:	4656      	mov	r6, sl
     ca8:	464d      	mov	r5, r9
     caa:	465f      	mov	r7, fp
     cac:	4644      	mov	r4, r8
     cae:	b4f0      	push	{r4, r5, r6, r7}
     cb0:	4681      	mov	r9, r0
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     cb2:	6980      	ldr	r0, [r0, #24]
     cb4:	b083      	sub	sp, #12
     cb6:	000e      	movs	r6, r1
     cb8:	2800      	cmp	r0, #0
     cba:	d00a      	beq.n	cd2 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x2e>
     cbc:	6803      	ldr	r3, [r0, #0]
     cbe:	4a7f      	ldr	r2, [pc, #508]	; (ebc <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x218>)
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	4293      	cmp	r3, r2
     cc4:	d000      	beq.n	cc8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x24>
     cc6:	e2a7      	b.n	1218 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x574>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     cc8:	6842      	ldr	r2, [r0, #4]
     cca:	68c1      	ldr	r1, [r0, #12]
     ccc:	6813      	ldr	r3, [r2, #0]
     cce:	430b      	orrs	r3, r1
     cd0:	6013      	str	r3, [r2, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     cd2:	f7ff fa2f 	bl	134 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh.constprop.14>
     cd6:	f7ff fa2d 	bl	134 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh.constprop.14>
     cda:	f7ff fa2b 	bl	134 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh.constprop.14>
     cde:	f7ff fa29 	bl	134 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh.constprop.14>
		mSPI.select();

		startBoundary();
		while(pixels.has(1)) {
     ce2:	68b3      	ldr	r3, [r6, #8]
     ce4:	2b00      	cmp	r3, #0
     ce6:	dc00      	bgt.n	cea <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x46>
     ce8:	e298      	b.n	121c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x578>
     cea:	4a75      	ldr	r2, [pc, #468]	; (ec0 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x21c>)
     cec:	6833      	ldr	r3, [r6, #0]
     cee:	4693      	mov	fp, r2
     cf0:	4a74      	ldr	r2, [pc, #464]	; (ec4 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x220>)
     cf2:	4d75      	ldr	r5, [pc, #468]	; (ec8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x224>)
     cf4:	4690      	mov	r8, r2
     cf6:	4c75      	ldr	r4, [pc, #468]	; (ecc <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x228>)
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     cf8:	789a      	ldrb	r2, [r3, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     cfa:	2300      	movs	r3, #0
     cfc:	2a00      	cmp	r2, #0
     cfe:	d004      	beq.n	d0a <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x66>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     d00:	7bb3      	ldrb	r3, [r6, #14]
     d02:	189b      	adds	r3, r3, r2
    if( t > 255) t = 255;
     d04:	2bff      	cmp	r3, #255	; 0xff
     d06:	dd00      	ble.n	d0a <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x66>
     d08:	23ff      	movs	r3, #255	; 0xff
			mSPI.writeByte(0xFF);
			mSPI.writeByte(pixels.loadAndScale0());
			mSPI.writeByte(pixels.loadAndScale1());
			mSPI.writeByte(pixels.loadAndScale2());
#else
			uint16_t b = 0xFF00 | (uint16_t)pixels.loadAndScale0();
     d0a:	7d30      	ldrb	r0, [r6, #20]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     d0c:	6829      	ldr	r1, [r5, #0]
     d0e:	3001      	adds	r0, #1
     d10:	4343      	muls	r3, r0
     d12:	1218      	asrs	r0, r3, #8
     d14:	465b      	mov	r3, fp
     d16:	681a      	ldr	r2, [r3, #0]
     d18:	b2c0      	uxtb	r0, r0
     d1a:	6813      	ldr	r3, [r2, #0]
     d1c:	430b      	orrs	r3, r1
     d1e:	6013      	str	r3, [r2, #0]
     d20:	6823      	ldr	r3, [r4, #0]
     d22:	469c      	mov	ip, r3
     d24:	4643      	mov	r3, r8
     d26:	4667      	mov	r7, ip
     d28:	681b      	ldr	r3, [r3, #0]
     d2a:	6819      	ldr	r1, [r3, #0]
     d2c:	4339      	orrs	r1, r7
     d2e:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     d30:	6821      	ldr	r1, [r4, #0]
     d32:	468c      	mov	ip, r1
     d34:	4667      	mov	r7, ip
     d36:	6819      	ldr	r1, [r3, #0]
     d38:	43b9      	bics	r1, r7
     d3a:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     d3c:	6829      	ldr	r1, [r5, #0]
     d3e:	468c      	mov	ip, r1
     d40:	4667      	mov	r7, ip
     d42:	6811      	ldr	r1, [r2, #0]
     d44:	4339      	orrs	r1, r7
     d46:	6011      	str	r1, [r2, #0]
     d48:	6821      	ldr	r1, [r4, #0]
     d4a:	468c      	mov	ip, r1
     d4c:	4667      	mov	r7, ip
     d4e:	6819      	ldr	r1, [r3, #0]
     d50:	4339      	orrs	r1, r7
     d52:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     d54:	6821      	ldr	r1, [r4, #0]
     d56:	468c      	mov	ip, r1
     d58:	4667      	mov	r7, ip
     d5a:	6819      	ldr	r1, [r3, #0]
     d5c:	43b9      	bics	r1, r7
     d5e:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     d60:	6829      	ldr	r1, [r5, #0]
     d62:	468c      	mov	ip, r1
     d64:	4667      	mov	r7, ip
     d66:	6811      	ldr	r1, [r2, #0]
     d68:	4339      	orrs	r1, r7
     d6a:	6011      	str	r1, [r2, #0]
     d6c:	6821      	ldr	r1, [r4, #0]
     d6e:	468c      	mov	ip, r1
     d70:	4667      	mov	r7, ip
     d72:	6819      	ldr	r1, [r3, #0]
     d74:	4339      	orrs	r1, r7
     d76:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     d78:	6821      	ldr	r1, [r4, #0]
     d7a:	468c      	mov	ip, r1
     d7c:	4667      	mov	r7, ip
     d7e:	6819      	ldr	r1, [r3, #0]
     d80:	43b9      	bics	r1, r7
     d82:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     d84:	6829      	ldr	r1, [r5, #0]
     d86:	468c      	mov	ip, r1
     d88:	4667      	mov	r7, ip
     d8a:	6811      	ldr	r1, [r2, #0]
     d8c:	4339      	orrs	r1, r7
     d8e:	6011      	str	r1, [r2, #0]
     d90:	6821      	ldr	r1, [r4, #0]
     d92:	468c      	mov	ip, r1
     d94:	4667      	mov	r7, ip
     d96:	6819      	ldr	r1, [r3, #0]
     d98:	4339      	orrs	r1, r7
     d9a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     d9c:	6821      	ldr	r1, [r4, #0]
     d9e:	468c      	mov	ip, r1
     da0:	4667      	mov	r7, ip
     da2:	6819      	ldr	r1, [r3, #0]
     da4:	43b9      	bics	r1, r7
     da6:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     da8:	6829      	ldr	r1, [r5, #0]
     daa:	468c      	mov	ip, r1
     dac:	4667      	mov	r7, ip
     dae:	6811      	ldr	r1, [r2, #0]
     db0:	4339      	orrs	r1, r7
     db2:	6011      	str	r1, [r2, #0]
     db4:	6821      	ldr	r1, [r4, #0]
     db6:	468c      	mov	ip, r1
     db8:	4667      	mov	r7, ip
     dba:	6819      	ldr	r1, [r3, #0]
     dbc:	4339      	orrs	r1, r7
     dbe:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     dc0:	6821      	ldr	r1, [r4, #0]
     dc2:	468c      	mov	ip, r1
     dc4:	4667      	mov	r7, ip
     dc6:	6819      	ldr	r1, [r3, #0]
     dc8:	43b9      	bics	r1, r7
     dca:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     dcc:	6829      	ldr	r1, [r5, #0]
     dce:	468c      	mov	ip, r1
     dd0:	4667      	mov	r7, ip
     dd2:	6811      	ldr	r1, [r2, #0]
     dd4:	4339      	orrs	r1, r7
     dd6:	6011      	str	r1, [r2, #0]
     dd8:	6821      	ldr	r1, [r4, #0]
     dda:	468c      	mov	ip, r1
     ddc:	4667      	mov	r7, ip
     dde:	6819      	ldr	r1, [r3, #0]
     de0:	4339      	orrs	r1, r7
     de2:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     de4:	6821      	ldr	r1, [r4, #0]
     de6:	468c      	mov	ip, r1
     de8:	4667      	mov	r7, ip
     dea:	6819      	ldr	r1, [r3, #0]
     dec:	43b9      	bics	r1, r7
     dee:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     df0:	6829      	ldr	r1, [r5, #0]
     df2:	468c      	mov	ip, r1
     df4:	4667      	mov	r7, ip
     df6:	6811      	ldr	r1, [r2, #0]
     df8:	4339      	orrs	r1, r7
     dfa:	6011      	str	r1, [r2, #0]
     dfc:	6821      	ldr	r1, [r4, #0]
     dfe:	468c      	mov	ip, r1
     e00:	4667      	mov	r7, ip
     e02:	6819      	ldr	r1, [r3, #0]
     e04:	4339      	orrs	r1, r7
     e06:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     e08:	6821      	ldr	r1, [r4, #0]
     e0a:	468c      	mov	ip, r1
     e0c:	4667      	mov	r7, ip
     e0e:	6819      	ldr	r1, [r3, #0]
     e10:	43b9      	bics	r1, r7
     e12:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     e14:	6829      	ldr	r1, [r5, #0]
     e16:	468c      	mov	ip, r1
     e18:	4667      	mov	r7, ip
     e1a:	6811      	ldr	r1, [r2, #0]
     e1c:	4339      	orrs	r1, r7
     e1e:	6011      	str	r1, [r2, #0]
     e20:	6821      	ldr	r1, [r4, #0]
     e22:	681a      	ldr	r2, [r3, #0]
     e24:	430a      	orrs	r2, r1
     e26:	601a      	str	r2, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     e28:	6821      	ldr	r1, [r4, #0]
     e2a:	681a      	ldr	r2, [r3, #0]
     e2c:	438a      	bics	r2, r1
     e2e:	601a      	str	r2, [r3, #0]
     e30:	f7ff fe9c 	bl	b6c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     e34:	6831      	ldr	r1, [r6, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     e36:	2200      	movs	r2, #0
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     e38:	784b      	ldrb	r3, [r1, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     e3a:	2b00      	cmp	r3, #0
     e3c:	d004      	beq.n	e48 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x1a4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     e3e:	7b72      	ldrb	r2, [r6, #13]
     e40:	18d2      	adds	r2, r2, r3
    if( t > 255) t = 255;
     e42:	2aff      	cmp	r2, #255	; 0xff
     e44:	dd00      	ble.n	e48 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x1a4>
     e46:	22ff      	movs	r2, #255	; 0xff
			mSPI.writeWord(b);
			uint16_t w = pixels.loadAndScale1() << 8;
     e48:	7cf3      	ldrb	r3, [r6, #19]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     e4a:	7809      	ldrb	r1, [r1, #0]
     e4c:	3301      	adds	r3, #1
     e4e:	435a      	muls	r2, r3
     e50:	23ff      	movs	r3, #255	; 0xff
     e52:	021b      	lsls	r3, r3, #8
     e54:	401a      	ands	r2, r3
     e56:	0010      	movs	r0, r2
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     e58:	2300      	movs	r3, #0
     e5a:	2900      	cmp	r1, #0
     e5c:	d004      	beq.n	e68 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x1c4>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     e5e:	7b32      	ldrb	r2, [r6, #12]
     e60:	1853      	adds	r3, r2, r1
    if( t > 255) t = 255;
     e62:	2bff      	cmp	r3, #255	; 0xff
     e64:	dd00      	ble.n	e68 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x1c4>
     e66:	23ff      	movs	r3, #255	; 0xff
			w |= pixels.loadAndScale2();
     e68:	7cb2      	ldrb	r2, [r6, #18]
     e6a:	3201      	adds	r2, #1
     e6c:	4353      	muls	r3, r2
     e6e:	121b      	asrs	r3, r3, #8
     e70:	4303      	orrs	r3, r0
     e72:	b29b      	uxth	r3, r3
     e74:	469a      	mov	sl, r3
     e76:	0a18      	lsrs	r0, r3, #8
     e78:	f7ff fe78 	bl	b6c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     e7c:	466a      	mov	r2, sp
     e7e:	4653      	mov	r3, sl
     e80:	71d3      	strb	r3, [r2, #7]
     e82:	79d0      	ldrb	r0, [r2, #7]
     e84:	f7ff fe72 	bl	b6c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     e88:	7b32      	ldrb	r2, [r6, #12]
     e8a:	7bf3      	ldrb	r3, [r6, #15]
     e8c:	1a9b      	subs	r3, r3, r2
     e8e:	7333      	strb	r3, [r6, #12]
                d[1] = e[1] - d[1];
     e90:	7b72      	ldrb	r2, [r6, #13]
     e92:	7c33      	ldrb	r3, [r6, #16]
     e94:	1a9b      	subs	r3, r3, r2
     e96:	7373      	strb	r3, [r6, #13]
                d[2] = e[2] - d[2];
     e98:	7bb2      	ldrb	r2, [r6, #14]
     e9a:	7c73      	ldrb	r3, [r6, #17]
     e9c:	1a9b      	subs	r3, r3, r2
     e9e:	73b3      	strb	r3, [r6, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     ea0:	6832      	ldr	r2, [r6, #0]
     ea2:	2315      	movs	r3, #21
     ea4:	4694      	mov	ip, r2
     ea6:	56f3      	ldrsb	r3, [r6, r3]
     ea8:	68b2      	ldr	r2, [r6, #8]
     eaa:	4463      	add	r3, ip
     eac:	3a01      	subs	r2, #1
     eae:	6033      	str	r3, [r6, #0]
     eb0:	60b2      	str	r2, [r6, #8]

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
		mSPI.select();

		startBoundary();
		while(pixels.has(1)) {
     eb2:	2a00      	cmp	r2, #0
     eb4:	dd00      	ble.n	eb8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x214>
     eb6:	e71f      	b.n	cf8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x54>
     eb8:	e00a      	b.n	ed0 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x22c>
     eba:	46c0      	nop			; (mov r8, r8)
     ebc:	0000011d 	.word	0x0000011d
     ec0:	20000150 	.word	0x20000150
     ec4:	20000144 	.word	0x20000144
     ec8:	20000154 	.word	0x20000154
     ecc:	20000148 	.word	0x20000148
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     ed0:	201f      	movs	r0, #31
     ed2:	6873      	ldr	r3, [r6, #4]
     ed4:	17da      	asrs	r2, r3, #31
     ed6:	4010      	ands	r0, r2
     ed8:	18c0      	adds	r0, r0, r3
     eda:	465b      	mov	r3, fp
     edc:	681a      	ldr	r2, [r3, #0]
     ede:	4643      	mov	r3, r8
     ee0:	681b      	ldr	r3, [r3, #0]
     ee2:	1140      	asrs	r0, r0, #5
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     ee4:	682e      	ldr	r6, [r5, #0]
     ee6:	6811      	ldr	r1, [r2, #0]
     ee8:	4331      	orrs	r1, r6
     eea:	6011      	str	r1, [r2, #0]
     eec:	6826      	ldr	r6, [r4, #0]
     eee:	6819      	ldr	r1, [r3, #0]
     ef0:	4331      	orrs	r1, r6
     ef2:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     ef4:	6826      	ldr	r6, [r4, #0]
     ef6:	6819      	ldr	r1, [r3, #0]
     ef8:	43b1      	bics	r1, r6
     efa:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     efc:	682e      	ldr	r6, [r5, #0]
     efe:	6811      	ldr	r1, [r2, #0]
     f00:	4331      	orrs	r1, r6
     f02:	6011      	str	r1, [r2, #0]
     f04:	6826      	ldr	r6, [r4, #0]
     f06:	6819      	ldr	r1, [r3, #0]
     f08:	4331      	orrs	r1, r6
     f0a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     f0c:	6826      	ldr	r6, [r4, #0]
     f0e:	6819      	ldr	r1, [r3, #0]
     f10:	43b1      	bics	r1, r6
     f12:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     f14:	682e      	ldr	r6, [r5, #0]
     f16:	6811      	ldr	r1, [r2, #0]
     f18:	4331      	orrs	r1, r6
     f1a:	6011      	str	r1, [r2, #0]
     f1c:	6826      	ldr	r6, [r4, #0]
     f1e:	6819      	ldr	r1, [r3, #0]
     f20:	4331      	orrs	r1, r6
     f22:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     f24:	6826      	ldr	r6, [r4, #0]
     f26:	6819      	ldr	r1, [r3, #0]
     f28:	43b1      	bics	r1, r6
     f2a:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     f2c:	682e      	ldr	r6, [r5, #0]
     f2e:	6811      	ldr	r1, [r2, #0]
     f30:	4331      	orrs	r1, r6
     f32:	6011      	str	r1, [r2, #0]
     f34:	6826      	ldr	r6, [r4, #0]
     f36:	6819      	ldr	r1, [r3, #0]
     f38:	4331      	orrs	r1, r6
     f3a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     f3c:	6826      	ldr	r6, [r4, #0]
     f3e:	6819      	ldr	r1, [r3, #0]
     f40:	43b1      	bics	r1, r6
     f42:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     f44:	682e      	ldr	r6, [r5, #0]
     f46:	6811      	ldr	r1, [r2, #0]
     f48:	4331      	orrs	r1, r6
     f4a:	6011      	str	r1, [r2, #0]
     f4c:	6826      	ldr	r6, [r4, #0]
     f4e:	6819      	ldr	r1, [r3, #0]
     f50:	4331      	orrs	r1, r6
     f52:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     f54:	6826      	ldr	r6, [r4, #0]
     f56:	6819      	ldr	r1, [r3, #0]
     f58:	43b1      	bics	r1, r6
     f5a:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     f5c:	682e      	ldr	r6, [r5, #0]
     f5e:	6811      	ldr	r1, [r2, #0]
     f60:	4331      	orrs	r1, r6
     f62:	6011      	str	r1, [r2, #0]
     f64:	6826      	ldr	r6, [r4, #0]
     f66:	6819      	ldr	r1, [r3, #0]
     f68:	4331      	orrs	r1, r6
     f6a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     f6c:	6826      	ldr	r6, [r4, #0]
     f6e:	6819      	ldr	r1, [r3, #0]
     f70:	43b1      	bics	r1, r6
     f72:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     f74:	682e      	ldr	r6, [r5, #0]
     f76:	6811      	ldr	r1, [r2, #0]
     f78:	4331      	orrs	r1, r6
     f7a:	6011      	str	r1, [r2, #0]
     f7c:	6826      	ldr	r6, [r4, #0]
     f7e:	6819      	ldr	r1, [r3, #0]
     f80:	4331      	orrs	r1, r6
     f82:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     f84:	6826      	ldr	r6, [r4, #0]
     f86:	6819      	ldr	r1, [r3, #0]
     f88:	43b1      	bics	r1, r6
     f8a:	6019      	str	r1, [r3, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     f8c:	682e      	ldr	r6, [r5, #0]
     f8e:	6811      	ldr	r1, [r2, #0]
     f90:	4331      	orrs	r1, r6
     f92:	6011      	str	r1, [r2, #0]
     f94:	6826      	ldr	r6, [r4, #0]
     f96:	6819      	ldr	r1, [r3, #0]
     f98:	4331      	orrs	r1, r6
     f9a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     f9c:	6826      	ldr	r6, [r4, #0]
     f9e:	6819      	ldr	r1, [r3, #0]
     fa0:	43b1      	bics	r1, r6
     fa2:	6019      	str	r1, [r3, #0]
     fa4:	682e      	ldr	r6, [r5, #0]
     fa6:	6811      	ldr	r1, [r2, #0]
     fa8:	43b1      	bics	r1, r6
     faa:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     fac:	6826      	ldr	r6, [r4, #0]
     fae:	6819      	ldr	r1, [r3, #0]
     fb0:	4331      	orrs	r1, r6
     fb2:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     fb4:	6826      	ldr	r6, [r4, #0]
     fb6:	6819      	ldr	r1, [r3, #0]
     fb8:	43b1      	bics	r1, r6
     fba:	6019      	str	r1, [r3, #0]
     fbc:	682e      	ldr	r6, [r5, #0]
     fbe:	6811      	ldr	r1, [r2, #0]
     fc0:	43b1      	bics	r1, r6
     fc2:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     fc4:	6826      	ldr	r6, [r4, #0]
     fc6:	6819      	ldr	r1, [r3, #0]
     fc8:	4331      	orrs	r1, r6
     fca:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     fcc:	6826      	ldr	r6, [r4, #0]
     fce:	6819      	ldr	r1, [r3, #0]
     fd0:	43b1      	bics	r1, r6
     fd2:	6019      	str	r1, [r3, #0]
     fd4:	682e      	ldr	r6, [r5, #0]
     fd6:	6811      	ldr	r1, [r2, #0]
     fd8:	43b1      	bics	r1, r6
     fda:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     fdc:	6826      	ldr	r6, [r4, #0]
     fde:	6819      	ldr	r1, [r3, #0]
     fe0:	4331      	orrs	r1, r6
     fe2:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     fe4:	6826      	ldr	r6, [r4, #0]
     fe6:	6819      	ldr	r1, [r3, #0]
     fe8:	43b1      	bics	r1, r6
     fea:	6019      	str	r1, [r3, #0]
     fec:	682e      	ldr	r6, [r5, #0]
     fee:	6811      	ldr	r1, [r2, #0]
     ff0:	43b1      	bics	r1, r6
     ff2:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     ff4:	6826      	ldr	r6, [r4, #0]
     ff6:	6819      	ldr	r1, [r3, #0]
     ff8:	4331      	orrs	r1, r6
     ffa:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     ffc:	6826      	ldr	r6, [r4, #0]
     ffe:	6819      	ldr	r1, [r3, #0]
    1000:	43b1      	bics	r1, r6
    1002:	6019      	str	r1, [r3, #0]
    1004:	682e      	ldr	r6, [r5, #0]
    1006:	6811      	ldr	r1, [r2, #0]
    1008:	43b1      	bics	r1, r6
    100a:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    100c:	6826      	ldr	r6, [r4, #0]
    100e:	6819      	ldr	r1, [r3, #0]
    1010:	4331      	orrs	r1, r6
    1012:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1014:	6826      	ldr	r6, [r4, #0]
    1016:	6819      	ldr	r1, [r3, #0]
    1018:	43b1      	bics	r1, r6
    101a:	6019      	str	r1, [r3, #0]
    101c:	682e      	ldr	r6, [r5, #0]
    101e:	6811      	ldr	r1, [r2, #0]
    1020:	43b1      	bics	r1, r6
    1022:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1024:	6826      	ldr	r6, [r4, #0]
    1026:	6819      	ldr	r1, [r3, #0]
    1028:	4331      	orrs	r1, r6
    102a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    102c:	6826      	ldr	r6, [r4, #0]
    102e:	6819      	ldr	r1, [r3, #0]
    1030:	43b1      	bics	r1, r6
    1032:	6019      	str	r1, [r3, #0]
    1034:	682e      	ldr	r6, [r5, #0]
    1036:	6811      	ldr	r1, [r2, #0]
    1038:	43b1      	bics	r1, r6
    103a:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    103c:	6826      	ldr	r6, [r4, #0]
    103e:	6819      	ldr	r1, [r3, #0]
    1040:	4331      	orrs	r1, r6
    1042:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1044:	6826      	ldr	r6, [r4, #0]
    1046:	6819      	ldr	r1, [r3, #0]
    1048:	43b1      	bics	r1, r6
    104a:	6019      	str	r1, [r3, #0]
    104c:	682e      	ldr	r6, [r5, #0]
    104e:	6811      	ldr	r1, [r2, #0]
    1050:	43b1      	bics	r1, r6
    1052:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1054:	6826      	ldr	r6, [r4, #0]
    1056:	6819      	ldr	r1, [r3, #0]
    1058:	4331      	orrs	r1, r6
    105a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    105c:	6826      	ldr	r6, [r4, #0]
    105e:	6819      	ldr	r1, [r3, #0]
    1060:	43b1      	bics	r1, r6
    1062:	6019      	str	r1, [r3, #0]
    1064:	682e      	ldr	r6, [r5, #0]
    1066:	6811      	ldr	r1, [r2, #0]
    1068:	43b1      	bics	r1, r6
    106a:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    106c:	6826      	ldr	r6, [r4, #0]
    106e:	6819      	ldr	r1, [r3, #0]
    1070:	4331      	orrs	r1, r6
    1072:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1074:	6826      	ldr	r6, [r4, #0]
    1076:	6819      	ldr	r1, [r3, #0]
    1078:	43b1      	bics	r1, r6
    107a:	6019      	str	r1, [r3, #0]
    107c:	682e      	ldr	r6, [r5, #0]
    107e:	6811      	ldr	r1, [r2, #0]
    1080:	43b1      	bics	r1, r6
    1082:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1084:	6826      	ldr	r6, [r4, #0]
    1086:	6819      	ldr	r1, [r3, #0]
    1088:	4331      	orrs	r1, r6
    108a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    108c:	6826      	ldr	r6, [r4, #0]
    108e:	6819      	ldr	r1, [r3, #0]
    1090:	43b1      	bics	r1, r6
    1092:	6019      	str	r1, [r3, #0]
    1094:	682e      	ldr	r6, [r5, #0]
    1096:	6811      	ldr	r1, [r2, #0]
    1098:	43b1      	bics	r1, r6
    109a:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    109c:	6826      	ldr	r6, [r4, #0]
    109e:	6819      	ldr	r1, [r3, #0]
    10a0:	4331      	orrs	r1, r6
    10a2:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    10a4:	6826      	ldr	r6, [r4, #0]
    10a6:	6819      	ldr	r1, [r3, #0]
    10a8:	43b1      	bics	r1, r6
    10aa:	6019      	str	r1, [r3, #0]
    10ac:	682e      	ldr	r6, [r5, #0]
    10ae:	6811      	ldr	r1, [r2, #0]
    10b0:	43b1      	bics	r1, r6
    10b2:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    10b4:	6826      	ldr	r6, [r4, #0]
    10b6:	6819      	ldr	r1, [r3, #0]
    10b8:	4331      	orrs	r1, r6
    10ba:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    10bc:	6826      	ldr	r6, [r4, #0]
    10be:	6819      	ldr	r1, [r3, #0]
    10c0:	43b1      	bics	r1, r6
    10c2:	6019      	str	r1, [r3, #0]
    10c4:	682e      	ldr	r6, [r5, #0]
    10c6:	6811      	ldr	r1, [r2, #0]
    10c8:	43b1      	bics	r1, r6
    10ca:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    10cc:	6826      	ldr	r6, [r4, #0]
    10ce:	6819      	ldr	r1, [r3, #0]
    10d0:	4331      	orrs	r1, r6
    10d2:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    10d4:	6826      	ldr	r6, [r4, #0]
    10d6:	6819      	ldr	r1, [r3, #0]
    10d8:	43b1      	bics	r1, r6
    10da:	6019      	str	r1, [r3, #0]
    10dc:	682e      	ldr	r6, [r5, #0]
    10de:	6811      	ldr	r1, [r2, #0]
    10e0:	43b1      	bics	r1, r6
    10e2:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    10e4:	6826      	ldr	r6, [r4, #0]
    10e6:	6819      	ldr	r1, [r3, #0]
    10e8:	4331      	orrs	r1, r6
    10ea:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    10ec:	6826      	ldr	r6, [r4, #0]
    10ee:	6819      	ldr	r1, [r3, #0]
    10f0:	43b1      	bics	r1, r6
    10f2:	6019      	str	r1, [r3, #0]
    10f4:	682e      	ldr	r6, [r5, #0]
    10f6:	6811      	ldr	r1, [r2, #0]
    10f8:	43b1      	bics	r1, r6
    10fa:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    10fc:	6826      	ldr	r6, [r4, #0]
    10fe:	6819      	ldr	r1, [r3, #0]
    1100:	4331      	orrs	r1, r6
    1102:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1104:	6826      	ldr	r6, [r4, #0]
    1106:	6819      	ldr	r1, [r3, #0]
    1108:	43b1      	bics	r1, r6
    110a:	6019      	str	r1, [r3, #0]
    110c:	682e      	ldr	r6, [r5, #0]
    110e:	6811      	ldr	r1, [r2, #0]
    1110:	43b1      	bics	r1, r6
    1112:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1114:	6826      	ldr	r6, [r4, #0]
    1116:	6819      	ldr	r1, [r3, #0]
    1118:	4331      	orrs	r1, r6
    111a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    111c:	6826      	ldr	r6, [r4, #0]
    111e:	6819      	ldr	r1, [r3, #0]
    1120:	43b1      	bics	r1, r6
    1122:	6019      	str	r1, [r3, #0]
    1124:	682e      	ldr	r6, [r5, #0]
    1126:	6811      	ldr	r1, [r2, #0]
    1128:	43b1      	bics	r1, r6
    112a:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    112c:	6826      	ldr	r6, [r4, #0]
    112e:	6819      	ldr	r1, [r3, #0]
    1130:	4331      	orrs	r1, r6
    1132:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1134:	6826      	ldr	r6, [r4, #0]
    1136:	6819      	ldr	r1, [r3, #0]
    1138:	43b1      	bics	r1, r6
    113a:	6019      	str	r1, [r3, #0]
    113c:	682e      	ldr	r6, [r5, #0]
    113e:	6811      	ldr	r1, [r2, #0]
    1140:	43b1      	bics	r1, r6
    1142:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1144:	6826      	ldr	r6, [r4, #0]
    1146:	6819      	ldr	r1, [r3, #0]
    1148:	4331      	orrs	r1, r6
    114a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    114c:	6826      	ldr	r6, [r4, #0]
    114e:	6819      	ldr	r1, [r3, #0]
    1150:	43b1      	bics	r1, r6
    1152:	6019      	str	r1, [r3, #0]
    1154:	682e      	ldr	r6, [r5, #0]
    1156:	6811      	ldr	r1, [r2, #0]
    1158:	43b1      	bics	r1, r6
    115a:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    115c:	6826      	ldr	r6, [r4, #0]
    115e:	6819      	ldr	r1, [r3, #0]
    1160:	4331      	orrs	r1, r6
    1162:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1164:	6826      	ldr	r6, [r4, #0]
    1166:	6819      	ldr	r1, [r3, #0]
    1168:	43b1      	bics	r1, r6
    116a:	6019      	str	r1, [r3, #0]
    116c:	682e      	ldr	r6, [r5, #0]
    116e:	6811      	ldr	r1, [r2, #0]
    1170:	43b1      	bics	r1, r6
    1172:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    1174:	6826      	ldr	r6, [r4, #0]
    1176:	6819      	ldr	r1, [r3, #0]
    1178:	4331      	orrs	r1, r6
    117a:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    117c:	6826      	ldr	r6, [r4, #0]
    117e:	6819      	ldr	r1, [r3, #0]
    1180:	43b1      	bics	r1, r6
    1182:	6019      	str	r1, [r3, #0]
    1184:	682e      	ldr	r6, [r5, #0]
    1186:	6811      	ldr	r1, [r2, #0]
    1188:	43b1      	bics	r1, r6
    118a:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    118c:	6826      	ldr	r6, [r4, #0]
    118e:	6819      	ldr	r1, [r3, #0]
    1190:	4331      	orrs	r1, r6
    1192:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    1194:	6826      	ldr	r6, [r4, #0]
    1196:	6819      	ldr	r1, [r3, #0]
    1198:	43b1      	bics	r1, r6
    119a:	6019      	str	r1, [r3, #0]
    119c:	682e      	ldr	r6, [r5, #0]
    119e:	6811      	ldr	r1, [r2, #0]
    11a0:	43b1      	bics	r1, r6
    11a2:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    11a4:	6826      	ldr	r6, [r4, #0]
    11a6:	6819      	ldr	r1, [r3, #0]
    11a8:	4331      	orrs	r1, r6
    11aa:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    11ac:	6826      	ldr	r6, [r4, #0]
    11ae:	6819      	ldr	r1, [r3, #0]
    11b0:	43b1      	bics	r1, r6
    11b2:	6019      	str	r1, [r3, #0]
    11b4:	682e      	ldr	r6, [r5, #0]
    11b6:	6811      	ldr	r1, [r2, #0]
    11b8:	43b1      	bics	r1, r6
    11ba:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    11bc:	6826      	ldr	r6, [r4, #0]
    11be:	6819      	ldr	r1, [r3, #0]
    11c0:	4331      	orrs	r1, r6
    11c2:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    11c4:	6826      	ldr	r6, [r4, #0]
    11c6:	6819      	ldr	r1, [r3, #0]
    11c8:	43b1      	bics	r1, r6
    11ca:	6019      	str	r1, [r3, #0]
    11cc:	682e      	ldr	r6, [r5, #0]
    11ce:	6811      	ldr	r1, [r2, #0]
    11d0:	43b1      	bics	r1, r6
    11d2:	6011      	str	r1, [r2, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
    11d4:	6826      	ldr	r6, [r4, #0]
    11d6:	6819      	ldr	r1, [r3, #0]
    11d8:	4331      	orrs	r1, r6
    11da:	6019      	str	r1, [r3, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
    11dc:	6826      	ldr	r6, [r4, #0]
    11de:	6819      	ldr	r1, [r3, #0]
    11e0:	43b1      	bics	r1, r6
    11e2:	6019      	str	r1, [r3, #0]
    11e4:	3801      	subs	r0, #1
    11e6:	d300      	bcc.n	11ea <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x546>
    11e8:	e67c      	b.n	ee4 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x240>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    11ea:	464b      	mov	r3, r9
    11ec:	6998      	ldr	r0, [r3, #24]
    11ee:	2800      	cmp	r0, #0
    11f0:	d009      	beq.n	1206 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x562>
    11f2:	6803      	ldr	r3, [r0, #0]
    11f4:	4a0d      	ldr	r2, [pc, #52]	; (122c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x588>)
    11f6:	685b      	ldr	r3, [r3, #4]
    11f8:	4293      	cmp	r3, r2
    11fa:	d10b      	bne.n	1214 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x570>

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    11fc:	6842      	ldr	r2, [r0, #4]
    11fe:	68c1      	ldr	r1, [r0, #12]
    1200:	6813      	ldr	r3, [r2, #0]
    1202:	438b      	bics	r3, r1
    1204:	6013      	str	r3, [r2, #0]
			pixels.advanceData();
		}
		endBoundary(pixels.size());
		mSPI.waitFully();
		mSPI.release();
	}
    1206:	b003      	add	sp, #12
    1208:	bc3c      	pop	{r2, r3, r4, r5}
    120a:	4690      	mov	r8, r2
    120c:	4699      	mov	r9, r3
    120e:	46a2      	mov	sl, r4
    1210:	46ab      	mov	fp, r5
    1212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1214:	4798      	blx	r3
    1216:	e7f6      	b.n	1206 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x562>
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    1218:	4798      	blx	r3
    121a:	e55a      	b.n	cd2 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x2e>
    121c:	4b04      	ldr	r3, [pc, #16]	; (1230 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x58c>)
    121e:	4d05      	ldr	r5, [pc, #20]	; (1234 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x590>)
    1220:	469b      	mov	fp, r3
    1222:	4b05      	ldr	r3, [pc, #20]	; (1238 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x594>)
    1224:	4c05      	ldr	r4, [pc, #20]	; (123c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x598>)
    1226:	4698      	mov	r8, r3
    1228:	e652      	b.n	ed0 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x22c>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	00000129 	.word	0x00000129
    1230:	20000150 	.word	0x20000150
    1234:	20000154 	.word	0x20000154
    1238:	20000144 	.word	0x20000144
    123c:	20000148 	.word	0x20000148

00001240 <_GLOBAL__sub_I_fft>:
      //leds[59-i] = color;
  }
  FastLED.show();
  h += 1;

}
    1240:	b510      	push	{r4, lr}
void adc_init();
//End of Auto generated function prototypes by Atmel Studio



arduinoFFT fft;
    1242:	4c05      	ldr	r4, [pc, #20]	; (1258 <_GLOBAL__sub_I_fft+0x18>)
    1244:	0020      	movs	r0, r4
    1246:	f002 f90f 	bl	3468 <_ZN10arduinoFFTC1Ev>
    124a:	4a04      	ldr	r2, [pc, #16]	; (125c <_GLOBAL__sub_I_fft+0x1c>)
    124c:	4904      	ldr	r1, [pc, #16]	; (1260 <_GLOBAL__sub_I_fft+0x20>)
    124e:	0020      	movs	r0, r4
    1250:	f003 fa62 	bl	4718 <__aeabi_atexit>
      //leds[59-i] = color;
  }
  FastLED.show();
  h += 1;

}
    1254:	bd10      	pop	{r4, pc}
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	20000240 	.word	0x20000240
    125c:	20000000 	.word	0x20000000
    1260:	0000346d 	.word	0x0000346d

00001264 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    1264:	e7fe      	b.n	1264 <__cxa_pure_virtual>
    1266:	46c0      	nop			; (mov r8, r8)

00001268 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    1268:	be03      	bkpt	0x0003
    126a:	e7fe      	b.n	126a <Dummy_Handler+0x2>

0000126c <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    126c:	4b03      	ldr	r3, [pc, #12]	; (127c <USB_Handler+0x10>)
}

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
    126e:	b510      	push	{r4, lr}
  if (usb_isr)
    1270:	681b      	ldr	r3, [r3, #0]
    1272:	2b00      	cmp	r3, #0
    1274:	d000      	beq.n	1278 <USB_Handler+0xc>
    usb_isr();
    1276:	4798      	blx	r3
}
    1278:	bd10      	pop	{r4, pc}
    127a:	46c0      	nop			; (mov r8, r8)
    127c:	200005e8 	.word	0x200005e8

00001280 <Reset_Handler>:

extern int main(void);

/* This is called on processor reset to initialize the device and call main() */
void Reset_Handler(void)
{
    1280:	b570      	push	{r4, r5, r6, lr}

  /* Initialize the initialized data section */
  pSrc = &__etext;
  pDest = &__data_start__;

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    1282:	4b12      	ldr	r3, [pc, #72]	; (12cc <Reset_Handler+0x4c>)
    1284:	4c12      	ldr	r4, [pc, #72]	; (12d0 <Reset_Handler+0x50>)
    1286:	429c      	cmp	r4, r3
    1288:	d01b      	beq.n	12c2 <Reset_Handler+0x42>
    128a:	4d12      	ldr	r5, [pc, #72]	; (12d4 <Reset_Handler+0x54>)
    128c:	42a5      	cmp	r5, r4
    128e:	d018      	beq.n	12c2 <Reset_Handler+0x42>
    for (; pDest < &__data_end__; pDest++, pSrc++)
    1290:	429c      	cmp	r4, r3
    1292:	d20a      	bcs.n	12aa <Reset_Handler+0x2a>
    1294:	43e2      	mvns	r2, r4
    1296:	18d2      	adds	r2, r2, r3
    1298:	0892      	lsrs	r2, r2, #2
    129a:	3201      	adds	r2, #1
    129c:	0092      	lsls	r2, r2, #2
    129e:	0029      	movs	r1, r5
    12a0:	0020      	movs	r0, r4
    12a2:	f006 fd33 	bl	7d0c <memcpy>
      *pDest = *pSrc;
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    12a6:	42ac      	cmp	r4, r5
    12a8:	d00b      	beq.n	12c2 <Reset_Handler+0x42>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    12aa:	480b      	ldr	r0, [pc, #44]	; (12d8 <Reset_Handler+0x58>)
    12ac:	4b0b      	ldr	r3, [pc, #44]	; (12dc <Reset_Handler+0x5c>)
    12ae:	4298      	cmp	r0, r3
    12b0:	d207      	bcs.n	12c2 <Reset_Handler+0x42>
    12b2:	43c2      	mvns	r2, r0
    12b4:	18d2      	adds	r2, r2, r3
    12b6:	0892      	lsrs	r2, r2, #2
    12b8:	3201      	adds	r2, #1
    12ba:	0092      	lsls	r2, r2, #2
    12bc:	2100      	movs	r1, #0
    12be:	f006 fd2e 	bl	7d1e <memset>
      *pDest = 0;
  }

  SystemInit();
    12c2:	f000 fa85 	bl	17d0 <SystemInit>

  main();
    12c6:	f000 f873 	bl	13b0 <main>
    12ca:	e7fe      	b.n	12ca <Reset_Handler+0x4a>
    12cc:	20000120 	.word	0x20000120
    12d0:	20000000 	.word	0x20000000
    12d4:	00008740 	.word	0x00008740
    12d8:	20000120 	.word	0x20000120
    12dc:	20000db4 	.word	0x20000db4

000012e0 <SysTick_Handler>:

/* Default Arduino systick handler */
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
    12e0:	b510      	push	{r4, lr}
  if (sysTickHook())
    12e2:	f000 f861 	bl	13a8 <sysTickHook>
    12e6:	2800      	cmp	r0, #0
    12e8:	d101      	bne.n	12ee <SysTick_Handler+0xe>
    return;
  SysTick_DefaultHandler();
    12ea:	f000 f851 	bl	1390 <SysTick_DefaultHandler>
}
    12ee:	bd10      	pop	{r4, pc}

000012f0 <USB_SetHandler>:
    usb_isr();
}

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
    12f0:	4b01      	ldr	r3, [pc, #4]	; (12f8 <USB_SetHandler+0x8>)
    12f2:	6018      	str	r0, [r3, #0]
}
    12f4:	4770      	bx	lr
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	200005e8 	.word	0x200005e8

000012fc <millis>:
static volatile uint32_t _ulTickCount=0 ;

uint32_t millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    12fc:	4b01      	ldr	r3, [pc, #4]	; (1304 <millis+0x8>)
    12fe:	6818      	ldr	r0, [r3, #0]
}
    1300:	4770      	bx	lr
    1302:	46c0      	nop			; (mov r8, r8)
    1304:	200005ec 	.word	0x200005ec

00001308 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
uint32_t micros( void )
{
    1308:	b5f0      	push	{r4, r5, r6, r7, lr}
    130a:	4647      	mov	r7, r8
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    130c:	4b15      	ldr	r3, [pc, #84]	; (1364 <micros+0x5c>)
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
uint32_t micros( void )
{
    130e:	b480      	push	{r7}
  uint32_t ticks, ticks2;
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    1310:	4e15      	ldr	r6, [pc, #84]	; (1368 <micros+0x60>)
{
  uint32_t ticks, ticks2;
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
    1312:	4f16      	ldr	r7, [pc, #88]	; (136c <micros+0x64>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    1314:	469c      	mov	ip, r3
{
  uint32_t ticks, ticks2;
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
    1316:	68b8      	ldr	r0, [r7, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    1318:	6874      	ldr	r4, [r6, #4]
  count2  = _ulTickCount ;
    131a:	681d      	ldr	r5, [r3, #0]
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    131c:	2301      	movs	r3, #1
  uint32_t ticks, ticks2;
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    131e:	0164      	lsls	r4, r4, #5
    1320:	0fe4      	lsrs	r4, r4, #31
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    1322:	4698      	mov	r8, r3
    1324:	e002      	b.n	132c <micros+0x24>
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
uint32_t micros( void )
{
    1326:	0015      	movs	r5, r2
    1328:	001c      	movs	r4, r3
    132a:	0008      	movs	r0, r1
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    132c:	4642      	mov	r2, r8
  do
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    132e:	68b9      	ldr	r1, [r7, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    1330:	6873      	ldr	r3, [r6, #4]
    1332:	0e9b      	lsrs	r3, r3, #26
    1334:	4013      	ands	r3, r2
    count2  = _ulTickCount ;
    1336:	4662      	mov	r2, ip
    1338:	6812      	ldr	r2, [r2, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    133a:	429c      	cmp	r4, r3
    133c:	d1f3      	bne.n	1326 <micros+0x1e>
    133e:	4295      	cmp	r5, r2
    1340:	d1f1      	bne.n	1326 <micros+0x1e>
    1342:	4288      	cmp	r0, r1
    1344:	d3ef      	bcc.n	1326 <micros+0x1e>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    1346:	1964      	adds	r4, r4, r5
    1348:	25fa      	movs	r5, #250	; 0xfa
    134a:	4b08      	ldr	r3, [pc, #32]	; (136c <micros+0x64>)
    134c:	00ad      	lsls	r5, r5, #2
    134e:	685b      	ldr	r3, [r3, #4]
    1350:	436c      	muls	r4, r5
    1352:	1a18      	subs	r0, r3, r0
    1354:	4b06      	ldr	r3, [pc, #24]	; (1370 <micros+0x68>)
    1356:	4358      	muls	r0, r3
    1358:	0d00      	lsrs	r0, r0, #20
    135a:	1900      	adds	r0, r0, r4
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    135c:	bc04      	pop	{r2}
    135e:	4690      	mov	r8, r2
    1360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	200005ec 	.word	0x200005ec
    1368:	e000ed00 	.word	0xe000ed00
    136c:	e000e010 	.word	0xe000e010
    1370:	00005555 	.word	0x00005555

00001374 <delay>:

void delay( uint32_t ms )
{
    1374:	b570      	push	{r4, r5, r6, lr}
    1376:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
    1378:	d007      	beq.n	138a <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
    137a:	4d04      	ldr	r5, [pc, #16]	; (138c <delay+0x18>)
    137c:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
    137e:	f000 f811 	bl	13a4 <yield>
  } while ( _ulTickCount - start < ms ) ;
    1382:	682b      	ldr	r3, [r5, #0]
    1384:	1b9b      	subs	r3, r3, r6
    1386:	429c      	cmp	r4, r3
    1388:	d8f9      	bhi.n	137e <delay+0xa>
}
    138a:	bd70      	pop	{r4, r5, r6, pc}
    138c:	200005ec 	.word	0x200005ec

00001390 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    1390:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
    1392:	4a03      	ldr	r2, [pc, #12]	; (13a0 <SysTick_DefaultHandler+0x10>)
    1394:	6813      	ldr	r3, [r2, #0]
    1396:	3301      	adds	r3, #1
    1398:	6013      	str	r3, [r2, #0]
  tickReset();
    139a:	f000 f9df 	bl	175c <tickReset>
}
    139e:	bd10      	pop	{r4, pc}
    13a0:	200005ec 	.word	0x200005ec

000013a4 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    13a4:	4770      	bx	lr
    13a6:	46c0      	nop			; (mov r8, r8)

000013a8 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    13a8:	2000      	movs	r0, #0
    13aa:	4770      	bx	lr

000013ac <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    13ac:	4770      	bx	lr
    13ae:	46c0      	nop			; (mov r8, r8)

000013b0 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    13b0:	b510      	push	{r4, lr}
  init();
    13b2:	f001 fe3b 	bl	302c <init>

  __libc_init_array();
    13b6:	f006 fc6f 	bl	7c98 <__libc_init_array>

  initVariant();
    13ba:	f7ff fff7 	bl	13ac <_Z11initVariantv>

  delay(1);
    13be:	2001      	movs	r0, #1
    13c0:	f7ff ffd8 	bl	1374 <delay>
#if defined(USBCON)
  USBDevice.init();
    13c4:	4c09      	ldr	r4, [pc, #36]	; (13ec <main+0x3c>)
    13c6:	0020      	movs	r0, r4
    13c8:	f000 feb0 	bl	212c <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    13cc:	0020      	movs	r0, r4
    13ce:	f000 ff61 	bl	2294 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    13d2:	f7ff f99d 	bl	710 <setup>
    13d6:	4c06      	ldr	r4, [pc, #24]	; (13f0 <main+0x40>)
    13d8:	2c00      	cmp	r4, #0
    13da:	d102      	bne.n	13e2 <main+0x32>

  for (;;)
  {
    loop();
    13dc:	f7ff fa68 	bl	8b0 <loop>
    13e0:	e7fc      	b.n	13dc <main+0x2c>
    13e2:	f7ff fa65 	bl	8b0 <loop>
    if (serialEventRun) serialEventRun();
    13e6:	e000      	b.n	13ea <main+0x3a>
    13e8:	bf00      	nop
    13ea:	e7f5      	b.n	13d8 <main+0x28>
    13ec:	20000ac4 	.word	0x20000ac4
    13f0:	00000000 	.word	0x00000000

000013f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    13f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13f6:	0005      	movs	r5, r0
    13f8:	000f      	movs	r7, r1
    13fa:	0016      	movs	r6, r2
  size_t n = 0;
  while (size--) {
    13fc:	2400      	movs	r4, #0
    13fe:	2a00      	cmp	r2, #0
    1400:	d103      	bne.n	140a <_ZN5Print5writeEPKhj+0x16>
    1402:	e009      	b.n	1418 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    1404:	3401      	adds	r4, #1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1406:	42a6      	cmp	r6, r4
    1408:	d006      	beq.n	1418 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    140a:	682b      	ldr	r3, [r5, #0]
    140c:	5d39      	ldrb	r1, [r7, r4]
    140e:	681b      	ldr	r3, [r3, #0]
    1410:	0028      	movs	r0, r5
    1412:	4798      	blx	r3
    1414:	2800      	cmp	r0, #0
    1416:	d1f5      	bne.n	1404 <_ZN5Print5writeEPKhj+0x10>
    else break;
  }
  return n;
}
    1418:	0020      	movs	r0, r4
    141a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000141c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    141c:	b570      	push	{r4, r5, r6, lr}
    141e:	0005      	movs	r5, r0
    1420:	1e0c      	subs	r4, r1, #0
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1422:	d009      	beq.n	1438 <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
    1424:	0008      	movs	r0, r1
    1426:	f006 fd31 	bl	7e8c <strlen>
    142a:	682b      	ldr	r3, [r5, #0]
    142c:	0002      	movs	r2, r0
    142e:	685b      	ldr	r3, [r3, #4]
    1430:	0021      	movs	r1, r4
    1432:	0028      	movs	r0, r5
    1434:	4798      	blx	r3
  return write(str);
}
    1436:	bd70      	pop	{r4, r5, r6, pc}
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1438:	2000      	movs	r0, #0
    143a:	e7fc      	b.n	1436 <_ZN5Print5printEPKc+0x1a>

0000143c <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    143c:	b570      	push	{r4, r5, r6, lr}
    143e:	0004      	movs	r4, r0
    1440:	1e0d      	subs	r5, r1, #0
    1442:	d011      	beq.n	1468 <_ZN5Print7printlnEPKc+0x2c>
      return write((const uint8_t *)str, strlen(str));
    1444:	0008      	movs	r0, r1
    1446:	f006 fd21 	bl	7e8c <strlen>
    144a:	6823      	ldr	r3, [r4, #0]
    144c:	0002      	movs	r2, r0
    144e:	0029      	movs	r1, r5
    1450:	685b      	ldr	r3, [r3, #4]
    1452:	0020      	movs	r0, r4
    1454:	4798      	blx	r3
    1456:	0005      	movs	r5, r0
    1458:	6823      	ldr	r3, [r4, #0]
    145a:	2202      	movs	r2, #2
    145c:	685b      	ldr	r3, [r3, #4]
    145e:	4903      	ldr	r1, [pc, #12]	; (146c <_ZN5Print7printlnEPKc+0x30>)
    1460:	0020      	movs	r0, r4
    1462:	4798      	blx	r3
  size_t n = print(c);
  n += println();
  return n;
    1464:	1940      	adds	r0, r0, r5
}
    1466:	bd70      	pop	{r4, r5, r6, pc}
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1468:	2500      	movs	r5, #0
    146a:	e7f5      	b.n	1458 <_ZN5Print7printlnEPKc+0x1c>
    146c:	00007f38 	.word	0x00007f38

00001470 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1470:	b5f0      	push	{r4, r5, r6, r7, lr}
    1472:	464f      	mov	r7, r9
    1474:	4646      	mov	r6, r8
    1476:	b4c0      	push	{r6, r7}
    1478:	4681      	mov	r9, r0
    147a:	b08b      	sub	sp, #44	; 0x2c
    147c:	000c      	movs	r4, r1
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    147e:	2a00      	cmp	r2, #0
    1480:	d036      	beq.n	14f0 <_ZN5Print7printlnEmi+0x80>
size_t Print::printNumber(unsigned long n, uint8_t base)
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1482:	2320      	movs	r3, #32
    1484:	2000      	movs	r0, #0
    1486:	a901      	add	r1, sp, #4
    1488:	54c8      	strb	r0, [r1, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    148a:	b2d3      	uxtb	r3, r2
    148c:	2b01      	cmp	r3, #1
    148e:	d935      	bls.n	14fc <_ZN5Print7printlnEmi+0x8c>
    1490:	27ff      	movs	r7, #255	; 0xff
    1492:	4017      	ands	r7, r2
    1494:	ad09      	add	r5, sp, #36	; 0x24

  do {
    char c = n % base;
    1496:	0020      	movs	r0, r4
    1498:	0039      	movs	r1, r7
    149a:	f004 fc91 	bl	5dc0 <__aeabi_uidivmod>
    149e:	b2cb      	uxtb	r3, r1
    14a0:	4698      	mov	r8, r3
    n /= base;
    14a2:	0020      	movs	r0, r4

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    14a4:	000e      	movs	r6, r1
    n /= base;
    14a6:	0039      	movs	r1, r7
    14a8:	f004 fc04 	bl	5cb4 <__aeabi_uidiv>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    14ac:	4643      	mov	r3, r8
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    n /= base;
    14ae:	0004      	movs	r4, r0

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    14b0:	3d01      	subs	r5, #1
    14b2:	3337      	adds	r3, #55	; 0x37
    14b4:	2e09      	cmp	r6, #9
    14b6:	d800      	bhi.n	14ba <_ZN5Print7printlnEmi+0x4a>
    14b8:	3b07      	subs	r3, #7
    14ba:	702b      	strb	r3, [r5, #0]
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    14bc:	2c00      	cmp	r4, #0
    14be:	d1ea      	bne.n	1496 <_ZN5Print7printlnEmi+0x26>
      return write((const uint8_t *)str, strlen(str));
    14c0:	0028      	movs	r0, r5
    14c2:	f006 fce3 	bl	7e8c <strlen>
    14c6:	464b      	mov	r3, r9
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	0002      	movs	r2, r0
    14cc:	685b      	ldr	r3, [r3, #4]
    14ce:	0029      	movs	r1, r5
    14d0:	4648      	mov	r0, r9
    14d2:	4798      	blx	r3
    14d4:	0004      	movs	r4, r0
    14d6:	464b      	mov	r3, r9
    14d8:	681b      	ldr	r3, [r3, #0]
    14da:	2202      	movs	r2, #2
    14dc:	685b      	ldr	r3, [r3, #4]
    14de:	4908      	ldr	r1, [pc, #32]	; (1500 <_ZN5Print7printlnEmi+0x90>)
    14e0:	4648      	mov	r0, r9
    14e2:	4798      	blx	r3

size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
    14e4:	1900      	adds	r0, r0, r4
}
    14e6:	b00b      	add	sp, #44	; 0x2c
    14e8:	bc0c      	pop	{r2, r3}
    14ea:	4690      	mov	r8, r2
    14ec:	4699      	mov	r9, r3
    14ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    14f0:	6803      	ldr	r3, [r0, #0]
    14f2:	b2c9      	uxtb	r1, r1
    14f4:	681b      	ldr	r3, [r3, #0]
    14f6:	4798      	blx	r3
    14f8:	0004      	movs	r4, r0
    14fa:	e7ec      	b.n	14d6 <_ZN5Print7printlnEmi+0x66>
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    14fc:	270a      	movs	r7, #10
    14fe:	e7c9      	b.n	1494 <_ZN5Print7printlnEmi+0x24>
    1500:	00007f38 	.word	0x00007f38

00001504 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
    1504:	b5f0      	push	{r4, r5, r6, r7, lr}
    1506:	464d      	mov	r5, r9
    1508:	465f      	mov	r7, fp
    150a:	4656      	mov	r6, sl
    150c:	4644      	mov	r4, r8
    150e:	b4f0      	push	{r4, r5, r6, r7}
    1510:	001e      	movs	r6, r3
    1512:	b08d      	sub	sp, #52	; 0x34
    1514:	ab16      	add	r3, sp, #88	; 0x58
    1516:	4681      	mov	r9, r0
    1518:	781f      	ldrb	r7, [r3, #0]
  size_t n = 0;

  if (isnan(number)) return print("nan");
    151a:	0010      	movs	r0, r2
    151c:	0033      	movs	r3, r6
    151e:	0031      	movs	r1, r6

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
    1520:	0015      	movs	r5, r2
  size_t n = 0;

  if (isnan(number)) return print("nan");
    1522:	f006 fab7 	bl	7a94 <__aeabi_dcmpun>
    1526:	2800      	cmp	r0, #0
    1528:	d000      	beq.n	152c <_ZN5Print10printFloatEdh+0x28>
    152a:	e0e3      	b.n	16f4 <_ZN5Print10printFloatEdh+0x1f0>
  if (isinf(number)) return print("inf");
    152c:	2201      	movs	r2, #1
    152e:	0074      	lsls	r4, r6, #1
    1530:	0864      	lsrs	r4, r4, #1
    1532:	4252      	negs	r2, r2
    1534:	4b73      	ldr	r3, [pc, #460]	; (1704 <_ZN5Print10printFloatEdh+0x200>)
    1536:	0028      	movs	r0, r5
    1538:	0021      	movs	r1, r4
    153a:	f006 faab 	bl	7a94 <__aeabi_dcmpun>
    153e:	2800      	cmp	r0, #0
    1540:	d116      	bne.n	1570 <_ZN5Print10printFloatEdh+0x6c>
    1542:	2201      	movs	r2, #1
    1544:	4b6f      	ldr	r3, [pc, #444]	; (1704 <_ZN5Print10printFloatEdh+0x200>)
    1546:	4252      	negs	r2, r2
    1548:	0028      	movs	r0, r5
    154a:	0021      	movs	r1, r4
    154c:	f004 fd48 	bl	5fe0 <__aeabi_dcmple>
    1550:	2800      	cmp	r0, #0
    1552:	d10d      	bne.n	1570 <_ZN5Print10printFloatEdh+0x6c>
    1554:	464b      	mov	r3, r9
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	2203      	movs	r2, #3
    155a:	685b      	ldr	r3, [r3, #4]
    155c:	496a      	ldr	r1, [pc, #424]	; (1708 <_ZN5Print10printFloatEdh+0x204>)
    155e:	4648      	mov	r0, r9
    1560:	4798      	blx	r3
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
    1562:	b00d      	add	sp, #52	; 0x34
    1564:	bc3c      	pop	{r2, r3, r4, r5}
    1566:	4690      	mov	r8, r2
    1568:	4699      	mov	r9, r3
    156a:	46a2      	mov	sl, r4
    156c:	46ab      	mov	fp, r5
    156e:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1570:	22e0      	movs	r2, #224	; 0xe0
    1572:	4b66      	ldr	r3, [pc, #408]	; (170c <_ZN5Print10printFloatEdh+0x208>)
    1574:	0612      	lsls	r2, r2, #24
    1576:	0028      	movs	r0, r5
    1578:	0031      	movs	r1, r6
    157a:	f004 fd3b 	bl	5ff4 <__aeabi_dcmpgt>
    157e:	2800      	cmp	r0, #0
    1580:	d000      	beq.n	1584 <_ZN5Print10printFloatEdh+0x80>
    1582:	e0a3      	b.n	16cc <_ZN5Print10printFloatEdh+0x1c8>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1584:	22e0      	movs	r2, #224	; 0xe0
    1586:	4b62      	ldr	r3, [pc, #392]	; (1710 <_ZN5Print10printFloatEdh+0x20c>)
    1588:	0612      	lsls	r2, r2, #24
    158a:	0028      	movs	r0, r5
    158c:	0031      	movs	r1, r6
    158e:	f004 fd1d 	bl	5fcc <__aeabi_dcmplt>
    1592:	2800      	cmp	r0, #0
    1594:	d000      	beq.n	1598 <_ZN5Print10printFloatEdh+0x94>
    1596:	e099      	b.n	16cc <_ZN5Print10printFloatEdh+0x1c8>

  // Handle negative numbers
  if (number < 0.0)
    1598:	2200      	movs	r2, #0
    159a:	2300      	movs	r3, #0
    159c:	0028      	movs	r0, r5
    159e:	0031      	movs	r1, r6
    15a0:	f004 fd14 	bl	5fcc <__aeabi_dcmplt>
    15a4:	2800      	cmp	r0, #0
    15a6:	d000      	beq.n	15aa <_ZN5Print10printFloatEdh+0xa6>
    15a8:	e098      	b.n	16dc <_ZN5Print10printFloatEdh+0x1d8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
    15aa:	2300      	movs	r3, #0
    15ac:	4698      	mov	r8, r3
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    15ae:	2000      	movs	r0, #0
    15b0:	4958      	ldr	r1, [pc, #352]	; (1714 <_ZN5Print10printFloatEdh+0x210>)
  for (uint8_t i=0; i<digits; ++i)
    15b2:	2f00      	cmp	r7, #0
    15b4:	d008      	beq.n	15c8 <_ZN5Print10printFloatEdh+0xc4>
    15b6:	2400      	movs	r4, #0
    15b8:	3401      	adds	r4, #1
    rounding /= 10.0;
    15ba:	2200      	movs	r2, #0
    15bc:	4b56      	ldr	r3, [pc, #344]	; (1718 <_ZN5Print10printFloatEdh+0x214>)
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    15be:	b2e4      	uxtb	r4, r4
    rounding /= 10.0;
    15c0:	f005 f876 	bl	66b0 <__aeabi_ddiv>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    15c4:	42a7      	cmp	r7, r4
    15c6:	d1f7      	bne.n	15b8 <_ZN5Print10printFloatEdh+0xb4>
    rounding /= 10.0;

  number += rounding;
    15c8:	0002      	movs	r2, r0
    15ca:	000b      	movs	r3, r1
    15cc:	0028      	movs	r0, r5
    15ce:	0031      	movs	r1, r6
    15d0:	f004 fd42 	bl	6058 <__aeabi_dadd>
    15d4:	9000      	str	r0, [sp, #0]
    15d6:	9101      	str	r1, [sp, #4]

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    15d8:	f004 fd20 	bl	601c <__aeabi_d2uiz>
size_t Print::printNumber(unsigned long n, uint8_t base)
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    15dc:	2200      	movs	r2, #0
    15de:	2320      	movs	r3, #32
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    15e0:	4683      	mov	fp, r0
size_t Print::printNumber(unsigned long n, uint8_t base)
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    15e2:	0005      	movs	r5, r0
    15e4:	a903      	add	r1, sp, #12
    15e6:	54ca      	strb	r2, [r1, r3]
    15e8:	ac0b      	add	r4, sp, #44	; 0x2c

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    15ea:	0028      	movs	r0, r5
    15ec:	210a      	movs	r1, #10
    15ee:	f004 fbe7 	bl	5dc0 <__aeabi_uidivmod>
    n /= base;
    15f2:	0028      	movs	r0, r5

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    15f4:	b2ce      	uxtb	r6, r1
    n /= base;
    15f6:	210a      	movs	r1, #10
    15f8:	f004 fb5c 	bl	5cb4 <__aeabi_uidiv>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    15fc:	3c01      	subs	r4, #1
    15fe:	3630      	adds	r6, #48	; 0x30
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    n /= base;
    1600:	1e05      	subs	r5, r0, #0

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1602:	7026      	strb	r6, [r4, #0]
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1604:	d1f1      	bne.n	15ea <_ZN5Print10printFloatEdh+0xe6>
    1606:	0020      	movs	r0, r4
    1608:	f006 fc40 	bl	7e8c <strlen>
    160c:	464b      	mov	r3, r9
    160e:	681b      	ldr	r3, [r3, #0]
    1610:	0002      	movs	r2, r0
    1612:	685b      	ldr	r3, [r3, #4]
    1614:	0021      	movs	r1, r4
    1616:	4648      	mov	r0, r9
    1618:	4798      	blx	r3
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    161a:	4643      	mov	r3, r8
    161c:	181e      	adds	r6, r3, r0
    161e:	0030      	movs	r0, r6

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1620:	2f00      	cmp	r7, #0
    1622:	d09e      	beq.n	1562 <_ZN5Print10printFloatEdh+0x5e>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1624:	4658      	mov	r0, fp
    1626:	f006 facd 	bl	7bc4 <__aeabi_ui2d>
    162a:	0002      	movs	r2, r0
    162c:	000b      	movs	r3, r1
    162e:	9800      	ldr	r0, [sp, #0]
    1630:	9901      	ldr	r1, [sp, #4]
    1632:	f005 fedb 	bl	73ec <__aeabi_dsub>
    1636:	464b      	mov	r3, r9
    1638:	681b      	ldr	r3, [r3, #0]
    163a:	0004      	movs	r4, r0
    163c:	685b      	ldr	r3, [r3, #4]
    163e:	000d      	movs	r5, r1
    1640:	2201      	movs	r2, #1
    1642:	4936      	ldr	r1, [pc, #216]	; (171c <_ZN5Print10printFloatEdh+0x218>)
    1644:	4648      	mov	r0, r9
    1646:	4798      	blx	r3
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
    1648:	1833      	adds	r3, r6, r0
    164a:	469a      	mov	sl, r3
    164c:	46b8      	mov	r8, r7
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    164e:	2200      	movs	r2, #0
    1650:	4b31      	ldr	r3, [pc, #196]	; (1718 <_ZN5Print10printFloatEdh+0x214>)
    1652:	0029      	movs	r1, r5
    1654:	0020      	movs	r0, r4
    1656:	f005 fc4f 	bl	6ef8 <__aeabi_dmul>
    165a:	9000      	str	r0, [sp, #0]
    165c:	9101      	str	r1, [sp, #4]
    unsigned int toPrint = (unsigned int)remainder;
    165e:	f004 fcdd 	bl	601c <__aeabi_d2uiz>
size_t Print::printNumber(unsigned long n, uint8_t base)
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1662:	2220      	movs	r2, #32
    1664:	2100      	movs	r1, #0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    1666:	4683      	mov	fp, r0
size_t Print::printNumber(unsigned long n, uint8_t base)
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1668:	0005      	movs	r5, r0
    166a:	ab03      	add	r3, sp, #12
    166c:	5499      	strb	r1, [r3, r2]
    166e:	ae0b      	add	r6, sp, #44	; 0x2c

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    1670:	0028      	movs	r0, r5
    1672:	210a      	movs	r1, #10
    1674:	f004 fba4 	bl	5dc0 <__aeabi_uidivmod>
    n /= base;
    1678:	0028      	movs	r0, r5

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    167a:	b2cc      	uxtb	r4, r1
    n /= base;
    167c:	210a      	movs	r1, #10
    167e:	f004 fb19 	bl	5cb4 <__aeabi_uidiv>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1682:	3e01      	subs	r6, #1
    1684:	3430      	adds	r4, #48	; 0x30
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    n /= base;
    1686:	1e05      	subs	r5, r0, #0

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1688:	7034      	strb	r4, [r6, #0]
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    168a:	d1f1      	bne.n	1670 <_ZN5Print10printFloatEdh+0x16c>
    168c:	0030      	movs	r0, r6
    168e:	f006 fbfd 	bl	7e8c <strlen>
    1692:	464b      	mov	r3, r9
    1694:	681b      	ldr	r3, [r3, #0]
    1696:	0002      	movs	r2, r0
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	0031      	movs	r1, r6
    169c:	4648      	mov	r0, r9
    169e:	4798      	blx	r3
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
    16a0:	46d4      	mov	ip, sl
    16a2:	4484      	add	ip, r0
    remainder -= toPrint;
    16a4:	4658      	mov	r0, fp
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
    16a6:	46e2      	mov	sl, ip
    remainder -= toPrint;
    16a8:	f006 fa8c 	bl	7bc4 <__aeabi_ui2d>
    16ac:	000b      	movs	r3, r1
    16ae:	0002      	movs	r2, r0
    16b0:	9800      	ldr	r0, [sp, #0]
    16b2:	9901      	ldr	r1, [sp, #4]
    16b4:	f005 fe9a 	bl	73ec <__aeabi_dsub>
    16b8:	4643      	mov	r3, r8
    16ba:	3b01      	subs	r3, #1
    16bc:	b2db      	uxtb	r3, r3
    16be:	0004      	movs	r4, r0
    16c0:	000d      	movs	r5, r1
    16c2:	4698      	mov	r8, r3
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    16c4:	2b00      	cmp	r3, #0
    16c6:	d1c2      	bne.n	164e <_ZN5Print10printFloatEdh+0x14a>
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
    16c8:	4650      	mov	r0, sl
    16ca:	e74a      	b.n	1562 <_ZN5Print10printFloatEdh+0x5e>
    16cc:	464b      	mov	r3, r9
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	2203      	movs	r2, #3
    16d2:	685b      	ldr	r3, [r3, #4]
    16d4:	4912      	ldr	r1, [pc, #72]	; (1720 <_ZN5Print10printFloatEdh+0x21c>)
    16d6:	4648      	mov	r0, r9
    16d8:	4798      	blx	r3
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    16da:	e742      	b.n	1562 <_ZN5Print10printFloatEdh+0x5e>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    16dc:	464b      	mov	r3, r9
    16de:	681b      	ldr	r3, [r3, #0]
    16e0:	212d      	movs	r1, #45	; 0x2d
    16e2:	681b      	ldr	r3, [r3, #0]
    16e4:	4648      	mov	r0, r9
    16e6:	4798      	blx	r3

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    16e8:	2380      	movs	r3, #128	; 0x80
    16ea:	061b      	lsls	r3, r3, #24
    16ec:	469c      	mov	ip, r3
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    16ee:	4680      	mov	r8, r0

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    16f0:	4466      	add	r6, ip
    16f2:	e75c      	b.n	15ae <_ZN5Print10printFloatEdh+0xaa>
    16f4:	464b      	mov	r3, r9
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	2203      	movs	r2, #3
    16fa:	685b      	ldr	r3, [r3, #4]
    16fc:	4909      	ldr	r1, [pc, #36]	; (1724 <_ZN5Print10printFloatEdh+0x220>)
    16fe:	4648      	mov	r0, r9
    1700:	4798      	blx	r3

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
    1702:	e72e      	b.n	1562 <_ZN5Print10printFloatEdh+0x5e>
    1704:	7fefffff 	.word	0x7fefffff
    1708:	00007f48 	.word	0x00007f48
    170c:	41efffff 	.word	0x41efffff
    1710:	c1efffff 	.word	0xc1efffff
    1714:	3fe00000 	.word	0x3fe00000
    1718:	40240000 	.word	0x40240000
    171c:	00007f44 	.word	0x00007f44
    1720:	00007f40 	.word	0x00007f40
    1724:	00007f3c 	.word	0x00007f3c

00001728 <_ZN5Print5printEdi>:
  if (base == 0) return write(n);
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
    1728:	b530      	push	{r4, r5, lr}
    172a:	001d      	movs	r5, r3
    172c:	b083      	sub	sp, #12
  return printFloat(n, digits);
    172e:	9b06      	ldr	r3, [sp, #24]
    1730:	b2db      	uxtb	r3, r3
    1732:	9300      	str	r3, [sp, #0]
    1734:	002b      	movs	r3, r5
    1736:	f7ff fee5 	bl	1504 <_ZN5Print10printFloatEdh>
}
    173a:	b003      	add	sp, #12
    173c:	bd30      	pop	{r4, r5, pc}
    173e:	46c0      	nop			; (mov r8, r8)

00001740 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    1740:	4b01      	ldr	r3, [pc, #4]	; (1748 <initiateReset+0x8>)
    1742:	6018      	str	r0, [r3, #0]
}
    1744:	4770      	bx	lr
    1746:	46c0      	nop			; (mov r8, r8)
    1748:	20000004 	.word	0x20000004

0000174c <cancelReset>:

void cancelReset() {
	ticks = -1;
    174c:	2201      	movs	r2, #1
    174e:	4b02      	ldr	r3, [pc, #8]	; (1758 <cancelReset+0xc>)
    1750:	4252      	negs	r2, r2
    1752:	601a      	str	r2, [r3, #0]
}
    1754:	4770      	bx	lr
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	20000004 	.word	0x20000004

0000175c <tickReset>:

void tickReset() {
	if (ticks == -1)
    175c:	4a15      	ldr	r2, [pc, #84]	; (17b4 <tickReset+0x58>)

void cancelReset() {
	ticks = -1;
}

void tickReset() {
    175e:	b510      	push	{r4, lr}
	if (ticks == -1)
    1760:	6813      	ldr	r3, [r2, #0]
    1762:	1c59      	adds	r1, r3, #1
    1764:	d003      	beq.n	176e <tickReset+0x12>
		return;
	ticks--;
    1766:	3b01      	subs	r3, #1
    1768:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    176a:	2b00      	cmp	r3, #0
    176c:	d000      	beq.n	1770 <tickReset+0x14>
		banzai();
}
    176e:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1770:	b672      	cpsid	i
	__disable_irq();

	// Avoid erasing the application if APP_START is < than the minimum bootloader size
	// This could happen if without_bootloader linker script was chosen
	// Minimum bootloader size in SAMD21 family is 512bytes (RM section 22.6.5)
	if (APP_START < (0x200 + 4)) {
    1772:	4b11      	ldr	r3, [pc, #68]	; (17b8 <tickReset+0x5c>)
    1774:	4a11      	ldr	r2, [pc, #68]	; (17bc <tickReset+0x60>)
    1776:	3304      	adds	r3, #4
    1778:	4293      	cmp	r3, r2
    177a:	d913      	bls.n	17a4 <tickReset+0x48>
		goto reset;
	}

	// Erase application
	while (!nvmReady())
    177c:	2101      	movs	r1, #1
#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    177e:	4810      	ldr	r0, [pc, #64]	; (17c0 <tickReset+0x64>)
    1780:	7d04      	ldrb	r4, [r0, #20]
    1782:	4a0f      	ldr	r2, [pc, #60]	; (17c0 <tickReset+0x64>)
	if (APP_START < (0x200 + 4)) {
		goto reset;
	}

	// Erase application
	while (!nvmReady())
    1784:	4221      	tst	r1, r4
    1786:	d0fb      	beq.n	1780 <tickReset+0x24>
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    1788:	2020      	movs	r0, #32
    178a:	8b11      	ldrh	r1, [r2, #24]
    178c:	30ff      	adds	r0, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    178e:	089b      	lsrs	r3, r3, #2
    1790:	005b      	lsls	r3, r3, #1
	}

	// Erase application
	while (!nvmReady())
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    1792:	4301      	orrs	r1, r0
    1794:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    1796:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    1798:	4b0a      	ldr	r3, [pc, #40]	; (17c4 <tickReset+0x68>)
    179a:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
    179c:	2301      	movs	r3, #1
#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    179e:	7d11      	ldrb	r1, [r2, #20]
	while (!nvmReady())
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
	while (!nvmReady())
    17a0:	420b      	tst	r3, r1
    17a2:	d0fc      	beq.n	179e <tickReset+0x42>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    17a4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 SCB_AIRCR_SYSRESETREQ_Msk);
    17a8:	4a07      	ldr	r2, [pc, #28]	; (17c8 <tickReset+0x6c>)
    17aa:	4b08      	ldr	r3, [pc, #32]	; (17cc <tickReset+0x70>)
    17ac:	60da      	str	r2, [r3, #12]
    17ae:	f3bf 8f4f 	dsb	sy
    17b2:	e7fe      	b.n	17b2 <tickReset+0x56>
    17b4:	20000004 	.word	0x20000004
    17b8:	00000000 	.word	0x00000000
    17bc:	00000203 	.word	0x00000203
    17c0:	41004000 	.word	0x41004000
    17c4:	ffffa502 	.word	0xffffa502
    17c8:	05fa0004 	.word	0x05fa0004
    17cc:	e000ed00 	.word	0xe000ed00

000017d0 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    17d0:	221e      	movs	r2, #30
#define GENERIC_CLOCK_GENERATOR_OSC8M     (3u)
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
    17d2:	b510      	push	{r4, lr}
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    17d4:	4950      	ldr	r1, [pc, #320]	; (1918 <SystemInit+0x148>)
    17d6:	684b      	ldr	r3, [r1, #4]
    17d8:	4393      	bics	r3, r2
    17da:	3a1c      	subs	r2, #28
    17dc:	4313      	orrs	r3, r2
    17de:	604b      	str	r3, [r1, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    17e0:	2308      	movs	r3, #8
    17e2:	4a4e      	ldr	r2, [pc, #312]	; (191c <SystemInit+0x14c>)
    17e4:	6991      	ldr	r1, [r2, #24]
    17e6:	430b      	orrs	r3, r1
    17e8:	6193      	str	r3, [r2, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    17ea:	4a4d      	ldr	r2, [pc, #308]	; (1920 <SystemInit+0x150>)
    17ec:	4b4d      	ldr	r3, [pc, #308]	; (1924 <SystemInit+0x154>)
    17ee:	8293      	strh	r3, [r2, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    17f0:	2302      	movs	r3, #2
    17f2:	8a91      	ldrh	r1, [r2, #20]
    17f4:	430b      	orrs	r3, r1

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    17f6:	2102      	movs	r1, #2
  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    17f8:	8293      	strh	r3, [r2, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    17fa:	68d3      	ldr	r3, [r2, #12]
    17fc:	4219      	tst	r1, r3
    17fe:	d0fc      	beq.n	17fa <SystemInit+0x2a>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    1800:	2301      	movs	r3, #1
    1802:	4a49      	ldr	r2, [pc, #292]	; (1928 <SystemInit+0x158>)

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    1804:	2101      	movs	r1, #1

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    1806:	7013      	strb	r3, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    1808:	e003      	b.n	1812 <SystemInit+0x42>
    180a:	7853      	ldrb	r3, [r2, #1]
    180c:	b25b      	sxtb	r3, r3
    180e:	2b00      	cmp	r3, #0
    1810:	da02      	bge.n	1818 <SystemInit+0x48>
    1812:	7813      	ldrb	r3, [r2, #0]
    1814:	4219      	tst	r1, r3
    1816:	d1f8      	bne.n	180a <SystemInit+0x3a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    1818:	2301      	movs	r3, #1
    181a:	4943      	ldr	r1, [pc, #268]	; (1928 <SystemInit+0x158>)
    181c:	608b      	str	r3, [r1, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    181e:	784b      	ldrb	r3, [r1, #1]
    1820:	4a41      	ldr	r2, [pc, #260]	; (1928 <SystemInit+0x158>)
    1822:	b25b      	sxtb	r3, r3
    1824:	2b00      	cmp	r3, #0
    1826:	dbfa      	blt.n	181e <SystemInit+0x4e>
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1828:	0011      	movs	r1, r2
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    182a:	4b40      	ldr	r3, [pc, #256]	; (192c <SystemInit+0x15c>)
    182c:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    182e:	784b      	ldrb	r3, [r1, #1]
    1830:	4a3d      	ldr	r2, [pc, #244]	; (1928 <SystemInit+0x158>)
    1832:	b25b      	sxtb	r3, r3
    1834:	2b00      	cmp	r3, #0
    1836:	dbfa      	blt.n	182e <SystemInit+0x5e>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    1838:	2382      	movs	r3, #130	; 0x82
    183a:	01db      	lsls	r3, r3, #7
    183c:	8053      	strh	r3, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    183e:	7853      	ldrb	r3, [r2, #1]
    1840:	b25b      	sxtb	r3, r3
    1842:	2b00      	cmp	r3, #0
    1844:	dbfb      	blt.n	183e <SystemInit+0x6e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1846:	2302      	movs	r3, #2

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    1848:	2010      	movs	r0, #16
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    184a:	4935      	ldr	r1, [pc, #212]	; (1920 <SystemInit+0x150>)
    184c:	848b      	strh	r3, [r1, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    184e:	68ca      	ldr	r2, [r1, #12]
    1850:	4b33      	ldr	r3, [pc, #204]	; (1920 <SystemInit+0x150>)
    1852:	4210      	tst	r0, r2
    1854:	d0fb      	beq.n	184e <SystemInit+0x7e>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    1856:	4a36      	ldr	r2, [pc, #216]	; (1930 <SystemInit+0x160>)
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    1858:	2010      	movs	r0, #16
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    185a:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    185c:	001a      	movs	r2, r3
    185e:	68d1      	ldr	r1, [r2, #12]
    1860:	4b2f      	ldr	r3, [pc, #188]	; (1920 <SystemInit+0x150>)
    1862:	4208      	tst	r0, r1
    1864:	d0fb      	beq.n	185e <SystemInit+0x8e>
  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    1866:	2010      	movs	r0, #16
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    1868:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    186a:	4932      	ldr	r1, [pc, #200]	; (1934 <SystemInit+0x164>)
    186c:	430a      	orrs	r2, r1
    186e:	849a      	strh	r2, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    1870:	68da      	ldr	r2, [r3, #12]
    1872:	492b      	ldr	r1, [pc, #172]	; (1920 <SystemInit+0x150>)
    1874:	4210      	tst	r0, r2
    1876:	d0fb      	beq.n	1870 <SystemInit+0xa0>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    1878:	2302      	movs	r3, #2

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    187a:	2080      	movs	r0, #128	; 0x80
    187c:	2440      	movs	r4, #64	; 0x40
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    187e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1880:	4313      	orrs	r3, r2
    1882:	848b      	strh	r3, [r1, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    1884:	68cb      	ldr	r3, [r1, #12]
    1886:	4a26      	ldr	r2, [pc, #152]	; (1920 <SystemInit+0x150>)
    1888:	4218      	tst	r0, r3
    188a:	d0fb      	beq.n	1884 <SystemInit+0xb4>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    188c:	68d3      	ldr	r3, [r2, #12]
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    188e:	421c      	tst	r4, r3
    1890:	d0f8      	beq.n	1884 <SystemInit+0xb4>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    1892:	2110      	movs	r1, #16
    1894:	68d3      	ldr	r3, [r2, #12]
    1896:	4219      	tst	r1, r3
    1898:	d0fc      	beq.n	1894 <SystemInit+0xc4>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    189a:	2300      	movs	r3, #0
    189c:	4922      	ldr	r1, [pc, #136]	; (1928 <SystemInit+0x158>)
    189e:	608b      	str	r3, [r1, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    18a0:	784b      	ldrb	r3, [r1, #1]
    18a2:	4a21      	ldr	r2, [pc, #132]	; (1928 <SystemInit+0x158>)
    18a4:	b25b      	sxtb	r3, r3
    18a6:	2b00      	cmp	r3, #0
    18a8:	dbfa      	blt.n	18a0 <SystemInit+0xd0>
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    18aa:	0011      	movs	r1, r2
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    18ac:	4b22      	ldr	r3, [pc, #136]	; (1938 <SystemInit+0x168>)
    18ae:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    18b0:	784b      	ldrb	r3, [r1, #1]
    18b2:	4a1d      	ldr	r2, [pc, #116]	; (1928 <SystemInit+0x158>)
    18b4:	b25b      	sxtb	r3, r3
    18b6:	2b00      	cmp	r3, #0
    18b8:	dbfa      	blt.n	18b0 <SystemInit+0xe0>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    18ba:	4b19      	ldr	r3, [pc, #100]	; (1920 <SystemInit+0x150>)
    18bc:	491f      	ldr	r1, [pc, #124]	; (193c <SystemInit+0x16c>)
    18be:	6a18      	ldr	r0, [r3, #32]
    18c0:	4001      	ands	r1, r0
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    18c2:	2080      	movs	r0, #128	; 0x80
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    18c4:	6219      	str	r1, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    18c6:	6a19      	ldr	r1, [r3, #32]
    18c8:	4381      	bics	r1, r0
    18ca:	6219      	str	r1, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    18cc:	2303      	movs	r3, #3
    18ce:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    18d0:	4b1b      	ldr	r3, [pc, #108]	; (1940 <SystemInit+0x170>)
    18d2:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    18d4:	7853      	ldrb	r3, [r2, #1]
    18d6:	b25b      	sxtb	r3, r3
    18d8:	2b00      	cmp	r3, #0
    18da:	dbfb      	blt.n	18d4 <SystemInit+0x104>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    18dc:	2200      	movs	r2, #0
    18de:	4b0f      	ldr	r3, [pc, #60]	; (191c <SystemInit+0x14c>)
    18e0:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    18e2:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    18e4:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    18e6:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=VARIANT_MCK ;
    18e8:	4b16      	ldr	r3, [pc, #88]	; (1944 <SystemInit+0x174>)
    18ea:	4a17      	ldr	r2, [pc, #92]	; (1948 <SystemInit+0x178>)
    18ec:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    18ee:	4b17      	ldr	r3, [pc, #92]	; (194c <SystemInit+0x17c>)
    18f0:	6819      	ldr	r1, [r3, #0]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    18f2:	4b17      	ldr	r3, [pc, #92]	; (1950 <SystemInit+0x180>)
    18f4:	681b      	ldr	r3, [r3, #0]
    18f6:	0eda      	lsrs	r2, r3, #27

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    18f8:	068b      	lsls	r3, r1, #26
    18fa:	0f5b      	lsrs	r3, r3, #29
    18fc:	0218      	lsls	r0, r3, #8
    18fe:	23ff      	movs	r3, #255	; 0xff
    1900:	0149      	lsls	r1, r1, #5
    1902:	400b      	ands	r3, r1
    1904:	4313      	orrs	r3, r2
    1906:	4a13      	ldr	r2, [pc, #76]	; (1954 <SystemInit+0x184>)
    1908:	4303      	orrs	r3, r0
    190a:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    190c:	2380      	movs	r3, #128	; 0x80
    190e:	4a02      	ldr	r2, [pc, #8]	; (1918 <SystemInit+0x148>)
    1910:	6851      	ldr	r1, [r2, #4]
    1912:	430b      	orrs	r3, r1
    1914:	6053      	str	r3, [r2, #4]
}
    1916:	bd10      	pop	{r4, pc}
    1918:	41004000 	.word	0x41004000
    191c:	40000400 	.word	0x40000400
    1920:	40000800 	.word	0x40000800
    1924:	0000060c 	.word	0x0000060c
    1928:	40000c00 	.word	0x40000c00
    192c:	00010501 	.word	0x00010501
    1930:	7dff05b8 	.word	0x7dff05b8
    1934:	00000a04 	.word	0x00000a04
    1938:	00030700 	.word	0x00030700
    193c:	fffffcff 	.word	0xfffffcff
    1940:	00010603 	.word	0x00010603
    1944:	20000084 	.word	0x20000084
    1948:	02dc6c00 	.word	0x02dc6c00
    194c:	00806024 	.word	0x00806024
    1950:	00806020 	.word	0x00806020
    1954:	42004000 	.word	0x42004000

00001958 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    1958:	203f      	movs	r0, #63	; 0x3f
    195a:	4770      	bx	lr

0000195c <_ZN7Serial_9availableEv>:
void Serial_::end(void)
{
}

int Serial_::available(void)
{
    195c:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    195e:	6900      	ldr	r0, [r0, #16]
    1960:	2102      	movs	r1, #2
    1962:	f000 fe61 	bl	2628 <_ZN14USBDeviceClass9availableEm>
}
    1966:	bd10      	pop	{r4, pc}

00001968 <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
    1968:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    196a:	6900      	ldr	r0, [r0, #16]
    196c:	2103      	movs	r1, #3
    196e:	f000 fd99 	bl	24a4 <_ZN14USBDeviceClass5flushEm>
}
    1972:	bd10      	pop	{r4, pc}

00001974 <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
    1974:	b510      	push	{r4, lr}
    1976:	0013      	movs	r3, r2
    1978:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    197a:	000a      	movs	r2, r1
    197c:	6900      	ldr	r0, [r0, #16]
    197e:	2103      	movs	r1, #3
    1980:	f001 f802 	bl	2988 <_ZN14USBDeviceClass4sendEmPKvm>

	if (r > 0) {
    1984:	2800      	cmp	r0, #0
    1986:	d101      	bne.n	198c <_ZN7Serial_5writeEPKhj+0x18>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1988:	2301      	movs	r3, #1
    198a:	6063      	str	r3, [r4, #4]
		return r;
	} else {
		setWriteError();
		return 0;
	}
}
    198c:	bd10      	pop	{r4, pc}
    198e:	46c0      	nop			; (mov r8, r8)

00001990 <_ZN7Serial_4readEv>:
	return _serialPeek;
}

int Serial_::read(void)
{
	if (_serialPeek != -1) {
    1990:	4b07      	ldr	r3, [pc, #28]	; (19b0 <_ZN7Serial_4readEv+0x20>)
	_serialPeek = read();
	return _serialPeek;
}

int Serial_::read(void)
{
    1992:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    1994:	6818      	ldr	r0, [r3, #0]
	_serialPeek = read();
	return _serialPeek;
}

int Serial_::read(void)
{
    1996:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    1998:	1c41      	adds	r1, r0, #1
    199a:	d003      	beq.n	19a4 <_ZN7Serial_4readEv+0x14>
		int res = _serialPeek;
		_serialPeek = -1;
    199c:	2201      	movs	r2, #1
    199e:	4252      	negs	r2, r2
    19a0:	601a      	str	r2, [r3, #0]
		return res;
	}
	return usb.recv(CDC_ENDPOINT_OUT);
}
    19a2:	bd10      	pop	{r4, pc}
	if (_serialPeek != -1) {
		int res = _serialPeek;
		_serialPeek = -1;
		return res;
	}
	return usb.recv(CDC_ENDPOINT_OUT);
    19a4:	6910      	ldr	r0, [r2, #16]
    19a6:	2102      	movs	r1, #2
    19a8:	f000 fe82 	bl	26b0 <_ZN14USBDeviceClass4recvEm>
    19ac:	e7f9      	b.n	19a2 <_ZN7Serial_4readEv+0x12>
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	20000058 	.word	0x20000058

000019b4 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    19b4:	b510      	push	{r4, lr}
    19b6:	b082      	sub	sp, #8
    19b8:	0004      	movs	r4, r0
    19ba:	466b      	mov	r3, sp
    19bc:	1dd8      	adds	r0, r3, #7
	return write(&c, 1);
    19be:	6823      	ldr	r3, [r4, #0]
    19c0:	4a0a      	ldr	r2, [pc, #40]	; (19ec <_ZN7Serial_5writeEh+0x38>)
    19c2:	685b      	ldr	r3, [r3, #4]
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    19c4:	7001      	strb	r1, [r0, #0]
    19c6:	4293      	cmp	r3, r2
    19c8:	d10b      	bne.n	19e2 <_ZN7Serial_5writeEh+0x2e>
	usb.flush(CDC_ENDPOINT_IN);
}

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    19ca:	0002      	movs	r2, r0
    19cc:	2301      	movs	r3, #1
    19ce:	2103      	movs	r1, #3
    19d0:	6920      	ldr	r0, [r4, #16]
    19d2:	f000 ffd9 	bl	2988 <_ZN14USBDeviceClass4sendEmPKvm>

	if (r > 0) {
    19d6:	2800      	cmp	r0, #0
    19d8:	d101      	bne.n	19de <_ZN7Serial_5writeEh+0x2a>
    19da:	2301      	movs	r3, #1
    19dc:	6063      	str	r3, [r4, #4]
	}
}

size_t Serial_::write(uint8_t c) {
	return write(&c, 1);
}
    19de:	b002      	add	sp, #8
    19e0:	bd10      	pop	{r4, pc}
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
	return write(&c, 1);
    19e2:	0001      	movs	r1, r0
    19e4:	2201      	movs	r2, #1
    19e6:	0020      	movs	r0, r4
    19e8:	4798      	blx	r3
    19ea:	e7f8      	b.n	19de <_ZN7Serial_5writeEh+0x2a>
    19ec:	00001975 	.word	0x00001975

000019f0 <_ZN7Serial_4peekEv>:
}

int _serialPeek = -1;

int Serial_::peek(void)
{
    19f0:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    19f2:	4c0a      	ldr	r4, [pc, #40]	; (1a1c <_ZN7Serial_4peekEv+0x2c>)
}

int _serialPeek = -1;

int Serial_::peek(void)
{
    19f4:	0003      	movs	r3, r0
	if (_serialPeek != -1)
    19f6:	6820      	ldr	r0, [r4, #0]
    19f8:	1c42      	adds	r2, r0, #1
    19fa:	d000      	beq.n	19fe <_ZN7Serial_4peekEv+0xe>
		return _serialPeek;
	_serialPeek = read();
	return _serialPeek;
}
    19fc:	bd10      	pop	{r4, pc}

int Serial_::peek(void)
{
	if (_serialPeek != -1)
		return _serialPeek;
	_serialPeek = read();
    19fe:	681a      	ldr	r2, [r3, #0]
    1a00:	4907      	ldr	r1, [pc, #28]	; (1a20 <_ZN7Serial_4peekEv+0x30>)
    1a02:	68d2      	ldr	r2, [r2, #12]
    1a04:	428a      	cmp	r2, r1
    1a06:	d105      	bne.n	1a14 <_ZN7Serial_4peekEv+0x24>
	if (_serialPeek != -1) {
		int res = _serialPeek;
		_serialPeek = -1;
		return res;
	}
	return usb.recv(CDC_ENDPOINT_OUT);
    1a08:	6918      	ldr	r0, [r3, #16]
    1a0a:	2102      	movs	r1, #2
    1a0c:	f000 fe50 	bl	26b0 <_ZN14USBDeviceClass4recvEm>

int Serial_::peek(void)
{
	if (_serialPeek != -1)
		return _serialPeek;
	_serialPeek = read();
    1a10:	6020      	str	r0, [r4, #0]
    1a12:	e7f3      	b.n	19fc <_ZN7Serial_4peekEv+0xc>
    1a14:	0018      	movs	r0, r3
    1a16:	4790      	blx	r2
    1a18:	6020      	str	r0, [r4, #0]
    1a1a:	e7ef      	b.n	19fc <_ZN7Serial_4peekEv+0xc>
    1a1c:	20000058 	.word	0x20000058
    1a20:	00001991 	.word	0x00001991

00001a24 <_Z16CDC_GetInterfacePh>:
{
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
    1a24:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    1a26:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    1a28:	2242      	movs	r2, #66	; 0x42
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
    1a2a:	3302      	adds	r3, #2
    1a2c:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    1a2e:	4902      	ldr	r1, [pc, #8]	; (1a38 <_Z16CDC_GetInterfacePh+0x14>)
    1a30:	4802      	ldr	r0, [pc, #8]	; (1a3c <_Z16CDC_GetInterfacePh+0x18>)
    1a32:	f001 f84b 	bl	2acc <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1a36:	bd10      	pop	{r4, pc}
    1a38:	20000014 	.word	0x20000014
    1a3c:	20000ac4 	.word	0x20000ac4

00001a40 <_Z9CDC_SetupR8USBSetup>:

bool CDC_Setup(USBSetup& setup)
{
    1a40:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    1a42:	7802      	ldrb	r2, [r0, #0]
	interfaceNum[0] += 2;	// uses 2
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
}

bool CDC_Setup(USBSetup& setup)
{
    1a44:	0003      	movs	r3, r0
	uint8_t requestType = setup.bmRequestType;
	uint8_t r = setup.bRequest;
    1a46:	7841      	ldrb	r1, [r0, #1]
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
			return false;
		}
	}
	return false;
    1a48:	2000      	movs	r0, #0
bool CDC_Setup(USBSetup& setup)
{
	uint8_t requestType = setup.bmRequestType;
	uint8_t r = setup.bRequest;

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    1a4a:	2aa1      	cmp	r2, #161	; 0xa1
    1a4c:	d008      	beq.n	1a60 <_Z9CDC_SetupR8USBSetup+0x20>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
			return true;
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    1a4e:	2a21      	cmp	r2, #33	; 0x21
    1a50:	d105      	bne.n	1a5e <_Z9CDC_SetupR8USBSetup+0x1e>
	{
		if (r == CDC_SET_LINE_CODING)
    1a52:	2920      	cmp	r1, #32
    1a54:	d01d      	beq.n	1a92 <_Z9CDC_SetupR8USBSetup+0x52>
		{
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
		}

		if (r == CDC_SET_CONTROL_LINE_STATE)
    1a56:	2922      	cmp	r1, #34	; 0x22
    1a58:	d00f      	beq.n	1a7a <_Z9CDC_SetupR8USBSetup+0x3a>
				cancelReset();
			}
			return false;
		}

		if (CDC_SEND_BREAK == r)
    1a5a:	2923      	cmp	r1, #35	; 0x23
    1a5c:	d009      	beq.n	1a72 <_Z9CDC_SetupR8USBSetup+0x32>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
			return false;
		}
	}
	return false;
}
    1a5e:	bd10      	pop	{r4, pc}
	uint8_t requestType = setup.bmRequestType;
	uint8_t r = setup.bRequest;

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
	{
		if (r == CDC_GET_LINE_CODING)
    1a60:	2921      	cmp	r1, #33	; 0x21
    1a62:	d1fc      	bne.n	1a5e <_Z9CDC_SetupR8USBSetup+0x1e>
		{
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    1a64:	3a9a      	subs	r2, #154	; 0x9a
    1a66:	4912      	ldr	r1, [pc, #72]	; (1ab0 <_Z9CDC_SetupR8USBSetup+0x70>)
    1a68:	4812      	ldr	r0, [pc, #72]	; (1ab4 <_Z9CDC_SetupR8USBSetup+0x74>)
    1a6a:	f001 f82f 	bl	2acc <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    1a6e:	2001      	movs	r0, #1
    1a70:	e7f5      	b.n	1a5e <_Z9CDC_SetupR8USBSetup+0x1e>
			return false;
		}

		if (CDC_SEND_BREAK == r)
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    1a72:	885a      	ldrh	r2, [r3, #2]
    1a74:	4b10      	ldr	r3, [pc, #64]	; (1ab8 <_Z9CDC_SetupR8USBSetup+0x78>)
    1a76:	601a      	str	r2, [r3, #0]
			return false;
    1a78:	e7f1      	b.n	1a5e <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
		}

		if (r == CDC_SET_CONTROL_LINE_STATE)
		{
			_usbLineInfo.lineState = setup.wValueL;
    1a7a:	789b      	ldrb	r3, [r3, #2]
    1a7c:	4c0c      	ldr	r4, [pc, #48]	; (1ab0 <_Z9CDC_SetupR8USBSetup+0x70>)
    1a7e:	71e3      	strb	r3, [r4, #7]
		if (r == CDC_SET_LINE_CODING || r == CDC_SET_CONTROL_LINE_STATE)
		{
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed. We check DTR state to determine if host 
			// port is open (bit 0 of lineState).
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    1a80:	2396      	movs	r3, #150	; 0x96
    1a82:	6822      	ldr	r2, [r4, #0]
    1a84:	00db      	lsls	r3, r3, #3
    1a86:	429a      	cmp	r2, r3
    1a88:	d00a      	beq.n	1aa0 <_Z9CDC_SetupR8USBSetup+0x60>
			{
				initiateReset(250);
			}
			else
			{
				cancelReset();
    1a8a:	f7ff fe5f 	bl	174c <cancelReset>
			}
			return false;
    1a8e:	2000      	movs	r0, #0
    1a90:	e7e5      	b.n	1a5e <_Z9CDC_SetupR8USBSetup+0x1e>

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
	{
		if (r == CDC_SET_LINE_CODING)
		{
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    1a92:	4c07      	ldr	r4, [pc, #28]	; (1ab0 <_Z9CDC_SetupR8USBSetup+0x70>)
    1a94:	3a1a      	subs	r2, #26
    1a96:	0021      	movs	r1, r4
    1a98:	4806      	ldr	r0, [pc, #24]	; (1ab4 <_Z9CDC_SetupR8USBSetup+0x74>)
    1a9a:	f000 fd57 	bl	254c <_ZN14USBDeviceClass11recvControlEPvm>
    1a9e:	e7ef      	b.n	1a80 <_Z9CDC_SetupR8USBSetup+0x40>
		if (r == CDC_SET_LINE_CODING || r == CDC_SET_CONTROL_LINE_STATE)
		{
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed. We check DTR state to determine if host 
			// port is open (bit 0 of lineState).
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    1aa0:	79e3      	ldrb	r3, [r4, #7]
    1aa2:	07db      	lsls	r3, r3, #31
    1aa4:	d4f1      	bmi.n	1a8a <_Z9CDC_SetupR8USBSetup+0x4a>
			{
				initiateReset(250);
    1aa6:	20fa      	movs	r0, #250	; 0xfa
    1aa8:	f7ff fe4a 	bl	1740 <initiateReset>
			}
			else
			{
				cancelReset();
			}
			return false;
    1aac:	2000      	movs	r0, #0
    1aae:	e7d6      	b.n	1a5e <_Z9CDC_SetupR8USBSetup+0x1e>
    1ab0:	20000008 	.word	0x20000008
    1ab4:	20000ac4 	.word	0x20000ac4
    1ab8:	20000010 	.word	0x20000010

00001abc <_ZN7Serial_5beginEm>:
}

void Serial_::begin(uint32_t /* baud_count */)
{
	// uart config is ignored in USB-CDC
}
    1abc:	4770      	bx	lr
    1abe:	46c0      	nop			; (mov r8, r8)

00001ac0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1ac0:	22fa      	movs	r2, #250	; 0xfa
  public:
    Print() : write_error(0) {}
    1ac2:	2100      	movs	r1, #0
    1ac4:	4b05      	ldr	r3, [pc, #20]	; (1adc <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    1ac6:	0092      	lsls	r2, r2, #2
    1ac8:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    1aca:	4a05      	ldr	r2, [pc, #20]	; (1ae0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    1acc:	6059      	str	r1, [r3, #4]
    1ace:	3208      	adds	r2, #8
    1ad0:	601a      	str	r2, [r3, #0]
    1ad2:	4a04      	ldr	r2, [pc, #16]	; (1ae4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    1ad4:	7619      	strb	r1, [r3, #24]
    1ad6:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ Serial(USBDevice);
    1ad8:	4770      	bx	lr
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	200005f0 	.word	0x200005f0
    1ae0:	00007f4c 	.word	0x00007f4c
    1ae4:	20000ac4 	.word	0x20000ac4

00001ae8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual uint32_t recv(void *_data, uint32_t len)
    1ae8:	0003      	movs	r3, r0
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    1aea:	6900      	ldr	r0, [r0, #16]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual uint32_t recv(void *_data, uint32_t len)
    1aec:	b570      	push	{r4, r5, r6, lr}
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    1aee:	2800      	cmp	r0, #0
    1af0:	d128      	bne.n	1b44 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1af2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1af6:	b672      	cpsid	i
			synchronized {
				if (!ready0) {
    1af8:	2524      	movs	r5, #36	; 0x24
    1afa:	5d5d      	ldrb	r5, [r3, r5]
    1afc:	2d00      	cmp	r5, #0
    1afe:	d100      	bne.n	1b02 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
    1b00:	e09b      	b.n	1c3a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x152>
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    1b02:	2c00      	cmp	r4, #0
    1b04:	d102      	bne.n	1b0c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x24>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1b06:	b662      	cpsie	i
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
    1b08:	f3bf 8f6f 	isb	sy
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    1b0c:	69d8      	ldr	r0, [r3, #28]
    1b0e:	2a00      	cmp	r2, #0
    1b10:	d013      	beq.n	1b3a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x52>
    1b12:	6a1c      	ldr	r4, [r3, #32]
    1b14:	4284      	cmp	r4, r0
    1b16:	d800      	bhi.n	1b1a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x32>
    1b18:	e087      	b.n	1c2a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x142>
    1b1a:	2400      	movs	r4, #0
				data[i] = data0[first0++];
    1b1c:	1c45      	adds	r5, r0, #1
    1b1e:	61dd      	str	r5, [r3, #28]
    1b20:	699d      	ldr	r5, [r3, #24]
    1b22:	46ac      	mov	ip, r5
    1b24:	4460      	add	r0, ip
    1b26:	7800      	ldrb	r0, [r0, #0]
    1b28:	5508      	strb	r0, [r1, r4]
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    1b2a:	3401      	adds	r4, #1
    1b2c:	69d8      	ldr	r0, [r3, #28]
    1b2e:	42a2      	cmp	r2, r4
    1b30:	d003      	beq.n	1b3a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x52>
    1b32:	6a1d      	ldr	r5, [r3, #32]
    1b34:	42a8      	cmp	r0, r5
    1b36:	d3f1      	bcc.n	1b1c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
    1b38:	0022      	movs	r2, r4
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
    1b3a:	6a19      	ldr	r1, [r3, #32]
    1b3c:	4281      	cmp	r1, r0
    1b3e:	d039      	beq.n	1bb4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xcc>
    1b40:	0010      	movs	r0, r2
					}
				}
			}
			return i;
		}
	}
    1b42:	bd70      	pop	{r4, r5, r6, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b44:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1b48:	b672      	cpsid	i
				}
			}
			return i;
		} else {
			synchronized {
				if (!ready1) {
    1b4a:	2434      	movs	r4, #52	; 0x34
    1b4c:	5d1c      	ldrb	r4, [r3, r4]
    1b4e:	2c00      	cmp	r4, #0
    1b50:	d077      	beq.n	1c42 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x15a>
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    1b52:	2800      	cmp	r0, #0
    1b54:	d102      	bne.n	1b5c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x74>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1b56:	b662      	cpsie	i
    1b58:	f3bf 8f6f 	isb	sy
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    1b5c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1b5e:	2a00      	cmp	r2, #0
    1b60:	d012      	beq.n	1b88 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa0>
    1b62:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    1b64:	42a0      	cmp	r0, r4
    1b66:	d266      	bcs.n	1c36 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x14e>
    1b68:	2400      	movs	r4, #0
				data[i] = data1[first1++];
    1b6a:	1c45      	adds	r5, r0, #1
    1b6c:	62dd      	str	r5, [r3, #44]	; 0x2c
    1b6e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    1b70:	46ac      	mov	ip, r5
    1b72:	4460      	add	r0, ip
    1b74:	7800      	ldrb	r0, [r0, #0]
    1b76:	5508      	strb	r0, [r1, r4]
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    1b78:	3401      	adds	r4, #1
    1b7a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1b7c:	42a2      	cmp	r2, r4
    1b7e:	d003      	beq.n	1b88 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa0>
    1b80:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    1b82:	42a8      	cmp	r0, r5
    1b84:	d3f1      	bcc.n	1b6a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    1b86:	0022      	movs	r2, r4
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
    1b88:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1b8a:	4288      	cmp	r0, r1
    1b8c:	d1d8      	bne.n	1b40 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x58>
				first1 = 0;
    1b8e:	2100      	movs	r1, #0
    1b90:	62d9      	str	r1, [r3, #44]	; 0x2c
				current = 0;
    1b92:	6119      	str	r1, [r3, #16]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b94:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1b98:	b672      	cpsid	i
				synchronized {
					ready1 = false;
    1b9a:	2034      	movs	r0, #52	; 0x34
    1b9c:	5419      	strb	r1, [r3, r0]
					if (notify) {
    1b9e:	3001      	adds	r0, #1
    1ba0:	5c1d      	ldrb	r5, [r3, r0]
    1ba2:	2d00      	cmp	r5, #0
    1ba4:	d113      	bne.n	1bce <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe6>
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    1ba6:	0010      	movs	r0, r2
    1ba8:	2c00      	cmp	r4, #0
    1baa:	d1ca      	bne.n	1b42 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1bac:	b662      	cpsie	i
    1bae:	f3bf 8f6f 	isb	sy
    1bb2:	e7c6      	b.n	1b42 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5a>
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
    1bb4:	2100      	movs	r1, #0
				current = 1;
    1bb6:	2001      	movs	r0, #1
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
    1bb8:	61d9      	str	r1, [r3, #28]
				current = 1;
    1bba:	6118      	str	r0, [r3, #16]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1bbc:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1bc0:	b672      	cpsid	i
				synchronized {
					ready0 = false;
    1bc2:	3023      	adds	r0, #35	; 0x23
    1bc4:	5419      	strb	r1, [r3, r0]
					if (notify) {
    1bc6:	3011      	adds	r0, #17
    1bc8:	5c1d      	ldrb	r5, [r3, r0]
    1bca:	2d00      	cmp	r5, #0
    1bcc:	d0eb      	beq.n	1ba6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xbe>
				first1 = 0;
				current = 0;
				synchronized {
					ready1 = false;
					if (notify) {
						notify = false;
    1bce:	5419      	strb	r1, [r3, r0]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1bd0:	6859      	ldr	r1, [r3, #4]
    1bd2:	6808      	ldr	r0, [r1, #0]
    1bd4:	7a19      	ldrb	r1, [r3, #8]
    1bd6:	0149      	lsls	r1, r1, #5
    1bd8:	1841      	adds	r1, r0, r1
    1bda:	2001      	movs	r0, #1
    1bdc:	3109      	adds	r1, #9
    1bde:	31ff      	adds	r1, #255	; 0xff
    1be0:	784d      	ldrb	r5, [r1, #1]
    1be2:	4328      	orrs	r0, r5
    1be4:	7048      	strb	r0, [r1, #1]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1be6:	6859      	ldr	r1, [r3, #4]
    1be8:	7a1d      	ldrb	r5, [r3, #8]
    1bea:	468c      	mov	ip, r1
    1bec:	016d      	lsls	r5, r5, #5
    1bee:	68d9      	ldr	r1, [r3, #12]
    1bf0:	4465      	add	r5, ip
    1bf2:	68ae      	ldr	r6, [r5, #8]
    1bf4:	0488      	lsls	r0, r1, #18
    1bf6:	4915      	ldr	r1, [pc, #84]	; (1c4c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x164>)
    1bf8:	0900      	lsrs	r0, r0, #4
    1bfa:	4031      	ands	r1, r6
    1bfc:	4301      	orrs	r1, r0
    1bfe:	60a9      	str	r1, [r5, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1c00:	6858      	ldr	r0, [r3, #4]
    1c02:	7a19      	ldrb	r1, [r3, #8]
    1c04:	4684      	mov	ip, r0
    1c06:	0149      	lsls	r1, r1, #5
    1c08:	4461      	add	r1, ip
    1c0a:	6888      	ldr	r0, [r1, #8]
    1c0c:	0b80      	lsrs	r0, r0, #14
    1c0e:	0380      	lsls	r0, r0, #14
    1c10:	6088      	str	r0, [r1, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1c12:	6859      	ldr	r1, [r3, #4]
    1c14:	6808      	ldr	r0, [r1, #0]
    1c16:	7a19      	ldrb	r1, [r3, #8]
    1c18:	000b      	movs	r3, r1
    1c1a:	2140      	movs	r1, #64	; 0x40
    1c1c:	3308      	adds	r3, #8
    1c1e:	015b      	lsls	r3, r3, #5
    1c20:	18c3      	adds	r3, r0, r3
    1c22:	7918      	ldrb	r0, [r3, #4]
    1c24:	4301      	orrs	r1, r0
    1c26:	7119      	strb	r1, [r3, #4]
    1c28:	e7bd      	b.n	1ba6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xbe>
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
    1c2a:	6a19      	ldr	r1, [r3, #32]
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    1c2c:	2200      	movs	r2, #0
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
    1c2e:	4281      	cmp	r1, r0
    1c30:	d000      	beq.n	1c34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x14c>
    1c32:	e785      	b.n	1b40 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x58>
    1c34:	e7be      	b.n	1bb4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xcc>
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    1c36:	2200      	movs	r2, #0
    1c38:	e7a6      	b.n	1b88 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa0>
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    1c3a:	2c00      	cmp	r4, #0
    1c3c:	d0b6      	beq.n	1bac <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc4>
		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
				if (!ready0) {
					return 0;
    1c3e:	2000      	movs	r0, #0
    1c40:	e77f      	b.n	1b42 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5a>
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    1c42:	2800      	cmp	r0, #0
    1c44:	d0b2      	beq.n	1bac <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc4>
		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
				if (!ready0) {
					return 0;
    1c46:	2000      	movs	r0, #0
    1c48:	e77b      	b.n	1b42 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5a>
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	f0003fff 	.word	0xf0003fff

00001c50 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1c50:	6843      	ldr	r3, [r0, #4]
    1c52:	7a02      	ldrb	r2, [r0, #8]
			}
			return i;
		}
	}

	virtual void handleEndpoint()
    1c54:	b510      	push	{r4, lr}
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1c56:	681c      	ldr	r4, [r3, #0]
    1c58:	0013      	movs	r3, r2
    1c5a:	3308      	adds	r3, #8
    1c5c:	015b      	lsls	r3, r3, #5
    1c5e:	18e3      	adds	r3, r4, r3
    1c60:	79da      	ldrb	r2, [r3, #7]
    1c62:	21ff      	movs	r1, #255	; 0xff

	virtual void handleEndpoint()
	{
		// R/W : incoming, ready0/1
		//   W : last0/1, notify
		if (usbd.epBank0IsTransferComplete(ep))
    1c64:	07d2      	lsls	r2, r2, #31
    1c66:	d54f      	bpl.n	1d08 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb8>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    1c68:	2201      	movs	r2, #1
    1c6a:	71da      	strb	r2, [r3, #7]
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
    1c6c:	6943      	ldr	r3, [r0, #20]
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d04b      	beq.n	1d0a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xba>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1c72:	6883      	ldr	r3, [r0, #8]
    1c74:	4019      	ands	r1, r3
    1c76:	6843      	ldr	r3, [r0, #4]
    1c78:	0149      	lsls	r1, r1, #5
    1c7a:	469c      	mov	ip, r3
    1c7c:	4461      	add	r1, ip
    1c7e:	688b      	ldr	r3, [r1, #8]
    1c80:	049b      	lsls	r3, r3, #18
    1c82:	0c9b      	lsrs	r3, r3, #18
						return;
					}
					notify = false;
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
    1c84:	6303      	str	r3, [r0, #48]	; 0x30
				incoming = 0;
    1c86:	2300      	movs	r3, #0
    1c88:	6143      	str	r3, [r0, #20]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1c8a:	6983      	ldr	r3, [r0, #24]
    1c8c:	604b      	str	r3, [r1, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c8e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1c92:	b672      	cpsid	i
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
					ready1 = true;
    1c94:	2334      	movs	r3, #52	; 0x34
    1c96:	54c2      	strb	r2, [r0, r3]
					if (ready0) {
    1c98:	3b10      	subs	r3, #16
    1c9a:	5cc3      	ldrb	r3, [r0, r3]
    1c9c:	b2db      	uxtb	r3, r3
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d14a      	bne.n	1d38 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xe8>
						notify = true;
						return;
					}
					notify = false;
    1ca2:	2235      	movs	r2, #53	; 0x35
    1ca4:	5483      	strb	r3, [r0, r2]
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    1ca6:	2900      	cmp	r1, #0
    1ca8:	d102      	bne.n	1cb0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x60>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1caa:	b662      	cpsie	i
    1cac:	f3bf 8f6f 	isb	sy
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1cb0:	6843      	ldr	r3, [r0, #4]
    1cb2:	681a      	ldr	r2, [r3, #0]
    1cb4:	7a03      	ldrb	r3, [r0, #8]
    1cb6:	015b      	lsls	r3, r3, #5
    1cb8:	18d3      	adds	r3, r2, r3
    1cba:	2201      	movs	r2, #1
    1cbc:	3309      	adds	r3, #9
    1cbe:	33ff      	adds	r3, #255	; 0xff
    1cc0:	7859      	ldrb	r1, [r3, #1]
    1cc2:	430a      	orrs	r2, r1
    1cc4:	705a      	strb	r2, [r3, #1]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1cc6:	6843      	ldr	r3, [r0, #4]
    1cc8:	7a01      	ldrb	r1, [r0, #8]
    1cca:	469c      	mov	ip, r3
    1ccc:	0149      	lsls	r1, r1, #5
    1cce:	68c3      	ldr	r3, [r0, #12]
    1cd0:	4461      	add	r1, ip
    1cd2:	688c      	ldr	r4, [r1, #8]
    1cd4:	049a      	lsls	r2, r3, #18
    1cd6:	4b1c      	ldr	r3, [pc, #112]	; (1d48 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xf8>)
    1cd8:	0912      	lsrs	r2, r2, #4
    1cda:	4023      	ands	r3, r4
    1cdc:	4313      	orrs	r3, r2
    1cde:	608b      	str	r3, [r1, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1ce0:	6842      	ldr	r2, [r0, #4]
    1ce2:	7a03      	ldrb	r3, [r0, #8]
    1ce4:	4694      	mov	ip, r2
    1ce6:	015b      	lsls	r3, r3, #5
    1ce8:	4463      	add	r3, ip
    1cea:	689a      	ldr	r2, [r3, #8]
    1cec:	0b92      	lsrs	r2, r2, #14
    1cee:	0392      	lsls	r2, r2, #14
    1cf0:	609a      	str	r2, [r3, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1cf2:	6843      	ldr	r3, [r0, #4]
    1cf4:	7a02      	ldrb	r2, [r0, #8]
    1cf6:	6819      	ldr	r1, [r3, #0]
    1cf8:	0013      	movs	r3, r2
    1cfa:	2240      	movs	r2, #64	; 0x40
    1cfc:	3308      	adds	r3, #8
    1cfe:	015b      	lsls	r3, r3, #5
    1d00:	18cb      	adds	r3, r1, r3
    1d02:	7919      	ldrb	r1, [r3, #4]
    1d04:	430a      	orrs	r2, r1
    1d06:	711a      	strb	r2, [r3, #4]
					notify = false;
				}
			}
			release();
		}
	}
    1d08:	bd10      	pop	{r4, pc}
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1d0a:	6883      	ldr	r3, [r0, #8]
    1d0c:	4019      	ands	r1, r3
    1d0e:	6843      	ldr	r3, [r0, #4]
    1d10:	0149      	lsls	r1, r1, #5
    1d12:	469c      	mov	ip, r3
    1d14:	4461      	add	r1, ip
    1d16:	688b      	ldr	r3, [r1, #8]
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
    1d18:	6142      	str	r2, [r0, #20]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1d1a:	049b      	lsls	r3, r3, #18
    1d1c:	0c9b      	lsrs	r3, r3, #18
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
    1d1e:	6203      	str	r3, [r0, #32]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1d20:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1d22:	604b      	str	r3, [r1, #4]
			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
    1d24:	2324      	movs	r3, #36	; 0x24
    1d26:	54c2      	strb	r2, [r0, r3]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d28:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1d2c:	b672      	cpsid	i
				synchronized {
					if (ready1) {
    1d2e:	3310      	adds	r3, #16
    1d30:	5cc3      	ldrb	r3, [r0, r3]
    1d32:	b2db      	uxtb	r3, r3
    1d34:	2b00      	cmp	r3, #0
    1d36:	d0b4      	beq.n	1ca2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x52>
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
					ready1 = true;
					if (ready0) {
						notify = true;
    1d38:	2335      	movs	r3, #53	; 0x35
    1d3a:	54c2      	strb	r2, [r0, r3]
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    1d3c:	2900      	cmp	r1, #0
    1d3e:	d1e3      	bne.n	1d08 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1d40:	b662      	cpsie	i
    1d42:	f3bf 8f6f 	isb	sy
    1d46:	e7df      	b.n	1d08 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb8>
    1d48:	f0003fff 	.word	0xf0003fff

00001d4c <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
    1d4c:	6903      	ldr	r3, [r0, #16]
    1d4e:	2b00      	cmp	r3, #0
    1d50:	d110      	bne.n	1d74 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x28>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d52:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1d56:	b672      	cpsid	i
			bool ready = false;
			synchronized {
				ready = ready0;
    1d58:	3324      	adds	r3, #36	; 0x24
    1d5a:	5cc3      	ldrb	r3, [r0, r3]
    1d5c:	b2db      	uxtb	r3, r3
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    1d5e:	2a00      	cmp	r2, #0
    1d60:	d102      	bne.n	1d68 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1c>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1d62:	b662      	cpsie	i
    1d64:	f3bf 8f6f 	isb	sy
		if (current == 0) {
			bool ready = false;
			synchronized {
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d014      	beq.n	1d96 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4a>
    1d6c:	6a03      	ldr	r3, [r0, #32]
    1d6e:	69c0      	ldr	r0, [r0, #28]
    1d70:	1a18      	subs	r0, r3, r0
    1d72:	e00f      	b.n	1d94 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x48>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d74:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1d78:	b672      	cpsid	i
		} else {
			bool ready = false;
			synchronized {
				ready = ready1;
    1d7a:	2334      	movs	r3, #52	; 0x34
    1d7c:	5cc3      	ldrb	r3, [r0, r3]
    1d7e:	b2db      	uxtb	r3, r3
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    1d80:	2a00      	cmp	r2, #0
    1d82:	d102      	bne.n	1d8a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x3e>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1d84:	b662      	cpsie	i
    1d86:	f3bf 8f6f 	isb	sy
		} else {
			bool ready = false;
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d003      	beq.n	1d96 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4a>
    1d8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1d90:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1d92:	1a18      	subs	r0, r3, r0
		}
	}
    1d94:	4770      	bx	lr
		if (current == 0) {
			bool ready = false;
			synchronized {
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
    1d96:	2000      	movs	r0, #0
    1d98:	e7fc      	b.n	1d94 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x48>
    1d9a:	46c0      	nop			; (mov r8, r8)

00001d9c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    1d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d9e:	464f      	mov	r7, r9
    1da0:	4646      	mov	r6, r8
    1da2:	b4c0      	push	{r6, r7}
    1da4:	000c      	movs	r4, r1
    1da6:	af00      	add	r7, sp, #0
    1da8:	1e15      	subs	r5, r2, #0
	if (maxlen < 2)
    1daa:	2d01      	cmp	r5, #1
    1dac:	d940      	bls.n	1e30 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x94>
		return false;

	uint8_t buffer[maxlen];
    1dae:	1dd3      	adds	r3, r2, #7
    1db0:	466a      	mov	r2, sp
    1db2:	08db      	lsrs	r3, r3, #3
    1db4:	00db      	lsls	r3, r3, #3
    1db6:	1ad3      	subs	r3, r2, r3
    1db8:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1dba:	0008      	movs	r0, r1
    1dbc:	f006 f866 	bl	7e8c <strlen>
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
	if (maxlen < 2)
		return false;

	uint8_t buffer[maxlen];
    1dc0:	466e      	mov	r6, sp
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;
    1dc2:	2303      	movs	r3, #3
{
	if (maxlen < 2)
		return false;

	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1dc4:	3001      	adds	r0, #1
    1dc6:	0040      	lsls	r0, r0, #1
    1dc8:	7030      	strb	r0, [r6, #0]
	buffer[1] = 0x03;
    1dca:	7073      	strb	r3, [r6, #1]

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    1dcc:	2d02      	cmp	r5, #2
    1dce:	d042      	beq.n	1e56 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xba>
    1dd0:	7823      	ldrb	r3, [r4, #0]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d03f      	beq.n	1e56 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xba>
		buffer[i++] = *string++;
    1dd6:	1c61      	adds	r1, r4, #1
    1dd8:	70b3      	strb	r3, [r6, #2]
		if (i == maxlen) break;
    1dda:	2d03      	cmp	r5, #3
    1ddc:	d054      	beq.n	1e88 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xec>
    1dde:	2303      	movs	r3, #3
    1de0:	2402      	movs	r4, #2
		buffer[i] = 0;
    1de2:	2000      	movs	r0, #0
    1de4:	e008      	b.n	1df8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    1de6:	780a      	ldrb	r2, [r1, #0]
    1de8:	2a00      	cmp	r2, #0
    1dea:	d028      	beq.n	1e3e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xa2>
		buffer[i++] = *string++;
    1dec:	3302      	adds	r3, #2
    1dee:	b2db      	uxtb	r3, r3
    1df0:	3101      	adds	r1, #1
    1df2:	5532      	strb	r2, [r6, r4]
		if (i == maxlen) break;
    1df4:	429d      	cmp	r5, r3
    1df6:	d028      	beq.n	1e4a <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xae>
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    1df8:	3402      	adds	r4, #2
    1dfa:	b2e4      	uxtb	r4, r4
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
    1dfc:	54f0      	strb	r0, [r6, r3]
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    1dfe:	42a5      	cmp	r5, r4
    1e00:	d8f1      	bhi.n	1de6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4a>
    1e02:	0022      	movs	r2, r4
    1e04:	2501      	movs	r5, #1
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1e06:	4b22      	ldr	r3, [pc, #136]	; (1e90 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xf4>)
    1e08:	781b      	ldrb	r3, [r3, #0]
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d111      	bne.n	1e32 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x96>
		return length;

	if (_pack_message == true) {
    1e0e:	4b21      	ldr	r3, [pc, #132]	; (1e94 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xf8>)
    1e10:	781b      	ldrb	r3, [r3, #0]
    1e12:	2b00      	cmp	r3, #0
    1e14:	d023      	beq.n	1e5e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xc2>
		memcpy(&_pack_buffer[_pack_size], data, len);
    1e16:	4b20      	ldr	r3, [pc, #128]	; (1e98 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xfc>)
    1e18:	4820      	ldr	r0, [pc, #128]	; (1e9c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x100>)
    1e1a:	4698      	mov	r8, r3
    1e1c:	881b      	ldrh	r3, [r3, #0]
    1e1e:	0031      	movs	r1, r6
    1e20:	4699      	mov	r9, r3
    1e22:	4448      	add	r0, r9
    1e24:	f005 ff72 	bl	7d0c <memcpy>
		_pack_size += len;
    1e28:	4643      	mov	r3, r8
    1e2a:	444c      	add	r4, r9
    1e2c:	801c      	strh	r4, [r3, #0]
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
    1e2e:	e000      	b.n	1e32 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x96>
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
	if (maxlen < 2)
		return false;
    1e30:	2500      	movs	r5, #0
		if (i == maxlen) break;
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
}
    1e32:	46bd      	mov	sp, r7
    1e34:	0028      	movs	r0, r5
    1e36:	bc0c      	pop	{r2, r3}
    1e38:	4690      	mov	r8, r2
    1e3a:	4699      	mov	r9, r3
    1e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e3e:	0025      	movs	r5, r4
    1e40:	1e6b      	subs	r3, r5, #1
    1e42:	419d      	sbcs	r5, r3
    1e44:	0022      	movs	r2, r4
    1e46:	b2ed      	uxtb	r5, r5
    1e48:	e7dd      	b.n	1e06 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x6a>
    1e4a:	002a      	movs	r2, r5
    1e4c:	1e6b      	subs	r3, r5, #1
    1e4e:	419d      	sbcs	r5, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
		buffer[i++] = *string++;
    1e50:	0014      	movs	r4, r2
    1e52:	b2ed      	uxtb	r5, r5
    1e54:	e7d7      	b.n	1e06 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x6a>
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    1e56:	2501      	movs	r5, #1
    1e58:	2202      	movs	r2, #2
    1e5a:	2402      	movs	r4, #2
    1e5c:	e7d3      	b.n	1e06 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x6a>
		memcpy(&_pack_buffer[_pack_size], data, len);
		_pack_size += len;
		return length;
	}

 	while (len > 0)
    1e5e:	2a00      	cmp	r2, #0
    1e60:	d0e7      	beq.n	1e32 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x96>
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1e62:	4b0f      	ldr	r3, [pc, #60]	; (1ea0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x104>)
    1e64:	0031      	movs	r1, r6
    1e66:	4698      	mov	r8, r3
    1e68:	0018      	movs	r0, r3
    1e6a:	f005 ff4f 	bl	7d0c <memcpy>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1e6e:	4643      	mov	r3, r8
    1e70:	4a0c      	ldr	r2, [pc, #48]	; (1ea4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x108>)
    1e72:	6153      	str	r3, [r2, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1e74:	6991      	ldr	r1, [r2, #24]
    1e76:	4b0c      	ldr	r3, [pc, #48]	; (1ea8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x10c>)
    1e78:	400b      	ands	r3, r1
    1e7a:	6193      	str	r3, [r2, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1e7c:	6993      	ldr	r3, [r2, #24]
    1e7e:	0b9b      	lsrs	r3, r3, #14
    1e80:	039b      	lsls	r3, r3, #14
    1e82:	431c      	orrs	r4, r3
    1e84:	6194      	str	r4, [r2, #24]
    1e86:	e7d4      	b.n	1e32 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x96>
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
		buffer[i++] = *string++;
		if (i == maxlen) break;
    1e88:	2501      	movs	r5, #1
    1e8a:	2203      	movs	r2, #3
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
		buffer[i++] = *string++;
    1e8c:	2403      	movs	r4, #3
    1e8e:	e7ba      	b.n	1e06 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x6a>
    1e90:	20000ac0 	.word	0x20000ac0
    1e94:	20000717 	.word	0x20000717
    1e98:	20000a98 	.word	0x20000a98
    1e9c:	20000610 	.word	0x20000610
    1ea0:	200008d8 	.word	0x200008d8
    1ea4:	20000ac8 	.word	0x20000ac8
    1ea8:	f0003fff 	.word	0xf0003fff

00001eac <_ZN14USBDeviceClass17sendConfigurationEm>:
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    1eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eae:	465f      	mov	r7, fp
    1eb0:	4656      	mov	r6, sl
    1eb2:	464d      	mov	r5, r9
    1eb4:	4644      	mov	r4, r8
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
    1eb6:	2301      	movs	r3, #1
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    1eb8:	b4f0      	push	{r4, r5, r6, r7}
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
	uint8_t interfaces = 0;
    1eba:	2600      	movs	r6, #0
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    1ebc:	b087      	sub	sp, #28
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
	uint8_t interfaces = 0;
    1ebe:	ac03      	add	r4, sp, #12
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
    1ec0:	4f44      	ldr	r7, [pc, #272]	; (1fd4 <_ZN14USBDeviceClass17sendConfigurationEm+0x128>)
uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
	uint8_t interfaces = 0;

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    1ec2:	0020      	movs	r0, r4
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
    1ec4:	4698      	mov	r8, r3
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    1ec6:	468a      	mov	sl, r1
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
    1ec8:	703b      	strb	r3, [r7, #0]
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
	uint8_t interfaces = 0;
    1eca:	7026      	strb	r6, [r4, #0]

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    1ecc:	f7ff fdaa 	bl	1a24 <_Z16CDC_GetInterfacePh>
    1ed0:	4683      	mov	fp, r0
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
    1ed2:	f002 fbc3 	bl	465c <_Z12PluggableUSBv>
    1ed6:	0021      	movs	r1, r4
    1ed8:	f002 fb5e 	bl	4598 <_ZN13PluggableUSB_12getInterfaceEPh>
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1edc:	2209      	movs	r2, #9

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
#endif

	return interfaces;
    1ede:	7823      	ldrb	r3, [r4, #0]
#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
    1ee0:	0005      	movs	r5, r0
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1ee2:	2100      	movs	r1, #0
    1ee4:	0020      	movs	r0, r4

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
#endif

	return interfaces;
    1ee6:	9301      	str	r3, [sp, #4]
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1ee8:	4691      	mov	r9, r2
    1eea:	f005 ff18 	bl	7d1e <memset>
    1eee:	2302      	movs	r3, #2
    1ef0:	7063      	strb	r3, [r4, #1]
    1ef2:	339e      	adds	r3, #158	; 0x9e
    1ef4:	71e3      	strb	r3, [r4, #7]
    1ef6:	335a      	adds	r3, #90	; 0x5a
    1ef8:	7223      	strb	r3, [r4, #8]
    1efa:	466b      	mov	r3, sp
    1efc:	464a      	mov	r2, r9
    1efe:	791b      	ldrb	r3, [r3, #4]
    1f00:	7022      	strb	r2, [r4, #0]
    1f02:	7123      	strb	r3, [r4, #4]
    1f04:	4642      	mov	r2, r8
	_Pragma("pack()")

	//	Now send them
	_dry_run = false;

	if (maxlen == sizeof(ConfigDescriptor)) {
    1f06:	4653      	mov	r3, sl
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1f08:	445d      	add	r5, fp
    1f0a:	3509      	adds	r5, #9
    1f0c:	7162      	strb	r2, [r4, #5]
    1f0e:	8065      	strh	r5, [r4, #2]
	_Pragma("pack()")

	//	Now send them
	_dry_run = false;
    1f10:	703e      	strb	r6, [r7, #0]

	if (maxlen == sizeof(ConfigDescriptor)) {
    1f12:	2b09      	cmp	r3, #9
    1f14:	d03c      	beq.n	1f90 <_ZN14USBDeviceClass17sendConfigurationEm+0xe4>
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
    1f16:	4642      	mov	r2, r8
    1f18:	4b2f      	ldr	r3, [pc, #188]	; (1fd8 <_ZN14USBDeviceClass17sendConfigurationEm+0x12c>)

	if (_dry_run == true)
		return length;

	if (_pack_message == true) {
		memcpy(&_pack_buffer[_pack_size], data, len);
    1f1a:	4d30      	ldr	r5, [pc, #192]	; (1fdc <_ZN14USBDeviceClass17sendConfigurationEm+0x130>)
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
    1f1c:	701a      	strb	r2, [r3, #0]
    1f1e:	469a      	mov	sl, r3

	if (_dry_run == true)
		return length;

	if (_pack_message == true) {
		memcpy(&_pack_buffer[_pack_size], data, len);
    1f20:	002b      	movs	r3, r5
    1f22:	cc06      	ldmia	r4!, {r1, r2}
    1f24:	c306      	stmia	r3!, {r1, r2}
    1f26:	7822      	ldrb	r2, [r4, #0]
    1f28:	701a      	strb	r2, [r3, #0]
		_pack_size += len;
    1f2a:	464a      	mov	r2, r9
    1f2c:	4b2c      	ldr	r3, [pc, #176]	; (1fe0 <_ZN14USBDeviceClass17sendConfigurationEm+0x134>)
    1f2e:	801a      	strh	r2, [r3, #0]
    1f30:	4698      	mov	r8, r3
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
	uint8_t interfaces = 0;
    1f32:	ab02      	add	r3, sp, #8
    1f34:	1cdc      	adds	r4, r3, #3

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    1f36:	0020      	movs	r0, r4
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
	uint8_t interfaces = 0;
    1f38:	70de      	strb	r6, [r3, #3]

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    1f3a:	f7ff fd73 	bl	1a24 <_Z16CDC_GetInterfacePh>
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
    1f3e:	f002 fb8d 	bl	465c <_Z12PluggableUSBv>
    1f42:	0021      	movs	r1, r4
    1f44:	f002 fb28 	bl	4598 <_ZN13PluggableUSB_12getInterfaceEPh>
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
	} else {
		_pack_message = false;
    1f48:	4653      	mov	r3, sl
    1f4a:	701e      	strb	r6, [r3, #0]
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1f4c:	783b      	ldrb	r3, [r7, #0]
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d116      	bne.n	1f80 <_ZN14USBDeviceClass17sendConfigurationEm+0xd4>
	if (val) {
		_pack_message = true;
		_pack_size = 0;
	} else {
		_pack_message = false;
		sendControl(_pack_buffer, _pack_size);
    1f52:	4643      	mov	r3, r8
    1f54:	881c      	ldrh	r4, [r3, #0]
		memcpy(&_pack_buffer[_pack_size], data, len);
		_pack_size += len;
		return length;
	}

 	while (len > 0)
    1f56:	2c00      	cmp	r4, #0
    1f58:	d012      	beq.n	1f80 <_ZN14USBDeviceClass17sendConfigurationEm+0xd4>
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1f5a:	4e22      	ldr	r6, [pc, #136]	; (1fe4 <_ZN14USBDeviceClass17sendConfigurationEm+0x138>)
    1f5c:	0022      	movs	r2, r4
    1f5e:	0029      	movs	r1, r5
    1f60:	0030      	movs	r0, r6
    1f62:	f005 fed3 	bl	7d0c <memcpy>
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1f66:	4a20      	ldr	r2, [pc, #128]	; (1fe8 <_ZN14USBDeviceClass17sendConfigurationEm+0x13c>)
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1f68:	4b20      	ldr	r3, [pc, #128]	; (1fec <_ZN14USBDeviceClass17sendConfigurationEm+0x140>)

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1f6a:	6156      	str	r6, [r2, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1f6c:	6991      	ldr	r1, [r2, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1f6e:	04a4      	lsls	r4, r4, #18
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1f70:	400b      	ands	r3, r1
    1f72:	6193      	str	r3, [r2, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1f74:	6991      	ldr	r1, [r2, #24]
    1f76:	0ca3      	lsrs	r3, r4, #18
    1f78:	0b8c      	lsrs	r4, r1, #14
    1f7a:	03a4      	lsls	r4, r4, #14
    1f7c:	431c      	orrs	r4, r3
    1f7e:	6194      	str	r4, [r2, #24]
	sendControl(&config, sizeof(ConfigDescriptor));
	SendInterfaces(&total);
	packMessages(false);

	return true;
}
    1f80:	2001      	movs	r0, #1
    1f82:	b007      	add	sp, #28
    1f84:	bc3c      	pop	{r2, r3, r4, r5}
    1f86:	4690      	mov	r8, r2
    1f88:	4699      	mov	r9, r3
    1f8a:	46a2      	mov	sl, r4
    1f8c:	46ab      	mov	fp, r5
    1f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pos = 0;

	if (_dry_run == true)
		return length;

	if (_pack_message == true) {
    1f90:	4b11      	ldr	r3, [pc, #68]	; (1fd8 <_ZN14USBDeviceClass17sendConfigurationEm+0x12c>)
    1f92:	781b      	ldrb	r3, [r3, #0]
    1f94:	2b00      	cmp	r3, #0
    1f96:	d00a      	beq.n	1fae <_ZN14USBDeviceClass17sendConfigurationEm+0x102>
		memcpy(&_pack_buffer[_pack_size], data, len);
    1f98:	4e11      	ldr	r6, [pc, #68]	; (1fe0 <_ZN14USBDeviceClass17sendConfigurationEm+0x134>)
    1f9a:	4810      	ldr	r0, [pc, #64]	; (1fdc <_ZN14USBDeviceClass17sendConfigurationEm+0x130>)
    1f9c:	8835      	ldrh	r5, [r6, #0]
    1f9e:	2209      	movs	r2, #9
    1fa0:	1940      	adds	r0, r0, r5
    1fa2:	0021      	movs	r1, r4
		_pack_size += len;
    1fa4:	3509      	adds	r5, #9

	if (_dry_run == true)
		return length;

	if (_pack_message == true) {
		memcpy(&_pack_buffer[_pack_size], data, len);
    1fa6:	f005 feb1 	bl	7d0c <memcpy>
		_pack_size += len;
    1faa:	8035      	strh	r5, [r6, #0]
    1fac:	e7e8      	b.n	1f80 <_ZN14USBDeviceClass17sendConfigurationEm+0xd4>
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1fae:	4b0d      	ldr	r3, [pc, #52]	; (1fe4 <_ZN14USBDeviceClass17sendConfigurationEm+0x138>)
    1fb0:	001a      	movs	r2, r3
    1fb2:	cc03      	ldmia	r4!, {r0, r1}
    1fb4:	c203      	stmia	r2!, {r0, r1}
    1fb6:	7821      	ldrb	r1, [r4, #0]
    1fb8:	7011      	strb	r1, [r2, #0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1fba:	4a0b      	ldr	r2, [pc, #44]	; (1fe8 <_ZN14USBDeviceClass17sendConfigurationEm+0x13c>)
    1fbc:	6153      	str	r3, [r2, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1fbe:	6991      	ldr	r1, [r2, #24]
    1fc0:	4b0a      	ldr	r3, [pc, #40]	; (1fec <_ZN14USBDeviceClass17sendConfigurationEm+0x140>)
    1fc2:	400b      	ands	r3, r1

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1fc4:	4651      	mov	r1, sl
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1fc6:	6193      	str	r3, [r2, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1fc8:	6993      	ldr	r3, [r2, #24]
    1fca:	0b9b      	lsrs	r3, r3, #14
    1fcc:	039b      	lsls	r3, r3, #14
    1fce:	430b      	orrs	r3, r1
    1fd0:	6193      	str	r3, [r2, #24]
    1fd2:	e7d5      	b.n	1f80 <_ZN14USBDeviceClass17sendConfigurationEm+0xd4>
    1fd4:	20000ac0 	.word	0x20000ac0
    1fd8:	20000717 	.word	0x20000717
    1fdc:	20000610 	.word	0x20000610
    1fe0:	20000a98 	.word	0x20000a98
    1fe4:	200008d8 	.word	0x200008d8
    1fe8:	20000ac8 	.word	0x20000ac8
    1fec:	f0003fff 	.word	0xf0003fff

00001ff0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:

	return true;
}

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    1ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t t = setup.wValueH;
    1ff2:	78ce      	ldrb	r6, [r1, #3]

	return true;
}

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    1ff4:	b08b      	sub	sp, #44	; 0x2c
    1ff6:	0007      	movs	r7, r0
    1ff8:	000d      	movs	r5, r1
	uint8_t desc_length = 0;
	bool _cdcComposite;
	int ret;
	const uint8_t *desc_addr = 0;

	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    1ffa:	2e02      	cmp	r6, #2
    1ffc:	d012      	beq.n	2024 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x34>
	{
		return USBDevice.sendConfiguration(setup.wLength);
	}

#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    1ffe:	f002 fb2d 	bl	465c <_Z12PluggableUSBv>
    2002:	0029      	movs	r1, r5
    2004:	f002 fae2 	bl	45cc <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    2008:	2800      	cmp	r0, #0
    200a:	d107      	bne.n	201c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x2c>
		return (ret > 0 ? true : false);
	}
#endif

	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    200c:	2e01      	cmp	r6, #1
    200e:	d011      	beq.n	2034 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x44>
	else
	{
	}

	if (desc_addr == 0) {
		return false;
    2010:	2400      	movs	r4, #0

		if (*desc_addr > setup.wLength) {
			desc_length = setup.wLength;
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    2012:	2e03      	cmp	r6, #3
    2014:	d03e      	beq.n	2094 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa4>
	}

	sendControl(desc_addr, desc_length);

	return true;
}
    2016:	0020      	movs	r0, r4
    2018:	b00b      	add	sp, #44	; 0x2c
    201a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}

#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
	if (ret != 0) {
		return (ret > 0 ? true : false);
    201c:	17c4      	asrs	r4, r0, #31
    201e:	1a24      	subs	r4, r4, r0
    2020:	0fe4      	lsrs	r4, r4, #31
    2022:	e7f8      	b.n	2016 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
	int ret;
	const uint8_t *desc_addr = 0;

	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
	{
		return USBDevice.sendConfiguration(setup.wLength);
    2024:	88c9      	ldrh	r1, [r1, #6]
    2026:	4835      	ldr	r0, [pc, #212]	; (20fc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x10c>)
    2028:	f7ff ff40 	bl	1eac <_ZN14USBDeviceClass17sendConfigurationEm>
    202c:	1e44      	subs	r4, r0, #1
    202e:	41a0      	sbcs	r0, r4
    2030:	b2c4      	uxtb	r4, r0
    2032:	e7f0      	b.n	2016 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		if (setup.wLength == 8)
			_cdcComposite = 1;

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;

		if (*desc_addr > setup.wLength) {
    2034:	88ed      	ldrh	r5, [r5, #6]
    2036:	2d11      	cmp	r5, #17
    2038:	d841      	bhi.n	20be <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xce>
    203a:	2212      	movs	r2, #18
    203c:	2312      	movs	r3, #18
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
	{
		if (setup.wLength == 8)
			_cdcComposite = 1;

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;
    203e:	4930      	ldr	r1, [pc, #192]	; (2100 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x110>)

		if (*desc_addr > setup.wLength) {
			desc_length = setup.wLength;
    2040:	b2ed      	uxtb	r5, r5

	if (desc_addr == 0) {
		return false;
	}

	if (desc_length == 0) {
    2042:	2d00      	cmp	r5, #0
    2044:	d024      	beq.n	2090 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa0>
    2046:	002a      	movs	r2, r5
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    2048:	4b2e      	ldr	r3, [pc, #184]	; (2104 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x114>)
    204a:	781c      	ldrb	r4, [r3, #0]
    204c:	2c00      	cmp	r4, #0
    204e:	d1e2      	bne.n	2016 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		return length;

	if (_pack_message == true) {
    2050:	4b2d      	ldr	r3, [pc, #180]	; (2108 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x118>)
    2052:	781c      	ldrb	r4, [r3, #0]
    2054:	2c00      	cmp	r4, #0
    2056:	d008      	beq.n	206a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x7a>
		memcpy(&_pack_buffer[_pack_size], data, len);
    2058:	4f2c      	ldr	r7, [pc, #176]	; (210c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x11c>)
    205a:	482d      	ldr	r0, [pc, #180]	; (2110 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x120>)
    205c:	883e      	ldrh	r6, [r7, #0]
    205e:	1980      	adds	r0, r0, r6
		_pack_size += len;
    2060:	1975      	adds	r5, r6, r5

	if (_dry_run == true)
		return length;

	if (_pack_message == true) {
		memcpy(&_pack_buffer[_pack_size], data, len);
    2062:	f005 fe53 	bl	7d0c <memcpy>
		_pack_size += len;
    2066:	803d      	strh	r5, [r7, #0]
    2068:	e7d5      	b.n	2016 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    206a:	4c2a      	ldr	r4, [pc, #168]	; (2114 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x124>)
    206c:	04ad      	lsls	r5, r5, #18
    206e:	0020      	movs	r0, r4
    2070:	f005 fe4c 	bl	7d0c <memcpy>
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2074:	4b28      	ldr	r3, [pc, #160]	; (2118 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x128>)
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2076:	4a29      	ldr	r2, [pc, #164]	; (211c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x12c>)

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2078:	615c      	str	r4, [r3, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    207a:	6999      	ldr	r1, [r3, #24]
		desc_length = *desc_addr;
	}

	sendControl(desc_addr, desc_length);

	return true;
    207c:	2401      	movs	r4, #1
    207e:	400a      	ands	r2, r1
    2080:	619a      	str	r2, [r3, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2082:	6999      	ldr	r1, [r3, #24]
    2084:	0caa      	lsrs	r2, r5, #18
    2086:	0b8d      	lsrs	r5, r1, #14
    2088:	03ad      	lsls	r5, r5, #14
    208a:	4315      	orrs	r5, r2
    208c:	619d      	str	r5, [r3, #24]
    208e:	e7c2      	b.n	2016 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
    2090:	001d      	movs	r5, r3
    2092:	e7d9      	b.n	2048 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x58>
			desc_length = setup.wLength;
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
	{
		if (setup.wValueL == 0) {
    2094:	78ab      	ldrb	r3, [r5, #2]
    2096:	2b00      	cmp	r3, #0
    2098:	d015      	beq.n	20c6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd6>
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
		}
		else if (setup.wValueL == IPRODUCT) {
    209a:	2b02      	cmp	r3, #2
    209c:	d01f      	beq.n	20de <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xee>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
		}
		else if (setup.wValueL == IMANUFACTURER) {
    209e:	2b01      	cmp	r3, #1
    20a0:	d024      	beq.n	20ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xfc>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
		}
		else if (setup.wValueL == ISERIAL) {
    20a2:	2b03      	cmp	r3, #3
    20a4:	d1b7      	bne.n	2016 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
#ifdef PLUGGABLE_USB_ENABLED
			char name[ISERIAL_MAX_LEN];
			PluggableUSB().getShortName(name);
    20a6:	f002 fad9 	bl	465c <_Z12PluggableUSBv>
    20aa:	a901      	add	r1, sp, #4
    20ac:	f002 faa2 	bl	45f4 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    20b0:	79aa      	ldrb	r2, [r5, #6]
    20b2:	a901      	add	r1, sp, #4
    20b4:	0038      	movs	r0, r7
    20b6:	f7ff fe71 	bl	1d9c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    20ba:	0004      	movs	r4, r0
    20bc:	e7ab      	b.n	2016 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
    20be:	2212      	movs	r2, #18
    20c0:	2512      	movs	r5, #18
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
	{
		if (setup.wLength == 8)
			_cdcComposite = 1;

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;
    20c2:	490f      	ldr	r1, [pc, #60]	; (2100 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x110>)
    20c4:	e7c0      	b.n	2048 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x58>
#endif
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
    20c6:	88ed      	ldrh	r5, [r5, #6]
    20c8:	2d03      	cmp	r5, #3
    20ca:	d903      	bls.n	20d4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe4>
    20cc:	2204      	movs	r2, #4
    20ce:	2504      	movs	r5, #4
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
	{
		if (setup.wValueL == 0) {
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
    20d0:	4913      	ldr	r1, [pc, #76]	; (2120 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x130>)
    20d2:	e7b9      	b.n	2048 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x58>
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
			desc_length = setup.wLength;
    20d4:	b2ed      	uxtb	r5, r5
    20d6:	2204      	movs	r2, #4
    20d8:	2304      	movs	r3, #4
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
	{
		if (setup.wValueL == 0) {
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
    20da:	4911      	ldr	r1, [pc, #68]	; (2120 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x130>)
    20dc:	e7b1      	b.n	2042 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		}
		else if (setup.wValueL == IPRODUCT) {
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    20de:	79aa      	ldrb	r2, [r5, #6]
    20e0:	4910      	ldr	r1, [pc, #64]	; (2124 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x134>)
    20e2:	0038      	movs	r0, r7
    20e4:	f7ff fe5a 	bl	1d9c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    20e8:	0004      	movs	r4, r0
    20ea:	e794      	b.n	2016 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		}
		else if (setup.wValueL == IMANUFACTURER) {
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    20ec:	79aa      	ldrb	r2, [r5, #6]
    20ee:	490e      	ldr	r1, [pc, #56]	; (2128 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x138>)
    20f0:	0038      	movs	r0, r7
    20f2:	f7ff fe53 	bl	1d9c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    20f6:	0004      	movs	r4, r0
    20f8:	e78d      	b.n	2016 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	20000ac4 	.word	0x20000ac4
    2100:	00007fc4 	.word	0x00007fc4
    2104:	20000ac0 	.word	0x20000ac0
    2108:	20000717 	.word	0x20000717
    210c:	20000a98 	.word	0x20000a98
    2110:	20000610 	.word	0x20000610
    2114:	200008d8 	.word	0x200008d8
    2118:	20000ac8 	.word	0x20000ac8
    211c:	f0003fff 	.word	0xf0003fff
    2120:	00007fc0 	.word	0x00007fc0
    2124:	00007fb4 	.word	0x00007fb4
    2128:	00007fd8 	.word	0x00007fd8

0000212c <_ZN14USBDeviceClass4initEv>:
	// Empty
#endif
}

void USBDeviceClass::init()
{
    212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    212e:	2400      	movs	r4, #0
    2130:	4b4c      	ldr	r3, [pc, #304]	; (2264 <_ZN14USBDeviceClass4initEv+0x138>)
	pinMode(PIN_LED_TXL, OUTPUT);
    2132:	2101      	movs	r1, #1
	// Empty
#endif
}

void USBDeviceClass::init()
{
    2134:	0005      	movs	r5, r0
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
	pinMode(PIN_LED_TXL, OUTPUT);
    2136:	201a      	movs	r0, #26
}

void USBDeviceClass::init()
{
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    2138:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    213a:	f001 f8c5 	bl	32c8 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    213e:	2101      	movs	r1, #1
    2140:	201a      	movs	r0, #26
    2142:	f001 f911 	bl	3368 <digitalWrite>
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    2146:	4b48      	ldr	r3, [pc, #288]	; (2268 <_ZN14USBDeviceClass4initEv+0x13c>)
	pinMode(PIN_LED_RXL, OUTPUT);
    2148:	2101      	movs	r1, #1
    214a:	2019      	movs	r0, #25
	pinMode(PIN_LED_TXL, OUTPUT);
	digitalWrite(PIN_LED_TXL, HIGH);
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    214c:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    214e:	f001 f8bb 	bl	32c8 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    2152:	2101      	movs	r1, #1
    2154:	2019      	movs	r0, #25
    2156:	f001 f907 	bl	3368 <digitalWrite>
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    215a:	2320      	movs	r3, #32
    215c:	4a43      	ldr	r2, [pc, #268]	; (226c <_ZN14USBDeviceClass4initEv+0x140>)

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    215e:	2058      	movs	r0, #88	; 0x58
	pinMode(PIN_LED_RXL, OUTPUT);
	digitalWrite(PIN_LED_RXL, HIGH);
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    2160:	69d1      	ldr	r1, [r2, #28]

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    2162:	340f      	adds	r4, #15
	pinMode(PIN_LED_RXL, OUTPUT);
	digitalWrite(PIN_LED_RXL, HIGH);
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    2164:	430b      	orrs	r3, r1

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    2166:	2101      	movs	r1, #1
	pinMode(PIN_LED_RXL, OUTPUT);
	digitalWrite(PIN_LED_RXL, HIGH);
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    2168:	61d3      	str	r3, [r2, #28]

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    216a:	4b41      	ldr	r3, [pc, #260]	; (2270 <_ZN14USBDeviceClass4initEv+0x144>)
    216c:	5c1a      	ldrb	r2, [r3, r0]
    216e:	430a      	orrs	r2, r1
    2170:	541a      	strb	r2, [r3, r0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    2172:	223c      	movs	r2, #60	; 0x3c
    2174:	5c98      	ldrb	r0, [r3, r2]
    2176:	43a0      	bics	r0, r4
    2178:	5498      	strb	r0, [r3, r2]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    217a:	2006      	movs	r0, #6
    217c:	5c9e      	ldrb	r6, [r3, r2]
    217e:	4330      	orrs	r0, r6
    2180:	5498      	strb	r0, [r3, r2]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    2182:	2059      	movs	r0, #89	; 0x59
    2184:	5c1e      	ldrb	r6, [r3, r0]
    2186:	4331      	orrs	r1, r6
    2188:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    218a:	5c99      	ldrb	r1, [r3, r2]
    218c:	4021      	ands	r1, r4
    218e:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    2190:	2160      	movs	r1, #96	; 0x60
    2192:	5c98      	ldrb	r0, [r3, r2]
    2194:	4301      	orrs	r1, r0
    2196:	5499      	strb	r1, [r3, r2]

	// Put Generic Clock Generator 0 as source for Generic Clock Multiplexer 6 (USB reference)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
	                    GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
	                    GCLK_CLKCTRL_CLKEN;
    2198:	4a36      	ldr	r2, [pc, #216]	; (2274 <_ZN14USBDeviceClass4initEv+0x148>)
    219a:	4b37      	ldr	r3, [pc, #220]	; (2278 <_ZN14USBDeviceClass4initEv+0x14c>)
    219c:	8053      	strh	r3, [r2, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    219e:	7853      	ldrb	r3, [r2, #1]
    21a0:	09db      	lsrs	r3, r3, #7
    21a2:	d1fc      	bne.n	219e <_ZN14USBDeviceClass4initEv+0x72>
		;

	USB_SetHandler(&UDD_Handler);
    21a4:	4835      	ldr	r0, [pc, #212]	; (227c <_ZN14USBDeviceClass4initEv+0x150>)
    21a6:	f7ff f8a3 	bl	12f0 <USB_SetHandler>
	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
	usb.CTRLA.bit.SWRST = 1;
    21aa:	4e35      	ldr	r6, [pc, #212]	; (2280 <_ZN14USBDeviceClass4initEv+0x154>)
    21ac:	2301      	movs	r3, #1
    21ae:	0030      	movs	r0, r6
    21b0:	c810      	ldmia	r0!, {r4}
	memset(EP, 0, sizeof(EP));
    21b2:	2100      	movs	r1, #0
	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
	usb.CTRLA.bit.SWRST = 1;
    21b4:	7822      	ldrb	r2, [r4, #0]
    21b6:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    21b8:	2280      	movs	r2, #128	; 0x80
	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
	usb.CTRLA.bit.SWRST = 1;
    21ba:	7023      	strb	r3, [r4, #0]
	memset(EP, 0, sizeof(EP));
    21bc:	0052      	lsls	r2, r2, #1
    21be:	f005 fdae 	bl	7d1e <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    21c2:	78a3      	ldrb	r3, [r4, #2]
    21c4:	07db      	lsls	r3, r3, #31
    21c6:	d4fc      	bmi.n	21c2 <_ZN14USBDeviceClass4initEv+0x96>
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    21c8:	211f      	movs	r1, #31

void USBDevice_SAMD21G18x::reset() {
	usb.CTRLA.bit.SWRST = 1;
	memset(EP, 0, sizeof(EP));
	while (usb.SYNCBUSY.bit.SWRST) {}
	usb.DESCADD.reg = (uint32_t)(&EP);
    21ca:	3604      	adds	r6, #4
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    21cc:	4b2d      	ldr	r3, [pc, #180]	; (2284 <_ZN14USBDeviceClass4initEv+0x158>)

void USBDevice_SAMD21G18x::reset() {
	usb.CTRLA.bit.SWRST = 1;
	memset(EP, 0, sizeof(EP));
	while (usb.SYNCBUSY.bit.SWRST) {}
	usb.DESCADD.reg = (uint32_t)(&EP);
    21ce:	6266      	str	r6, [r4, #36]	; 0x24
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    21d0:	681a      	ldr	r2, [r3, #0]
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    21d2:	000f      	movs	r7, r1
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    21d4:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    21d6:	0c96      	lsrs	r6, r2, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    21d8:	0dd0      	lsrs	r0, r2, #23
    21da:	2207      	movs	r2, #7
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    21dc:	4037      	ands	r7, r6
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    21de:	4002      	ands	r2, r0

	if (pad_transn == 0x1F)  // maximum value (31)
    21e0:	400b      	ands	r3, r1
    21e2:	2b1f      	cmp	r3, #31
    21e4:	d038      	beq.n	2258 <_ZN14USBDeviceClass4initEv+0x12c>
    21e6:	b2db      	uxtb	r3, r3
		pad_transn = 5;
	if (pad_transp == 0x1F)  // maximum value (31)
    21e8:	2f1f      	cmp	r7, #31
    21ea:	d038      	beq.n	225e <_ZN14USBDeviceClass4initEv+0x132>
    21ec:	211f      	movs	r1, #31
    21ee:	400e      	ands	r6, r1
		pad_transp = 29;
	if (pad_trim == 0x7)     // maximum value (7)
    21f0:	2103      	movs	r1, #3
    21f2:	2a07      	cmp	r2, #7
    21f4:	d001      	beq.n	21fa <_ZN14USBDeviceClass4initEv+0xce>
    21f6:	3104      	adds	r1, #4
    21f8:	4001      	ands	r1, r0
		pad_trim = 3;

	usb.PADCAL.bit.TRANSN = pad_transn;
    21fa:	8d27      	ldrh	r7, [r4, #40]	; 0x28
    21fc:	019a      	lsls	r2, r3, #6
    21fe:	003b      	movs	r3, r7
    2200:	4821      	ldr	r0, [pc, #132]	; (2288 <_ZN14USBDeviceClass4initEv+0x15c>)
    2202:	4003      	ands	r3, r0
    2204:	4313      	orrs	r3, r2
	usb.PADCAL.bit.TRANSP = pad_transp;
    2206:	221f      	movs	r2, #31
	if (pad_transp == 0x1F)  // maximum value (31)
		pad_transp = 29;
	if (pad_trim == 0x7)     // maximum value (7)
		pad_trim = 3;

	usb.PADCAL.bit.TRANSN = pad_transn;
    2208:	8523      	strh	r3, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    220a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    220c:	4393      	bics	r3, r2
    220e:	4333      	orrs	r3, r6
    2210:	8523      	strh	r3, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    2212:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    2214:	030b      	lsls	r3, r1, #12
    2216:	0001      	movs	r1, r0
    2218:	4a1c      	ldr	r2, [pc, #112]	; (228c <_ZN14USBDeviceClass4initEv+0x160>)
    221a:	4011      	ands	r1, r2
	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    221c:	227f      	movs	r2, #127	; 0x7f
	if (pad_trim == 0x7)     // maximum value (7)
		pad_trim = 3;

	usb.PADCAL.bit.TRANSN = pad_transn;
	usb.PADCAL.bit.TRANSP = pad_transp;
	usb.PADCAL.bit.TRIM   = pad_trim;
    221e:	4319      	orrs	r1, r3
    2220:	8521      	strh	r1, [r4, #40]	; 0x28
	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    2222:	7823      	ldrb	r3, [r4, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    2224:	21c1      	movs	r1, #193	; 0xc1
    2226:	4013      	ands	r3, r2
    2228:	7023      	strb	r3, [r4, #0]
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    222a:	2304      	movs	r3, #4
    222c:	7822      	ldrb	r2, [r4, #0]
    222e:	0089      	lsls	r1, r1, #2
    2230:	4313      	orrs	r3, r2
	inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }
	inline void wakeupHost()     { usb.CTRLB.bit.UPRSM = 1; }

	// USB speed
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2232:	220c      	movs	r2, #12

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2234:	7023      	strb	r3, [r4, #0]
	inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }
	inline void wakeupHost()     { usb.CTRLB.bit.UPRSM = 1; }

	// USB speed
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2236:	8923      	ldrh	r3, [r4, #8]
    2238:	4393      	bics	r3, r2
    223a:	4a15      	ldr	r2, [pc, #84]	; (2290 <_ZN14USBDeviceClass4initEv+0x164>)
    223c:	8123      	strh	r3, [r4, #8]
    223e:	5853      	ldr	r3, [r2, r1]
    2240:	021b      	lsls	r3, r3, #8
    2242:	0a1b      	lsrs	r3, r3, #8
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    2244:	5053      	str	r3, [r2, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2246:	2380      	movs	r3, #128	; 0x80
    2248:	6013      	str	r3, [r2, #0]

	// Reset USB Device
	void reset();

	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    224a:	2302      	movs	r3, #2
    224c:	7822      	ldrb	r2, [r4, #0]
    224e:	4313      	orrs	r3, r2
    2250:	7023      	strb	r3, [r4, #0]
	NVIC_SetPriority((IRQn_Type) USB_IRQn, 0UL);
	NVIC_EnableIRQ((IRQn_Type) USB_IRQn);

	usbd.enable();

	initialized = true;
    2252:	2301      	movs	r3, #1
    2254:	702b      	strb	r3, [r5, #0]
}
    2256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;

	if (pad_transn == 0x1F)  // maximum value (31)
    2258:	2305      	movs	r3, #5
		pad_transn = 5;
	if (pad_transp == 0x1F)  // maximum value (31)
    225a:	2f1f      	cmp	r7, #31
    225c:	d1c6      	bne.n	21ec <_ZN14USBDeviceClass4initEv+0xc0>
    225e:	261d      	movs	r6, #29
    2260:	e7c6      	b.n	21f0 <_ZN14USBDeviceClass4initEv+0xc4>
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	20000a9a 	.word	0x20000a9a
    2268:	20000ac5 	.word	0x20000ac5
    226c:	40000400 	.word	0x40000400
    2270:	41004400 	.word	0x41004400
    2274:	40000c00 	.word	0x40000c00
    2278:	00004006 	.word	0x00004006
    227c:	00003001 	.word	0x00003001
    2280:	20000ac8 	.word	0x20000ac8
    2284:	00806024 	.word	0x00806024
    2288:	fffff83f 	.word	0xfffff83f
    228c:	ffff8fff 	.word	0xffff8fff
    2290:	e000e100 	.word	0xe000e100

00002294 <_ZN14USBDeviceClass6attachEv>:

bool USBDeviceClass::attach()
{
	if (!initialized)
    2294:	7800      	ldrb	r0, [r0, #0]
    2296:	2800      	cmp	r0, #0
    2298:	d010      	beq.n	22bc <_ZN14USBDeviceClass6attachEv+0x28>
	inline void setLowSpeed()        { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;   }
	inline void setHiSpeed()         { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HS_Val;   }
	inline void setHiSpeedTestMode() { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HSTM_Val; }

	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    229a:	2101      	movs	r1, #1
    229c:	4b08      	ldr	r3, [pc, #32]	; (22c0 <_ZN14USBDeviceClass6attachEv+0x2c>)
    229e:	681b      	ldr	r3, [r3, #0]
    22a0:	891a      	ldrh	r2, [r3, #8]
    22a2:	438a      	bics	r2, r1
    22a4:	811a      	strh	r2, [r3, #8]
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    22a6:	2208      	movs	r2, #8
    22a8:	8b19      	ldrh	r1, [r3, #24]
    22aa:	430a      	orrs	r2, r1
    22ac:	831a      	strh	r2, [r3, #24]
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    22ae:	2204      	movs	r2, #4
    22b0:	8b19      	ldrh	r1, [r3, #24]
    22b2:	430a      	orrs	r2, r1
    22b4:	831a      	strh	r2, [r3, #24]

	usbd.attach();
	usbd.enableEndOfResetInterrupt();
	usbd.enableStartOfFrameInterrupt();

	_usbConfiguration = 0;
    22b6:	2200      	movs	r2, #0
    22b8:	4b02      	ldr	r3, [pc, #8]	; (22c4 <_ZN14USBDeviceClass6attachEv+0x30>)
    22ba:	601a      	str	r2, [r3, #0]
	return true;
}
    22bc:	4770      	bx	lr
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	20000ac8 	.word	0x20000ac8
    22c4:	20000bcc 	.word	0x20000bcc

000022c8 <_ZN14USBDeviceClass13initEndpointsEv>:
	0,
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
    22c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ca:	4656      	mov	r6, sl
    22cc:	465f      	mov	r7, fp
    22ce:	464d      	mov	r5, r9
    22d0:	4644      	mov	r4, r8
    22d2:	b4f0      	push	{r4, r5, r6, r7}
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    22d4:	4e6c      	ldr	r6, [pc, #432]	; (2488 <_ZN14USBDeviceClass13initEndpointsEv+0x1c0>)
	0,
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
    22d6:	b083      	sub	sp, #12
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    22d8:	6873      	ldr	r3, [r6, #4]
    22da:	2b00      	cmp	r3, #0
    22dc:	d034      	beq.n	2348 <_ZN14USBDeviceClass13initEndpointsEv+0x80>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    22de:	4a6b      	ldr	r2, [pc, #428]	; (248c <_ZN14USBDeviceClass13initEndpointsEv+0x1c4>)
    22e0:	4f6b      	ldr	r7, [pc, #428]	; (2490 <_ZN14USBDeviceClass13initEndpointsEv+0x1c8>)
    22e2:	4d6c      	ldr	r5, [pc, #432]	; (2494 <_ZN14USBDeviceClass13initEndpointsEv+0x1cc>)
    22e4:	3608      	adds	r6, #8
    22e6:	3704      	adds	r7, #4
    22e8:	3540      	adds	r5, #64	; 0x40
    22ea:	2401      	movs	r4, #1
    22ec:	4691      	mov	r9, r2
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    22ee:	4693      	mov	fp, r2
    22f0:	e009      	b.n	2306 <_ZN14USBDeviceClass13initEndpointsEv+0x3e>
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    22f2:	2b02      	cmp	r3, #2
    22f4:	d04e      	beq.n	2394 <_ZN14USBDeviceClass13initEndpointsEv+0xcc>
	{
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    22f6:	2b82      	cmp	r3, #130	; 0x82
    22f8:	d02d      	beq.n	2356 <_ZN14USBDeviceClass13initEndpointsEv+0x8e>
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    22fa:	ce08      	ldmia	r6!, {r3}
    22fc:	3401      	adds	r4, #1
    22fe:	3704      	adds	r7, #4
    2300:	3540      	adds	r5, #64	; 0x40
    2302:	2b00      	cmp	r3, #0
    2304:	d020      	beq.n	2348 <_ZN14USBDeviceClass13initEndpointsEv+0x80>
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
{
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    2306:	2b83      	cmp	r3, #131	; 0x83
    2308:	d1f3      	bne.n	22f2 <_ZN14USBDeviceClass13initEndpointsEv+0x2a>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    230a:	4b60      	ldr	r3, [pc, #384]	; (248c <_ZN14USBDeviceClass13initEndpointsEv+0x1c4>)
    230c:	0162      	lsls	r2, r4, #5
    230e:	4698      	mov	r8, r3
    2310:	4442      	add	r2, r8
    2312:	6993      	ldr	r3, [r2, #24]
    2314:	3704      	adds	r7, #4
    2316:	469c      	mov	ip, r3
    2318:	4661      	mov	r1, ip
    231a:	4b5f      	ldr	r3, [pc, #380]	; (2498 <_ZN14USBDeviceClass13initEndpointsEv+0x1d0>)
    231c:	400b      	ands	r3, r1
    231e:	21c0      	movs	r1, #192	; 0xc0
    2320:	0589      	lsls	r1, r1, #22
    2322:	430b      	orrs	r3, r1
    2324:	6193      	str	r3, [r2, #24]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2326:	4643      	mov	r3, r8
    2328:	6818      	ldr	r0, [r3, #0]
    232a:	0023      	movs	r3, r4
    232c:	2170      	movs	r1, #112	; 0x70
    232e:	3308      	adds	r3, #8
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2330:	6155      	str	r5, [r2, #20]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2332:	015b      	lsls	r3, r3, #5
    2334:	5c1a      	ldrb	r2, [r3, r0]
    2336:	3401      	adds	r4, #1
    2338:	438a      	bics	r2, r1
    233a:	2140      	movs	r1, #64	; 0x40
    233c:	430a      	orrs	r2, r1
    233e:	541a      	strb	r2, [r3, r0]
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    2340:	ce08      	ldmia	r6!, {r3}
    2342:	3540      	adds	r5, #64	; 0x40
    2344:	2b00      	cmp	r3, #0
    2346:	d1de      	bne.n	2306 <_ZN14USBDeviceClass13initEndpointsEv+0x3e>
		initEP(i, EndPoints[i]);
	}
}
    2348:	b003      	add	sp, #12
    234a:	bc3c      	pop	{r2, r3, r4, r5}
    234c:	4690      	mov	r8, r2
    234e:	4699      	mov	r9, r3
    2350:	46a2      	mov	sl, r4
    2352:	46ab      	mov	fp, r5
    2354:	bdf0      	pop	{r4, r5, r6, r7, pc}
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2356:	0162      	lsls	r2, r4, #5
    2358:	444a      	add	r2, r9
    235a:	6990      	ldr	r0, [r2, #24]
    235c:	4b4e      	ldr	r3, [pc, #312]	; (2498 <_ZN14USBDeviceClass13initEndpointsEv+0x1d0>)
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    235e:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2360:	4003      	ands	r3, r0
    2362:	20c0      	movs	r0, #192	; 0xc0
    2364:	0580      	lsls	r0, r0, #22
    2366:	4303      	orrs	r3, r0
    2368:	6193      	str	r3, [r2, #24]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    236a:	464b      	mov	r3, r9
    236c:	681b      	ldr	r3, [r3, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    236e:	6155      	str	r5, [r2, #20]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2370:	9301      	str	r3, [sp, #4]
    2372:	0023      	movs	r3, r4
    2374:	9a01      	ldr	r2, [sp, #4]
    2376:	3308      	adds	r3, #8
    2378:	015b      	lsls	r3, r3, #5
    237a:	18d0      	adds	r0, r2, r3
    237c:	7902      	ldrb	r2, [r0, #4]
    237e:	4249      	negs	r1, r1
    2380:	430a      	orrs	r2, r1
    2382:	7102      	strb	r2, [r0, #4]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2384:	2070      	movs	r0, #112	; 0x70
    2386:	9a01      	ldr	r2, [sp, #4]
    2388:	5c99      	ldrb	r1, [r3, r2]
    238a:	4381      	bics	r1, r0
    238c:	2030      	movs	r0, #48	; 0x30
    238e:	4301      	orrs	r1, r0
    2390:	5499      	strb	r1, [r3, r2]
    2392:	e7b2      	b.n	22fa <_ZN14USBDeviceClass13initEndpointsEv+0x32>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
	{
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    2394:	2038      	movs	r0, #56	; 0x38
    2396:	f001 feaf 	bl	40f8 <_Znwj>
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    239a:	2380      	movs	r3, #128	; 0x80
    239c:	4a3f      	ldr	r2, [pc, #252]	; (249c <_ZN14USBDeviceClass13initEndpointsEv+0x1d4>)
    239e:	005b      	lsls	r3, r3, #1
    23a0:	6002      	str	r2, [r0, #0]
    23a2:	469a      	mov	sl, r3
    23a4:	465a      	mov	r2, fp
    23a6:	6042      	str	r2, [r0, #4]
    23a8:	4652      	mov	r2, sl
    23aa:	2300      	movs	r3, #0
    23ac:	60c2      	str	r2, [r0, #12]
    23ae:	2224      	movs	r2, #36	; 0x24
    23b0:	6203      	str	r3, [r0, #32]
    23b2:	6103      	str	r3, [r0, #16]
    23b4:	6143      	str	r3, [r0, #20]
    23b6:	61c3      	str	r3, [r0, #28]
    23b8:	6084      	str	r4, [r0, #8]
    23ba:	5483      	strb	r3, [r0, r2]
    23bc:	2234      	movs	r2, #52	; 0x34
    23be:	4680      	mov	r8, r0
    23c0:	62c3      	str	r3, [r0, #44]	; 0x2c
    23c2:	6303      	str	r3, [r0, #48]	; 0x30
    23c4:	5483      	strb	r3, [r0, r2]
    23c6:	3201      	adds	r2, #1
    23c8:	5483      	strb	r3, [r0, r2]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    23ca:	4650      	mov	r0, sl
    23cc:	f005 fc8a 	bl	7ce4 <malloc>
    23d0:	4643      	mov	r3, r8
    23d2:	6198      	str	r0, [r3, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    23d4:	4650      	mov	r0, sl
    23d6:	f005 fc85 	bl	7ce4 <malloc>
    23da:	4643      	mov	r3, r8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    23dc:	0162      	lsls	r2, r4, #5
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    23de:	6298      	str	r0, [r3, #40]	; 0x28
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    23e0:	445a      	add	r2, fp
    23e2:	6891      	ldr	r1, [r2, #8]
    23e4:	4b2c      	ldr	r3, [pc, #176]	; (2498 <_ZN14USBDeviceClass13initEndpointsEv+0x1d0>)
    23e6:	400b      	ands	r3, r1
    23e8:	21c0      	movs	r1, #192	; 0xc0
    23ea:	0589      	lsls	r1, r1, #22
    23ec:	430b      	orrs	r3, r1
    23ee:	6093      	str	r3, [r2, #8]

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    23f0:	465b      	mov	r3, fp
    23f2:	6818      	ldr	r0, [r3, #0]
    23f4:	0023      	movs	r3, r4
    23f6:	2107      	movs	r1, #7
    23f8:	3308      	adds	r3, #8
    23fa:	015b      	lsls	r3, r3, #5
    23fc:	5c1a      	ldrb	r2, [r3, r0]
    23fe:	438a      	bics	r2, r1
    2400:	2103      	movs	r1, #3
    2402:	430a      	orrs	r2, r1
    2404:	541a      	strb	r2, [r3, r0]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2406:	4642      	mov	r2, r8
    2408:	4643      	mov	r3, r8
    240a:	6852      	ldr	r2, [r2, #4]
    240c:	7a1b      	ldrb	r3, [r3, #8]
    240e:	4694      	mov	ip, r2
    2410:	4642      	mov	r2, r8
    2412:	015b      	lsls	r3, r3, #5
    2414:	6992      	ldr	r2, [r2, #24]
    2416:	4463      	add	r3, ip
    2418:	605a      	str	r2, [r3, #4]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    241a:	4643      	mov	r3, r8
    241c:	685b      	ldr	r3, [r3, #4]
    241e:	681a      	ldr	r2, [r3, #0]
    2420:	4643      	mov	r3, r8
    2422:	7a1b      	ldrb	r3, [r3, #8]
    2424:	015b      	lsls	r3, r3, #5
    2426:	18d3      	adds	r3, r2, r3
    2428:	2201      	movs	r2, #1
    242a:	3309      	adds	r3, #9
    242c:	33ff      	adds	r3, #255	; 0xff
    242e:	7859      	ldrb	r1, [r3, #1]
    2430:	430a      	orrs	r2, r1
    2432:	705a      	strb	r2, [r3, #1]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2434:	4643      	mov	r3, r8
    2436:	7a19      	ldrb	r1, [r3, #8]
    2438:	685b      	ldr	r3, [r3, #4]
    243a:	0149      	lsls	r1, r1, #5
    243c:	469c      	mov	ip, r3
    243e:	4643      	mov	r3, r8
    2440:	68db      	ldr	r3, [r3, #12]
    2442:	4461      	add	r1, ip
    2444:	6888      	ldr	r0, [r1, #8]
    2446:	049a      	lsls	r2, r3, #18
    2448:	4b15      	ldr	r3, [pc, #84]	; (24a0 <_ZN14USBDeviceClass13initEndpointsEv+0x1d8>)
    244a:	0912      	lsrs	r2, r2, #4
    244c:	4003      	ands	r3, r0
    244e:	4313      	orrs	r3, r2
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2450:	4642      	mov	r2, r8
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2452:	608b      	str	r3, [r1, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2454:	4643      	mov	r3, r8
    2456:	6852      	ldr	r2, [r2, #4]
    2458:	7a1b      	ldrb	r3, [r3, #8]
    245a:	4694      	mov	ip, r2
    245c:	015b      	lsls	r3, r3, #5
    245e:	4463      	add	r3, ip
    2460:	689a      	ldr	r2, [r3, #8]
    2462:	0b92      	lsrs	r2, r2, #14
    2464:	0392      	lsls	r2, r2, #14
    2466:	609a      	str	r2, [r3, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2468:	4643      	mov	r3, r8
    246a:	685b      	ldr	r3, [r3, #4]
    246c:	6819      	ldr	r1, [r3, #0]
    246e:	4643      	mov	r3, r8
    2470:	7a1a      	ldrb	r2, [r3, #8]
    2472:	0013      	movs	r3, r2
    2474:	2240      	movs	r2, #64	; 0x40
    2476:	3308      	adds	r3, #8
    2478:	015b      	lsls	r3, r3, #5
    247a:	18cb      	adds	r3, r1, r3
    247c:	7919      	ldrb	r1, [r3, #4]
    247e:	430a      	orrs	r2, r1
    2480:	711a      	strb	r2, [r3, #4]
    2482:	4643      	mov	r3, r8
    2484:	603b      	str	r3, [r7, #0]
    2486:	e738      	b.n	22fa <_ZN14USBDeviceClass13initEndpointsEv+0x32>
    2488:	2000005c 	.word	0x2000005c
    248c:	20000ac8 	.word	0x20000ac8
    2490:	20000a9c 	.word	0x20000a9c
    2494:	200008d8 	.word	0x200008d8
    2498:	8fffffff 	.word	0x8fffffff
    249c:	00007fa8 	.word	0x00007fa8
    24a0:	f0003fff 	.word	0xf0003fff

000024a4 <_ZN14USBDeviceClass5flushEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    24a4:	4b26      	ldr	r3, [pc, #152]	; (2540 <_ZN14USBDeviceClass5flushEm+0x9c>)
    24a6:	008a      	lsls	r2, r1, #2
    24a8:	58d0      	ldr	r0, [r2, r3]
		usbd.epBank0SetReady(ep);
	}
}

void USBDeviceClass::flush(uint32_t ep)
{
    24aa:	b510      	push	{r4, lr}
    24ac:	000c      	movs	r4, r1
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    24ae:	2800      	cmp	r0, #0
    24b0:	d02a      	beq.n	2508 <_ZN14USBDeviceClass5flushEm+0x64>
		return epHandlers[ep]->available();
    24b2:	6803      	ldr	r3, [r0, #0]
    24b4:	4a23      	ldr	r2, [pc, #140]	; (2544 <_ZN14USBDeviceClass5flushEm+0xa0>)
    24b6:	689b      	ldr	r3, [r3, #8]
    24b8:	4293      	cmp	r3, r2
    24ba:	d13e      	bne.n	253a <_ZN14USBDeviceClass5flushEm+0x96>
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
    24bc:	6903      	ldr	r3, [r0, #16]
    24be:	2b00      	cmp	r3, #0
    24c0:	d111      	bne.n	24e6 <_ZN14USBDeviceClass5flushEm+0x42>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    24c2:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    24c6:	b672      	cpsid	i
			bool ready = false;
			synchronized {
				ready = ready0;
    24c8:	3324      	adds	r3, #36	; 0x24
    24ca:	5cc3      	ldrb	r3, [r0, r3]
    24cc:	b2db      	uxtb	r3, r3
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    24ce:	2a00      	cmp	r2, #0
    24d0:	d102      	bne.n	24d8 <_ZN14USBDeviceClass5flushEm+0x34>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    24d2:	b662      	cpsie	i
    24d4:	f3bf 8f6f 	isb	sy
		if (current == 0) {
			bool ready = false;
			synchronized {
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
    24d8:	2b00      	cmp	r3, #0
    24da:	d003      	beq.n	24e4 <_ZN14USBDeviceClass5flushEm+0x40>
    24dc:	6a03      	ldr	r3, [r0, #32]
    24de:	69c0      	ldr	r0, [r0, #28]
    24e0:	1a18      	subs	r0, r3, r0
	}
}

void USBDeviceClass::flush(uint32_t ep)
{
	if (available(ep)) {
    24e2:	d11b      	bne.n	251c <_ZN14USBDeviceClass5flushEm+0x78>
		usbd.epBank1SetReady(ep);

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
	}
}
    24e4:	bd10      	pop	{r4, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    24e6:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    24ea:	b672      	cpsid	i
		} else {
			bool ready = false;
			synchronized {
				ready = ready1;
    24ec:	2334      	movs	r3, #52	; 0x34
    24ee:	5cc3      	ldrb	r3, [r0, r3]
    24f0:	b2db      	uxtb	r3, r3
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    24f2:	2a00      	cmp	r2, #0
    24f4:	d102      	bne.n	24fc <_ZN14USBDeviceClass5flushEm+0x58>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    24f6:	b662      	cpsie	i
    24f8:	f3bf 8f6f 	isb	sy
		} else {
			bool ready = false;
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
    24fc:	2b00      	cmp	r3, #0
    24fe:	d0f1      	beq.n	24e4 <_ZN14USBDeviceClass5flushEm+0x40>
    2500:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2502:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    2504:	1a18      	subs	r0, r3, r0
    2506:	e007      	b.n	2518 <_ZN14USBDeviceClass5flushEm+0x74>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2508:	23ff      	movs	r3, #255	; 0xff
    250a:	4a0f      	ldr	r2, [pc, #60]	; (2548 <_ZN14USBDeviceClass5flushEm+0xa4>)
    250c:	400b      	ands	r3, r1
    250e:	015b      	lsls	r3, r3, #5
    2510:	18d3      	adds	r3, r2, r3
    2512:	6898      	ldr	r0, [r3, #8]
    2514:	0480      	lsls	r0, r0, #18
    2516:	0c80      	lsrs	r0, r0, #18
	}
}

void USBDeviceClass::flush(uint32_t ep)
{
	if (available(ep)) {
    2518:	2800      	cmp	r0, #0
    251a:	d0e3      	beq.n	24e4 <_ZN14USBDeviceClass5flushEm+0x40>

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    251c:	22ff      	movs	r2, #255	; 0xff
    251e:	4b0a      	ldr	r3, [pc, #40]	; (2548 <_ZN14USBDeviceClass5flushEm+0xa4>)
    2520:	4014      	ands	r4, r2
    2522:	681b      	ldr	r3, [r3, #0]
    2524:	3408      	adds	r4, #8
    2526:	0164      	lsls	r4, r4, #5
    2528:	191c      	adds	r4, r3, r4
    252a:	7963      	ldrb	r3, [r4, #5]
    252c:	3a80      	subs	r2, #128	; 0x80
    252e:	3aff      	subs	r2, #255	; 0xff
    2530:	4313      	orrs	r3, r2
    2532:	7163      	strb	r3, [r4, #5]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2534:	2302      	movs	r3, #2
    2536:	71e3      	strb	r3, [r4, #7]
		usbd.epBank1SetReady(ep);

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
	}
}
    2538:	e7d4      	b.n	24e4 <_ZN14USBDeviceClass5flushEm+0x40>

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
		return epHandlers[ep]->available();
    253a:	4798      	blx	r3
    253c:	e7ec      	b.n	2518 <_ZN14USBDeviceClass5flushEm+0x74>
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	20000a9c 	.word	0x20000a9c
    2544:	00001d4d 	.word	0x00001d4d
    2548:	20000ac8 	.word	0x20000ac8

0000254c <_ZN14USBDeviceClass11recvControlEPvm>:
	return f != USB->DEVICE.FNUM.bit.FNUM;
}


uint32_t USBDeviceClass::recvControl(void *_data, uint32_t len)
{
    254c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    254e:	2540      	movs	r5, #64	; 0x40
    2550:	4647      	mov	r7, r8
    2552:	46a8      	mov	r8, r5
    2554:	2482      	movs	r4, #130	; 0x82
    2556:	4645      	mov	r5, r8
    2558:	b480      	push	{r7}
    255a:	4e30      	ldr	r6, [pc, #192]	; (261c <_ZN14USBDeviceClass11recvControlEPvm+0xd0>)
    255c:	0064      	lsls	r4, r4, #1
    255e:	6833      	ldr	r3, [r6, #0]
    2560:	5d18      	ldrb	r0, [r3, r4]
    2562:	4328      	orrs	r0, r5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2564:	4d2e      	ldr	r5, [pc, #184]	; (2620 <_ZN14USBDeviceClass11recvControlEPvm+0xd4>)
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2566:	5518      	strb	r0, [r3, r4]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2568:	6075      	str	r5, [r6, #4]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    256a:	68b0      	ldr	r0, [r6, #8]
    256c:	4684      	mov	ip, r0
    256e:	4667      	mov	r7, ip
    2570:	482c      	ldr	r0, [pc, #176]	; (2624 <_ZN14USBDeviceClass11recvControlEPvm+0xd8>)
    2572:	4038      	ands	r0, r7
    2574:	2780      	movs	r7, #128	; 0x80
    2576:	02bf      	lsls	r7, r7, #10
    2578:	4338      	orrs	r0, r7
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    257a:	4647      	mov	r7, r8
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    257c:	60b0      	str	r0, [r6, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    257e:	68b0      	ldr	r0, [r6, #8]
    2580:	0b80      	lsrs	r0, r0, #14
    2582:	0380      	lsls	r0, r0, #14
    2584:	60b0      	str	r0, [r6, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2586:	5d18      	ldrb	r0, [r3, r4]
    2588:	4307      	orrs	r7, r0
    258a:	551f      	strb	r7, [r3, r4]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    258c:	3402      	adds	r4, #2
    258e:	5d18      	ldrb	r0, [r3, r4]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    2590:	0640      	lsls	r0, r0, #25
    2592:	d5fc      	bpl.n	258e <_ZN14USBDeviceClass11recvControlEPvm+0x42>
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2594:	2408      	movs	r4, #8
    2596:	34ff      	adds	r4, #255	; 0xff
    2598:	5d18      	ldrb	r0, [r3, r4]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    259a:	07c0      	lsls	r0, r0, #31
    259c:	d5fc      	bpl.n	2598 <_ZN14USBDeviceClass11recvControlEPvm+0x4c>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    259e:	68b0      	ldr	r0, [r6, #8]

	// The RAM Buffer is empty: we can receive data
	usbd.epBank0ResetReady(0);

	//usbd.epBank0AckSetupReceived(0);
	uint32_t read = armRecvCtrlOUT(0);
    25a0:	b2c0      	uxtb	r0, r0
    25a2:	4290      	cmp	r0, r2
    25a4:	d900      	bls.n	25a8 <_ZN14USBDeviceClass11recvControlEPvm+0x5c>
    25a6:	0010      	movs	r0, r2
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    25a8:	2a00      	cmp	r2, #0
    25aa:	d02c      	beq.n	2606 <_ZN14USBDeviceClass11recvControlEPvm+0xba>
    25ac:	2300      	movs	r3, #0
    25ae:	001e      	movs	r6, r3
    25b0:	1d0c      	adds	r4, r1, #4
    25b2:	42a5      	cmp	r5, r4
    25b4:	415e      	adcs	r6, r3
    25b6:	0034      	movs	r4, r6
    25b8:	1d2e      	adds	r6, r5, #4
    25ba:	42b1      	cmp	r1, r6
    25bc:	415b      	adcs	r3, r3
    25be:	4323      	orrs	r3, r4
    25c0:	2408      	movs	r4, #8
    25c2:	4294      	cmp	r4, r2
    25c4:	41a4      	sbcs	r4, r4
    25c6:	4264      	negs	r4, r4
    25c8:	421c      	tst	r4, r3
    25ca:	d01f      	beq.n	260c <_ZN14USBDeviceClass11recvControlEPvm+0xc0>
    25cc:	078b      	lsls	r3, r1, #30
    25ce:	d11d      	bne.n	260c <_ZN14USBDeviceClass11recvControlEPvm+0xc0>
    25d0:	2600      	movs	r6, #0
    25d2:	2700      	movs	r7, #0
    25d4:	1f14      	subs	r4, r2, #4
    25d6:	08a4      	lsrs	r4, r4, #2
    25d8:	1c63      	adds	r3, r4, #1
    25da:	469c      	mov	ip, r3
    25dc:	009b      	lsls	r3, r3, #2
		data[i] = buffer[i];
    25de:	59ac      	ldr	r4, [r5, r6]
    25e0:	3701      	adds	r7, #1
    25e2:	518c      	str	r4, [r1, r6]
    25e4:	3604      	adds	r6, #4
    25e6:	45bc      	cmp	ip, r7
    25e8:	d8f9      	bhi.n	25de <_ZN14USBDeviceClass11recvControlEPvm+0x92>
    25ea:	429a      	cmp	r2, r3
    25ec:	d00b      	beq.n	2606 <_ZN14USBDeviceClass11recvControlEPvm+0xba>
    25ee:	5cec      	ldrb	r4, [r5, r3]
    25f0:	54cc      	strb	r4, [r1, r3]
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    25f2:	1c5c      	adds	r4, r3, #1
    25f4:	42a2      	cmp	r2, r4
    25f6:	d906      	bls.n	2606 <_ZN14USBDeviceClass11recvControlEPvm+0xba>
		data[i] = buffer[i];
    25f8:	5d2e      	ldrb	r6, [r5, r4]
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    25fa:	3302      	adds	r3, #2
		data[i] = buffer[i];
    25fc:	550e      	strb	r6, [r1, r4]
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    25fe:	429a      	cmp	r2, r3
    2600:	d901      	bls.n	2606 <_ZN14USBDeviceClass11recvControlEPvm+0xba>
		data[i] = buffer[i];
    2602:	5cea      	ldrb	r2, [r5, r3]
    2604:	54ca      	strb	r2, [r1, r3]
	}

	return read;
}
    2606:	bc04      	pop	{r2}
    2608:	4690      	mov	r8, r2
    260a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    260c:	2300      	movs	r3, #0
		data[i] = buffer[i];
    260e:	5cec      	ldrb	r4, [r5, r3]
    2610:	54cc      	strb	r4, [r1, r3]
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    2612:	3301      	adds	r3, #1
    2614:	429a      	cmp	r2, r3
    2616:	d1fa      	bne.n	260e <_ZN14USBDeviceClass11recvControlEPvm+0xc2>
    2618:	e7f5      	b.n	2606 <_ZN14USBDeviceClass11recvControlEPvm+0xba>
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	20000ac8 	.word	0x20000ac8
    2620:	20000718 	.word	0x20000718
    2624:	f0003fff 	.word	0xf0003fff

00002628 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    2628:	4b1e      	ldr	r3, [pc, #120]	; (26a4 <_ZN14USBDeviceClass9availableEm+0x7c>)
    262a:	008a      	lsls	r2, r1, #2
    262c:	58d0      	ldr	r0, [r2, r3]
	return read;
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
    262e:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    2630:	2800      	cmp	r0, #0
    2632:	d016      	beq.n	2662 <_ZN14USBDeviceClass9availableEm+0x3a>
		return epHandlers[ep]->available();
    2634:	6803      	ldr	r3, [r0, #0]
    2636:	4a1c      	ldr	r2, [pc, #112]	; (26a8 <_ZN14USBDeviceClass9availableEm+0x80>)
    2638:	689b      	ldr	r3, [r3, #8]
    263a:	4293      	cmp	r3, r2
    263c:	d12b      	bne.n	2696 <_ZN14USBDeviceClass9availableEm+0x6e>
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
    263e:	6903      	ldr	r3, [r0, #16]
    2640:	2b00      	cmp	r3, #0
    2642:	d117      	bne.n	2674 <_ZN14USBDeviceClass9availableEm+0x4c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2644:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2648:	b672      	cpsid	i
			bool ready = false;
			synchronized {
				ready = ready0;
    264a:	3324      	adds	r3, #36	; 0x24
    264c:	5cc3      	ldrb	r3, [r0, r3]
    264e:	b2db      	uxtb	r3, r3
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    2650:	2a00      	cmp	r2, #0
    2652:	d102      	bne.n	265a <_ZN14USBDeviceClass9availableEm+0x32>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2654:	b662      	cpsie	i
    2656:	f3bf 8f6f 	isb	sy
		if (current == 0) {
			bool ready = false;
			synchronized {
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
    265a:	2b00      	cmp	r3, #0
    265c:	d11d      	bne.n	269a <_ZN14USBDeviceClass9availableEm+0x72>
    265e:	2000      	movs	r0, #0
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    2660:	bd10      	pop	{r4, pc}
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2662:	23ff      	movs	r3, #255	; 0xff
    2664:	4019      	ands	r1, r3
    2666:	4b11      	ldr	r3, [pc, #68]	; (26ac <_ZN14USBDeviceClass9availableEm+0x84>)
    2668:	0149      	lsls	r1, r1, #5
    266a:	1859      	adds	r1, r3, r1
    266c:	6888      	ldr	r0, [r1, #8]
    266e:	0480      	lsls	r0, r0, #18
    2670:	0c80      	lsrs	r0, r0, #18
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
		return epHandlers[ep]->available();
	} else {
		return usbd.epBank0ByteCount(ep);
    2672:	e7f5      	b.n	2660 <_ZN14USBDeviceClass9availableEm+0x38>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2674:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2678:	b672      	cpsid	i
			}
			return ready ? (last0 - first0) : 0;
		} else {
			bool ready = false;
			synchronized {
				ready = ready1;
    267a:	2334      	movs	r3, #52	; 0x34
    267c:	5cc3      	ldrb	r3, [r0, r3]
    267e:	b2db      	uxtb	r3, r3
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    2680:	2a00      	cmp	r2, #0
    2682:	d102      	bne.n	268a <_ZN14USBDeviceClass9availableEm+0x62>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2684:	b662      	cpsie	i
    2686:	f3bf 8f6f 	isb	sy
		} else {
			bool ready = false;
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
    268a:	2b00      	cmp	r3, #0
    268c:	d0e7      	beq.n	265e <_ZN14USBDeviceClass9availableEm+0x36>
    268e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2690:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    2692:	1a18      	subs	r0, r3, r0
    2694:	e7e4      	b.n	2660 <_ZN14USBDeviceClass9availableEm+0x38>

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
		return epHandlers[ep]->available();
    2696:	4798      	blx	r3
    2698:	e7e2      	b.n	2660 <_ZN14USBDeviceClass9availableEm+0x38>
		if (current == 0) {
			bool ready = false;
			synchronized {
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
    269a:	6a03      	ldr	r3, [r0, #32]
    269c:	69c0      	ldr	r0, [r0, #28]
    269e:	1a18      	subs	r0, r3, r0
    26a0:	e7de      	b.n	2660 <_ZN14USBDeviceClass9availableEm+0x38>
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	20000a9c 	.word	0x20000a9c
    26a8:	00001d4d 	.word	0x00001d4d
    26ac:	20000ac8 	.word	0x20000ac8

000026b0 <_ZN14USBDeviceClass4recvEm>:
	return len;
}

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    26b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26b2:	4645      	mov	r5, r8
    26b4:	4657      	mov	r7, sl
    26b6:	464e      	mov	r6, r9
    26b8:	b4e0      	push	{r5, r6, r7}

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
	if (!_usbConfiguration)
    26ba:	4bac      	ldr	r3, [pc, #688]	; (296c <_ZN14USBDeviceClass4recvEm+0x2bc>)
	return len;
}

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    26bc:	b082      	sub	sp, #8

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
	if (!_usbConfiguration)
    26be:	681b      	ldr	r3, [r3, #0]
	return len;
}

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    26c0:	000d      	movs	r5, r1

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
	if (!_usbConfiguration)
    26c2:	2b00      	cmp	r3, #0
    26c4:	d107      	bne.n	26d6 <_ZN14USBDeviceClass4recvEm+0x26>
// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
		return -1;
    26c6:	2001      	movs	r0, #1
    26c8:	4240      	negs	r0, r0
	} else {
		return c;
	}
}
    26ca:	b002      	add	sp, #8
    26cc:	bc1c      	pop	{r2, r3, r4}
    26ce:	4690      	mov	r8, r2
    26d0:	4699      	mov	r9, r3
    26d2:	46a2      	mov	sl, r4
    26d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	if (!_usbConfiguration)
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    26d6:	4ca6      	ldr	r4, [pc, #664]	; (2970 <_ZN14USBDeviceClass4recvEm+0x2c0>)
    26d8:	7823      	ldrb	r3, [r4, #0]
    26da:	2b00      	cmp	r3, #0
    26dc:	d100      	bne.n	26e0 <_ZN14USBDeviceClass4recvEm+0x30>
    26de:	e0af      	b.n	2840 <_ZN14USBDeviceClass4recvEm+0x190>
		digitalWrite(PIN_LED_RXL, LOW);

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    26e0:	2364      	movs	r3, #100	; 0x64
    26e2:	7023      	strb	r3, [r4, #0]
#endif

	if (epHandlers[ep]) {
    26e4:	4ba3      	ldr	r3, [pc, #652]	; (2974 <_ZN14USBDeviceClass4recvEm+0x2c4>)
    26e6:	00aa      	lsls	r2, r5, #2
    26e8:	58d3      	ldr	r3, [r2, r3]
    26ea:	2b00      	cmp	r3, #0
    26ec:	d06b      	beq.n	27c6 <_ZN14USBDeviceClass4recvEm+0x116>
		return epHandlers[ep]->recv(_data, len);
    26ee:	681a      	ldr	r2, [r3, #0]
    26f0:	6854      	ldr	r4, [r2, #4]
    26f2:	4aa1      	ldr	r2, [pc, #644]	; (2978 <_ZN14USBDeviceClass4recvEm+0x2c8>)
    26f4:	4294      	cmp	r4, r2
    26f6:	d000      	beq.n	26fa <_ZN14USBDeviceClass4recvEm+0x4a>
    26f8:	e106      	b.n	2908 <_ZN14USBDeviceClass4recvEm+0x258>
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    26fa:	691a      	ldr	r2, [r3, #16]
    26fc:	2a00      	cmp	r2, #0
    26fe:	d000      	beq.n	2702 <_ZN14USBDeviceClass4recvEm+0x52>
    2700:	e0a3      	b.n	284a <_ZN14USBDeviceClass4recvEm+0x19a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2702:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2706:	b672      	cpsid	i
			synchronized {
				if (!ready0) {
    2708:	2124      	movs	r1, #36	; 0x24
    270a:	5c59      	ldrb	r1, [r3, r1]
    270c:	2900      	cmp	r1, #0
    270e:	d100      	bne.n	2712 <_ZN14USBDeviceClass4recvEm+0x62>
    2710:	e125      	b.n	295e <_ZN14USBDeviceClass4recvEm+0x2ae>
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    2712:	2a00      	cmp	r2, #0
    2714:	d102      	bne.n	271c <_ZN14USBDeviceClass4recvEm+0x6c>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2716:	b662      	cpsie	i
    2718:	f3bf 8f6f 	isb	sy
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    271c:	69d9      	ldr	r1, [r3, #28]
    271e:	6a1a      	ldr	r2, [r3, #32]
    2720:	4291      	cmp	r1, r2
    2722:	d300      	bcc.n	2726 <_ZN14USBDeviceClass4recvEm+0x76>
    2724:	e0fd      	b.n	2922 <_ZN14USBDeviceClass4recvEm+0x272>
				data[i] = data0[first0++];
    2726:	6998      	ldr	r0, [r3, #24]
    2728:	1c4a      	adds	r2, r1, #1
    272a:	4684      	mov	ip, r0
    272c:	4668      	mov	r0, sp
    272e:	61da      	str	r2, [r3, #28]
    2730:	4461      	add	r1, ip
    2732:	7809      	ldrb	r1, [r1, #0]
    2734:	3007      	adds	r0, #7
    2736:	7001      	strb	r1, [r0, #0]
			}
			if (first0 == last0) {
    2738:	6a19      	ldr	r1, [r3, #32]
    273a:	428a      	cmp	r2, r1
    273c:	d001      	beq.n	2742 <_ZN14USBDeviceClass4recvEm+0x92>
{
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
		return -1;
	} else {
		return c;
    273e:	7800      	ldrb	r0, [r0, #0]
    2740:	e7c3      	b.n	26ca <_ZN14USBDeviceClass4recvEm+0x1a>
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    2742:	2001      	movs	r0, #1
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
    2744:	2200      	movs	r2, #0
				current = 1;
    2746:	2101      	movs	r1, #1
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
    2748:	61da      	str	r2, [r3, #28]
				current = 1;
    274a:	6119      	str	r1, [r3, #16]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    274c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2750:	b672      	cpsid	i
				synchronized {
					ready0 = false;
    2752:	2424      	movs	r4, #36	; 0x24
    2754:	551a      	strb	r2, [r3, r4]
					if (notify) {
    2756:	3411      	adds	r4, #17
    2758:	5d1d      	ldrb	r5, [r3, r4]
    275a:	2d00      	cmp	r5, #0
    275c:	d02c      	beq.n	27b8 <_ZN14USBDeviceClass4recvEm+0x108>
						notify = false;
    275e:	551a      	strb	r2, [r3, r4]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2760:	685a      	ldr	r2, [r3, #4]
    2762:	6814      	ldr	r4, [r2, #0]
    2764:	7a1a      	ldrb	r2, [r3, #8]
    2766:	0152      	lsls	r2, r2, #5
    2768:	18a2      	adds	r2, r4, r2
    276a:	2401      	movs	r4, #1
    276c:	3209      	adds	r2, #9
    276e:	32ff      	adds	r2, #255	; 0xff
    2770:	7855      	ldrb	r5, [r2, #1]
    2772:	432c      	orrs	r4, r5
    2774:	7054      	strb	r4, [r2, #1]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2776:	685a      	ldr	r2, [r3, #4]
    2778:	7a1d      	ldrb	r5, [r3, #8]
    277a:	4694      	mov	ip, r2
    277c:	016d      	lsls	r5, r5, #5
    277e:	68da      	ldr	r2, [r3, #12]
    2780:	4465      	add	r5, ip
    2782:	68ae      	ldr	r6, [r5, #8]
    2784:	0494      	lsls	r4, r2, #18
    2786:	4a7d      	ldr	r2, [pc, #500]	; (297c <_ZN14USBDeviceClass4recvEm+0x2cc>)
    2788:	0924      	lsrs	r4, r4, #4
    278a:	4032      	ands	r2, r6
    278c:	4322      	orrs	r2, r4
    278e:	60aa      	str	r2, [r5, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2790:	685c      	ldr	r4, [r3, #4]
    2792:	7a1a      	ldrb	r2, [r3, #8]
    2794:	46a4      	mov	ip, r4
    2796:	0152      	lsls	r2, r2, #5
    2798:	4462      	add	r2, ip
    279a:	6894      	ldr	r4, [r2, #8]
    279c:	0ba4      	lsrs	r4, r4, #14
    279e:	03a4      	lsls	r4, r4, #14
    27a0:	6094      	str	r4, [r2, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    27a2:	685a      	ldr	r2, [r3, #4]
    27a4:	6814      	ldr	r4, [r2, #0]
    27a6:	7a1a      	ldrb	r2, [r3, #8]
    27a8:	0013      	movs	r3, r2
    27aa:	2240      	movs	r2, #64	; 0x40
    27ac:	3308      	adds	r3, #8
    27ae:	015b      	lsls	r3, r3, #5
    27b0:	18e3      	adds	r3, r4, r3
    27b2:	791c      	ldrb	r4, [r3, #4]
    27b4:	4322      	orrs	r2, r4
    27b6:	711a      	strb	r2, [r3, #4]
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    27b8:	2900      	cmp	r1, #0
    27ba:	d000      	beq.n	27be <_ZN14USBDeviceClass4recvEm+0x10e>
    27bc:	e0aa      	b.n	2914 <_ZN14USBDeviceClass4recvEm+0x264>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    27be:	b662      	cpsie	i
    27c0:	f3bf 8f6f 	isb	sy
    27c4:	e0a6      	b.n	2914 <_ZN14USBDeviceClass4recvEm+0x264>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    27c6:	26ff      	movs	r6, #255	; 0xff
    27c8:	4f6d      	ldr	r7, [pc, #436]	; (2980 <_ZN14USBDeviceClass4recvEm+0x2d0>)
    27ca:	402e      	ands	r6, r5
    27cc:	0173      	lsls	r3, r6, #5
    27ce:	18fa      	adds	r2, r7, r3
    27d0:	4698      	mov	r8, r3
    27d2:	6893      	ldr	r3, [r2, #8]

	if (epHandlers[ep]) {
		return epHandlers[ep]->recv(_data, len);
	}

	if (available(ep) < len)
    27d4:	2401      	movs	r4, #1
    27d6:	049b      	lsls	r3, r3, #18
    27d8:	d102      	bne.n	27e0 <_ZN14USBDeviceClass4recvEm+0x130>
    27da:	6894      	ldr	r4, [r2, #8]
    27dc:	04a4      	lsls	r4, r4, #18
    27de:	0ca4      	lsrs	r4, r4, #18
    27e0:	4643      	mov	r3, r8
    27e2:	18f9      	adds	r1, r7, r3
    27e4:	688b      	ldr	r3, [r1, #8]
    27e6:	049b      	lsls	r3, r3, #18
    27e8:	0c9b      	lsrs	r3, r3, #18
}

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    27ea:	2b3f      	cmp	r3, #63	; 0x3f
    27ec:	d800      	bhi.n	27f0 <_ZN14USBDeviceClass4recvEm+0x140>
    27ee:	e086      	b.n	28fe <_ZN14USBDeviceClass4recvEm+0x24e>
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    27f0:	6888      	ldr	r0, [r1, #8]
    27f2:	3b40      	subs	r3, #64	; 0x40
    27f4:	049b      	lsls	r3, r3, #18
    27f6:	0c9a      	lsrs	r2, r3, #18
    27f8:	0b83      	lsrs	r3, r0, #14
    27fa:	039b      	lsls	r3, r3, #14
    27fc:	4313      	orrs	r3, r2
    27fe:	608b      	str	r3, [r1, #8]
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    2800:	2101      	movs	r1, #1
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2802:	46ba      	mov	sl, r7
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    2804:	4689      	mov	r9, r1
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2806:	44c2      	add	sl, r8
    2808:	4653      	mov	r3, sl
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    280a:	4649      	mov	r1, r9
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    280c:	689b      	ldr	r3, [r3, #8]
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    280e:	683b      	ldr	r3, [r7, #0]

	armRecv(ep);

	usbd.epBank0DisableTransferComplete(ep);

	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    2810:	01ad      	lsls	r5, r5, #6
    2812:	4443      	add	r3, r8
    2814:	3309      	adds	r3, #9
    2816:	33ff      	adds	r3, #255	; 0xff
    2818:	781a      	ldrb	r2, [r3, #0]
    281a:	430a      	orrs	r2, r1
    281c:	701a      	strb	r2, [r3, #0]
    281e:	466b      	mov	r3, sp
    2820:	4958      	ldr	r1, [pc, #352]	; (2984 <_ZN14USBDeviceClass4recvEm+0x2d4>)
    2822:	1dd8      	adds	r0, r3, #7
    2824:	1949      	adds	r1, r1, r5
    2826:	0022      	movs	r2, r4
    2828:	f005 fa70 	bl	7d0c <memcpy>

	// release empty buffer
	if (len && !available(ep)) {
    282c:	2c00      	cmp	r4, #0
    282e:	d100      	bne.n	2832 <_ZN14USBDeviceClass4recvEm+0x182>
    2830:	e749      	b.n	26c6 <_ZN14USBDeviceClass4recvEm+0x16>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2832:	4653      	mov	r3, sl
    2834:	689b      	ldr	r3, [r3, #8]
    2836:	049b      	lsls	r3, r3, #18
    2838:	d100      	bne.n	283c <_ZN14USBDeviceClass4recvEm+0x18c>
    283a:	e07d      	b.n	2938 <_ZN14USBDeviceClass4recvEm+0x288>
    283c:	0020      	movs	r0, r4
    283e:	e069      	b.n	2914 <_ZN14USBDeviceClass4recvEm+0x264>
	if (!_usbConfiguration)
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
		digitalWrite(PIN_LED_RXL, LOW);
    2840:	2100      	movs	r1, #0
    2842:	2019      	movs	r0, #25
    2844:	f000 fd90 	bl	3368 <digitalWrite>
    2848:	e74a      	b.n	26e0 <_ZN14USBDeviceClass4recvEm+0x30>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    284a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    284e:	b672      	cpsid	i
				}
			}
			return i;
		} else {
			synchronized {
				if (!ready1) {
    2850:	2134      	movs	r1, #52	; 0x34
    2852:	5c59      	ldrb	r1, [r3, r1]
    2854:	2900      	cmp	r1, #0
    2856:	d100      	bne.n	285a <_ZN14USBDeviceClass4recvEm+0x1aa>
    2858:	e081      	b.n	295e <_ZN14USBDeviceClass4recvEm+0x2ae>
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    285a:	2a00      	cmp	r2, #0
    285c:	d102      	bne.n	2864 <_ZN14USBDeviceClass4recvEm+0x1b4>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    285e:	b662      	cpsie	i
    2860:	f3bf 8f6f 	isb	sy
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    2864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2868:	4291      	cmp	r1, r2
    286a:	d260      	bcs.n	292e <_ZN14USBDeviceClass4recvEm+0x27e>
				data[i] = data1[first1++];
    286c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    286e:	1c4c      	adds	r4, r1, #1
    2870:	4694      	mov	ip, r2
    2872:	62dc      	str	r4, [r3, #44]	; 0x2c
    2874:	4461      	add	r1, ip
    2876:	780a      	ldrb	r2, [r1, #0]
    2878:	4669      	mov	r1, sp
    287a:	1dc8      	adds	r0, r1, #7
    287c:	7002      	strb	r2, [r0, #0]
			}
			if (first1 == last1) {
    287e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    2880:	2501      	movs	r5, #1
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
    2882:	42a2      	cmp	r2, r4
    2884:	d000      	beq.n	2888 <_ZN14USBDeviceClass4recvEm+0x1d8>
    2886:	e75a      	b.n	273e <_ZN14USBDeviceClass4recvEm+0x8e>
				first1 = 0;
    2888:	2200      	movs	r2, #0
    288a:	62da      	str	r2, [r3, #44]	; 0x2c
				current = 0;
    288c:	611a      	str	r2, [r3, #16]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    288e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2892:	b672      	cpsid	i
				synchronized {
					ready1 = false;
    2894:	2034      	movs	r0, #52	; 0x34
    2896:	541a      	strb	r2, [r3, r0]
					if (notify) {
    2898:	3001      	adds	r0, #1
    289a:	5c1c      	ldrb	r4, [r3, r0]
    289c:	2c00      	cmp	r4, #0
    289e:	d02c      	beq.n	28fa <_ZN14USBDeviceClass4recvEm+0x24a>
						notify = false;
    28a0:	541a      	strb	r2, [r3, r0]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    28a2:	685a      	ldr	r2, [r3, #4]
    28a4:	6810      	ldr	r0, [r2, #0]
    28a6:	7a1a      	ldrb	r2, [r3, #8]
    28a8:	0152      	lsls	r2, r2, #5
    28aa:	1882      	adds	r2, r0, r2
    28ac:	2001      	movs	r0, #1
    28ae:	3209      	adds	r2, #9
    28b0:	32ff      	adds	r2, #255	; 0xff
    28b2:	7854      	ldrb	r4, [r2, #1]
    28b4:	4320      	orrs	r0, r4
    28b6:	7050      	strb	r0, [r2, #1]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    28b8:	685a      	ldr	r2, [r3, #4]
    28ba:	7a1c      	ldrb	r4, [r3, #8]
    28bc:	4694      	mov	ip, r2
    28be:	0164      	lsls	r4, r4, #5
    28c0:	68da      	ldr	r2, [r3, #12]
    28c2:	4464      	add	r4, ip
    28c4:	68a6      	ldr	r6, [r4, #8]
    28c6:	0490      	lsls	r0, r2, #18
    28c8:	4a2c      	ldr	r2, [pc, #176]	; (297c <_ZN14USBDeviceClass4recvEm+0x2cc>)
    28ca:	0900      	lsrs	r0, r0, #4
    28cc:	4032      	ands	r2, r6
    28ce:	4302      	orrs	r2, r0
    28d0:	60a2      	str	r2, [r4, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    28d2:	6858      	ldr	r0, [r3, #4]
    28d4:	7a1a      	ldrb	r2, [r3, #8]
    28d6:	4684      	mov	ip, r0
    28d8:	0152      	lsls	r2, r2, #5
    28da:	4462      	add	r2, ip
    28dc:	6890      	ldr	r0, [r2, #8]
    28de:	0b80      	lsrs	r0, r0, #14
    28e0:	0380      	lsls	r0, r0, #14
    28e2:	6090      	str	r0, [r2, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    28e4:	685a      	ldr	r2, [r3, #4]
    28e6:	6810      	ldr	r0, [r2, #0]
    28e8:	7a1a      	ldrb	r2, [r3, #8]
    28ea:	0013      	movs	r3, r2
    28ec:	2240      	movs	r2, #64	; 0x40
    28ee:	3308      	adds	r3, #8
    28f0:	015b      	lsls	r3, r3, #5
    28f2:	18c3      	adds	r3, r0, r3
    28f4:	7918      	ldrb	r0, [r3, #4]
    28f6:	4302      	orrs	r2, r0
    28f8:	711a      	strb	r2, [r3, #4]
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    28fa:	0028      	movs	r0, r5
    28fc:	e75c      	b.n	27b8 <_ZN14USBDeviceClass4recvEm+0x108>
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    28fe:	688b      	ldr	r3, [r1, #8]
    2900:	0b9b      	lsrs	r3, r3, #14
    2902:	039b      	lsls	r3, r3, #14
    2904:	608b      	str	r3, [r1, #8]
    2906:	e77b      	b.n	2800 <_ZN14USBDeviceClass4recvEm+0x150>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	if (epHandlers[ep]) {
		return epHandlers[ep]->recv(_data, len);
    2908:	466a      	mov	r2, sp
    290a:	1dd0      	adds	r0, r2, #7
    290c:	0001      	movs	r1, r0
    290e:	2201      	movs	r2, #1
    2910:	0018      	movs	r0, r3
    2912:	47a0      	blx	r4

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    2914:	2801      	cmp	r0, #1
    2916:	d000      	beq.n	291a <_ZN14USBDeviceClass4recvEm+0x26a>
    2918:	e6d5      	b.n	26c6 <_ZN14USBDeviceClass4recvEm+0x16>
    291a:	466b      	mov	r3, sp
    291c:	1dd8      	adds	r0, r3, #7
		return -1;
	} else {
		return c;
    291e:	7800      	ldrb	r0, [r0, #0]
    2920:	e6d3      	b.n	26ca <_ZN14USBDeviceClass4recvEm+0x1a>
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
    2922:	6a1a      	ldr	r2, [r3, #32]
    2924:	2000      	movs	r0, #0
    2926:	428a      	cmp	r2, r1
    2928:	d100      	bne.n	292c <_ZN14USBDeviceClass4recvEm+0x27c>
    292a:	e70b      	b.n	2744 <_ZN14USBDeviceClass4recvEm+0x94>
    292c:	e6cb      	b.n	26c6 <_ZN14USBDeviceClass4recvEm+0x16>
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
    292e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2930:	2500      	movs	r5, #0
    2932:	4291      	cmp	r1, r2
    2934:	d0a8      	beq.n	2888 <_ZN14USBDeviceClass4recvEm+0x1d8>
    2936:	e6c6      	b.n	26c6 <_ZN14USBDeviceClass4recvEm+0x16>
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2938:	2240      	movs	r2, #64	; 0x40
    293a:	683b      	ldr	r3, [r7, #0]
    293c:	3608      	adds	r6, #8
    293e:	0176      	lsls	r6, r6, #5
    2940:	199e      	adds	r6, r3, r6
    2942:	7931      	ldrb	r1, [r6, #4]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2944:	4443      	add	r3, r8
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2946:	430a      	orrs	r2, r1
    2948:	7132      	strb	r2, [r6, #4]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    294a:	2201      	movs	r2, #1
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    294c:	4649      	mov	r1, r9
    294e:	3309      	adds	r3, #9
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    2950:	71f2      	strb	r2, [r6, #7]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2952:	33ff      	adds	r3, #255	; 0xff
    2954:	785a      	ldrb	r2, [r3, #1]
    2956:	0020      	movs	r0, r4
    2958:	430a      	orrs	r2, r1
    295a:	705a      	strb	r2, [r3, #1]
    295c:	e7da      	b.n	2914 <_ZN14USBDeviceClass4recvEm+0x264>
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    295e:	2a00      	cmp	r2, #0
    2960:	d000      	beq.n	2964 <_ZN14USBDeviceClass4recvEm+0x2b4>
    2962:	e6b0      	b.n	26c6 <_ZN14USBDeviceClass4recvEm+0x16>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2964:	b662      	cpsie	i
    2966:	f3bf 8f6f 	isb	sy
    296a:	e6ac      	b.n	26c6 <_ZN14USBDeviceClass4recvEm+0x16>
    296c:	20000bcc 	.word	0x20000bcc
    2970:	20000ac5 	.word	0x20000ac5
    2974:	20000a9c 	.word	0x20000a9c
    2978:	00001ae9 	.word	0x00001ae9
    297c:	f0003fff 	.word	0xf0003fff
    2980:	20000ac8 	.word	0x20000ac8
    2984:	20000718 	.word	0x20000718

00002988 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    2988:	b5f0      	push	{r4, r5, r6, r7, lr}
    298a:	464d      	mov	r5, r9
    298c:	465f      	mov	r7, fp
    298e:	4656      	mov	r6, sl
    2990:	4644      	mov	r4, r8
    2992:	b4f0      	push	{r4, r5, r6, r7}
    2994:	4699      	mov	r9, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    2996:	4b45      	ldr	r3, [pc, #276]	; (2aac <_ZN14USBDeviceClass4sendEmPKvm+0x124>)
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    2998:	b085      	sub	sp, #20
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    299a:	681b      	ldr	r3, [r3, #0]
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    299c:	000d      	movs	r5, r1
    299e:	4693      	mov	fp, r2
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    29a0:	2b00      	cmp	r3, #0
    29a2:	d108      	bne.n	29b6 <_ZN14USBDeviceClass4sendEmPKvm+0x2e>
					LastTransmitTimedOut[ep] = 1;

					// set byte count to zero, so that ZLP is sent
					// instead of stale data
					usbd.epBank1SetByteCount(ep, 0);
					return -1;
    29a4:	2001      	movs	r0, #1
    29a6:	4240      	negs	r0, r0
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    29a8:	b005      	add	sp, #20
    29aa:	bc3c      	pop	{r2, r3, r4, r5}
    29ac:	4690      	mov	r8, r2
    29ae:	4699      	mov	r9, r3
    29b0:	46a2      	mov	sl, r4
    29b2:	46ab      	mov	fp, r5
    29b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
		return -1;
	if (len > 16384)
    29b6:	2380      	movs	r3, #128	; 0x80
    29b8:	01db      	lsls	r3, r3, #7
    29ba:	4599      	cmp	r9, r3
    29bc:	d8f2      	bhi.n	29a4 <_ZN14USBDeviceClass4sendEmPKvm+0x1c>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    29be:	4c3c      	ldr	r4, [pc, #240]	; (2ab0 <_ZN14USBDeviceClass4sendEmPKvm+0x128>)
    29c0:	7823      	ldrb	r3, [r4, #0]
    29c2:	2b00      	cmp	r3, #0
    29c4:	d06b      	beq.n	2a9e <_ZN14USBDeviceClass4sendEmPKvm+0x116>
		digitalWrite(PIN_LED_TXL, LOW);

	txLEDPulse = TX_RX_LED_PULSE_MS;
    29c6:	2364      	movs	r3, #100	; 0x64
    29c8:	7023      	strb	r3, [r4, #0]
#endif

	// Flash area
	while (len != 0)
    29ca:	464b      	mov	r3, r9
    29cc:	2b00      	cmp	r3, #0
    29ce:	d06b      	beq.n	2aa8 <_ZN14USBDeviceClass4sendEmPKvm+0x120>
    29d0:	24ff      	movs	r4, #255	; 0xff
    29d2:	4b38      	ldr	r3, [pc, #224]	; (2ab4 <_ZN14USBDeviceClass4sendEmPKvm+0x12c>)
    29d4:	402c      	ands	r4, r5
    29d6:	469a      	mov	sl, r3
    29d8:	681b      	ldr	r3, [r3, #0]
    29da:	0027      	movs	r7, r4
    29dc:	4698      	mov	r8, r3
    29de:	2300      	movs	r3, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    29e0:	4a35      	ldr	r2, [pc, #212]	; (2ab8 <_ZN14USBDeviceClass4sendEmPKvm+0x130>)

	txLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	// Flash area
	while (len != 0)
    29e2:	9302      	str	r3, [sp, #8]
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    29e4:	01ab      	lsls	r3, r5, #6
    29e6:	18d3      	adds	r3, r2, r3
    29e8:	3708      	adds	r7, #8
    29ea:	0164      	lsls	r4, r4, #5
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    29ec:	017f      	lsls	r7, r7, #5
    29ee:	9303      	str	r3, [sp, #12]
    29f0:	465b      	mov	r3, fp
    29f2:	46a3      	mov	fp, r4
    29f4:	003c      	movs	r4, r7
    29f6:	4647      	mov	r7, r8
    29f8:	4e30      	ldr	r6, [pc, #192]	; (2abc <_ZN14USBDeviceClass4sendEmPKvm+0x134>)
    29fa:	9301      	str	r3, [sp, #4]
    29fc:	193b      	adds	r3, r7, r4
    29fe:	799b      	ldrb	r3, [r3, #6]
    2a00:	09db      	lsrs	r3, r3, #7
#endif

	// Flash area
	while (len != 0)
	{
		if (usbd.epBank1IsReady(ep)) {
    2a02:	d01b      	beq.n	2a3c <_ZN14USBDeviceClass4sendEmPKvm+0xb4>
			// previous transfer is still not complete

			// convert the timeout from microseconds to a number of times through
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    2a04:	4b2e      	ldr	r3, [pc, #184]	; (2ac0 <_ZN14USBDeviceClass4sendEmPKvm+0x138>)
    2a06:	492f      	ldr	r1, [pc, #188]	; (2ac4 <_ZN14USBDeviceClass4sendEmPKvm+0x13c>)
    2a08:	6818      	ldr	r0, [r3, #0]
    2a0a:	f003 f953 	bl	5cb4 <__aeabi_uidiv>
    2a0e:	4b2e      	ldr	r3, [pc, #184]	; (2ac8 <_ZN14USBDeviceClass4sendEmPKvm+0x140>)
    2a10:	2117      	movs	r1, #23
    2a12:	4358      	muls	r0, r3
    2a14:	f003 f94e 	bl	5cb4 <__aeabi_uidiv>

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    2a18:	193b      	adds	r3, r7, r4
    2a1a:	79db      	ldrb	r3, [r3, #7]

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
    2a1c:	079b      	lsls	r3, r3, #30
    2a1e:	d40d      	bmi.n	2a3c <_ZN14USBDeviceClass4sendEmPKvm+0xb4>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    2a20:	5d73      	ldrb	r3, [r6, r5]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d101      	bne.n	2a2a <_ZN14USBDeviceClass4sendEmPKvm+0xa2>
    2a26:	3801      	subs	r0, #1
    2a28:	d2f6      	bcs.n	2a18 <_ZN14USBDeviceClass4sendEmPKvm+0x90>
					LastTransmitTimedOut[ep] = 1;
    2a2a:	2301      	movs	r3, #1
    2a2c:	465c      	mov	r4, fp
    2a2e:	5573      	strb	r3, [r6, r5]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2a30:	4454      	add	r4, sl
    2a32:	69a3      	ldr	r3, [r4, #24]
    2a34:	0b9b      	lsrs	r3, r3, #14
    2a36:	039b      	lsls	r3, r3, #14
    2a38:	61a3      	str	r3, [r4, #24]
    2a3a:	e7b3      	b.n	29a4 <_ZN14USBDeviceClass4sendEmPKvm+0x1c>
					return -1;
				}
			}
		}

		LastTransmitTimedOut[ep] = 0;
    2a3c:	2300      	movs	r3, #0
    2a3e:	5573      	strb	r3, [r6, r5]
    2a40:	464b      	mov	r3, r9
    2a42:	46c8      	mov	r8, r9
    2a44:	2b3f      	cmp	r3, #63	; 0x3f
    2a46:	d901      	bls.n	2a4c <_ZN14USBDeviceClass4sendEmPKvm+0xc4>
    2a48:	233f      	movs	r3, #63	; 0x3f
    2a4a:	4698      	mov	r8, r3
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    2a4c:	4642      	mov	r2, r8
    2a4e:	9901      	ldr	r1, [sp, #4]
    2a50:	9803      	ldr	r0, [sp, #12]
    2a52:	f005 f95b 	bl	7d0c <memcpy>
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2a56:	4651      	mov	r1, sl
    2a58:	9a03      	ldr	r2, [sp, #12]
    2a5a:	4459      	add	r1, fp
    2a5c:	614a      	str	r2, [r1, #20]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2a5e:	4642      	mov	r2, r8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2a60:	000b      	movs	r3, r1

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2a62:	6988      	ldr	r0, [r1, #24]
    2a64:	0492      	lsls	r2, r2, #18
    2a66:	0c91      	lsrs	r1, r2, #18
    2a68:	0b82      	lsrs	r2, r0, #14
    2a6a:	0392      	lsls	r2, r2, #14
    2a6c:	430a      	orrs	r2, r1
    2a6e:	619a      	str	r2, [r3, #24]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2a70:	2202      	movs	r2, #2

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2a72:	2180      	movs	r1, #128	; 0x80

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2a74:	193b      	adds	r3, r7, r4
    2a76:	71da      	strb	r2, [r3, #7]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2a78:	795a      	ldrb	r2, [r3, #5]
    2a7a:	4249      	negs	r1, r1
    2a7c:	430a      	orrs	r2, r1
    2a7e:	715a      	strb	r2, [r3, #5]
		usbd.epBank1AckTransferComplete(ep);

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);

		written += length;
    2a80:	9b02      	ldr	r3, [sp, #8]
		len -= length;
    2a82:	4642      	mov	r2, r8
		usbd.epBank1AckTransferComplete(ep);

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);

		written += length;
    2a84:	4443      	add	r3, r8
    2a86:	9302      	str	r3, [sp, #8]
		len -= length;
    2a88:	464b      	mov	r3, r9
    2a8a:	1a9b      	subs	r3, r3, r2
    2a8c:	4699      	mov	r9, r3
		data = (char *)data + length;
    2a8e:	9b01      	ldr	r3, [sp, #4]
    2a90:	4443      	add	r3, r8
    2a92:	9301      	str	r3, [sp, #4]

	txLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	// Flash area
	while (len != 0)
    2a94:	464b      	mov	r3, r9
    2a96:	2b00      	cmp	r3, #0
    2a98:	d1b0      	bne.n	29fc <_ZN14USBDeviceClass4sendEmPKvm+0x74>
		usbd.epBank1AckTransferComplete(ep);

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);

		written += length;
    2a9a:	9802      	ldr	r0, [sp, #8]
    2a9c:	e784      	b.n	29a8 <_ZN14USBDeviceClass4sendEmPKvm+0x20>
	if (len > 16384)
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
		digitalWrite(PIN_LED_TXL, LOW);
    2a9e:	2100      	movs	r1, #0
    2aa0:	201a      	movs	r0, #26
    2aa2:	f000 fc61 	bl	3368 <digitalWrite>
    2aa6:	e78e      	b.n	29c6 <_ZN14USBDeviceClass4sendEmPKvm+0x3e>
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
	uint32_t written = 0;
    2aa8:	2000      	movs	r0, #0
    2aaa:	e77d      	b.n	29a8 <_ZN14USBDeviceClass4sendEmPKvm+0x20>
    2aac:	20000bcc 	.word	0x20000bcc
    2ab0:	20000a9a 	.word	0x20000a9a
    2ab4:	20000ac8 	.word	0x20000ac8
    2ab8:	200008d8 	.word	0x200008d8
    2abc:	20000710 	.word	0x20000710
    2ac0:	20000084 	.word	0x20000084
    2ac4:	000f4240 	.word	0x000f4240
    2ac8:	00011170 	.word	0x00011170

00002acc <_ZN14USBDeviceClass11sendControlEPKvm>:
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    2acc:	4b13      	ldr	r3, [pc, #76]	; (2b1c <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)

	return len;
}

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    2ace:	b570      	push	{r4, r5, r6, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    2ad0:	781b      	ldrb	r3, [r3, #0]

	return len;
}

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    2ad2:	0014      	movs	r4, r2
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d10b      	bne.n	2af0 <_ZN14USBDeviceClass11sendControlEPKvm+0x24>
		return length;

	if (_pack_message == true) {
    2ad8:	4b11      	ldr	r3, [pc, #68]	; (2b20 <_ZN14USBDeviceClass11sendControlEPKvm+0x54>)
    2ada:	781b      	ldrb	r3, [r3, #0]
    2adc:	2b00      	cmp	r3, #0
    2ade:	d009      	beq.n	2af4 <_ZN14USBDeviceClass11sendControlEPKvm+0x28>
		memcpy(&_pack_buffer[_pack_size], data, len);
    2ae0:	4e10      	ldr	r6, [pc, #64]	; (2b24 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>)
    2ae2:	4811      	ldr	r0, [pc, #68]	; (2b28 <_ZN14USBDeviceClass11sendControlEPKvm+0x5c>)
    2ae4:	8835      	ldrh	r5, [r6, #0]
    2ae6:	1940      	adds	r0, r0, r5
		_pack_size += len;
    2ae8:	192d      	adds	r5, r5, r4

	if (_dry_run == true)
		return length;

	if (_pack_message == true) {
		memcpy(&_pack_buffer[_pack_size], data, len);
    2aea:	f005 f90f 	bl	7d0c <memcpy>
		_pack_size += len;
    2aee:	8035      	strh	r5, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    2af0:	0020      	movs	r0, r4
    2af2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&_pack_buffer[_pack_size], data, len);
		_pack_size += len;
		return length;
	}

 	while (len > 0)
    2af4:	2a00      	cmp	r2, #0
    2af6:	d0fb      	beq.n	2af0 <_ZN14USBDeviceClass11sendControlEPKvm+0x24>
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    2af8:	4d0c      	ldr	r5, [pc, #48]	; (2b2c <_ZN14USBDeviceClass11sendControlEPKvm+0x60>)
    2afa:	0028      	movs	r0, r5
    2afc:	f005 f906 	bl	7d0c <memcpy>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2b00:	4b0b      	ldr	r3, [pc, #44]	; (2b30 <_ZN14USBDeviceClass11sendControlEPKvm+0x64>)
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2b02:	4a0c      	ldr	r2, [pc, #48]	; (2b34 <_ZN14USBDeviceClass11sendControlEPKvm+0x68>)

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2b04:	615d      	str	r5, [r3, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2b06:	6999      	ldr	r1, [r3, #24]
    2b08:	400a      	ands	r2, r1
    2b0a:	619a      	str	r2, [r3, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2b0c:	6998      	ldr	r0, [r3, #24]
    2b0e:	04a2      	lsls	r2, r4, #18
    2b10:	0c91      	lsrs	r1, r2, #18
    2b12:	0b82      	lsrs	r2, r0, #14
    2b14:	0392      	lsls	r2, r2, #14
    2b16:	430a      	orrs	r2, r1
    2b18:	619a      	str	r2, [r3, #24]
    2b1a:	e7e9      	b.n	2af0 <_ZN14USBDeviceClass11sendControlEPKvm+0x24>
    2b1c:	20000ac0 	.word	0x20000ac0
    2b20:	20000717 	.word	0x20000717
    2b24:	20000a98 	.word	0x20000a98
    2b28:	20000610 	.word	0x20000610
    2b2c:	200008d8 	.word	0x200008d8
    2b30:	20000ac8 	.word	0x20000ac8
    2b34:	f0003fff 	.word	0xf0003fff

00002b38 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    2b38:	b570      	push	{r4, r5, r6, lr}
	switch (setup.bRequest) {
    2b3a:	784b      	ldrb	r3, [r1, #1]
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    2b3c:	000c      	movs	r4, r1
	switch (setup.bRequest) {
    2b3e:	2b0b      	cmp	r3, #11
    2b40:	d900      	bls.n	2b44 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xc>
    2b42:	e08c      	b.n	2c5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x126>
    2b44:	4a52      	ldr	r2, [pc, #328]	; (2c90 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x158>)
    2b46:	009b      	lsls	r3, r3, #2
    2b48:	58d3      	ldr	r3, [r2, r3]
    2b4a:	469f      	mov	pc, r3
	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
		return true;

	case SET_INTERFACE:
		_usbSetInterface = setup.wValueL;
    2b4c:	788a      	ldrb	r2, [r1, #2]
    2b4e:	4b51      	ldr	r3, [pc, #324]	; (2c94 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x15c>)
    2b50:	601a      	str	r2, [r3, #0]
    2b52:	4a51      	ldr	r2, [pc, #324]	; (2c98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
    2b54:	6993      	ldr	r3, [r2, #24]
    2b56:	0b9b      	lsrs	r3, r3, #14
    2b58:	039b      	lsls	r3, r3, #14
    2b5a:	6193      	str	r3, [r2, #24]
		sendZlp(0);
		return true;
    2b5c:	2301      	movs	r3, #1

	default:
		return true;
	}
}
    2b5e:	0018      	movs	r0, r3
    2b60:	bd70      	pop	{r4, r5, r6, pc}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
	switch (setup.bRequest) {
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    2b62:	780b      	ldrb	r3, [r1, #0]
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    2b64:	4a4d      	ldr	r2, [pc, #308]	; (2c9c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x164>)

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
	switch (setup.bRequest) {
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    2b66:	2b00      	cmp	r3, #0
    2b68:	d07b      	beq.n	2c62 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x12a>
		else
		{
			// Send the endpoint status
			// Check if the endpoint if currently halted
			uint8_t buff[] = { 0, 0 };
			if (isEndpointHalt == 1)
    2b6a:	4b4d      	ldr	r3, [pc, #308]	; (2ca0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x168>)
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    2b6c:	781b      	ldrb	r3, [r3, #0]
    2b6e:	3b01      	subs	r3, #1
    2b70:	4259      	negs	r1, r3
    2b72:	414b      	adcs	r3, r1
    2b74:	7013      	strb	r3, [r2, #0]
    2b76:	2300      	movs	r3, #0
    2b78:	7053      	strb	r3, [r2, #1]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2b7a:	4b47      	ldr	r3, [pc, #284]	; (2c98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
    2b7c:	615a      	str	r2, [r3, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2b7e:	6999      	ldr	r1, [r3, #24]
    2b80:	4a48      	ldr	r2, [pc, #288]	; (2ca4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x16c>)
    2b82:	400a      	ands	r2, r1

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2b84:	2102      	movs	r1, #2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2b86:	619a      	str	r2, [r3, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2b88:	699a      	ldr	r2, [r3, #24]
    2b8a:	0b92      	lsrs	r2, r2, #14
    2b8c:	0392      	lsls	r2, r2, #14
    2b8e:	430a      	orrs	r2, r1
    2b90:	619a      	str	r2, [r3, #24]
			// Check if the endpoint if currently halted
			uint8_t buff[] = { 0, 0 };
			if (isEndpointHalt == 1)
				buff[0] = 1;
			armSend(0, buff, 2);
			return true;
    2b92:	2301      	movs	r3, #1
    2b94:	e7e3      	b.n	2b5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
		}

	case CLEAR_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    2b96:	788b      	ldrb	r3, [r1, #2]
    2b98:	2b01      	cmp	r3, #1
    2b9a:	d064      	beq.n	2c66 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x12e>
			armSend(0, buff, 2);
			return true;
		}
		else // if( setup.wValueL == 0) // ENDPOINTHALT
		{
			isEndpointHalt = 0;
    2b9c:	2200      	movs	r2, #0
    2b9e:	4b40      	ldr	r3, [pc, #256]	; (2ca0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x168>)
    2ba0:	701a      	strb	r2, [r3, #0]
    2ba2:	e7d6      	b.n	2b52 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1a>
			return true;
		}

	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    2ba4:	7888      	ldrb	r0, [r1, #2]
    2ba6:	2801      	cmp	r0, #1
    2ba8:	d060      	beq.n	2c6c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x134>
			isRemoteWakeUpEnabled = 1;
			uint8_t buff[] = { 0 };
			armSend(0, buff, 1);
			return true;
		}
		if (setup.wValueL == 0) // ENDPOINTHALT
    2baa:	2800      	cmp	r0, #0
    2bac:	d104      	bne.n	2bb8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
		{
			// Halt endpoint
			isEndpointHalt = 1;
    2bae:	2201      	movs	r2, #1
    2bb0:	4b3b      	ldr	r3, [pc, #236]	; (2ca0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x168>)
    2bb2:	701a      	strb	r2, [r3, #0]
    2bb4:	e7cd      	b.n	2b52 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1a>
    2bb6:	7888      	ldrb	r0, [r1, #2]
    2bb8:	4a37      	ldr	r2, [pc, #220]	; (2c98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2bba:	2406      	movs	r4, #6

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2bbc:	6993      	ldr	r3, [r2, #24]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2bbe:	6811      	ldr	r1, [r2, #0]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2bc0:	0b9b      	lsrs	r3, r3, #14
    2bc2:	039b      	lsls	r3, r3, #14
    2bc4:	6193      	str	r3, [r2, #24]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2bc6:	2208      	movs	r2, #8
    2bc8:	2302      	movs	r3, #2

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2bca:	2580      	movs	r5, #128	; 0x80

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2bcc:	32ff      	adds	r2, #255	; 0xff
    2bce:	548b      	strb	r3, [r1, r2]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2bd0:	34ff      	adds	r4, #255	; 0xff
    2bd2:	5d0b      	ldrb	r3, [r1, r4]
    2bd4:	426d      	negs	r5, r5
    2bd6:	432b      	orrs	r3, r5
    2bd8:	550b      	strb	r3, [r1, r4]

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    2bda:	5c8b      	ldrb	r3, [r1, r2]

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(0);

	// Wait for transfer to complete
	while (!usbd.epBank1IsTransferComplete(0)) {}
    2bdc:	079b      	lsls	r3, r3, #30
    2bde:	d5fc      	bpl.n	2bda <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xa2>

	// Set USB address to addr
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2be0:	217f      	movs	r1, #127	; 0x7f
    2be2:	4b31      	ldr	r3, [pc, #196]	; (2ca8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x170>)
    2be4:	4008      	ands	r0, r1
    2be6:	7a9a      	ldrb	r2, [r3, #10]
    2be8:	438a      	bics	r2, r1
    2bea:	4310      	orrs	r0, r2
    2bec:	7298      	strb	r0, [r3, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2bee:	7a9a      	ldrb	r2, [r3, #10]
    2bf0:	39ff      	subs	r1, #255	; 0xff
    2bf2:	430a      	orrs	r2, r1
    2bf4:	729a      	strb	r2, [r3, #10]
			return true;
		}

	case SET_ADDRESS:
		setAddress(setup.wValueL);
		return true;
    2bf6:	2301      	movs	r3, #1
    2bf8:	e7b1      	b.n	2b5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);
    2bfa:	f7ff f9f9 	bl	1ff0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    2bfe:	0003      	movs	r3, r0
    2c00:	e7ad      	b.n	2b5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>

	case SET_DESCRIPTOR:
		return false;
    2c02:	2300      	movs	r3, #0
    2c04:	e7ab      	b.n	2b5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
    2c06:	4b29      	ldr	r3, [pc, #164]	; (2cac <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x174>)
    2c08:	781b      	ldrb	r3, [r3, #0]
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    2c0a:	4a24      	ldr	r2, [pc, #144]	; (2c9c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x164>)
    2c0c:	7013      	strb	r3, [r2, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2c0e:	4b22      	ldr	r3, [pc, #136]	; (2c98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
    2c10:	615a      	str	r2, [r3, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2c12:	6999      	ldr	r1, [r3, #24]
    2c14:	4a23      	ldr	r2, [pc, #140]	; (2ca4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x16c>)
    2c16:	400a      	ands	r2, r1

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2c18:	2101      	movs	r1, #1
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2c1a:	619a      	str	r2, [r3, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2c1c:	699a      	ldr	r2, [r3, #24]
    2c1e:	0b92      	lsrs	r2, r2, #14
    2c20:	0392      	lsls	r2, r2, #14
    2c22:	430a      	orrs	r2, r1
    2c24:	619a      	str	r2, [r3, #24]
			return false;
		}

	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
		return true;
    2c26:	2301      	movs	r3, #1
    2c28:	e799      	b.n	2b5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
		return true;

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    2c2a:	780a      	ldrb	r2, [r1, #0]
			#endif

			sendZlp(0);
			return true;
		} else {
			return false;
    2c2c:	2300      	movs	r3, #0
	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
		return true;

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    2c2e:	06d2      	lsls	r2, r2, #27
    2c30:	d195      	bne.n	2b5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>

			initEndpoints();
    2c32:	f7ff fb49 	bl	22c8 <_ZN14USBDeviceClass13initEndpointsEv>

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    2c36:	202a      	movs	r0, #42	; 0x2a
    2c38:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    2c3a:	78a2      	ldrb	r2, [r4, #2]
    2c3c:	4b1b      	ldr	r3, [pc, #108]	; (2cac <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x174>)
    2c3e:	30ff      	adds	r0, #255	; 0xff
    2c40:	601a      	str	r2, [r3, #0]
    2c42:	4a15      	ldr	r2, [pc, #84]	; (2c98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
    2c44:	6813      	ldr	r3, [r2, #0]
    2c46:	5c1c      	ldrb	r4, [r3, r0]
    2c48:	4321      	orrs	r1, r4
    2c4a:	5419      	strb	r1, [r3, r0]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2c4c:	204a      	movs	r0, #74	; 0x4a
    2c4e:	2101      	movs	r1, #1
    2c50:	30ff      	adds	r0, #255	; 0xff
    2c52:	5c1c      	ldrb	r4, [r3, r0]
    2c54:	4321      	orrs	r1, r4
    2c56:	5419      	strb	r1, [r3, r0]
    2c58:	e77c      	b.n	2b54 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c>
    2c5a:	4b0e      	ldr	r3, [pc, #56]	; (2c94 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x15c>)
    2c5c:	e7d4      	b.n	2c08 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xd0>
		_usbSetInterface = setup.wValueL;
		sendZlp(0);
		return true;

	default:
		return true;
    2c5e:	2301      	movs	r3, #1
    2c60:	e77d      	b.n	2b5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    2c62:	7013      	strb	r3, [r2, #0]
    2c64:	e788      	b.n	2b78 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x40>
    2c66:	4a0d      	ldr	r2, [pc, #52]	; (2c9c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x164>)
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
		{
			// Enable remote wake-up and send a ZLP
			uint8_t buff[] = { 0, 0 };
			if (isRemoteWakeUpEnabled == 1)
    2c68:	4b11      	ldr	r3, [pc, #68]	; (2cb0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x178>)
    2c6a:	e77f      	b.n	2b6c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    2c6c:	2200      	movs	r2, #0
	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    2c6e:	4b10      	ldr	r3, [pc, #64]	; (2cb0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x178>)
    2c70:	7018      	strb	r0, [r3, #0]
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    2c72:	4b0a      	ldr	r3, [pc, #40]	; (2c9c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x164>)
    2c74:	701a      	strb	r2, [r3, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2c76:	4a08      	ldr	r2, [pc, #32]	; (2c98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
    2c78:	6153      	str	r3, [r2, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2c7a:	6991      	ldr	r1, [r2, #24]
    2c7c:	4b09      	ldr	r3, [pc, #36]	; (2ca4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x16c>)
    2c7e:	400b      	ands	r3, r1
    2c80:	6193      	str	r3, [r2, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2c82:	6993      	ldr	r3, [r2, #24]
    2c84:	0b9b      	lsrs	r3, r3, #14
    2c86:	039b      	lsls	r3, r3, #14
    2c88:	4318      	orrs	r0, r3
    2c8a:	6190      	str	r0, [r2, #24]
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
			uint8_t buff[] = { 0 };
			armSend(0, buff, 1);
			return true;
    2c8c:	2301      	movs	r3, #1
    2c8e:	e766      	b.n	2b5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
    2c90:	00007f70 	.word	0x00007f70
    2c94:	20000abc 	.word	0x20000abc
    2c98:	20000ac8 	.word	0x20000ac8
    2c9c:	200008d8 	.word	0x200008d8
    2ca0:	2000060c 	.word	0x2000060c
    2ca4:	f0003fff 	.word	0xf0003fff
    2ca8:	41005000 	.word	0x41005000
    2cac:	20000bcc 	.word	0x20000bcc
    2cb0:	20000ab8 	.word	0x20000ab8

00002cb4 <_ZN14USBDeviceClass10ISRHandlerEv.part.10>:
	default:
		return true;
	}
}

void USBDeviceClass::ISRHandler()
    2cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cb6:	4657      	mov	r7, sl
    2cb8:	464e      	mov	r6, r9
    2cba:	4645      	mov	r5, r8
    2cbc:	b4e0      	push	{r5, r6, r7}
	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    2cbe:	4fc5      	ldr	r7, [pc, #788]	; (2fd4 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x320>)
    2cc0:	0004      	movs	r4, r0
    2cc2:	683b      	ldr	r3, [r7, #0]
    2cc4:	8b9a      	ldrh	r2, [r3, #28]

	if (_pack_message == true) {
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    2cc6:	0712      	lsls	r2, r2, #28
    2cc8:	d537      	bpl.n	2d3a <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x86>
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2cca:	26c0      	movs	r6, #192	; 0xc0

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2ccc:	2080      	movs	r0, #128	; 0x80
    2cce:	2507      	movs	r5, #7
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2cd0:	68b9      	ldr	r1, [r7, #8]
    2cd2:	4ac1      	ldr	r2, [pc, #772]	; (2fd8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x324>)
    2cd4:	05b6      	lsls	r6, r6, #22
    2cd6:	4011      	ands	r1, r2
    2cd8:	4331      	orrs	r1, r6
    2cda:	60b9      	str	r1, [r7, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2cdc:	49bf      	ldr	r1, [pc, #764]	; (2fdc <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x328>)

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2cde:	0040      	lsls	r0, r0, #1
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2ce0:	6079      	str	r1, [r7, #4]

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2ce2:	5c19      	ldrb	r1, [r3, r0]
    2ce4:	43a9      	bics	r1, r5
    2ce6:	2501      	movs	r5, #1
    2ce8:	4329      	orrs	r1, r5
    2cea:	5419      	strb	r1, [r3, r0]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2cec:	69b9      	ldr	r1, [r7, #24]
    2cee:	400a      	ands	r2, r1
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2cf0:	2170      	movs	r1, #112	; 0x70
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2cf2:	4332      	orrs	r2, r6
    2cf4:	61ba      	str	r2, [r7, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2cf6:	4aba      	ldr	r2, [pc, #744]	; (2fe0 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x32c>)
    2cf8:	617a      	str	r2, [r7, #20]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2cfa:	5c1a      	ldrb	r2, [r3, r0]
    2cfc:	438a      	bics	r2, r1
    2cfe:	2110      	movs	r1, #16
    2d00:	430a      	orrs	r2, r1
    2d02:	541a      	strb	r2, [r3, r0]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2d04:	68b8      	ldr	r0, [r7, #8]
    2d06:	4ab7      	ldr	r2, [pc, #732]	; (2fe4 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x330>)
    2d08:	4002      	ands	r2, r0
    2d0a:	2080      	movs	r0, #128	; 0x80
    2d0c:	0340      	lsls	r0, r0, #13
    2d0e:	4302      	orrs	r2, r0
    2d10:	60ba      	str	r2, [r7, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2d12:	68ba      	ldr	r2, [r7, #8]
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    2d14:	2006      	movs	r0, #6
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2d16:	0b92      	lsrs	r2, r2, #14
    2d18:	0392      	lsls	r2, r2, #14
    2d1a:	60ba      	str	r2, [r7, #8]
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    2d1c:	2240      	movs	r2, #64	; 0x40
    2d1e:	30ff      	adds	r0, #255	; 0xff
    2d20:	5c1d      	ldrb	r5, [r3, r0]
    2d22:	432a      	orrs	r2, r5
    2d24:	541a      	strb	r2, [r3, r0]
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    2d26:	200a      	movs	r0, #10
    2d28:	30ff      	adds	r0, #255	; 0xff
    2d2a:	5c1a      	ldrb	r2, [r3, r0]
    2d2c:	430a      	orrs	r2, r1
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    2d2e:	2100      	movs	r1, #0
    2d30:	541a      	strb	r2, [r3, r0]
    2d32:	4aad      	ldr	r2, [pc, #692]	; (2fe8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x334>)
    2d34:	6011      	str	r1, [r2, #0]
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    2d36:	2208      	movs	r2, #8
    2d38:	839a      	strh	r2, [r3, #28]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    2d3a:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    2d3c:	0752      	lsls	r2, r2, #29
    2d3e:	d513      	bpl.n	2d68 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xb4>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    2d40:	2204      	movs	r2, #4
    2d42:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    2d44:	4ba9      	ldr	r3, [pc, #676]	; (2fec <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x338>)
    2d46:	781a      	ldrb	r2, [r3, #0]
    2d48:	2a00      	cmp	r2, #0
    2d4a:	d007      	beq.n	2d5c <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xa8>
			txLEDPulse--;
    2d4c:	781a      	ldrb	r2, [r3, #0]
    2d4e:	3a01      	subs	r2, #1
    2d50:	b2d2      	uxtb	r2, r2
    2d52:	701a      	strb	r2, [r3, #0]
			if (txLEDPulse == 0)
    2d54:	781b      	ldrb	r3, [r3, #0]
    2d56:	2b00      	cmp	r3, #0
    2d58:	d100      	bne.n	2d5c <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xa8>
    2d5a:	e128      	b.n	2fae <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2fa>
				digitalWrite(PIN_LED_TXL, HIGH);
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    2d5c:	4ba4      	ldr	r3, [pc, #656]	; (2ff0 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x33c>)
    2d5e:	781a      	ldrb	r2, [r3, #0]
    2d60:	2a00      	cmp	r2, #0
    2d62:	d000      	beq.n	2d66 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xb2>
    2d64:	e0f6      	b.n	2f54 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2a0>
    2d66:	683b      	ldr	r3, [r7, #0]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    2d68:	2208      	movs	r2, #8
    2d6a:	32ff      	adds	r2, #255	; 0xff
    2d6c:	5c99      	ldrb	r1, [r3, r2]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    2d6e:	06c9      	lsls	r1, r1, #27
    2d70:	d525      	bpl.n	2dbe <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x10a>
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    2d72:	2110      	movs	r1, #16
    2d74:	5499      	strb	r1, [r3, r2]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2d76:	2240      	movs	r2, #64	; 0x40
    2d78:	31f4      	adds	r1, #244	; 0xf4
    2d7a:	5c58      	ldrb	r0, [r3, r1]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    2d7c:	4d97      	ldr	r5, [pc, #604]	; (2fdc <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x328>)
    2d7e:	4302      	orrs	r2, r0
    2d80:	545a      	strb	r2, [r3, r1]
    2d82:	2260      	movs	r2, #96	; 0x60
    2d84:	782b      	ldrb	r3, [r5, #0]
    2d86:	421a      	tst	r2, r3
    2d88:	d000      	beq.n	2d8c <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xd8>
    2d8a:	e0ce      	b.n	2f2a <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x276>
			// Standard Requests
			ok = handleStandardSetup(*setup);
    2d8c:	0029      	movs	r1, r5
    2d8e:	0020      	movs	r0, r4
    2d90:	f7ff fed2 	bl	2b38 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    2d94:	2800      	cmp	r0, #0
    2d96:	d000      	beq.n	2d9a <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xe6>
    2d98:	e0d3      	b.n	2f42 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x28e>
{
	// TODO: test
	// TODO: use .bit. notation

	// Stall endpoint
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    2d9a:	2306      	movs	r3, #6
    2d9c:	2120      	movs	r1, #32
    2d9e:	4a95      	ldr	r2, [pc, #596]	; (2ff4 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x340>)
    2da0:	33ff      	adds	r3, #255	; 0xff
    2da2:	54d1      	strb	r1, [r2, r3]
    2da4:	683b      	ldr	r3, [r7, #0]
	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    2da6:	2208      	movs	r2, #8
    2da8:	32ff      	adds	r2, #255	; 0xff
    2daa:	5c99      	ldrb	r1, [r3, r2]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    2dac:	0649      	lsls	r1, r1, #25
    2dae:	d506      	bpl.n	2dbe <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x10a>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    2db0:	2140      	movs	r1, #64	; 0x40
    2db2:	5499      	strb	r1, [r3, r2]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    2db4:	2240      	movs	r2, #64	; 0x40
    2db6:	31c8      	adds	r1, #200	; 0xc8
    2db8:	5c58      	ldrb	r0, [r3, r1]
    2dba:	4302      	orrs	r2, r0
    2dbc:	545a      	strb	r2, [r3, r1]
	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    2dbe:	8c1d      	ldrh	r5, [r3, #32]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    2dc0:	23fe      	movs	r3, #254	; 0xfe
    2dc2:	401d      	ands	r5, r3
	while (ept_int != 0)
    2dc4:	d100      	bne.n	2dc8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x114>
    2dc6:	e088      	b.n	2eda <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x226>
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
    2dc8:	4b8b      	ldr	r3, [pc, #556]	; (2ff8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x344>)

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
	while (ept_int != 0)
    2dca:	2400      	movs	r4, #0
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
    2dcc:	4698      	mov	r8, r3
    2dce:	4b8b      	ldr	r3, [pc, #556]	; (2ffc <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x348>)
	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    2dd0:	2601      	movs	r6, #1
    2dd2:	4699      	mov	r9, r3
    2dd4:	002b      	movs	r3, r5
    2dd6:	4123      	asrs	r3, r4
    2dd8:	421e      	tst	r6, r3
    2dda:	d100      	bne.n	2dde <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x12a>
    2ddc:	e082      	b.n	2ee4 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x230>

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2dde:	0023      	movs	r3, r4
    2de0:	683a      	ldr	r2, [r7, #0]
    2de2:	3308      	adds	r3, #8
    2de4:	015b      	lsls	r3, r3, #5
    2de6:	18d3      	adds	r3, r2, r3
    2de8:	79d9      	ldrb	r1, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    2dea:	07c9      	lsls	r1, r1, #31
    2dec:	d402      	bmi.n	2df4 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x140>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    2dee:	79db      	ldrb	r3, [r3, #7]
    2df0:	079b      	lsls	r3, r3, #30
    2df2:	d569      	bpl.n	2ec8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x214>
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
    2df4:	4641      	mov	r1, r8
    2df6:	00a3      	lsls	r3, r4, #2
    2df8:	5858      	ldr	r0, [r3, r1]
    2dfa:	2800      	cmp	r0, #0
    2dfc:	d100      	bne.n	2e00 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x14c>
    2dfe:	e0b6      	b.n	2f6e <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2ba>
					epHandlers[i]->handleEndpoint();
    2e00:	6803      	ldr	r3, [r0, #0]
    2e02:	681b      	ldr	r3, [r3, #0]
    2e04:	454b      	cmp	r3, r9
    2e06:	d000      	beq.n	2e0a <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x156>
    2e08:	e0c3      	b.n	2f92 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2de>
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2e0a:	6843      	ldr	r3, [r0, #4]
    2e0c:	7a02      	ldrb	r2, [r0, #8]
    2e0e:	681b      	ldr	r3, [r3, #0]
    2e10:	21ff      	movs	r1, #255	; 0xff
    2e12:	469c      	mov	ip, r3
    2e14:	0013      	movs	r3, r2
    2e16:	3308      	adds	r3, #8
    2e18:	015b      	lsls	r3, r3, #5
    2e1a:	4463      	add	r3, ip
    2e1c:	79da      	ldrb	r2, [r3, #7]

	virtual void handleEndpoint()
	{
		// R/W : incoming, ready0/1
		//   W : last0/1, notify
		if (usbd.epBank0IsTransferComplete(ep))
    2e1e:	07d2      	lsls	r2, r2, #31
    2e20:	d552      	bpl.n	2ec8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x214>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    2e22:	71de      	strb	r6, [r3, #7]
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
    2e24:	6943      	ldr	r3, [r0, #20]
    2e26:	2b00      	cmp	r3, #0
    2e28:	d060      	beq.n	2eec <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x238>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2e2a:	6842      	ldr	r2, [r0, #4]
    2e2c:	6883      	ldr	r3, [r0, #8]
    2e2e:	4694      	mov	ip, r2
    2e30:	400b      	ands	r3, r1
    2e32:	015b      	lsls	r3, r3, #5
    2e34:	4463      	add	r3, ip
    2e36:	689a      	ldr	r2, [r3, #8]
    2e38:	0492      	lsls	r2, r2, #18
    2e3a:	0c92      	lsrs	r2, r2, #18
						return;
					}
					notify = false;
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
    2e3c:	6302      	str	r2, [r0, #48]	; 0x30
				incoming = 0;
    2e3e:	2200      	movs	r2, #0
    2e40:	6142      	str	r2, [r0, #20]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2e42:	6982      	ldr	r2, [r0, #24]
    2e44:	605a      	str	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e46:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2e4a:	b672      	cpsid	i
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
					ready1 = true;
    2e4c:	2334      	movs	r3, #52	; 0x34
    2e4e:	54c6      	strb	r6, [r0, r3]
					if (ready0) {
    2e50:	3b10      	subs	r3, #16
    2e52:	5cc3      	ldrb	r3, [r0, r3]
    2e54:	b2db      	uxtb	r3, r3
    2e56:	2b00      	cmp	r3, #0
    2e58:	d15f      	bne.n	2f1a <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x266>
						notify = true;
						return;
					}
					notify = false;
    2e5a:	2135      	movs	r1, #53	; 0x35
    2e5c:	5443      	strb	r3, [r0, r1]
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    2e5e:	2a00      	cmp	r2, #0
    2e60:	d102      	bne.n	2e68 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x1b4>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2e62:	b662      	cpsie	i
    2e64:	f3bf 8f6f 	isb	sy
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2e68:	6843      	ldr	r3, [r0, #4]
    2e6a:	681a      	ldr	r2, [r3, #0]
    2e6c:	7a03      	ldrb	r3, [r0, #8]
    2e6e:	015b      	lsls	r3, r3, #5
    2e70:	18d3      	adds	r3, r2, r3
    2e72:	2201      	movs	r2, #1
    2e74:	3309      	adds	r3, #9
    2e76:	33ff      	adds	r3, #255	; 0xff
    2e78:	7859      	ldrb	r1, [r3, #1]
    2e7a:	430a      	orrs	r2, r1
    2e7c:	705a      	strb	r2, [r3, #1]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2e7e:	6843      	ldr	r3, [r0, #4]
    2e80:	7a01      	ldrb	r1, [r0, #8]
    2e82:	469c      	mov	ip, r3
    2e84:	0149      	lsls	r1, r1, #5
    2e86:	4461      	add	r1, ip
    2e88:	688b      	ldr	r3, [r1, #8]
    2e8a:	469c      	mov	ip, r3
    2e8c:	68c3      	ldr	r3, [r0, #12]
    2e8e:	049a      	lsls	r2, r3, #18
    2e90:	0913      	lsrs	r3, r2, #4
    2e92:	469a      	mov	sl, r3
    2e94:	4662      	mov	r2, ip
    2e96:	4b53      	ldr	r3, [pc, #332]	; (2fe4 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x330>)
    2e98:	4013      	ands	r3, r2
    2e9a:	4652      	mov	r2, sl
    2e9c:	4313      	orrs	r3, r2
    2e9e:	608b      	str	r3, [r1, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2ea0:	6842      	ldr	r2, [r0, #4]
    2ea2:	7a03      	ldrb	r3, [r0, #8]
    2ea4:	4694      	mov	ip, r2
    2ea6:	015b      	lsls	r3, r3, #5
    2ea8:	4463      	add	r3, ip
    2eaa:	689a      	ldr	r2, [r3, #8]
    2eac:	0b92      	lsrs	r2, r2, #14
    2eae:	0392      	lsls	r2, r2, #14
    2eb0:	609a      	str	r2, [r3, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2eb2:	6843      	ldr	r3, [r0, #4]
    2eb4:	7a02      	ldrb	r2, [r0, #8]
    2eb6:	6819      	ldr	r1, [r3, #0]
    2eb8:	0013      	movs	r3, r2
    2eba:	2240      	movs	r2, #64	; 0x40
    2ebc:	3308      	adds	r3, #8
    2ebe:	015b      	lsls	r3, r3, #5
    2ec0:	18cb      	adds	r3, r1, r3
    2ec2:	7919      	ldrb	r1, [r3, #4]
    2ec4:	430a      	orrs	r2, r1
    2ec6:	711a      	strb	r2, [r3, #4]
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    2ec8:	0033      	movs	r3, r6
    2eca:	40a3      	lsls	r3, r4
    2ecc:	439d      	bics	r5, r3
		}
		i++;
		if (i > USB_EPT_NUM)
    2ece:	2c08      	cmp	r4, #8
    2ed0:	d003      	beq.n	2eda <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x226>
    2ed2:	3401      	adds	r4, #1

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
	while (ept_int != 0)
    2ed4:	2d00      	cmp	r5, #0
    2ed6:	d000      	beq.n	2eda <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x226>
    2ed8:	e77c      	b.n	2dd4 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x120>
		}
		i++;
		if (i > USB_EPT_NUM)
			break;  // fire exit
	}
}
    2eda:	bc1c      	pop	{r2, r3, r4}
    2edc:	4690      	mov	r8, r2
    2ede:	4699      	mov	r9, r3
    2ee0:	46a2      	mov	sl, r4
    2ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				}
			}
			ept_int &= ~(1 << i);
		}
		i++;
		if (i > USB_EPT_NUM)
    2ee4:	2c08      	cmp	r4, #8
    2ee6:	d0f8      	beq.n	2eda <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x226>
    2ee8:	3401      	adds	r4, #1
    2eea:	e773      	b.n	2dd4 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x120>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2eec:	6842      	ldr	r2, [r0, #4]
    2eee:	6883      	ldr	r3, [r0, #8]
    2ef0:	4694      	mov	ip, r2
    2ef2:	400b      	ands	r3, r1
    2ef4:	015b      	lsls	r3, r3, #5
    2ef6:	4463      	add	r3, ip
    2ef8:	689a      	ldr	r2, [r3, #8]
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
    2efa:	6146      	str	r6, [r0, #20]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2efc:	0492      	lsls	r2, r2, #18
    2efe:	0c92      	lsrs	r2, r2, #18
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
    2f00:	6202      	str	r2, [r0, #32]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2f02:	6a82      	ldr	r2, [r0, #40]	; 0x28
    2f04:	605a      	str	r2, [r3, #4]
			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
    2f06:	2324      	movs	r3, #36	; 0x24
    2f08:	54c6      	strb	r6, [r0, r3]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f0a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2f0e:	b672      	cpsid	i
				synchronized {
					if (ready1) {
    2f10:	3310      	adds	r3, #16
    2f12:	5cc3      	ldrb	r3, [r0, r3]
    2f14:	b2db      	uxtb	r3, r3
    2f16:	2b00      	cmp	r3, #0
    2f18:	d09f      	beq.n	2e5a <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x1a6>
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
					ready1 = true;
					if (ready0) {
						notify = true;
    2f1a:	2335      	movs	r3, #53	; 0x35
    2f1c:	54c6      	strb	r6, [r0, r3]
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
		__disable_irq();
	}
	~__Guard() {
		if (primask == 0) {
    2f1e:	2a00      	cmp	r2, #0
    2f20:	d1d2      	bne.n	2ec8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x214>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2f22:	b662      	cpsie	i
    2f24:	f3bf 8f6f 	isb	sy
    2f28:	e7ce      	b.n	2ec8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x214>
bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
	uint8_t i = setup.wIndex;

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
    2f2a:	792b      	ldrb	r3, [r5, #4]
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d132      	bne.n	2f96 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2e2>
	{
		if (CDC_Setup(setup) == false) {
    2f30:	0028      	movs	r0, r5
    2f32:	f7fe fd85 	bl	1a40 <_Z9CDC_SetupR8USBSetup>
    2f36:	2800      	cmp	r0, #0
    2f38:	d103      	bne.n	2f42 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x28e>

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2f3a:	69bb      	ldr	r3, [r7, #24]
    2f3c:	0b9b      	lsrs	r3, r3, #14
    2f3e:	039b      	lsls	r3, r3, #14
    2f40:	61bb      	str	r3, [r7, #24]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2f42:	2106      	movs	r1, #6
    2f44:	2080      	movs	r0, #128	; 0x80
    2f46:	683b      	ldr	r3, [r7, #0]
    2f48:	31ff      	adds	r1, #255	; 0xff
    2f4a:	5c5a      	ldrb	r2, [r3, r1]
    2f4c:	4240      	negs	r0, r0
    2f4e:	4302      	orrs	r2, r0
    2f50:	545a      	strb	r2, [r3, r1]
    2f52:	e728      	b.n	2da6 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xf2>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
			rxLEDPulse--;
    2f54:	781a      	ldrb	r2, [r3, #0]
    2f56:	3a01      	subs	r2, #1
    2f58:	b2d2      	uxtb	r2, r2
    2f5a:	701a      	strb	r2, [r3, #0]
			if (rxLEDPulse == 0)
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d000      	beq.n	2f64 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2b0>
    2f62:	e700      	b.n	2d66 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xb2>
				digitalWrite(PIN_LED_RXL, HIGH);
    2f64:	2101      	movs	r1, #1
    2f66:	2019      	movs	r0, #25
    2f68:	f000 f9fe 	bl	3368 <digitalWrite>
    2f6c:	e6fb      	b.n	2d66 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xb2>
    2f6e:	b2e3      	uxtb	r3, r4


void USBDeviceClass::handleEndpoint(uint8_t ep)
{
#if defined(CDC_ENABLED)
	if (ep == CDC_ENDPOINT_IN)
    2f70:	2c03      	cmp	r4, #3
    2f72:	d021      	beq.n	2fb8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x304>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_IN);
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_IN);
	}
	if (ep == CDC_ENDPOINT_ACM)
    2f74:	2b01      	cmp	r3, #1
    2f76:	d1a7      	bne.n	2ec8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x214>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2f78:	2192      	movs	r1, #146	; 0x92
    2f7a:	2080      	movs	r0, #128	; 0x80
    2f7c:	0049      	lsls	r1, r1, #1
    2f7e:	5c53      	ldrb	r3, [r2, r1]
    2f80:	4240      	negs	r0, r0
    2f82:	4303      	orrs	r3, r0
    2f84:	5453      	strb	r3, [r2, r1]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2f86:	2328      	movs	r3, #40	; 0x28
    2f88:	3923      	subs	r1, #35	; 0x23
    2f8a:	39ff      	subs	r1, #255	; 0xff
    2f8c:	33ff      	adds	r3, #255	; 0xff
    2f8e:	54d1      	strb	r1, [r2, r3]
    2f90:	e79a      	b.n	2ec8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x214>
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
					epHandlers[i]->handleEndpoint();
    2f92:	4798      	blx	r3
    2f94:	e798      	b.n	2ec8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x214>
		return true;
	}
	#endif

	#if defined(PLUGGABLE_USB_ENABLED)
	bool ret = PluggableUSB().setup(setup);
    2f96:	f001 fb61 	bl	465c <_Z12PluggableUSBv>
    2f9a:	0029      	movs	r1, r5
    2f9c:	f001 fb4a 	bl	4634 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    2fa0:	2800      	cmp	r0, #0
    2fa2:	d1ce      	bne.n	2f42 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x28e>

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2fa4:	69bb      	ldr	r3, [r7, #24]
    2fa6:	0b9b      	lsrs	r3, r3, #14
    2fa8:	039b      	lsls	r3, r3, #14
    2faa:	61bb      	str	r3, [r7, #24]
    2fac:	e6f5      	b.n	2d9a <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xe6>
		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
			txLEDPulse--;
			if (txLEDPulse == 0)
				digitalWrite(PIN_LED_TXL, HIGH);
    2fae:	2101      	movs	r1, #1
    2fb0:	201a      	movs	r0, #26
    2fb2:	f000 f9d9 	bl	3368 <digitalWrite>
    2fb6:	e6d1      	b.n	2d5c <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xa8>
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2fb8:	21b2      	movs	r1, #178	; 0xb2
    2fba:	2080      	movs	r0, #128	; 0x80
    2fbc:	0049      	lsls	r1, r1, #1
    2fbe:	5c53      	ldrb	r3, [r2, r1]
    2fc0:	4240      	negs	r0, r0
    2fc2:	4303      	orrs	r3, r0
    2fc4:	5453      	strb	r3, [r2, r1]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2fc6:	2368      	movs	r3, #104	; 0x68
    2fc8:	3963      	subs	r1, #99	; 0x63
    2fca:	39ff      	subs	r1, #255	; 0xff
    2fcc:	33ff      	adds	r3, #255	; 0xff
    2fce:	54d1      	strb	r1, [r2, r3]
    2fd0:	e77a      	b.n	2ec8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x214>
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	20000ac8 	.word	0x20000ac8
    2fd8:	8fffffff 	.word	0x8fffffff
    2fdc:	20000718 	.word	0x20000718
    2fe0:	200008d8 	.word	0x200008d8
    2fe4:	f0003fff 	.word	0xf0003fff
    2fe8:	20000bcc 	.word	0x20000bcc
    2fec:	20000a9a 	.word	0x20000a9a
    2ff0:	20000ac5 	.word	0x20000ac5
    2ff4:	41005000 	.word	0x41005000
    2ff8:	20000a9c 	.word	0x20000a9c
    2ffc:	00001c51 	.word	0x00001c51

00003000 <UDD_Handler>:
}

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    3000:	4b04      	ldr	r3, [pc, #16]	; (3014 <UDD_Handler+0x14>)
static char isEndpointHalt = 0;

extern void (*gpf_isr)(void);

// USB_Handler ISR
extern "C" void UDD_Handler(void) {
    3002:	b510      	push	{r4, lr}
}

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    3004:	781b      	ldrb	r3, [r3, #0]
    3006:	2b00      	cmp	r3, #0
    3008:	d102      	bne.n	3010 <UDD_Handler+0x10>
    300a:	4803      	ldr	r0, [pc, #12]	; (3018 <UDD_Handler+0x18>)
    300c:	f7ff fe52 	bl	2cb4 <_ZN14USBDeviceClass10ISRHandlerEv.part.10>
extern void (*gpf_isr)(void);

// USB_Handler ISR
extern "C" void UDD_Handler(void) {
	USBDevice.ISRHandler();
}
    3010:	bd10      	pop	{r4, pc}
    3012:	46c0      	nop			; (mov r8, r8)
    3014:	20000717 	.word	0x20000717
    3018:	20000ac4 	.word	0x20000ac4

0000301c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:

typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    301c:	4a01      	ldr	r2, [pc, #4]	; (3024 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    301e:	4b02      	ldr	r3, [pc, #8]	; (3028 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    3020:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    3022:	4770      	bx	lr
    3024:	41005000 	.word	0x41005000
    3028:	20000ac8 	.word	0x20000ac8

0000302c <init>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    302c:	21fa      	movs	r1, #250	; 0xfa
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    302e:	4b34      	ldr	r3, [pc, #208]	; (3100 <init+0xd4>)
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz.
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    3030:	b510      	push	{r4, lr}
    3032:	6818      	ldr	r0, [r3, #0]
    3034:	0089      	lsls	r1, r1, #2
    3036:	f002 fe3d 	bl	5cb4 <__aeabi_uidiv>
    303a:	4b32      	ldr	r3, [pc, #200]	; (3104 <init+0xd8>)
    303c:	3801      	subs	r0, #1
    303e:	4298      	cmp	r0, r3
    3040:	d900      	bls.n	3044 <init+0x18>
    3042:	e7fe      	b.n	3042 <init+0x16>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    3044:	4930      	ldr	r1, [pc, #192]	; (3108 <init+0xdc>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3046:	4a31      	ldr	r2, [pc, #196]	; (310c <init+0xe0>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    3048:	6048      	str	r0, [r1, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    304a:	20c0      	movs	r0, #192	; 0xc0
    304c:	6a13      	ldr	r3, [r2, #32]
    304e:	0600      	lsls	r0, r0, #24
    3050:	021b      	lsls	r3, r3, #8
    3052:	0a1b      	lsrs	r3, r3, #8
    3054:	4303      	orrs	r3, r0
    3056:	6213      	str	r3, [r2, #32]
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    3058:	2300      	movs	r3, #0
    305a:	608b      	str	r3, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    305c:	3307      	adds	r3, #7
    305e:	600b      	str	r3, [r1, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3060:	2180      	movs	r1, #128	; 0x80
    3062:	6a13      	ldr	r3, [r2, #32]
    3064:	0609      	lsls	r1, r1, #24
    3066:	021b      	lsls	r3, r3, #8
    3068:	0a1b      	lsrs	r3, r3, #8
    306a:	430b      	orrs	r3, r1
    306c:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    306e:	22fc      	movs	r2, #252	; 0xfc
    3070:	4b27      	ldr	r3, [pc, #156]	; (3110 <init+0xe4>)
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    3072:	2400      	movs	r4, #0
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    3074:	6a19      	ldr	r1, [r3, #32]
    3076:	430a      	orrs	r2, r1

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    3078:	21fc      	movs	r1, #252	; 0xfc
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    307a:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    307c:	6a1a      	ldr	r2, [r3, #32]
    307e:	0189      	lsls	r1, r1, #6
    3080:	430a      	orrs	r2, r1

  // ATSAMR, for example, doesn't have a DAC
#ifdef PM_APBCMASK_DAC
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    3082:	21a0      	movs	r1, #160	; 0xa0

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    3084:	621a      	str	r2, [r3, #32]

  // ATSAMR, for example, doesn't have a DAC
#ifdef PM_APBCMASK_DAC
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    3086:	6a1a      	ldr	r2, [r3, #32]
    3088:	02c9      	lsls	r1, r1, #11
    308a:	430a      	orrs	r2, r1
    308c:	621a      	str	r2, [r3, #32]
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    308e:	0020      	movs	r0, r4
    3090:	2100      	movs	r1, #0
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    3092:	3401      	adds	r4, #1
  {
    pinMode( ul, INPUT ) ;
    3094:	f000 f918 	bl	32c8 <pinMode>
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    3098:	2c14      	cmp	r4, #20
    309a:	d1f8      	bne.n	308e <init+0x62>
    pinMode( ul, INPUT ) ;
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    309c:	4a1d      	ldr	r2, [pc, #116]	; (3114 <init+0xe8>)
    309e:	7853      	ldrb	r3, [r2, #1]
    30a0:	b25b      	sxtb	r3, r3
    30a2:	2b00      	cmp	r3, #0
    30a4:	dbfb      	blt.n	309e <init+0x72>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    30a6:	4a1c      	ldr	r2, [pc, #112]	; (3118 <init+0xec>)
    30a8:	4b1a      	ldr	r3, [pc, #104]	; (3114 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    30aa:	491c      	ldr	r1, [pc, #112]	; (311c <init+0xf0>)

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    30ac:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    30ae:	7e4a      	ldrb	r2, [r1, #25]
    30b0:	4b1a      	ldr	r3, [pc, #104]	; (311c <init+0xf0>)
    30b2:	09d2      	lsrs	r2, r2, #7
    30b4:	2a01      	cmp	r2, #1
    30b6:	d0fa      	beq.n	30ae <init+0x82>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    30b8:	22e4      	movs	r2, #228	; 0xe4
    30ba:	00d2      	lsls	r2, r2, #3
    30bc:	809a      	strh	r2, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    30be:	223f      	movs	r2, #63	; 0x3f
    30c0:	70da      	strb	r2, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    30c2:	7e5a      	ldrb	r2, [r3, #25]
    30c4:	4915      	ldr	r1, [pc, #84]	; (311c <init+0xf0>)
    30c6:	09d2      	lsrs	r2, r2, #7
    30c8:	2a01      	cmp	r2, #1
    30ca:	d0fa      	beq.n	30c2 <init+0x96>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    30cc:	23c0      	movs	r3, #192	; 0xc0
    30ce:	015b      	lsls	r3, r3, #5
    30d0:	610b      	str	r3, [r1, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    30d2:	2300      	movs	r3, #0
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    30d4:	2000      	movs	r0, #0
  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    30d6:	708b      	strb	r3, [r1, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    30d8:	f000 f82c 	bl	3134 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    30dc:	4a0d      	ldr	r2, [pc, #52]	; (3114 <init+0xe8>)
    30de:	7853      	ldrb	r3, [r2, #1]
    30e0:	b25b      	sxtb	r3, r3
    30e2:	2b00      	cmp	r3, #0
    30e4:	dbfb      	blt.n	30de <init+0xb2>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    30e6:	4a0e      	ldr	r2, [pc, #56]	; (3120 <init+0xf4>)
    30e8:	4b0a      	ldr	r3, [pc, #40]	; (3114 <init+0xe8>)
    30ea:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    30ec:	4a0d      	ldr	r2, [pc, #52]	; (3124 <init+0xf8>)
    30ee:	79d3      	ldrb	r3, [r2, #7]
    30f0:	09db      	lsrs	r3, r3, #7
    30f2:	2b01      	cmp	r3, #1
    30f4:	d0fb      	beq.n	30ee <init+0xc2>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    30f6:	2241      	movs	r2, #65	; 0x41
    30f8:	4b0a      	ldr	r3, [pc, #40]	; (3124 <init+0xf8>)
    30fa:	705a      	strb	r2, [r3, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
#endif

}
    30fc:	bd10      	pop	{r4, pc}
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	20000084 	.word	0x20000084
    3104:	00ffffff 	.word	0x00ffffff
    3108:	e000e010 	.word	0xe000e010
    310c:	e000ed00 	.word	0xe000ed00
    3110:	40000400 	.word	0x40000400
    3114:	40000c00 	.word	0x40000c00
    3118:	0000401e 	.word	0x0000401e
    311c:	42004000 	.word	0x42004000
    3120:	00004021 	.word	0x00004021
    3124:	42004800 	.word	0x42004800

00003128 <analogWriteResolution>:
  syncADC();
}

void analogWriteResolution(int res)
{
  _writeResolution = res;
    3128:	4b01      	ldr	r3, [pc, #4]	; (3130 <analogWriteResolution+0x8>)
    312a:	6018      	str	r0, [r3, #0]
}
    312c:	4770      	bx	lr
    312e:	46c0      	nop			; (mov r8, r8)
    3130:	2000008c 	.word	0x2000008c

00003134 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3134:	4a1f      	ldr	r2, [pc, #124]	; (31b4 <analogReference+0x80>)
    3136:	7e53      	ldrb	r3, [r2, #25]
    3138:	09db      	lsrs	r3, r3, #7
    313a:	2b01      	cmp	r3, #1
    313c:	d0fb      	beq.n	3136 <analogReference+0x2>
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
  syncADC();
  switch (mode)
    313e:	2805      	cmp	r0, #5
    3140:	d831      	bhi.n	31a6 <analogReference+0x72>
    3142:	4b1d      	ldr	r3, [pc, #116]	; (31b8 <analogReference+0x84>)
    3144:	0080      	lsls	r0, r0, #2
    3146:	581b      	ldr	r3, [r3, r0]
    3148:	469f      	mov	pc, r3
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    314a:	4b1a      	ldr	r3, [pc, #104]	; (31b4 <analogReference+0x80>)
    314c:	4a1b      	ldr	r2, [pc, #108]	; (31bc <analogReference+0x88>)
    314e:	6919      	ldr	r1, [r3, #16]
    3150:	400a      	ands	r2, r1
      break;

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    3152:	210f      	movs	r1, #15
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    3154:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    3156:	785a      	ldrb	r2, [r3, #1]
    3158:	438a      	bics	r2, r1
    315a:	2102      	movs	r1, #2
    315c:	430a      	orrs	r2, r1
    315e:	705a      	strb	r2, [r3, #1]
      break;
  }
}
    3160:	4770      	bx	lr
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
      break;

    case AR_INTERNAL1V0:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    3162:	4b14      	ldr	r3, [pc, #80]	; (31b4 <analogReference+0x80>)
    3164:	4a15      	ldr	r2, [pc, #84]	; (31bc <analogReference+0x88>)
    3166:	6919      	ldr	r1, [r3, #16]
    3168:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
    316a:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
      break;

    case AR_INTERNAL1V0:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    316c:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
    316e:	785a      	ldrb	r2, [r3, #1]
    3170:	438a      	bics	r2, r1
    3172:	705a      	strb	r2, [r3, #1]
      break;
    3174:	e7f4      	b.n	3160 <analogReference+0x2c>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
      break;

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    3176:	4b0f      	ldr	r3, [pc, #60]	; (31b4 <analogReference+0x80>)
    3178:	4a10      	ldr	r2, [pc, #64]	; (31bc <analogReference+0x88>)
    317a:	6919      	ldr	r1, [r3, #16]
    317c:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    317e:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
      break;

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    3180:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    3182:	785a      	ldrb	r2, [r3, #1]
    3184:	438a      	bics	r2, r1
    3186:	2103      	movs	r1, #3
    3188:	430a      	orrs	r2, r1
    318a:	705a      	strb	r2, [r3, #1]
      break;
    318c:	e7e8      	b.n	3160 <analogReference+0x2c>
  syncADC();
  switch (mode)
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    318e:	4b09      	ldr	r3, [pc, #36]	; (31b4 <analogReference+0x80>)
    3190:	4a0a      	ldr	r2, [pc, #40]	; (31bc <analogReference+0x88>)
    3192:	6919      	ldr	r1, [r3, #16]
    3194:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    3196:	210f      	movs	r1, #15
  syncADC();
  switch (mode)
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    3198:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    319a:	785a      	ldrb	r2, [r3, #1]
    319c:	438a      	bics	r2, r1
    319e:	2101      	movs	r1, #1
    31a0:	430a      	orrs	r2, r1
    31a2:	705a      	strb	r2, [r3, #1]
      break;
    31a4:	e7dc      	b.n	3160 <analogReference+0x2c>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    31a6:	21f0      	movs	r1, #240	; 0xf0
    31a8:	4b02      	ldr	r3, [pc, #8]	; (31b4 <analogReference+0x80>)
    31aa:	0509      	lsls	r1, r1, #20
    31ac:	691a      	ldr	r2, [r3, #16]
    31ae:	430a      	orrs	r2, r1
    31b0:	e7cf      	b.n	3152 <analogReference+0x1e>
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	42004000 	.word	0x42004000
    31b8:	00007fe4 	.word	0x00007fe4
    31bc:	f0ffffff 	.word	0xf0ffffff

000031c0 <analogRead>:
      break;
  }
}

uint32_t analogRead(uint32_t pin)
{
    31c0:	b510      	push	{r4, lr}
    31c2:	1e04      	subs	r4, r0, #0
  uint32_t valueRead = 0;

#if defined(PIN_A6)
  if (pin == 6) {
    31c4:	2c06      	cmp	r4, #6
    31c6:	d100      	bne.n	31ca <analogRead+0xa>
    31c8:	e06b      	b.n	32a2 <analogRead+0xe2>
    pin = PIN_A6;
  } else
#endif
#if defined(PIN_A7)
  if (pin == 7) {
    31ca:	2807      	cmp	r0, #7
    31cc:	d100      	bne.n	31d0 <analogRead+0x10>
    31ce:	e06e      	b.n	32ae <analogRead+0xee>
    pin = PIN_A7;
  } else 
#endif
  if (pin <= 5) {
    31d0:	2805      	cmp	r0, #5
    31d2:	d800      	bhi.n	31d6 <analogRead+0x16>
    pin += A0;
    31d4:	340e      	adds	r4, #14
  }

  pinPeripheral(pin, PIO_ANALOG);
    31d6:	2101      	movs	r1, #1
    31d8:	0020      	movs	r0, r4
    31da:	f000 f8f3 	bl	33c4 <pinPeripheral>

 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
  if (pin == A0) { // Disable DAC, if analogWrite(A0,dval) used previously the DAC is enabled
    31de:	2c0e      	cmp	r4, #14
    31e0:	d10d      	bne.n	31fe <analogRead+0x3e>
 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
// Wait for synchronization of registers between the clock domains
static __inline__ void syncDAC() __attribute__((always_inline, unused));
static void syncDAC() {
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    31e2:	4934      	ldr	r1, [pc, #208]	; (32b4 <analogRead+0xf4>)
    31e4:	79cb      	ldrb	r3, [r1, #7]
    31e6:	4a33      	ldr	r2, [pc, #204]	; (32b4 <analogRead+0xf4>)
    31e8:	09db      	lsrs	r3, r3, #7
    31ea:	2b01      	cmp	r3, #1
    31ec:	d0fa      	beq.n	31e4 <analogRead+0x24>

 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
  if (pin == A0) { // Disable DAC, if analogWrite(A0,dval) used previously the DAC is enabled
    syncDAC();
    DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
    31ee:	2102      	movs	r1, #2
    31f0:	7813      	ldrb	r3, [r2, #0]
    31f2:	438b      	bics	r3, r1
    31f4:	7013      	strb	r3, [r2, #0]
 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
// Wait for synchronization of registers between the clock domains
static __inline__ void syncDAC() __attribute__((always_inline, unused));
static void syncDAC() {
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    31f6:	79d3      	ldrb	r3, [r2, #7]
    31f8:	09db      	lsrs	r3, r3, #7
    31fa:	2b01      	cmp	r3, #1
    31fc:	d0fb      	beq.n	31f6 <analogRead+0x36>
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    31fe:	492e      	ldr	r1, [pc, #184]	; (32b8 <analogRead+0xf8>)
    3200:	7e4b      	ldrb	r3, [r1, #25]
    3202:	4a2d      	ldr	r2, [pc, #180]	; (32b8 <analogRead+0xf8>)
    3204:	09db      	lsrs	r3, r3, #7
    3206:	2b01      	cmp	r3, #1
    3208:	d0fa      	beq.n	3200 <analogRead+0x40>
    syncDAC();
  }
#endif

  syncADC();
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[pin].ulADCChannelNumber; // Selection for the positive ADC input
    320a:	201f      	movs	r0, #31
    320c:	0063      	lsls	r3, r4, #1
    320e:	191c      	adds	r4, r3, r4
    3210:	4b2a      	ldr	r3, [pc, #168]	; (32bc <analogRead+0xfc>)
    3212:	00e4      	lsls	r4, r4, #3
    3214:	191c      	adds	r4, r3, r4
    3216:	7c21      	ldrb	r1, [r4, #16]
    3218:	6913      	ldr	r3, [r2, #16]
    321a:	4001      	ands	r1, r0
    321c:	4383      	bics	r3, r0
    321e:	430b      	orrs	r3, r1
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3220:	0011      	movs	r1, r2
    syncDAC();
  }
#endif

  syncADC();
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[pin].ulADCChannelNumber; // Selection for the positive ADC input
    3222:	6113      	str	r3, [r2, #16]
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3224:	7e4b      	ldrb	r3, [r1, #25]
    3226:	4a24      	ldr	r2, [pc, #144]	; (32b8 <analogRead+0xf8>)
    3228:	09db      	lsrs	r3, r3, #7
    322a:	2b01      	cmp	r3, #1
    322c:	d0fa      	beq.n	3224 <analogRead+0x64>
   *
   * Before enabling the ADC, the asynchronous clock source must be selected and enabled, and the ADC reference must be
   * configured. The first conversion after the reference is changed must not be used.
   */
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    322e:	2302      	movs	r3, #2
    3230:	7811      	ldrb	r1, [r2, #0]
    3232:	430b      	orrs	r3, r1
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3234:	0011      	movs	r1, r2
   *
   * Before enabling the ADC, the asynchronous clock source must be selected and enabled, and the ADC reference must be
   * configured. The first conversion after the reference is changed must not be used.
   */
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    3236:	7013      	strb	r3, [r2, #0]
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3238:	7e4b      	ldrb	r3, [r1, #25]
    323a:	4a1f      	ldr	r2, [pc, #124]	; (32b8 <analogRead+0xf8>)
    323c:	09db      	lsrs	r3, r3, #7
    323e:	2b01      	cmp	r3, #1
    3240:	d0fa      	beq.n	3238 <analogRead+0x78>
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC

  // Start conversion
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    3242:	2302      	movs	r3, #2
    3244:	7b11      	ldrb	r1, [r2, #12]
    3246:	430b      	orrs	r3, r1
    3248:	7313      	strb	r3, [r2, #12]

  // Clear the Data Ready flag
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    324a:	2301      	movs	r3, #1
    324c:	7613      	strb	r3, [r2, #24]
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    324e:	7e53      	ldrb	r3, [r2, #25]
    3250:	4919      	ldr	r1, [pc, #100]	; (32b8 <analogRead+0xf8>)
    3252:	09db      	lsrs	r3, r3, #7
    3254:	2b01      	cmp	r3, #1
    3256:	d0fa      	beq.n	324e <analogRead+0x8e>
  // Clear the Data Ready flag
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;

  // Start conversion again, since The first conversion after the reference is changed must not be used.
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    3258:	2302      	movs	r3, #2
    325a:	7b0a      	ldrb	r2, [r1, #12]
    325c:	4313      	orrs	r3, r2
    325e:	730b      	strb	r3, [r1, #12]

  // Store the value
  while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    3260:	7e0a      	ldrb	r2, [r1, #24]
    3262:	4b15      	ldr	r3, [pc, #84]	; (32b8 <analogRead+0xf8>)
    3264:	07d2      	lsls	r2, r2, #31
    3266:	d5fb      	bpl.n	3260 <analogRead+0xa0>
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3268:	0019      	movs	r1, r3
  syncADC();
  ADC->SWTRIG.bit.START = 1;

  // Store the value
  while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
  valueRead = ADC->RESULT.reg;
    326a:	8b58      	ldrh	r0, [r3, #26]
    326c:	b280      	uxth	r0, r0
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    326e:	7e4b      	ldrb	r3, [r1, #25]
    3270:	4a11      	ldr	r2, [pc, #68]	; (32b8 <analogRead+0xf8>)
    3272:	09db      	lsrs	r3, r3, #7
    3274:	2b01      	cmp	r3, #1
    3276:	d0fa      	beq.n	326e <analogRead+0xae>
  // Store the value
  while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
  valueRead = ADC->RESULT.reg;

  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3278:	2102      	movs	r1, #2
    327a:	7813      	ldrb	r3, [r2, #0]
    327c:	438b      	bics	r3, r1
    327e:	7013      	strb	r3, [r2, #0]
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3280:	7e53      	ldrb	r3, [r2, #25]
    3282:	09db      	lsrs	r3, r3, #7
    3284:	2b01      	cmp	r3, #1
    3286:	d0fb      	beq.n	3280 <analogRead+0xc0>

  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
  syncADC();

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    3288:	4b0d      	ldr	r3, [pc, #52]	; (32c0 <analogRead+0x100>)
    328a:	681a      	ldr	r2, [r3, #0]
    328c:	4b0d      	ldr	r3, [pc, #52]	; (32c4 <analogRead+0x104>)
    328e:	681b      	ldr	r3, [r3, #0]
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    3290:	429a      	cmp	r2, r3
    3292:	d002      	beq.n	329a <analogRead+0xda>
    return value;
  }
  if (from > to) {
    3294:	d802      	bhi.n	329c <analogRead+0xdc>
    return value >> (from-to);
  }
  return value << (to-from);
    3296:	1a9b      	subs	r3, r3, r2
    3298:	4098      	lsls	r0, r3
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
  syncADC();

  return mapResolution(valueRead, _ADCResolution, _readResolution);
}
    329a:	bd10      	pop	{r4, pc}
{
  if (from == to) {
    return value;
  }
  if (from > to) {
    return value >> (from-to);
    329c:	1ad3      	subs	r3, r2, r3
    329e:	40d8      	lsrs	r0, r3
    32a0:	e7fb      	b.n	329a <analogRead+0xda>
{
  uint32_t valueRead = 0;

#if defined(PIN_A6)
  if (pin == 6) {
    pin = PIN_A6;
    32a2:	242c      	movs	r4, #44	; 0x2c
#endif
  if (pin <= 5) {
    pin += A0;
  }

  pinPeripheral(pin, PIO_ANALOG);
    32a4:	2101      	movs	r1, #1
    32a6:	0020      	movs	r0, r4
    32a8:	f000 f88c 	bl	33c4 <pinPeripheral>
    32ac:	e7a7      	b.n	31fe <analogRead+0x3e>
    pin = PIN_A6;
  } else
#endif
#if defined(PIN_A7)
  if (pin == 7) {
    pin = PIN_A7;
    32ae:	242d      	movs	r4, #45	; 0x2d
    32b0:	e7f8      	b.n	32a4 <analogRead+0xe4>
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	42004800 	.word	0x42004800
    32b8:	42004000 	.word	0x42004000
    32bc:	0000804c 	.word	0x0000804c
    32c0:	20000088 	.word	0x20000088
    32c4:	20000090 	.word	0x20000090

000032c8 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    32c8:	b510      	push	{r4, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    32ca:	2408      	movs	r4, #8
    32cc:	0043      	lsls	r3, r0, #1
    32ce:	1818      	adds	r0, r3, r0
    32d0:	4a23      	ldr	r2, [pc, #140]	; (3360 <pinMode+0x98>)
    32d2:	00c0      	lsls	r0, r0, #3
    32d4:	1813      	adds	r3, r2, r0
    32d6:	571c      	ldrsb	r4, [r3, r4]
    32d8:	3401      	adds	r4, #1
    32da:	d015      	beq.n	3308 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    32dc:	2901      	cmp	r1, #1
    32de:	d031      	beq.n	3344 <pinMode+0x7c>
    32e0:	2900      	cmp	r1, #0
    32e2:	d012      	beq.n	330a <pinMode+0x42>
    32e4:	2902      	cmp	r1, #2
    32e6:	d01e      	beq.n	3326 <pinMode+0x5e>
    32e8:	2903      	cmp	r1, #3
    32ea:	d10d      	bne.n	3308 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    32ec:	5682      	ldrsb	r2, [r0, r2]
    32ee:	6859      	ldr	r1, [r3, #4]
    32f0:	01d3      	lsls	r3, r2, #7
    32f2:	4a1c      	ldr	r2, [pc, #112]	; (3364 <pinMode+0x9c>)
    32f4:	2006      	movs	r0, #6
    32f6:	4694      	mov	ip, r2
    32f8:	4463      	add	r3, ip
    32fa:	185a      	adds	r2, r3, r1
    32fc:	3240      	adds	r2, #64	; 0x40
    32fe:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    3300:	2201      	movs	r2, #1
    3302:	408a      	lsls	r2, r1
    3304:	605a      	str	r2, [r3, #4]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.6 Data Output Value Clear')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    3306:	615a      	str	r2, [r3, #20]

    default:
      // do nothing
    break ;
  }
}
    3308:	bd10      	pop	{r4, pc}
  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
  {
    case INPUT:
      // Set pin to input mode
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    330a:	5682      	ldrsb	r2, [r0, r2]
    330c:	6859      	ldr	r1, [r3, #4]
    330e:	01d3      	lsls	r3, r2, #7
    3310:	4a14      	ldr	r2, [pc, #80]	; (3364 <pinMode+0x9c>)
    3312:	2002      	movs	r0, #2
    3314:	4694      	mov	ip, r2
    3316:	4463      	add	r3, ip
    3318:	185a      	adds	r2, r3, r1
    331a:	3240      	adds	r2, #64	; 0x40
    331c:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    331e:	2201      	movs	r2, #1
    3320:	408a      	lsls	r2, r1
    3322:	605a      	str	r2, [r3, #4]
    break ;
    3324:	e7f0      	b.n	3308 <pinMode+0x40>

    case INPUT_PULLUP:
      // Set pin to input mode with pull-up resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    3326:	5682      	ldrsb	r2, [r0, r2]
    3328:	6859      	ldr	r1, [r3, #4]
    332a:	01d3      	lsls	r3, r2, #7
    332c:	4a0d      	ldr	r2, [pc, #52]	; (3364 <pinMode+0x9c>)
    332e:	2006      	movs	r0, #6
    3330:	4694      	mov	ip, r2
    3332:	4463      	add	r3, ip
    3334:	185a      	adds	r2, r3, r1
    3336:	3240      	adds	r2, #64	; 0x40
    3338:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    333a:	2201      	movs	r2, #1
    333c:	408a      	lsls	r2, r1
    333e:	605a      	str	r2, [r3, #4]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.7 Data Output Value Set')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    3340:	619a      	str	r2, [r3, #24]
    break ;
    3342:	e7e1      	b.n	3308 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case OUTPUT:
      // enable input, to support reading back values, with pullups disabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    3344:	5682      	ldrsb	r2, [r0, r2]
    3346:	6858      	ldr	r0, [r3, #4]
    3348:	01d3      	lsls	r3, r2, #7
    334a:	4a06      	ldr	r2, [pc, #24]	; (3364 <pinMode+0x9c>)
    334c:	2402      	movs	r4, #2
    334e:	4694      	mov	ip, r2

      // Set pin to output mode
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    3350:	4081      	lsls	r1, r0
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case OUTPUT:
      // enable input, to support reading back values, with pullups disabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    3352:	4463      	add	r3, ip
    3354:	181a      	adds	r2, r3, r0
    3356:	3240      	adds	r2, #64	; 0x40
    3358:	7014      	strb	r4, [r2, #0]

      // Set pin to output mode
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    335a:	6099      	str	r1, [r3, #8]
    break ;
    335c:	e7d4      	b.n	3308 <pinMode+0x40>
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	0000804c 	.word	0x0000804c
    3364:	41004400 	.word	0x41004400

00003368 <digitalWrite>:
    break ;
  }
}

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    3368:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    336a:	2408      	movs	r4, #8
    336c:	0042      	lsls	r2, r0, #1
    336e:	1810      	adds	r0, r2, r0
    3370:	4b12      	ldr	r3, [pc, #72]	; (33bc <digitalWrite+0x54>)
    3372:	00c0      	lsls	r0, r0, #3
    3374:	181a      	adds	r2, r3, r0
    3376:	5714      	ldrsb	r4, [r2, r4]
    3378:	3401      	adds	r4, #1
    337a:	d01c      	beq.n	33b6 <digitalWrite+0x4e>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    337c:	2601      	movs	r6, #1
    337e:	0035      	movs	r5, r6
  {
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    3380:	6852      	ldr	r2, [r2, #4]
  uint32_t pinMask = (1ul << pin);

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    3382:	56c3      	ldrsb	r3, [r0, r3]
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    3384:	4095      	lsls	r5, r2

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    3386:	480e      	ldr	r0, [pc, #56]	; (33c0 <digitalWrite+0x58>)
    3388:	01db      	lsls	r3, r3, #7
    338a:	1818      	adds	r0, r3, r0
    338c:	6884      	ldr	r4, [r0, #8]
    338e:	422c      	tst	r4, r5
    3390:	d10b      	bne.n	33aa <digitalWrite+0x42>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    3392:	000c      	movs	r4, r1
    3394:	1e67      	subs	r7, r4, #1
    3396:	41bc      	sbcs	r4, r7
    3398:	1882      	adds	r2, r0, r2
    339a:	3240      	adds	r2, #64	; 0x40
    339c:	7810      	ldrb	r0, [r2, #0]
    339e:	4034      	ands	r4, r6
    33a0:	3603      	adds	r6, #3
    33a2:	00a4      	lsls	r4, r4, #2
    33a4:	43b0      	bics	r0, r6
    33a6:	4320      	orrs	r0, r4
    33a8:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    33aa:	4a05      	ldr	r2, [pc, #20]	; (33c0 <digitalWrite+0x58>)
    33ac:	4694      	mov	ip, r2
    33ae:	4463      	add	r3, ip
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
  }

  switch ( ulVal )
    33b0:	2900      	cmp	r1, #0
    33b2:	d001      	beq.n	33b8 <digitalWrite+0x50>
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    break ;

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    33b4:	619d      	str	r5, [r3, #24]
    break ;
  }

  return ;
}
    33b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    33b8:	615d      	str	r5, [r3, #20]
    break ;
    33ba:	e7fc      	b.n	33b6 <digitalWrite+0x4e>
    33bc:	0000804c 	.word	0x0000804c
    33c0:	41004400 	.word	0x41004400

000033c4 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    33c4:	b570      	push	{r4, r5, r6, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    33c6:	2408      	movs	r4, #8
    33c8:	0045      	lsls	r5, r0, #1
    33ca:	4a24      	ldr	r2, [pc, #144]	; (345c <pinPeripheral+0x98>)
    33cc:	182b      	adds	r3, r5, r0
    33ce:	00db      	lsls	r3, r3, #3
    33d0:	18d3      	adds	r3, r2, r3
    33d2:	571c      	ldrsb	r4, [r3, r4]
    33d4:	1c63      	adds	r3, r4, #1
    33d6:	d011      	beq.n	33fc <pinPeripheral+0x38>
  {
    return -1 ;
  }

  switch ( ulPeripheral )
    33d8:	1c4b      	adds	r3, r1, #1
    33da:	b2db      	uxtb	r3, r3
    33dc:	2b0c      	cmp	r3, #12
    33de:	d82c      	bhi.n	343a <pinPeripheral+0x76>
    33e0:	4c1f      	ldr	r4, [pc, #124]	; (3460 <pinPeripheral+0x9c>)
    33e2:	009b      	lsls	r3, r3, #2
    33e4:	58e3      	ldr	r3, [r4, r3]
    33e6:	469f      	mov	pc, r3
    case PIO_OUTPUT:
      // Disable peripheral muxing, done in pinMode
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
    33e8:	2909      	cmp	r1, #9
    33ea:	d02d      	beq.n	3448 <pinPeripheral+0x84>
      {
        pinMode( ulPin, INPUT ) ;
      }
      else
      {
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    33ec:	290a      	cmp	r1, #10
    33ee:	d030      	beq.n	3452 <pinPeripheral+0x8e>
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    33f0:	2400      	movs	r4, #0
        {
          pinMode( ulPin, INPUT_PULLUP ) ;
        }
        else
        {
          if ( ulPeripheral == PIO_OUTPUT )
    33f2:	290b      	cmp	r1, #11
    33f4:	d102      	bne.n	33fc <pinPeripheral+0x38>
          {
            pinMode( ulPin, OUTPUT ) ;
    33f6:	390a      	subs	r1, #10
    33f8:	f7ff ff66 	bl	32c8 <pinMode>
      return -1l ;
    break ;
  }

  return 0l ;
}
    33fc:	0020      	movs	r0, r4
    33fe:	bd70      	pop	{r4, r5, r6, pc}
      }
#endif
    break ;

    case PIO_NOT_A_PIN:
      return -1l ;
    3400:	2401      	movs	r4, #1
    3402:	4264      	negs	r4, r4
    3404:	e7fa      	b.n	33fc <pinPeripheral+0x38>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3406:	4c17      	ldr	r4, [pc, #92]	; (3464 <pinPeripheral+0xa0>)
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    3408:	1828      	adds	r0, r5, r0
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    340a:	46a4      	mov	ip, r4
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    340c:	00c0      	lsls	r0, r0, #3
    340e:	1813      	adds	r3, r2, r0
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3410:	5682      	ldrsb	r2, [r0, r2]
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    3412:	685b      	ldr	r3, [r3, #4]
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3414:	01d2      	lsls	r2, r2, #7
    3416:	0858      	lsrs	r0, r3, #1
    3418:	4462      	add	r2, ip
    341a:	1810      	adds	r0, r2, r0
    341c:	3030      	adds	r0, #48	; 0x30
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    341e:	07dc      	lsls	r4, r3, #31
    3420:	d40d      	bmi.n	343e <pinPeripheral+0x7a>
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    3422:	250f      	movs	r5, #15
      }
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    3424:	7804      	ldrb	r4, [r0, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    3426:	43ac      	bics	r4, r5
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    3428:	18d3      	adds	r3, r2, r3
    342a:	2201      	movs	r2, #1
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    342c:	4321      	orrs	r1, r4
    342e:	b2c9      	uxtb	r1, r1
    3430:	7001      	strb	r1, [r0, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    3432:	3340      	adds	r3, #64	; 0x40
    3434:	7819      	ldrb	r1, [r3, #0]
    3436:	430a      	orrs	r2, r1
    3438:	701a      	strb	r2, [r3, #0]
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    343a:	2400      	movs	r4, #0
    343c:	e7de      	b.n	33fc <pinPeripheral+0x38>
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    343e:	250f      	movs	r5, #15
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3440:	7804      	ldrb	r4, [r0, #0]
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    3442:	0109      	lsls	r1, r1, #4
    3444:	402c      	ands	r4, r5
    3446:	e7ef      	b.n	3428 <pinPeripheral+0x64>
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
      {
        pinMode( ulPin, INPUT ) ;
    3448:	2100      	movs	r1, #0
    344a:	f7ff ff3d 	bl	32c8 <pinMode>
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    344e:	2400      	movs	r4, #0
    3450:	e7d4      	b.n	33fc <pinPeripheral+0x38>
      }
      else
      {
        if ( ulPeripheral == PIO_INPUT_PULLUP )
        {
          pinMode( ulPin, INPUT_PULLUP ) ;
    3452:	3908      	subs	r1, #8
    3454:	f7ff ff38 	bl	32c8 <pinMode>
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    3458:	2400      	movs	r4, #0
    345a:	e7cf      	b.n	33fc <pinPeripheral+0x38>
    345c:	0000804c 	.word	0x0000804c
    3460:	00007ffc 	.word	0x00007ffc
    3464:	41004400 	.word	0x41004400

00003468 <_ZN10arduinoFFTC1Ev>:
#include "arduinoFFT.h"

arduinoFFT::arduinoFFT(void)
{
/* Constructor */
}
    3468:	4770      	bx	lr
    346a:	46c0      	nop			; (mov r8, r8)

0000346c <_ZN10arduinoFFTD1Ev>:

arduinoFFT::~arduinoFFT(void)
{
/* Destructor */
}
    346c:	4770      	bx	lr
    346e:	46c0      	nop			; (mov r8, r8)

00003470 <_ZN10arduinoFFT7ComputeEPdS0_thh>:
{
	Compute(vReal, vImag, samples, Exponent(samples), dir);
}

void arduinoFFT::Compute(double *vReal, double *vImag, uint16_t samples, uint8_t power, uint8_t dir)
{
    3470:	b5f0      	push	{r4, r5, r6, r7, lr}
    3472:	465f      	mov	r7, fp
    3474:	4656      	mov	r6, sl
    3476:	464d      	mov	r5, r9
    3478:	4644      	mov	r4, r8
    347a:	4693      	mov	fp, r2
    347c:	001a      	movs	r2, r3
    347e:	b4f0      	push	{r4, r5, r6, r7}
    3480:	b097      	sub	sp, #92	; 0x5c
    3482:	930b      	str	r3, [sp, #44]	; 0x2c
    3484:	ab20      	add	r3, sp, #128	; 0x80
    3486:	9107      	str	r1, [sp, #28]
    3488:	7819      	ldrb	r1, [r3, #0]
    348a:	ab21      	add	r3, sp, #132	; 0x84
    348c:	9113      	str	r1, [sp, #76]	; 0x4c
    348e:	7819      	ldrb	r1, [r3, #0]
/* Computes in-place complex-to-complex FFT */
	/* Reverse bits */
	uint16_t j = 0;
	for (uint16_t i = 0; i < (samples - 1); i++) {
    3490:	0013      	movs	r3, r2
    3492:	3b01      	subs	r3, #1
{
	Compute(vReal, vImag, samples, Exponent(samples), dir);
}

void arduinoFFT::Compute(double *vReal, double *vImag, uint16_t samples, uint8_t power, uint8_t dir)
{
    3494:	9114      	str	r1, [sp, #80]	; 0x50
/* Computes in-place complex-to-complex FFT */
	/* Reverse bits */
	uint16_t j = 0;
	for (uint16_t i = 0; i < (samples - 1); i++) {
    3496:	9315      	str	r3, [sp, #84]	; 0x54
    3498:	2b00      	cmp	r3, #0
    349a:	dd39      	ble.n	3510 <_ZN10arduinoFFT7ComputeEPdS0_thh+0xa0>
    349c:	0856      	lsrs	r6, r2, #1
    349e:	2300      	movs	r3, #0
    34a0:	2200      	movs	r2, #0
		if (i < j) {
			Swap(&vReal[i], &vReal[j]);
			Swap(&vImag[i], &vImag[j]);
		}
		uint16_t k = (samples >> 1);
		while (k <= j) {
    34a2:	0031      	movs	r1, r6
    34a4:	42b3      	cmp	r3, r6
    34a6:	d304      	bcc.n	34b2 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x42>
			j -= k;
    34a8:	1a5b      	subs	r3, r3, r1
    34aa:	b29b      	uxth	r3, r3
			k >>= 1;
    34ac:	0849      	lsrs	r1, r1, #1
		if (i < j) {
			Swap(&vReal[i], &vReal[j]);
			Swap(&vImag[i], &vImag[j]);
		}
		uint16_t k = (samples >> 1);
		while (k <= j) {
    34ae:	428b      	cmp	r3, r1
    34b0:	d2fa      	bcs.n	34a8 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x38>
			j -= k;
			k >>= 1;
		}
		j += k;
    34b2:	185b      	adds	r3, r3, r1
void arduinoFFT::Compute(double *vReal, double *vImag, uint16_t samples, uint8_t power, uint8_t dir)
{
/* Computes in-place complex-to-complex FFT */
	/* Reverse bits */
	uint16_t j = 0;
	for (uint16_t i = 0; i < (samples - 1); i++) {
    34b4:	3201      	adds	r2, #1
    34b6:	9915      	ldr	r1, [sp, #84]	; 0x54
    34b8:	b292      	uxth	r2, r2
		uint16_t k = (samples >> 1);
		while (k <= j) {
			j -= k;
			k >>= 1;
		}
		j += k;
    34ba:	b29b      	uxth	r3, r3
void arduinoFFT::Compute(double *vReal, double *vImag, uint16_t samples, uint8_t power, uint8_t dir)
{
/* Computes in-place complex-to-complex FFT */
	/* Reverse bits */
	uint16_t j = 0;
	for (uint16_t i = 0; i < (samples - 1); i++) {
    34bc:	428a      	cmp	r2, r1
    34be:	da27      	bge.n	3510 <_ZN10arduinoFFT7ComputeEPdS0_thh+0xa0>
		if (i < j) {
    34c0:	4293      	cmp	r3, r2
    34c2:	d9ee      	bls.n	34a2 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x32>
			Swap(&vReal[i], &vReal[j]);
    34c4:	9c07      	ldr	r4, [sp, #28]
    34c6:	00d0      	lsls	r0, r2, #3
    34c8:	46a4      	mov	ip, r4
    34ca:	00d9      	lsls	r1, r3, #3
    34cc:	4484      	add	ip, r0
    34ce:	4688      	mov	r8, r1
    34d0:	0027      	movs	r7, r4
/* Private functions */

void arduinoFFT::Swap(double *x, double *y)
{
	double temp = *x;
	*x = *y;
    34d2:	4661      	mov	r1, ip

/* Private functions */

void arduinoFFT::Swap(double *x, double *y)
{
	double temp = *x;
    34d4:	4664      	mov	r4, ip
/* Computes in-place complex-to-complex FFT */
	/* Reverse bits */
	uint16_t j = 0;
	for (uint16_t i = 0; i < (samples - 1); i++) {
		if (i < j) {
			Swap(&vReal[i], &vReal[j]);
    34d6:	4447      	add	r7, r8

/* Private functions */

void arduinoFFT::Swap(double *x, double *y)
{
	double temp = *x;
    34d8:	6865      	ldr	r5, [r4, #4]
    34da:	6824      	ldr	r4, [r4, #0]
    34dc:	9400      	str	r4, [sp, #0]
    34de:	9501      	str	r5, [sp, #4]
	*x = *y;
    34e0:	683c      	ldr	r4, [r7, #0]
    34e2:	687d      	ldr	r5, [r7, #4]
    34e4:	600c      	str	r4, [r1, #0]
    34e6:	604d      	str	r5, [r1, #4]
	*y = temp;
    34e8:	9c00      	ldr	r4, [sp, #0]
    34ea:	9d01      	ldr	r5, [sp, #4]
	/* Reverse bits */
	uint16_t j = 0;
	for (uint16_t i = 0; i < (samples - 1); i++) {
		if (i < j) {
			Swap(&vReal[i], &vReal[j]);
			Swap(&vImag[i], &vImag[j]);
    34ec:	4641      	mov	r1, r8

void arduinoFFT::Swap(double *x, double *y)
{
	double temp = *x;
	*x = *y;
	*y = temp;
    34ee:	603c      	str	r4, [r7, #0]
    34f0:	607d      	str	r5, [r7, #4]
	/* Reverse bits */
	uint16_t j = 0;
	for (uint16_t i = 0; i < (samples - 1); i++) {
		if (i < j) {
			Swap(&vReal[i], &vReal[j]);
			Swap(&vImag[i], &vImag[j]);
    34f2:	4458      	add	r0, fp

/* Private functions */

void arduinoFFT::Swap(double *x, double *y)
{
	double temp = *x;
    34f4:	6804      	ldr	r4, [r0, #0]
    34f6:	6845      	ldr	r5, [r0, #4]
	/* Reverse bits */
	uint16_t j = 0;
	for (uint16_t i = 0; i < (samples - 1); i++) {
		if (i < j) {
			Swap(&vReal[i], &vReal[j]);
			Swap(&vImag[i], &vImag[j]);
    34f8:	4459      	add	r1, fp

/* Private functions */

void arduinoFFT::Swap(double *x, double *y)
{
	double temp = *x;
    34fa:	9400      	str	r4, [sp, #0]
    34fc:	9501      	str	r5, [sp, #4]
	*x = *y;
    34fe:	680c      	ldr	r4, [r1, #0]
    3500:	684d      	ldr	r5, [r1, #4]
    3502:	6004      	str	r4, [r0, #0]
    3504:	6045      	str	r5, [r0, #4]
	*y = temp;
    3506:	9c00      	ldr	r4, [sp, #0]
    3508:	9d01      	ldr	r5, [sp, #4]
    350a:	600c      	str	r4, [r1, #0]
    350c:	604d      	str	r5, [r1, #4]
    350e:	e7c8      	b.n	34a2 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x32>
	}
	/* Compute the FFT  */
	double c1 = -1.0;
	double c2 = 0.0;
	uint16_t l2 = 1;
	for (uint8_t l = 0; (l < power); l++) {
    3510:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3512:	2b00      	cmp	r3, #0
    3514:	d100      	bne.n	3518 <_ZN10arduinoFFT7ComputeEPdS0_thh+0xa8>
    3516:	e0ed      	b.n	36f4 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x284>
    3518:	2300      	movs	r3, #0
    351a:	9312      	str	r3, [sp, #72]	; 0x48
    351c:	3301      	adds	r3, #1
    351e:	930a      	str	r3, [sp, #40]	; 0x28
    3520:	2300      	movs	r3, #0
    3522:	9311      	str	r3, [sp, #68]	; 0x44
    3524:	9310      	str	r3, [sp, #64]	; 0x40
    3526:	2300      	movs	r3, #0
    3528:	4c8c      	ldr	r4, [pc, #560]	; (375c <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2ec>)
    352a:	930e      	str	r3, [sp, #56]	; 0x38
    352c:	940f      	str	r4, [sp, #60]	; 0x3c
		uint16_t l1 = l2;
		l2 <<= 1;
    352e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3530:	0053      	lsls	r3, r2, #1
    3532:	b29b      	uxth	r3, r3
    3534:	930c      	str	r3, [sp, #48]	; 0x30
		double u1 = 1.0;
		double u2 = 0.0;
		for (j = 0; j < l1; j++) {
    3536:	2a00      	cmp	r2, #0
    3538:	d100      	bne.n	353c <_ZN10arduinoFFT7ComputeEPdS0_thh+0xcc>
    353a:	e0b2      	b.n	36a2 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x232>
    353c:	2300      	movs	r3, #0
    353e:	2400      	movs	r4, #0
    3540:	9302      	str	r3, [sp, #8]
    3542:	9403      	str	r4, [sp, #12]
    3544:	2300      	movs	r3, #0
    3546:	4c86      	ldr	r4, [pc, #536]	; (3760 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2f0>)
    3548:	9304      	str	r3, [sp, #16]
    354a:	9405      	str	r4, [sp, #20]
    354c:	2300      	movs	r3, #0
    354e:	001a      	movs	r2, r3
    3550:	930d      	str	r3, [sp, #52]	; 0x34
			 for (uint16_t i = j; i < samples; i += l2) {
    3552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3554:	4692      	mov	sl, r2
    3556:	1e19      	subs	r1, r3, #0
    3558:	4291      	cmp	r1, r2
    355a:	d969      	bls.n	3630 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x1c0>
					uint16_t i1 = i + l1;
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
    355c:	9a07      	ldr	r2, [sp, #28]
    355e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3560:	4691      	mov	r9, r2
    3562:	4453      	add	r3, sl
    3564:	b29b      	uxth	r3, r3
    3566:	00db      	lsls	r3, r3, #3
    3568:	4499      	add	r9, r3
    356a:	4649      	mov	r1, r9
    356c:	684a      	ldr	r2, [r1, #4]
    356e:	6809      	ldr	r1, [r1, #0]
    3570:	0008      	movs	r0, r1
    3572:	0011      	movs	r1, r2
    3574:	445b      	add	r3, fp
    3576:	681e      	ldr	r6, [r3, #0]
    3578:	685f      	ldr	r7, [r3, #4]
    357a:	4698      	mov	r8, r3
    357c:	9a04      	ldr	r2, [sp, #16]
    357e:	9b05      	ldr	r3, [sp, #20]
    3580:	9008      	str	r0, [sp, #32]
    3582:	9109      	str	r1, [sp, #36]	; 0x24
    3584:	f003 fcb8 	bl	6ef8 <__aeabi_dmul>
    3588:	9a02      	ldr	r2, [sp, #8]
    358a:	9b03      	ldr	r3, [sp, #12]
    358c:	0004      	movs	r4, r0
    358e:	000d      	movs	r5, r1
    3590:	0030      	movs	r0, r6
    3592:	0039      	movs	r1, r7
    3594:	f003 fcb0 	bl	6ef8 <__aeabi_dmul>
    3598:	0002      	movs	r2, r0
    359a:	000b      	movs	r3, r1
    359c:	0020      	movs	r0, r4
    359e:	0029      	movs	r1, r5
    35a0:	f003 ff24 	bl	73ec <__aeabi_dsub>
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
    35a4:	9a04      	ldr	r2, [sp, #16]
    35a6:	9b05      	ldr	r3, [sp, #20]
		double u1 = 1.0;
		double u2 = 0.0;
		for (j = 0; j < l1; j++) {
			 for (uint16_t i = j; i < samples; i += l2) {
					uint16_t i1 = i + l1;
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
    35a8:	9000      	str	r0, [sp, #0]
    35aa:	9101      	str	r1, [sp, #4]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
    35ac:	0030      	movs	r0, r6
    35ae:	0039      	movs	r1, r7
    35b0:	f003 fca2 	bl	6ef8 <__aeabi_dmul>
    35b4:	9a02      	ldr	r2, [sp, #8]
    35b6:	9b03      	ldr	r3, [sp, #12]
    35b8:	0004      	movs	r4, r0
    35ba:	000d      	movs	r5, r1
    35bc:	9808      	ldr	r0, [sp, #32]
    35be:	9909      	ldr	r1, [sp, #36]	; 0x24
    35c0:	f003 fc9a 	bl	6ef8 <__aeabi_dmul>
    35c4:	0002      	movs	r2, r0
    35c6:	000b      	movs	r3, r1
    35c8:	0020      	movs	r0, r4
    35ca:	0029      	movs	r1, r5
    35cc:	f002 fd44 	bl	6058 <__aeabi_dadd>
					vReal[i1] = vReal[i] - t1;
    35d0:	4653      	mov	r3, sl
    35d2:	9a07      	ldr	r2, [sp, #28]
    35d4:	00de      	lsls	r6, r3, #3
    35d6:	1997      	adds	r7, r2, r6
		double u2 = 0.0;
		for (j = 0; j < l1; j++) {
			 for (uint16_t i = j; i < samples; i += l2) {
					uint16_t i1 = i + l1;
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
    35d8:	0004      	movs	r4, r0
					vReal[i1] = vReal[i] - t1;
    35da:	9a00      	ldr	r2, [sp, #0]
    35dc:	9b01      	ldr	r3, [sp, #4]
		double u2 = 0.0;
		for (j = 0; j < l1; j++) {
			 for (uint16_t i = j; i < samples; i += l2) {
					uint16_t i1 = i + l1;
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
    35de:	000d      	movs	r5, r1
					vReal[i1] = vReal[i] - t1;
    35e0:	6838      	ldr	r0, [r7, #0]
    35e2:	6879      	ldr	r1, [r7, #4]
    35e4:	f003 ff02 	bl	73ec <__aeabi_dsub>
    35e8:	464b      	mov	r3, r9
    35ea:	6018      	str	r0, [r3, #0]
    35ec:	6059      	str	r1, [r3, #4]
					vImag[i1] = vImag[i] - t2;
    35ee:	445e      	add	r6, fp
    35f0:	6830      	ldr	r0, [r6, #0]
    35f2:	6871      	ldr	r1, [r6, #4]
    35f4:	0022      	movs	r2, r4
    35f6:	002b      	movs	r3, r5
    35f8:	f003 fef8 	bl	73ec <__aeabi_dsub>
    35fc:	4643      	mov	r3, r8
    35fe:	6018      	str	r0, [r3, #0]
    3600:	6059      	str	r1, [r3, #4]
					vReal[i] += t1;
    3602:	6838      	ldr	r0, [r7, #0]
    3604:	6879      	ldr	r1, [r7, #4]
    3606:	9a00      	ldr	r2, [sp, #0]
    3608:	9b01      	ldr	r3, [sp, #4]
    360a:	f002 fd25 	bl	6058 <__aeabi_dadd>
    360e:	6038      	str	r0, [r7, #0]
    3610:	6079      	str	r1, [r7, #4]
					vImag[i] += t2;
    3612:	002b      	movs	r3, r5
    3614:	6830      	ldr	r0, [r6, #0]
    3616:	6871      	ldr	r1, [r6, #4]
    3618:	0022      	movs	r2, r4
    361a:	f002 fd1d 	bl	6058 <__aeabi_dadd>
		uint16_t l1 = l2;
		l2 <<= 1;
		double u1 = 1.0;
		double u2 = 0.0;
		for (j = 0; j < l1; j++) {
			 for (uint16_t i = j; i < samples; i += l2) {
    361e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
					vReal[i1] = vReal[i] - t1;
					vImag[i1] = vImag[i] - t2;
					vReal[i] += t1;
					vImag[i] += t2;
    3620:	6030      	str	r0, [r6, #0]
    3622:	6071      	str	r1, [r6, #4]
		uint16_t l1 = l2;
		l2 <<= 1;
		double u1 = 1.0;
		double u2 = 0.0;
		for (j = 0; j < l1; j++) {
			 for (uint16_t i = j; i < samples; i += l2) {
    3624:	4453      	add	r3, sl
    3626:	b29b      	uxth	r3, r3
    3628:	469a      	mov	sl, r3
    362a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    362c:	4553      	cmp	r3, sl
    362e:	d895      	bhi.n	355c <_ZN10arduinoFFT7ComputeEPdS0_thh+0xec>
					vReal[i1] = vReal[i] - t1;
					vImag[i1] = vImag[i] - t2;
					vReal[i] += t1;
					vImag[i] += t2;
			 }
			 double z = ((u1 * c1) - (u2 * c2));
    3630:	9a04      	ldr	r2, [sp, #16]
    3632:	9b05      	ldr	r3, [sp, #20]
    3634:	980e      	ldr	r0, [sp, #56]	; 0x38
    3636:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3638:	f003 fc5e 	bl	6ef8 <__aeabi_dmul>
    363c:	9a02      	ldr	r2, [sp, #8]
    363e:	9b03      	ldr	r3, [sp, #12]
    3640:	9e11      	ldr	r6, [sp, #68]	; 0x44
    3642:	0004      	movs	r4, r0
    3644:	46b1      	mov	r9, r6
    3646:	0030      	movs	r0, r6
    3648:	9e10      	ldr	r6, [sp, #64]	; 0x40
    364a:	000d      	movs	r5, r1
    364c:	0031      	movs	r1, r6
    364e:	f003 fc53 	bl	6ef8 <__aeabi_dmul>
    3652:	0002      	movs	r2, r0
    3654:	000b      	movs	r3, r1
    3656:	0020      	movs	r0, r4
    3658:	0029      	movs	r1, r5
    365a:	f003 fec7 	bl	73ec <__aeabi_dsub>
			 u2 = ((u1 * c2) + (u2 * c1));
    365e:	9a02      	ldr	r2, [sp, #8]
    3660:	9b03      	ldr	r3, [sp, #12]
					vReal[i1] = vReal[i] - t1;
					vImag[i1] = vImag[i] - t2;
					vReal[i] += t1;
					vImag[i] += t2;
			 }
			 double z = ((u1 * c1) - (u2 * c2));
    3662:	46b0      	mov	r8, r6
    3664:	000f      	movs	r7, r1
    3666:	0006      	movs	r6, r0
			 u2 = ((u1 * c2) + (u2 * c1));
    3668:	980e      	ldr	r0, [sp, #56]	; 0x38
    366a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    366c:	f003 fc44 	bl	6ef8 <__aeabi_dmul>
    3670:	9a04      	ldr	r2, [sp, #16]
    3672:	9b05      	ldr	r3, [sp, #20]
    3674:	0004      	movs	r4, r0
    3676:	000d      	movs	r5, r1
    3678:	4648      	mov	r0, r9
    367a:	4641      	mov	r1, r8
    367c:	f003 fc3c 	bl	6ef8 <__aeabi_dmul>
    3680:	0022      	movs	r2, r4
    3682:	002b      	movs	r3, r5
    3684:	f002 fce8 	bl	6058 <__aeabi_dadd>
	for (uint8_t l = 0; (l < power); l++) {
		uint16_t l1 = l2;
		l2 <<= 1;
		double u1 = 1.0;
		double u2 = 0.0;
		for (j = 0; j < l1; j++) {
    3688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    368a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    368c:	3301      	adds	r3, #1
    368e:	b29b      	uxth	r3, r3
					vImag[i1] = vImag[i] - t2;
					vReal[i] += t1;
					vImag[i] += t2;
			 }
			 double z = ((u1 * c1) - (u2 * c2));
			 u2 = ((u1 * c2) + (u2 * c1));
    3690:	9002      	str	r0, [sp, #8]
    3692:	9103      	str	r1, [sp, #12]
	for (uint8_t l = 0; (l < power); l++) {
		uint16_t l1 = l2;
		l2 <<= 1;
		double u1 = 1.0;
		double u2 = 0.0;
		for (j = 0; j < l1; j++) {
    3694:	930d      	str	r3, [sp, #52]	; 0x34
    3696:	4293      	cmp	r3, r2
    3698:	d003      	beq.n	36a2 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x232>
					vReal[i] += t1;
					vImag[i] += t2;
			 }
			 double z = ((u1 * c1) - (u2 * c2));
			 u2 = ((u1 * c2) + (u2 * c1));
			 u1 = z;
    369a:	9604      	str	r6, [sp, #16]
    369c:	9705      	str	r7, [sp, #20]
    369e:	001a      	movs	r2, r3
    36a0:	e757      	b.n	3552 <_ZN10arduinoFFT7ComputeEPdS0_thh+0xe2>
		}
		c2 = sqrt((1.0 - c1) / 2.0);
    36a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    36a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    36a6:	2000      	movs	r0, #0
    36a8:	492d      	ldr	r1, [pc, #180]	; (3760 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2f0>)
    36aa:	f003 fe9f 	bl	73ec <__aeabi_dsub>
    36ae:	4b2d      	ldr	r3, [pc, #180]	; (3764 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2f4>)
    36b0:	2200      	movs	r2, #0
    36b2:	f003 fc21 	bl	6ef8 <__aeabi_dmul>
    36b6:	f001 f87d 	bl	47b4 <sqrt>
		if (dir == FFT_FORWARD) {
    36ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
			 }
			 double z = ((u1 * c1) - (u2 * c2));
			 u2 = ((u1 * c2) + (u2 * c1));
			 u1 = z;
		}
		c2 = sqrt((1.0 - c1) / 2.0);
    36bc:	9011      	str	r0, [sp, #68]	; 0x44
    36be:	9110      	str	r1, [sp, #64]	; 0x40
		if (dir == FFT_FORWARD) {
    36c0:	2b01      	cmp	r3, #1
    36c2:	d043      	beq.n	374c <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2dc>
			c2 = -c2;
		}
		c1 = sqrt((1.0 + c1) / 2.0);
    36c4:	980e      	ldr	r0, [sp, #56]	; 0x38
    36c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    36c8:	2200      	movs	r2, #0
    36ca:	4b25      	ldr	r3, [pc, #148]	; (3760 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2f0>)
    36cc:	f002 fcc4 	bl	6058 <__aeabi_dadd>
    36d0:	2200      	movs	r2, #0
    36d2:	4b24      	ldr	r3, [pc, #144]	; (3764 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2f4>)
    36d4:	f003 fc10 	bl	6ef8 <__aeabi_dmul>
    36d8:	f001 f86c 	bl	47b4 <sqrt>
	}
	/* Compute the FFT  */
	double c1 = -1.0;
	double c2 = 0.0;
	uint16_t l2 = 1;
	for (uint8_t l = 0; (l < power); l++) {
    36dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
		uint16_t l1 = l2;
		l2 <<= 1;
    36de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	}
	/* Compute the FFT  */
	double c1 = -1.0;
	double c2 = 0.0;
	uint16_t l2 = 1;
	for (uint8_t l = 0; (l < power); l++) {
    36e0:	3301      	adds	r3, #1
		uint16_t l1 = l2;
		l2 <<= 1;
    36e2:	920a      	str	r2, [sp, #40]	; 0x28
	}
	/* Compute the FFT  */
	double c1 = -1.0;
	double c2 = 0.0;
	uint16_t l2 = 1;
	for (uint8_t l = 0; (l < power); l++) {
    36e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    36e6:	b2db      	uxtb	r3, r3
		}
		c2 = sqrt((1.0 - c1) / 2.0);
		if (dir == FFT_FORWARD) {
			c2 = -c2;
		}
		c1 = sqrt((1.0 + c1) / 2.0);
    36e8:	900e      	str	r0, [sp, #56]	; 0x38
    36ea:	910f      	str	r1, [sp, #60]	; 0x3c
	}
	/* Compute the FFT  */
	double c1 = -1.0;
	double c2 = 0.0;
	uint16_t l2 = 1;
	for (uint8_t l = 0; (l < power); l++) {
    36ec:	9312      	str	r3, [sp, #72]	; 0x48
    36ee:	429a      	cmp	r2, r3
    36f0:	d000      	beq.n	36f4 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x284>
    36f2:	e71c      	b.n	352e <_ZN10arduinoFFT7ComputeEPdS0_thh+0xbe>
			c2 = -c2;
		}
		c1 = sqrt((1.0 + c1) / 2.0);
	}
	/* Scaling for reverse transform */
	if (dir != FFT_FORWARD) {
    36f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    36f6:	2b01      	cmp	r3, #1
    36f8:	d021      	beq.n	373e <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2ce>
		for (uint16_t i = 0; i < samples; i++) {
    36fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    36fc:	2b00      	cmp	r3, #0
    36fe:	d01e      	beq.n	373e <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2ce>
    3700:	0018      	movs	r0, r3
    3702:	f004 fa1d 	bl	7b40 <__aeabi_i2d>
    3706:	466b      	mov	r3, sp
    3708:	2254      	movs	r2, #84	; 0x54
    370a:	189b      	adds	r3, r3, r2
    370c:	881f      	ldrh	r7, [r3, #0]
    370e:	9e07      	ldr	r6, [sp, #28]
    3710:	3701      	adds	r7, #1
    3712:	00ff      	lsls	r7, r7, #3
    3714:	19f7      	adds	r7, r6, r7
    3716:	46b8      	mov	r8, r7
    3718:	0004      	movs	r4, r0
    371a:	000d      	movs	r5, r1
    371c:	465f      	mov	r7, fp
			 vReal[i] /= samples;
    371e:	6830      	ldr	r0, [r6, #0]
    3720:	6871      	ldr	r1, [r6, #4]
    3722:	0022      	movs	r2, r4
    3724:	002b      	movs	r3, r5
    3726:	f002 ffc3 	bl	66b0 <__aeabi_ddiv>
    372a:	c603      	stmia	r6!, {r0, r1}
			 vImag[i] /= samples;
    372c:	6838      	ldr	r0, [r7, #0]
    372e:	6879      	ldr	r1, [r7, #4]
    3730:	0022      	movs	r2, r4
    3732:	002b      	movs	r3, r5
    3734:	f002 ffbc 	bl	66b0 <__aeabi_ddiv>
    3738:	c703      	stmia	r7!, {r0, r1}
		}
		c1 = sqrt((1.0 + c1) / 2.0);
	}
	/* Scaling for reverse transform */
	if (dir != FFT_FORWARD) {
		for (uint16_t i = 0; i < samples; i++) {
    373a:	4546      	cmp	r6, r8
    373c:	d1ef      	bne.n	371e <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2ae>
			 vReal[i] /= samples;
			 vImag[i] /= samples;
		}
	}
}
    373e:	b017      	add	sp, #92	; 0x5c
    3740:	bc3c      	pop	{r2, r3, r4, r5}
    3742:	4690      	mov	r8, r2
    3744:	4699      	mov	r9, r3
    3746:	46a2      	mov	sl, r4
    3748:	46ab      	mov	fp, r5
    374a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			 u2 = ((u1 * c2) + (u2 * c1));
			 u1 = z;
		}
		c2 = sqrt((1.0 - c1) / 2.0);
		if (dir == FFT_FORWARD) {
			c2 = -c2;
    374c:	2280      	movs	r2, #128	; 0x80
    374e:	0612      	lsls	r2, r2, #24
    3750:	000b      	movs	r3, r1
    3752:	4694      	mov	ip, r2
    3754:	4463      	add	r3, ip
    3756:	9310      	str	r3, [sp, #64]	; 0x40
    3758:	e7b4      	b.n	36c4 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x254>
    375a:	46c0      	nop			; (mov r8, r8)
    375c:	bff00000 	.word	0xbff00000
    3760:	3ff00000 	.word	0x3ff00000
    3764:	3fe00000 	.word	0x3fe00000

00003768 <_ZN10arduinoFFT7ComputeEPdS0_th>:
{
	return(FFT_LIB_REV);
}

void arduinoFFT::Compute(double *vReal, double *vImag, uint16_t samples, uint8_t dir)
{
    3768:	b5f0      	push	{r4, r5, r6, r7, lr}
    376a:	b083      	sub	sp, #12
    376c:	ac08      	add	r4, sp, #32
    376e:	7827      	ldrb	r7, [r4, #0]

uint8_t arduinoFFT::Exponent(uint16_t value)
{
	/* Calculates the base 2 logarithm of a value */
	uint8_t result = 0;
	while (((value >> result) & 1) != 1) result++;
    3770:	07dc      	lsls	r4, r3, #31
    3772:	d40d      	bmi.n	3790 <_ZN10arduinoFFT7ComputeEPdS0_th+0x28>
    3774:	2400      	movs	r4, #0
    3776:	2601      	movs	r6, #1
    3778:	001d      	movs	r5, r3
    377a:	3401      	adds	r4, #1
    377c:	b2e4      	uxtb	r4, r4
    377e:	4125      	asrs	r5, r4
    3780:	422e      	tst	r6, r5
    3782:	d0f9      	beq.n	3778 <_ZN10arduinoFFT7ComputeEPdS0_th+0x10>
	return(FFT_LIB_REV);
}

void arduinoFFT::Compute(double *vReal, double *vImag, uint16_t samples, uint8_t dir)
{
	Compute(vReal, vImag, samples, Exponent(samples), dir);
    3784:	9701      	str	r7, [sp, #4]
    3786:	9400      	str	r4, [sp, #0]
    3788:	f7ff fe72 	bl	3470 <_ZN10arduinoFFT7ComputeEPdS0_thh>
}
    378c:	b003      	add	sp, #12
    378e:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

uint8_t arduinoFFT::Exponent(uint16_t value)
{
	/* Calculates the base 2 logarithm of a value */
	uint8_t result = 0;
    3790:	2400      	movs	r4, #0
    3792:	e7f7      	b.n	3784 <_ZN10arduinoFFT7ComputeEPdS0_th+0x1c>

00003794 <_ZN10arduinoFFT18ComplexToMagnitudeEPdS0_t>:
		}
	}
}

void arduinoFFT::ComplexToMagnitude(double *vReal, double *vImag, uint16_t samples)
{
    3794:	b5f0      	push	{r4, r5, r6, r7, lr}
    3796:	4657      	mov	r7, sl
    3798:	464e      	mov	r6, r9
    379a:	4645      	mov	r5, r8
    379c:	b4e0      	push	{r5, r6, r7}
/* vM is half the size of vReal and vImag */
	for (uint16_t i = 0; i < samples; i++) {
    379e:	2b00      	cmp	r3, #0
    37a0:	d026      	beq.n	37f0 <_ZN10arduinoFFT18ComplexToMagnitudeEPdS0_t+0x5c>
    37a2:	4688      	mov	r8, r1
    37a4:	3b01      	subs	r3, #1
    37a6:	b29b      	uxth	r3, r3
    37a8:	3301      	adds	r3, #1
    37aa:	00db      	lsls	r3, r3, #3
    37ac:	4443      	add	r3, r8
    37ae:	4691      	mov	r9, r2
    37b0:	469a      	mov	sl, r3
		vReal[i] = sqrt(sq(vReal[i]) + sq(vImag[i]));
    37b2:	464b      	mov	r3, r9
    37b4:	cb30      	ldmia	r3!, {r4, r5}
    37b6:	4699      	mov	r9, r3
    37b8:	4643      	mov	r3, r8
    37ba:	681a      	ldr	r2, [r3, #0]
    37bc:	685b      	ldr	r3, [r3, #4]
    37be:	0010      	movs	r0, r2
    37c0:	0019      	movs	r1, r3
    37c2:	f003 fb99 	bl	6ef8 <__aeabi_dmul>
    37c6:	0022      	movs	r2, r4
    37c8:	0006      	movs	r6, r0
    37ca:	000f      	movs	r7, r1
    37cc:	002b      	movs	r3, r5
    37ce:	0020      	movs	r0, r4
    37d0:	0029      	movs	r1, r5
    37d2:	f003 fb91 	bl	6ef8 <__aeabi_dmul>
    37d6:	000b      	movs	r3, r1
    37d8:	0002      	movs	r2, r0
    37da:	0039      	movs	r1, r7
    37dc:	0030      	movs	r0, r6
    37de:	f002 fc3b 	bl	6058 <__aeabi_dadd>
    37e2:	f000 ffe7 	bl	47b4 <sqrt>
    37e6:	4643      	mov	r3, r8
    37e8:	c303      	stmia	r3!, {r0, r1}
    37ea:	4698      	mov	r8, r3
}

void arduinoFFT::ComplexToMagnitude(double *vReal, double *vImag, uint16_t samples)
{
/* vM is half the size of vReal and vImag */
	for (uint16_t i = 0; i < samples; i++) {
    37ec:	459a      	cmp	sl, r3
    37ee:	d1e0      	bne.n	37b2 <_ZN10arduinoFFT18ComplexToMagnitudeEPdS0_t+0x1e>
		vReal[i] = sqrt(sq(vReal[i]) + sq(vImag[i]));
	}
}
    37f0:	bc1c      	pop	{r2, r3, r4}
    37f2:	4690      	mov	r8, r2
    37f4:	4699      	mov	r9, r3
    37f6:	46a2      	mov	sl, r4
    37f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37fa:	46c0      	nop			; (mov r8, r8)

000037fc <_ZN10arduinoFFT9WindowingEPdthh>:

void arduinoFFT::Windowing(double *vData, uint16_t samples, uint8_t windowType, uint8_t dir)
{
    37fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    37fe:	464d      	mov	r5, r9
    3800:	4644      	mov	r4, r8
    3802:	4656      	mov	r6, sl
    3804:	465f      	mov	r7, fp
    3806:	b4f0      	push	{r4, r5, r6, r7}
    3808:	b087      	sub	sp, #28
    380a:	9303      	str	r3, [sp, #12]
    380c:	001d      	movs	r5, r3
    380e:	ab10      	add	r3, sp, #64	; 0x40
    3810:	468a      	mov	sl, r1
    3812:	7819      	ldrb	r1, [r3, #0]
/* Weighing factors are computed once before multiple use of FFT */
/* The weighing function is symetric; half the weighs are recorded */
	double samplesMinusOne = (double(samples) - 1.0);
    3814:	0010      	movs	r0, r2
		vReal[i] = sqrt(sq(vReal[i]) + sq(vImag[i]));
	}
}

void arduinoFFT::Windowing(double *vData, uint16_t samples, uint8_t windowType, uint8_t dir)
{
    3816:	0014      	movs	r4, r2
    3818:	9205      	str	r2, [sp, #20]
    381a:	9104      	str	r1, [sp, #16]
/* Weighing factors are computed once before multiple use of FFT */
/* The weighing function is symetric; half the weighs are recorded */
	double samplesMinusOne = (double(samples) - 1.0);
    381c:	f004 f9d2 	bl	7bc4 <__aeabi_ui2d>
    3820:	2200      	movs	r2, #0
    3822:	4b96      	ldr	r3, [pc, #600]	; (3a7c <_ZN10arduinoFFT9WindowingEPdthh+0x280>)
    3824:	f003 fde2 	bl	73ec <__aeabi_dsub>
    3828:	9000      	str	r0, [sp, #0]
    382a:	9101      	str	r1, [sp, #4]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
    382c:	2100      	movs	r1, #0
    382e:	1062      	asrs	r2, r4, #1
    3830:	9202      	str	r2, [sp, #8]
    3832:	4688      	mov	r8, r1
    3834:	4689      	mov	r9, r1
    3836:	d068      	beq.n	390a <_ZN10arduinoFFT9WindowingEPdthh+0x10e>
		double indexMinusOne = double(i);
		double ratio = (indexMinusOne / samplesMinusOne);
		double weighingFactor = 1.0;
		/* Compute and record weighting factor */
		switch (windowType) {
    3838:	00ab      	lsls	r3, r5, #2
    383a:	469b      	mov	fp, r3
    383c:	4a90      	ldr	r2, [pc, #576]	; (3a80 <_ZN10arduinoFFT9WindowingEPdthh+0x284>)
    383e:	4493      	add	fp, r2
{
/* Weighing factors are computed once before multiple use of FFT */
/* The weighing function is symetric; half the weighs are recorded */
	double samplesMinusOne = (double(samples) - 1.0);
	for (uint16_t i = 0; i < (samples >> 1); i++) {
		double indexMinusOne = double(i);
    3840:	4648      	mov	r0, r9
    3842:	f004 f9bf 	bl	7bc4 <__aeabi_ui2d>
		double ratio = (indexMinusOne / samplesMinusOne);
    3846:	9a00      	ldr	r2, [sp, #0]
    3848:	9b01      	ldr	r3, [sp, #4]
{
/* Weighing factors are computed once before multiple use of FFT */
/* The weighing function is symetric; half the weighs are recorded */
	double samplesMinusOne = (double(samples) - 1.0);
	for (uint16_t i = 0; i < (samples >> 1); i++) {
		double indexMinusOne = double(i);
    384a:	0004      	movs	r4, r0
    384c:	000d      	movs	r5, r1
		double ratio = (indexMinusOne / samplesMinusOne);
    384e:	f002 ff2f 	bl	66b0 <__aeabi_ddiv>
		double weighingFactor = 1.0;
		/* Compute and record weighting factor */
		switch (windowType) {
    3852:	9b03      	ldr	r3, [sp, #12]
/* Weighing factors are computed once before multiple use of FFT */
/* The weighing function is symetric; half the weighs are recorded */
	double samplesMinusOne = (double(samples) - 1.0);
	for (uint16_t i = 0; i < (samples >> 1); i++) {
		double indexMinusOne = double(i);
		double ratio = (indexMinusOne / samplesMinusOne);
    3854:	0006      	movs	r6, r0
    3856:	000f      	movs	r7, r1
		double weighingFactor = 1.0;
		/* Compute and record weighting factor */
		switch (windowType) {
    3858:	2b06      	cmp	r3, #6
    385a:	d900      	bls.n	385e <_ZN10arduinoFFT9WindowingEPdthh+0x62>
    385c:	e100      	b.n	3a60 <_ZN10arduinoFFT9WindowingEPdthh+0x264>
    385e:	465b      	mov	r3, fp
    3860:	681b      	ldr	r3, [r3, #0]
    3862:	469f      	mov	pc, r3
			break;
		case FFT_WIN_TYP_BLACKMAN: /* blackmann */
			weighingFactor = 0.42323 - (0.49755 * (cos(twoPi * ratio))) + (0.07922 * (cos(fourPi * ratio)));
			break;
		case FFT_WIN_TYP_FLT_TOP: /* flat top */
			weighingFactor = 0.2810639 - (0.5208972 * cos(twoPi * ratio)) + (0.1980399 * cos(fourPi * ratio));
    3864:	4a87      	ldr	r2, [pc, #540]	; (3a84 <_ZN10arduinoFFT9WindowingEPdthh+0x288>)
    3866:	4b88      	ldr	r3, [pc, #544]	; (3a88 <_ZN10arduinoFFT9WindowingEPdthh+0x28c>)
    3868:	f003 fb46 	bl	6ef8 <__aeabi_dmul>
    386c:	f000 ff5c 	bl	4728 <cos>
    3870:	4a86      	ldr	r2, [pc, #536]	; (3a8c <_ZN10arduinoFFT9WindowingEPdthh+0x290>)
    3872:	0004      	movs	r4, r0
    3874:	000d      	movs	r5, r1
    3876:	4b86      	ldr	r3, [pc, #536]	; (3a90 <_ZN10arduinoFFT9WindowingEPdthh+0x294>)
    3878:	0030      	movs	r0, r6
    387a:	0039      	movs	r1, r7
    387c:	f003 fb3c 	bl	6ef8 <__aeabi_dmul>
    3880:	f000 ff52 	bl	4728 <cos>
    3884:	4a83      	ldr	r2, [pc, #524]	; (3a94 <_ZN10arduinoFFT9WindowingEPdthh+0x298>)
    3886:	4b84      	ldr	r3, [pc, #528]	; (3a98 <_ZN10arduinoFFT9WindowingEPdthh+0x29c>)
    3888:	0006      	movs	r6, r0
    388a:	000f      	movs	r7, r1
    388c:	0020      	movs	r0, r4
    388e:	0029      	movs	r1, r5
    3890:	f003 fb32 	bl	6ef8 <__aeabi_dmul>
    3894:	0002      	movs	r2, r0
    3896:	000b      	movs	r3, r1
    3898:	4880      	ldr	r0, [pc, #512]	; (3a9c <_ZN10arduinoFFT9WindowingEPdthh+0x2a0>)
    389a:	4981      	ldr	r1, [pc, #516]	; (3aa0 <_ZN10arduinoFFT9WindowingEPdthh+0x2a4>)
    389c:	f003 fda6 	bl	73ec <__aeabi_dsub>
    38a0:	0004      	movs	r4, r0
    38a2:	000d      	movs	r5, r1
    38a4:	4a7f      	ldr	r2, [pc, #508]	; (3aa4 <_ZN10arduinoFFT9WindowingEPdthh+0x2a8>)
    38a6:	4b80      	ldr	r3, [pc, #512]	; (3aa8 <_ZN10arduinoFFT9WindowingEPdthh+0x2ac>)
    38a8:	0030      	movs	r0, r6
    38aa:	0039      	movs	r1, r7
    38ac:	f003 fb24 	bl	6ef8 <__aeabi_dmul>
    38b0:	0002      	movs	r2, r0
    38b2:	000b      	movs	r3, r1
    38b4:	0020      	movs	r0, r4
    38b6:	0029      	movs	r1, r5
    38b8:	f002 fbce 	bl	6058 <__aeabi_dadd>
    38bc:	0004      	movs	r4, r0
    38be:	000d      	movs	r5, r1
			break;
		case FFT_WIN_TYP_WELCH: /* welch */
			weighingFactor = 1.0 - sq((indexMinusOne - samplesMinusOne / 2.0) / (samplesMinusOne / 2.0));
			break;
		}
		if (dir == FFT_FORWARD) {
    38c0:	9b04      	ldr	r3, [sp, #16]
    38c2:	2b01      	cmp	r3, #1
    38c4:	d100      	bne.n	38c8 <_ZN10arduinoFFT9WindowingEPdthh+0xcc>
    38c6:	e074      	b.n	39b2 <_ZN10arduinoFFT9WindowingEPdthh+0x1b6>
			vData[i] *= weighingFactor;
			vData[samples - (i + 1)] *= weighingFactor;
		}
		else {
			vData[i] /= weighingFactor;
    38c8:	464b      	mov	r3, r9
    38ca:	00de      	lsls	r6, r3, #3
    38cc:	4456      	add	r6, sl
    38ce:	6830      	ldr	r0, [r6, #0]
    38d0:	6871      	ldr	r1, [r6, #4]
    38d2:	0022      	movs	r2, r4
    38d4:	002b      	movs	r3, r5
    38d6:	f002 feeb 	bl	66b0 <__aeabi_ddiv>
    38da:	6030      	str	r0, [r6, #0]
    38dc:	6071      	str	r1, [r6, #4]
			vData[samples - (i + 1)] /= weighingFactor;
    38de:	4646      	mov	r6, r8
    38e0:	9b05      	ldr	r3, [sp, #20]
    38e2:	3601      	adds	r6, #1
    38e4:	1b9e      	subs	r6, r3, r6
    38e6:	00f6      	lsls	r6, r6, #3
    38e8:	4456      	add	r6, sl
    38ea:	6830      	ldr	r0, [r6, #0]
    38ec:	6871      	ldr	r1, [r6, #4]
    38ee:	0022      	movs	r2, r4
    38f0:	002b      	movs	r3, r5
    38f2:	f002 fedd 	bl	66b0 <__aeabi_ddiv>
    38f6:	6030      	str	r0, [r6, #0]
    38f8:	6071      	str	r1, [r6, #4]
void arduinoFFT::Windowing(double *vData, uint16_t samples, uint8_t windowType, uint8_t dir)
{
/* Weighing factors are computed once before multiple use of FFT */
/* The weighing function is symetric; half the weighs are recorded */
	double samplesMinusOne = (double(samples) - 1.0);
	for (uint16_t i = 0; i < (samples >> 1); i++) {
    38fa:	464b      	mov	r3, r9
    38fc:	3301      	adds	r3, #1
    38fe:	b29b      	uxth	r3, r3
    3900:	4699      	mov	r9, r3
    3902:	4698      	mov	r8, r3
    3904:	9b02      	ldr	r3, [sp, #8]
    3906:	4599      	cmp	r9, r3
    3908:	db9a      	blt.n	3840 <_ZN10arduinoFFT9WindowingEPdthh+0x44>
		else {
			vData[i] /= weighingFactor;
			vData[samples - (i + 1)] /= weighingFactor;
		}
	}
}
    390a:	b007      	add	sp, #28
    390c:	bc3c      	pop	{r2, r3, r4, r5}
    390e:	4690      	mov	r8, r2
    3910:	4699      	mov	r9, r3
    3912:	46a2      	mov	sl, r4
    3914:	46ab      	mov	fp, r5
    3916:	bdf0      	pop	{r4, r5, r6, r7, pc}
			break;
		case FFT_WIN_TYP_TRIANGLE: /* triangle (Bartlett) */
			weighingFactor = 1.0 - ((2.0 * abs(indexMinusOne - (samplesMinusOne / 2.0))) / samplesMinusOne);
			break;
		case FFT_WIN_TYP_BLACKMAN: /* blackmann */
			weighingFactor = 0.42323 - (0.49755 * (cos(twoPi * ratio))) + (0.07922 * (cos(fourPi * ratio)));
    3918:	4a5a      	ldr	r2, [pc, #360]	; (3a84 <_ZN10arduinoFFT9WindowingEPdthh+0x288>)
    391a:	4b5b      	ldr	r3, [pc, #364]	; (3a88 <_ZN10arduinoFFT9WindowingEPdthh+0x28c>)
    391c:	f003 faec 	bl	6ef8 <__aeabi_dmul>
    3920:	f000 ff02 	bl	4728 <cos>
    3924:	4a59      	ldr	r2, [pc, #356]	; (3a8c <_ZN10arduinoFFT9WindowingEPdthh+0x290>)
    3926:	0004      	movs	r4, r0
    3928:	000d      	movs	r5, r1
    392a:	4b59      	ldr	r3, [pc, #356]	; (3a90 <_ZN10arduinoFFT9WindowingEPdthh+0x294>)
    392c:	0030      	movs	r0, r6
    392e:	0039      	movs	r1, r7
    3930:	f003 fae2 	bl	6ef8 <__aeabi_dmul>
    3934:	f000 fef8 	bl	4728 <cos>
    3938:	4a5c      	ldr	r2, [pc, #368]	; (3aac <_ZN10arduinoFFT9WindowingEPdthh+0x2b0>)
    393a:	4b5d      	ldr	r3, [pc, #372]	; (3ab0 <_ZN10arduinoFFT9WindowingEPdthh+0x2b4>)
    393c:	0006      	movs	r6, r0
    393e:	000f      	movs	r7, r1
    3940:	0020      	movs	r0, r4
    3942:	0029      	movs	r1, r5
    3944:	f003 fad8 	bl	6ef8 <__aeabi_dmul>
    3948:	0002      	movs	r2, r0
    394a:	000b      	movs	r3, r1
    394c:	4859      	ldr	r0, [pc, #356]	; (3ab4 <_ZN10arduinoFFT9WindowingEPdthh+0x2b8>)
    394e:	495a      	ldr	r1, [pc, #360]	; (3ab8 <_ZN10arduinoFFT9WindowingEPdthh+0x2bc>)
    3950:	f003 fd4c 	bl	73ec <__aeabi_dsub>
    3954:	4a59      	ldr	r2, [pc, #356]	; (3abc <_ZN10arduinoFFT9WindowingEPdthh+0x2c0>)
    3956:	0004      	movs	r4, r0
    3958:	000d      	movs	r5, r1
    395a:	4b59      	ldr	r3, [pc, #356]	; (3ac0 <_ZN10arduinoFFT9WindowingEPdthh+0x2c4>)
    395c:	e7a4      	b.n	38a8 <_ZN10arduinoFFT9WindowingEPdthh+0xac>
			break;
		case FFT_WIN_TYP_HANN: /* hann */
			weighingFactor = 0.54 * (1.0 - cos(twoPi * ratio));
			break;
		case FFT_WIN_TYP_TRIANGLE: /* triangle (Bartlett) */
			weighingFactor = 1.0 - ((2.0 * abs(indexMinusOne - (samplesMinusOne / 2.0))) / samplesMinusOne);
    395e:	2200      	movs	r2, #0
    3960:	9800      	ldr	r0, [sp, #0]
    3962:	9901      	ldr	r1, [sp, #4]
    3964:	4b57      	ldr	r3, [pc, #348]	; (3ac4 <_ZN10arduinoFFT9WindowingEPdthh+0x2c8>)
    3966:	f003 fac7 	bl	6ef8 <__aeabi_dmul>
    396a:	0002      	movs	r2, r0
    396c:	000b      	movs	r3, r1
    396e:	0020      	movs	r0, r4
    3970:	0029      	movs	r1, r5
    3972:	f003 fd3b 	bl	73ec <__aeabi_dsub>
    3976:	2200      	movs	r2, #0
    3978:	2300      	movs	r3, #0
    397a:	000e      	movs	r6, r1
    397c:	0004      	movs	r4, r0
    397e:	f002 fb39 	bl	5ff4 <__aeabi_dcmpgt>
    3982:	2800      	cmp	r0, #0
    3984:	d06f      	beq.n	3a66 <_ZN10arduinoFFT9WindowingEPdthh+0x26a>
    3986:	0022      	movs	r2, r4
    3988:	0033      	movs	r3, r6
    398a:	0020      	movs	r0, r4
    398c:	0031      	movs	r1, r6
    398e:	f002 fb63 	bl	6058 <__aeabi_dadd>
    3992:	9a00      	ldr	r2, [sp, #0]
    3994:	9b01      	ldr	r3, [sp, #4]
    3996:	f002 fe8b 	bl	66b0 <__aeabi_ddiv>
			break;
		case FFT_WIN_TYP_FLT_TOP: /* flat top */
			weighingFactor = 0.2810639 - (0.5208972 * cos(twoPi * ratio)) + (0.1980399 * cos(fourPi * ratio));
			break;
		case FFT_WIN_TYP_WELCH: /* welch */
			weighingFactor = 1.0 - sq((indexMinusOne - samplesMinusOne / 2.0) / (samplesMinusOne / 2.0));
    399a:	000b      	movs	r3, r1
    399c:	0002      	movs	r2, r0
    399e:	4937      	ldr	r1, [pc, #220]	; (3a7c <_ZN10arduinoFFT9WindowingEPdthh+0x280>)
    39a0:	2000      	movs	r0, #0
    39a2:	f003 fd23 	bl	73ec <__aeabi_dsub>
			break;
		}
		if (dir == FFT_FORWARD) {
    39a6:	9b04      	ldr	r3, [sp, #16]
			break;
		case FFT_WIN_TYP_FLT_TOP: /* flat top */
			weighingFactor = 0.2810639 - (0.5208972 * cos(twoPi * ratio)) + (0.1980399 * cos(fourPi * ratio));
			break;
		case FFT_WIN_TYP_WELCH: /* welch */
			weighingFactor = 1.0 - sq((indexMinusOne - samplesMinusOne / 2.0) / (samplesMinusOne / 2.0));
    39a8:	0004      	movs	r4, r0
    39aa:	000d      	movs	r5, r1
			break;
		}
		if (dir == FFT_FORWARD) {
    39ac:	2b01      	cmp	r3, #1
    39ae:	d000      	beq.n	39b2 <_ZN10arduinoFFT9WindowingEPdthh+0x1b6>
    39b0:	e78a      	b.n	38c8 <_ZN10arduinoFFT9WindowingEPdthh+0xcc>
			vData[i] *= weighingFactor;
    39b2:	464b      	mov	r3, r9
    39b4:	00de      	lsls	r6, r3, #3
    39b6:	4456      	add	r6, sl
    39b8:	6830      	ldr	r0, [r6, #0]
    39ba:	6871      	ldr	r1, [r6, #4]
    39bc:	0022      	movs	r2, r4
    39be:	002b      	movs	r3, r5
    39c0:	f003 fa9a 	bl	6ef8 <__aeabi_dmul>
    39c4:	6030      	str	r0, [r6, #0]
    39c6:	6071      	str	r1, [r6, #4]
			vData[samples - (i + 1)] *= weighingFactor;
    39c8:	4646      	mov	r6, r8
    39ca:	9b05      	ldr	r3, [sp, #20]
    39cc:	3601      	adds	r6, #1
    39ce:	1b9e      	subs	r6, r3, r6
    39d0:	00f6      	lsls	r6, r6, #3
    39d2:	4456      	add	r6, sl
    39d4:	6830      	ldr	r0, [r6, #0]
    39d6:	6871      	ldr	r1, [r6, #4]
    39d8:	0022      	movs	r2, r4
    39da:	002b      	movs	r3, r5
    39dc:	f003 fa8c 	bl	6ef8 <__aeabi_dmul>
    39e0:	6030      	str	r0, [r6, #0]
    39e2:	6071      	str	r1, [r6, #4]
    39e4:	e789      	b.n	38fa <_ZN10arduinoFFT9WindowingEPdthh+0xfe>
			break;
		case FFT_WIN_TYP_HAMMING: /* hamming */
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
			break;
		case FFT_WIN_TYP_HANN: /* hann */
			weighingFactor = 0.54 * (1.0 - cos(twoPi * ratio));
    39e6:	4a27      	ldr	r2, [pc, #156]	; (3a84 <_ZN10arduinoFFT9WindowingEPdthh+0x288>)
    39e8:	4b27      	ldr	r3, [pc, #156]	; (3a88 <_ZN10arduinoFFT9WindowingEPdthh+0x28c>)
    39ea:	f003 fa85 	bl	6ef8 <__aeabi_dmul>
    39ee:	f000 fe9b 	bl	4728 <cos>
    39f2:	0002      	movs	r2, r0
    39f4:	000b      	movs	r3, r1
    39f6:	2000      	movs	r0, #0
    39f8:	4920      	ldr	r1, [pc, #128]	; (3a7c <_ZN10arduinoFFT9WindowingEPdthh+0x280>)
    39fa:	f003 fcf7 	bl	73ec <__aeabi_dsub>
    39fe:	4a32      	ldr	r2, [pc, #200]	; (3ac8 <_ZN10arduinoFFT9WindowingEPdthh+0x2cc>)
    3a00:	4b32      	ldr	r3, [pc, #200]	; (3acc <_ZN10arduinoFFT9WindowingEPdthh+0x2d0>)
    3a02:	f003 fa79 	bl	6ef8 <__aeabi_dmul>
    3a06:	0004      	movs	r4, r0
    3a08:	000d      	movs	r5, r1
			break;
    3a0a:	e759      	b.n	38c0 <_ZN10arduinoFFT9WindowingEPdthh+0xc4>
		switch (windowType) {
		case FFT_WIN_TYP_RECTANGLE: /* rectangle (box car) */
			weighingFactor = 1.0;
			break;
		case FFT_WIN_TYP_HAMMING: /* hamming */
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
    3a0c:	4a1d      	ldr	r2, [pc, #116]	; (3a84 <_ZN10arduinoFFT9WindowingEPdthh+0x288>)
    3a0e:	4b1e      	ldr	r3, [pc, #120]	; (3a88 <_ZN10arduinoFFT9WindowingEPdthh+0x28c>)
    3a10:	f003 fa72 	bl	6ef8 <__aeabi_dmul>
    3a14:	f000 fe88 	bl	4728 <cos>
    3a18:	4a2d      	ldr	r2, [pc, #180]	; (3ad0 <_ZN10arduinoFFT9WindowingEPdthh+0x2d4>)
    3a1a:	4b2e      	ldr	r3, [pc, #184]	; (3ad4 <_ZN10arduinoFFT9WindowingEPdthh+0x2d8>)
    3a1c:	f003 fa6c 	bl	6ef8 <__aeabi_dmul>
    3a20:	0002      	movs	r2, r0
    3a22:	000b      	movs	r3, r1
    3a24:	4828      	ldr	r0, [pc, #160]	; (3ac8 <_ZN10arduinoFFT9WindowingEPdthh+0x2cc>)
    3a26:	4929      	ldr	r1, [pc, #164]	; (3acc <_ZN10arduinoFFT9WindowingEPdthh+0x2d0>)
    3a28:	f003 fce0 	bl	73ec <__aeabi_dsub>
    3a2c:	0004      	movs	r4, r0
    3a2e:	000d      	movs	r5, r1
			break;
    3a30:	e746      	b.n	38c0 <_ZN10arduinoFFT9WindowingEPdthh+0xc4>
			break;
		case FFT_WIN_TYP_FLT_TOP: /* flat top */
			weighingFactor = 0.2810639 - (0.5208972 * cos(twoPi * ratio)) + (0.1980399 * cos(fourPi * ratio));
			break;
		case FFT_WIN_TYP_WELCH: /* welch */
			weighingFactor = 1.0 - sq((indexMinusOne - samplesMinusOne / 2.0) / (samplesMinusOne / 2.0));
    3a32:	2200      	movs	r2, #0
    3a34:	9800      	ldr	r0, [sp, #0]
    3a36:	9901      	ldr	r1, [sp, #4]
    3a38:	4b22      	ldr	r3, [pc, #136]	; (3ac4 <_ZN10arduinoFFT9WindowingEPdthh+0x2c8>)
    3a3a:	f003 fa5d 	bl	6ef8 <__aeabi_dmul>
    3a3e:	0006      	movs	r6, r0
    3a40:	000f      	movs	r7, r1
    3a42:	0002      	movs	r2, r0
    3a44:	000b      	movs	r3, r1
    3a46:	0020      	movs	r0, r4
    3a48:	0029      	movs	r1, r5
    3a4a:	f003 fccf 	bl	73ec <__aeabi_dsub>
    3a4e:	0032      	movs	r2, r6
    3a50:	003b      	movs	r3, r7
    3a52:	f002 fe2d 	bl	66b0 <__aeabi_ddiv>
    3a56:	0002      	movs	r2, r0
    3a58:	000b      	movs	r3, r1
    3a5a:	f003 fa4d 	bl	6ef8 <__aeabi_dmul>
    3a5e:	e79c      	b.n	399a <_ZN10arduinoFFT9WindowingEPdthh+0x19e>
/* The weighing function is symetric; half the weighs are recorded */
	double samplesMinusOne = (double(samples) - 1.0);
	for (uint16_t i = 0; i < (samples >> 1); i++) {
		double indexMinusOne = double(i);
		double ratio = (indexMinusOne / samplesMinusOne);
		double weighingFactor = 1.0;
    3a60:	2400      	movs	r4, #0
    3a62:	4d06      	ldr	r5, [pc, #24]	; (3a7c <_ZN10arduinoFFT9WindowingEPdthh+0x280>)
    3a64:	e72c      	b.n	38c0 <_ZN10arduinoFFT9WindowingEPdthh+0xc4>
			break;
		case FFT_WIN_TYP_HANN: /* hann */
			weighingFactor = 0.54 * (1.0 - cos(twoPi * ratio));
			break;
		case FFT_WIN_TYP_TRIANGLE: /* triangle (Bartlett) */
			weighingFactor = 1.0 - ((2.0 * abs(indexMinusOne - (samplesMinusOne / 2.0))) / samplesMinusOne);
    3a66:	2380      	movs	r3, #128	; 0x80
    3a68:	061b      	lsls	r3, r3, #24
    3a6a:	469c      	mov	ip, r3
    3a6c:	4466      	add	r6, ip
    3a6e:	0022      	movs	r2, r4
    3a70:	0033      	movs	r3, r6
    3a72:	0020      	movs	r0, r4
    3a74:	0031      	movs	r1, r6
    3a76:	f002 faef 	bl	6058 <__aeabi_dadd>
    3a7a:	e78a      	b.n	3992 <_ZN10arduinoFFT9WindowingEPdthh+0x196>
    3a7c:	3ff00000 	.word	0x3ff00000
    3a80:	00008030 	.word	0x00008030
    3a84:	5474a168 	.word	0x5474a168
    3a88:	401921fb 	.word	0x401921fb
    3a8c:	541ebb2c 	.word	0x541ebb2c
    3a90:	402921fb 	.word	0x402921fb
    3a94:	9ad27ebd 	.word	0x9ad27ebd
    3a98:	3fe0ab30 	.word	0x3fe0ab30
    3a9c:	70a58489 	.word	0x70a58489
    3aa0:	3fd1fcf3 	.word	0x3fd1fcf3
    3aa4:	16e6cc52 	.word	0x16e6cc52
    3aa8:	3fc9595f 	.word	0x3fc9595f
    3aac:	f487fcb9 	.word	0xf487fcb9
    3ab0:	3fdfd7db 	.word	0x3fdfd7db
    3ab4:	482be8bc 	.word	0x482be8bc
    3ab8:	3fdb1633 	.word	0x3fdb1633
    3abc:	0d306a2b 	.word	0x0d306a2b
    3ac0:	3fb447c3 	.word	0x3fb447c3
    3ac4:	3fe00000 	.word	0x3fe00000
    3ac8:	147ae148 	.word	0x147ae148
    3acc:	3fe147ae 	.word	0x3fe147ae
    3ad0:	d70a3d71 	.word	0xd70a3d71
    3ad4:	3fdd70a3 	.word	0x3fdd70a3

00003ad8 <_ZN10arduinoFFT9MajorPeakEPdtd>:
		}
	}
}

double arduinoFFT::MajorPeak(double *vD, uint16_t samples, double samplingFrequency)
{
    3ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ada:	4656      	mov	r6, sl
    3adc:	464d      	mov	r5, r9
    3ade:	4644      	mov	r4, r8
    3ae0:	465f      	mov	r7, fp
    3ae2:	b4f0      	push	{r4, r5, r6, r7}
	double maxY = 0;
	uint16_t IndexOfMaxY = 0;
	for (uint16_t i = 1; i < ((samples >> 1) - 1); i++) {
    3ae4:	1053      	asrs	r3, r2, #1
    3ae6:	3b01      	subs	r3, #1
		}
	}
}

double arduinoFFT::MajorPeak(double *vD, uint16_t samples, double samplingFrequency)
{
    3ae8:	b085      	sub	sp, #20
    3aea:	4688      	mov	r8, r1
    3aec:	4691      	mov	r9, r2
	double maxY = 0;
	uint16_t IndexOfMaxY = 0;
	for (uint16_t i = 1; i < ((samples >> 1) - 1); i++) {
    3aee:	469a      	mov	sl, r3
    3af0:	2b01      	cmp	r3, #1
    3af2:	dc00      	bgt.n	3af6 <_ZN10arduinoFFT9MajorPeakEPdtd+0x1e>
    3af4:	e07d      	b.n	3bf2 <_ZN10arduinoFFT9MajorPeakEPdtd+0x11a>
    3af6:	2300      	movs	r3, #0
    3af8:	2400      	movs	r4, #0
    3afa:	469b      	mov	fp, r3
    3afc:	2300      	movs	r3, #0
    3afe:	2501      	movs	r5, #1
    3b00:	9300      	str	r3, [sp, #0]
    3b02:	9401      	str	r4, [sp, #4]
		if ((vD[i-1] < vD[i]) && (vD[i] > vD[i+1])) {
    3b04:	4b40      	ldr	r3, [pc, #256]	; (3c08 <_ZN10arduinoFFT9MajorPeakEPdtd+0x130>)
    3b06:	18ec      	adds	r4, r5, r3
    3b08:	00e4      	lsls	r4, r4, #3
    3b0a:	4444      	add	r4, r8
    3b0c:	68a6      	ldr	r6, [r4, #8]
    3b0e:	68e7      	ldr	r7, [r4, #12]
    3b10:	6820      	ldr	r0, [r4, #0]
    3b12:	6861      	ldr	r1, [r4, #4]
    3b14:	0032      	movs	r2, r6
    3b16:	003b      	movs	r3, r7
    3b18:	f002 fa58 	bl	5fcc <__aeabi_dcmplt>
    3b1c:	2800      	cmp	r0, #0
    3b1e:	d012      	beq.n	3b46 <_ZN10arduinoFFT9MajorPeakEPdtd+0x6e>
    3b20:	6922      	ldr	r2, [r4, #16]
    3b22:	6963      	ldr	r3, [r4, #20]
    3b24:	0030      	movs	r0, r6
    3b26:	0039      	movs	r1, r7
    3b28:	f002 fa64 	bl	5ff4 <__aeabi_dcmpgt>
    3b2c:	2800      	cmp	r0, #0
    3b2e:	d00a      	beq.n	3b46 <_ZN10arduinoFFT9MajorPeakEPdtd+0x6e>
			if (vD[i] > maxY) {
    3b30:	9a00      	ldr	r2, [sp, #0]
    3b32:	9b01      	ldr	r3, [sp, #4]
    3b34:	0030      	movs	r0, r6
    3b36:	0039      	movs	r1, r7
    3b38:	f002 fa5c 	bl	5ff4 <__aeabi_dcmpgt>
    3b3c:	2800      	cmp	r0, #0
    3b3e:	d002      	beq.n	3b46 <_ZN10arduinoFFT9MajorPeakEPdtd+0x6e>
    3b40:	46ab      	mov	fp, r5
				maxY = vD[i];
    3b42:	9600      	str	r6, [sp, #0]
    3b44:	9701      	str	r7, [sp, #4]

double arduinoFFT::MajorPeak(double *vD, uint16_t samples, double samplingFrequency)
{
	double maxY = 0;
	uint16_t IndexOfMaxY = 0;
	for (uint16_t i = 1; i < ((samples >> 1) - 1); i++) {
    3b46:	3501      	adds	r5, #1
    3b48:	b2ad      	uxth	r5, r5
    3b4a:	4555      	cmp	r5, sl
    3b4c:	dbda      	blt.n	3b04 <_ZN10arduinoFFT9MajorPeakEPdtd+0x2c>
    3b4e:	2308      	movs	r3, #8
    3b50:	4d2d      	ldr	r5, [pc, #180]	; (3c08 <_ZN10arduinoFFT9MajorPeakEPdtd+0x130>)
    3b52:	4658      	mov	r0, fp
    3b54:	469a      	mov	sl, r3
    3b56:	445d      	add	r5, fp
    3b58:	f003 fff2 	bl	7b40 <__aeabi_i2d>
    3b5c:	00ed      	lsls	r5, r5, #3
    3b5e:	002c      	movs	r4, r5
    3b60:	9002      	str	r0, [sp, #8]
    3b62:	9103      	str	r1, [sp, #12]
    3b64:	3410      	adds	r4, #16
    3b66:	44aa      	add	sl, r5
				maxY = vD[i];
				IndexOfMaxY = i;
			}
		}
	}
	double delta = 0.5 * ((vD[IndexOfMaxY-1] - vD[IndexOfMaxY+1]) / (vD[IndexOfMaxY-1] - (2.0 * vD[IndexOfMaxY]) + vD[IndexOfMaxY+1]));
    3b68:	4445      	add	r5, r8
    3b6a:	4444      	add	r4, r8
    3b6c:	682e      	ldr	r6, [r5, #0]
    3b6e:	686f      	ldr	r7, [r5, #4]
    3b70:	6865      	ldr	r5, [r4, #4]
    3b72:	6824      	ldr	r4, [r4, #0]
	double interpolatedX = ((IndexOfMaxY + delta)  * samplingFrequency) / (samples-1);
	/* retuned value: interpolated frequency peak apex */
	return(interpolatedX);
    3b74:	0030      	movs	r0, r6
    3b76:	0022      	movs	r2, r4
    3b78:	002b      	movs	r3, r5
    3b7a:	0039      	movs	r1, r7
    3b7c:	f003 fc36 	bl	73ec <__aeabi_dsub>
				maxY = vD[i];
				IndexOfMaxY = i;
			}
		}
	}
	double delta = 0.5 * ((vD[IndexOfMaxY-1] - vD[IndexOfMaxY+1]) / (vD[IndexOfMaxY-1] - (2.0 * vD[IndexOfMaxY]) + vD[IndexOfMaxY+1]));
    3b80:	4643      	mov	r3, r8
    3b82:	4453      	add	r3, sl
	double interpolatedX = ((IndexOfMaxY + delta)  * samplingFrequency) / (samples-1);
	/* retuned value: interpolated frequency peak apex */
	return(interpolatedX);
    3b84:	9000      	str	r0, [sp, #0]
    3b86:	9101      	str	r1, [sp, #4]
    3b88:	6818      	ldr	r0, [r3, #0]
    3b8a:	6859      	ldr	r1, [r3, #4]
    3b8c:	0002      	movs	r2, r0
    3b8e:	000b      	movs	r3, r1
    3b90:	f002 fa62 	bl	6058 <__aeabi_dadd>
    3b94:	0002      	movs	r2, r0
    3b96:	000b      	movs	r3, r1
    3b98:	0030      	movs	r0, r6
    3b9a:	0039      	movs	r1, r7
    3b9c:	f003 fc26 	bl	73ec <__aeabi_dsub>
    3ba0:	0022      	movs	r2, r4
    3ba2:	002b      	movs	r3, r5
    3ba4:	f002 fa58 	bl	6058 <__aeabi_dadd>
    3ba8:	0002      	movs	r2, r0
    3baa:	000b      	movs	r3, r1
    3bac:	9800      	ldr	r0, [sp, #0]
    3bae:	9901      	ldr	r1, [sp, #4]
    3bb0:	f002 fd7e 	bl	66b0 <__aeabi_ddiv>
    3bb4:	2200      	movs	r2, #0
    3bb6:	4b15      	ldr	r3, [pc, #84]	; (3c0c <_ZN10arduinoFFT9MajorPeakEPdtd+0x134>)
    3bb8:	f003 f99e 	bl	6ef8 <__aeabi_dmul>
    3bbc:	9a02      	ldr	r2, [sp, #8]
    3bbe:	9b03      	ldr	r3, [sp, #12]
    3bc0:	f002 fa4a 	bl	6058 <__aeabi_dadd>
    3bc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3bc8:	f003 f996 	bl	6ef8 <__aeabi_dmul>
    3bcc:	0004      	movs	r4, r0
    3bce:	4648      	mov	r0, r9
    3bd0:	3801      	subs	r0, #1
    3bd2:	000d      	movs	r5, r1
    3bd4:	f003 ffb4 	bl	7b40 <__aeabi_i2d>
    3bd8:	0002      	movs	r2, r0
    3bda:	000b      	movs	r3, r1
    3bdc:	0020      	movs	r0, r4
    3bde:	0029      	movs	r1, r5
    3be0:	f002 fd66 	bl	66b0 <__aeabi_ddiv>
}
    3be4:	b005      	add	sp, #20
    3be6:	bc3c      	pop	{r2, r3, r4, r5}
    3be8:	4690      	mov	r8, r2
    3bea:	4699      	mov	r9, r3
    3bec:	46a2      	mov	sl, r4
    3bee:	46ab      	mov	fp, r5
    3bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

double arduinoFFT::MajorPeak(double *vD, uint16_t samples, double samplingFrequency)
{
	double maxY = 0;
	uint16_t IndexOfMaxY = 0;
	for (uint16_t i = 1; i < ((samples >> 1) - 1); i++) {
    3bf2:	2300      	movs	r3, #0
    3bf4:	2400      	movs	r4, #0
    3bf6:	2508      	movs	r5, #8
    3bf8:	9302      	str	r3, [sp, #8]
    3bfa:	9403      	str	r4, [sp, #12]
    3bfc:	2300      	movs	r3, #0
    3bfe:	2408      	movs	r4, #8
    3c00:	469a      	mov	sl, r3
    3c02:	426d      	negs	r5, r5
    3c04:	e7b0      	b.n	3b68 <_ZN10arduinoFFT9MajorPeakEPdtd+0x90>
    3c06:	46c0      	nop			; (mov r8, r8)
    3c08:	1fffffff 	.word	0x1fffffff
    3c0c:	3fe00000 	.word	0x3fe00000

00003c10 <_Z10fill_solidP4CRGBiRKS_>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    3c10:	2900      	cmp	r1, #0
    3c12:	dd0b      	ble.n	3c2c <_Z10fill_solidP4CRGBiRKS_+0x1c>
    3c14:	004b      	lsls	r3, r1, #1
    3c16:	1859      	adds	r1, r3, r1
    3c18:	1841      	adds	r1, r0, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c1a:	7813      	ldrb	r3, [r2, #0]
    3c1c:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    3c1e:	7853      	ldrb	r3, [r2, #1]
    3c20:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    3c22:	7893      	ldrb	r3, [r2, #2]
    3c24:	7083      	strb	r3, [r0, #2]
    3c26:	3003      	adds	r0, #3
    3c28:	4288      	cmp	r0, r1
    3c2a:	d1f6      	bne.n	3c1a <_Z10fill_solidP4CRGBiRKS_+0xa>
        leds[i] = color;
    }
}
    3c2c:	4770      	bx	lr
    3c2e:	46c0      	nop			; (mov r8, r8)

00003c30 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    3c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c32:	0004      	movs	r4, r0
    3c34:	000f      	movs	r7, r1
    3c36:	1e1e      	subs	r6, r3, #0
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    3c38:	dd0f      	ble.n	3c5a <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x2a>
    3c3a:	0055      	lsls	r5, r2, #1
    3c3c:	18ad      	adds	r5, r5, r2
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    3c3e:	6823      	ldr	r3, [r4, #0]
    3c40:	0020      	movs	r0, r4
    3c42:	689b      	ldr	r3, [r3, #8]
    3c44:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    3c46:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    3c48:	6823      	ldr	r3, [r4, #0]
    3c4a:	6062      	str	r2, [r4, #4]
    3c4c:	695b      	ldr	r3, [r3, #20]
    3c4e:	4a0b      	ldr	r2, [pc, #44]	; (3c7c <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x4c>)
        m_nLeds = nLeds;
    3c50:	6166      	str	r6, [r4, #20]
    3c52:	4293      	cmp	r3, r2
    3c54:	d104      	bne.n	3c60 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x30>
	return *pLed;
}
    3c56:	0020      	movs	r0, r4
    3c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    3c5a:	0016      	movs	r6, r2
    3c5c:	2500      	movs	r5, #0
    3c5e:	e7ee      	b.n	3c3e <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0xe>

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    3c60:	0020      	movs	r0, r4
    3c62:	4798      	blx	r3
    3c64:	1e01      	subs	r1, r0, #0

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    3c66:	d0f6      	beq.n	3c56 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x26>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    3c68:	4805      	ldr	r0, [pc, #20]	; (3c80 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x50>)
    3c6a:	f002 f8ad 	bl	5dc8 <__aeabi_idiv>
    3c6e:	4d05      	ldr	r5, [pc, #20]	; (3c84 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x54>)
    3c70:	686b      	ldr	r3, [r5, #4]
    3c72:	4283      	cmp	r3, r0
    3c74:	d200      	bcs.n	3c78 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x48>
    3c76:	0003      	movs	r3, r0
    3c78:	606b      	str	r3, [r5, #4]
    3c7a:	e7ec      	b.n	3c56 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x26>
    3c7c:	00000119 	.word	0x00000119
    3c80:	000f4240 	.word	0x000f4240
    3c84:	20000bd0 	.word	0x20000bd0

00003c88 <_ZN8CFastLED4showEh>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    3c88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c8a:	4657      	mov	r7, sl
    3c8c:	464e      	mov	r6, r9
    3c8e:	4645      	mov	r5, r8
    3c90:	468a      	mov	sl, r1
    3c92:	b4e0      	push	{r5, r6, r7}
    3c94:	0007      	movs	r7, r0
    3c96:	6843      	ldr	r3, [r0, #4]
    3c98:	4c3d      	ldr	r4, [pc, #244]	; (3d90 <_ZN8CFastLED4showEh+0x108>)
    3c9a:	b082      	sub	sp, #8
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	d16d      	bne.n	3d7c <_ZN8CFastLED4showEh+0xf4>
	lastshow = micros();
    3ca0:	f7fd fb32 	bl	1308 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    3ca4:	68fb      	ldr	r3, [r7, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    3ca6:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d003      	beq.n	3cb4 <_ZN8CFastLED4showEh+0x2c>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    3cac:	4650      	mov	r0, sl
    3cae:	68b9      	ldr	r1, [r7, #8]
    3cb0:	4798      	blx	r3
    3cb2:	4682      	mov	sl, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    3cb4:	4b37      	ldr	r3, [pc, #220]	; (3d94 <_ZN8CFastLED4showEh+0x10c>)
    3cb6:	ad01      	add	r5, sp, #4
    3cb8:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3cba:	2600      	movs	r6, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3cbc:	2c00      	cmp	r4, #0
    3cbe:	d03f      	beq.n	3d40 <_ZN8CFastLED4showEh+0xb8>
    3cc0:	7ca3      	ldrb	r3, [r4, #18]
    3cc2:	4698      	mov	r8, r3
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    3cc4:	887b      	ldrh	r3, [r7, #2]
    3cc6:	2b63      	cmp	r3, #99	; 0x63
    3cc8:	d800      	bhi.n	3ccc <_ZN8CFastLED4showEh+0x44>
    3cca:	74a6      	strb	r6, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3ccc:	6823      	ldr	r3, [r4, #0]
    3cce:	6861      	ldr	r1, [r4, #4]
    3cd0:	685b      	ldr	r3, [r3, #4]
    3cd2:	6962      	ldr	r2, [r4, #20]
    3cd4:	4699      	mov	r9, r3
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    3cd6:	4653      	mov	r3, sl
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    3cd8:	702e      	strb	r6, [r5, #0]
    3cda:	706e      	strb	r6, [r5, #1]
    3cdc:	70ae      	strb	r6, [r5, #2]
    3cde:	2b00      	cmp	r3, #0
    3ce0:	d026      	beq.n	3d30 <_ZN8CFastLED4showEh+0xa8>
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    3ce2:	7b20      	ldrb	r0, [r4, #12]
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    3ce4:	2800      	cmp	r0, #0
    3ce6:	d009      	beq.n	3cfc <_ZN8CFastLED4showEh+0x74>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    3ce8:	7be3      	ldrb	r3, [r4, #15]
                      if(cc > 0 && ct > 0) {
    3cea:	2b00      	cmp	r3, #0
    3cec:	d006      	beq.n	3cfc <_ZN8CFastLED4showEh+0x74>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3cee:	3001      	adds	r0, #1
    3cf0:	3301      	adds	r3, #1
    3cf2:	4343      	muls	r3, r0
    3cf4:	4650      	mov	r0, sl
    3cf6:	4343      	muls	r3, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    3cf8:	0c1b      	lsrs	r3, r3, #16
    3cfa:	702b      	strb	r3, [r5, #0]
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    3cfc:	7b60      	ldrb	r0, [r4, #13]
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    3cfe:	2800      	cmp	r0, #0
    3d00:	d009      	beq.n	3d16 <_ZN8CFastLED4showEh+0x8e>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    3d02:	7c23      	ldrb	r3, [r4, #16]
                      if(cc > 0 && ct > 0) {
    3d04:	2b00      	cmp	r3, #0
    3d06:	d006      	beq.n	3d16 <_ZN8CFastLED4showEh+0x8e>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3d08:	3001      	adds	r0, #1
    3d0a:	3301      	adds	r3, #1
    3d0c:	4343      	muls	r3, r0
    3d0e:	4650      	mov	r0, sl
    3d10:	4343      	muls	r3, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    3d12:	0c1b      	lsrs	r3, r3, #16
    3d14:	706b      	strb	r3, [r5, #1]
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    3d16:	7ba0      	ldrb	r0, [r4, #14]
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    3d18:	2800      	cmp	r0, #0
    3d1a:	d009      	beq.n	3d30 <_ZN8CFastLED4showEh+0xa8>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    3d1c:	7c63      	ldrb	r3, [r4, #17]
                      if(cc > 0 && ct > 0) {
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d006      	beq.n	3d30 <_ZN8CFastLED4showEh+0xa8>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3d22:	3001      	adds	r0, #1
    3d24:	3301      	adds	r3, #1
    3d26:	4343      	muls	r3, r0
    3d28:	4650      	mov	r0, sl
    3d2a:	4343      	muls	r3, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    3d2c:	0c1b      	lsrs	r3, r3, #16
    3d2e:	70ab      	strb	r3, [r5, #2]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3d30:	002b      	movs	r3, r5
    3d32:	0020      	movs	r0, r4
    3d34:	47c8      	blx	r9

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3d36:	4643      	mov	r3, r8
    3d38:	74a3      	strb	r3, [r4, #18]
    3d3a:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3d3c:	2c00      	cmp	r4, #0
    3d3e:	d1bf      	bne.n	3cc0 <_ZN8CFastLED4showEh+0x38>

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    3d40:	4c15      	ldr	r4, [pc, #84]	; (3d98 <_ZN8CFastLED4showEh+0x110>)
    3d42:	6823      	ldr	r3, [r4, #0]
    3d44:	1c5a      	adds	r2, r3, #1
    3d46:	6022      	str	r2, [r4, #0]
    3d48:	2b18      	cmp	r3, #24
    3d4a:	dd11      	ble.n	3d70 <_ZN8CFastLED4showEh+0xe8>
		uint32_t now = millis();
    3d4c:	f7fd fad6 	bl	12fc <millis>
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3d50:	23fa      	movs	r3, #250	; 0xfa
    3d52:	6822      	ldr	r2, [r4, #0]
    3d54:	009b      	lsls	r3, r3, #2
    3d56:	4353      	muls	r3, r2
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
    3d58:	4d10      	ldr	r5, [pc, #64]	; (3d9c <_ZN8CFastLED4showEh+0x114>)
		m_nFPS = (br * 1000) / now;
    3d5a:	682a      	ldr	r2, [r5, #0]
    3d5c:	1a81      	subs	r1, r0, r2
    3d5e:	0018      	movs	r0, r3
    3d60:	f001 ffa8 	bl	5cb4 <__aeabi_uidiv>
    br = 0;
    3d64:	2300      	movs	r3, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3d66:	8078      	strh	r0, [r7, #2]
    br = 0;
    3d68:	6023      	str	r3, [r4, #0]
    lastframe = millis();
    3d6a:	f7fd fac7 	bl	12fc <millis>
    3d6e:	6028      	str	r0, [r5, #0]
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
    3d70:	b002      	add	sp, #8
    3d72:	bc1c      	pop	{r2, r3, r4}
    3d74:	4690      	mov	r8, r2
    3d76:	4699      	mov	r9, r3
    3d78:	46a2      	mov	sl, r4
    3d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    3d7c:	f7fd fac4 	bl	1308 <micros>
    3d80:	6822      	ldr	r2, [r4, #0]
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	1a80      	subs	r0, r0, r2
    3d86:	4298      	cmp	r0, r3
    3d88:	d200      	bcs.n	3d8c <_ZN8CFastLED4showEh+0x104>
    3d8a:	e787      	b.n	3c9c <_ZN8CFastLED4showEh+0x14>
    3d8c:	e788      	b.n	3ca0 <_ZN8CFastLED4showEh+0x18>
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	20000be8 	.word	0x20000be8
    3d94:	20000be0 	.word	0x20000be0
    3d98:	20000be4 	.word	0x20000be4
    3d9c:	20000bec 	.word	0x20000bec

00003da0 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    3da0:	22ff      	movs	r2, #255	; 0xff
    3da2:	4b04      	ldr	r3, [pc, #16]	; (3db4 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
    3da4:	701a      	strb	r2, [r3, #0]
	m_nFPS = 0;
    3da6:	2200      	movs	r2, #0
    3da8:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    3daa:	60da      	str	r2, [r3, #12]
	m_nPowerData = 0xFFFFFFFF;
    3dac:	3a01      	subs	r2, #1
    3dae:	609a      	str	r2, [r3, #8]
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    3db0:	4770      	bx	lr
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	20000bd0 	.word	0x20000bd0

00003db8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>:
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3db8:	2256      	movs	r2, #86	; 0x56
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    3dba:	b570      	push	{r4, r5, r6, lr}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    3dbc:	7805      	ldrb	r5, [r0, #0]
    uint8_t sat = hsv.sat;
    3dbe:	7844      	ldrb	r4, [r0, #1]
    uint8_t val = hsv.val;
    3dc0:	7883      	ldrb	r3, [r0, #2]
    3dc2:	00e8      	lsls	r0, r5, #3
    3dc4:	b2c0      	uxtb	r0, r0
    3dc6:	4342      	muls	r2, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    3dc8:	b26e      	sxtb	r6, r5
    3dca:	0a12      	lsrs	r2, r2, #8
    3dcc:	2e00      	cmp	r6, #0
    3dce:	db5a      	blt.n	3e86 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xce>
        // 0XX
        if( ! (hue & 0x40) ) {
    3dd0:	066e      	lsls	r6, r5, #25
    3dd2:	d44a      	bmi.n	3e6a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xb2>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    3dd4:	06a8      	lsls	r0, r5, #26
    3dd6:	d566      	bpl.n	3ea6 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xee>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    3dd8:	3255      	adds	r2, #85	; 0x55
    3dda:	b2d5      	uxtb	r5, r2
                    b = 0;
                    FORCE_REFERENCE(b);
    3ddc:	2200      	movs	r2, #0
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
                    b = 0;
    3dde:	2200      	movs	r2, #0
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    3de0:	20ab      	movs	r0, #171	; 0xab
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    3de2:	2cff      	cmp	r4, #255	; 0xff
    3de4:	d020      	beq.n	3e28 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x70>
        if( sat == 0) {
    3de6:	2c00      	cmp	r4, #0
    3de8:	d100      	bne.n	3dec <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x34>
    3dea:	e073      	b.n	3ed4 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x11c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    3dec:	2800      	cmp	r0, #0
    3dee:	d003      	beq.n	3df8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x40>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    3df0:	1c66      	adds	r6, r4, #1
    3df2:	4370      	muls	r0, r6
    3df4:	1200      	asrs	r0, r0, #8
    3df6:	b2c0      	uxtb	r0, r0
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    3df8:	2d00      	cmp	r5, #0
    3dfa:	d003      	beq.n	3e04 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x4c>
    3dfc:	1c66      	adds	r6, r4, #1
    3dfe:	4375      	muls	r5, r6
    3e00:	122d      	asrs	r5, r5, #8
    3e02:	b2ed      	uxtb	r5, r5
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    3e04:	2a00      	cmp	r2, #0
    3e06:	d003      	beq.n	3e10 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x58>
    3e08:	1c66      	adds	r6, r4, #1
    3e0a:	4372      	muls	r2, r6
    3e0c:	1212      	asrs	r2, r2, #8
    3e0e:	b2d2      	uxtb	r2, r2
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3e10:	43e4      	mvns	r4, r4
    3e12:	b2e4      	uxtb	r4, r4
    3e14:	1c66      	adds	r6, r4, #1
    3e16:	4374      	muls	r4, r6
    3e18:	1224      	asrs	r4, r4, #8
    3e1a:	b2e4      	uxtb	r4, r4
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    3e1c:	1900      	adds	r0, r0, r4
            g += brightness_floor;
    3e1e:	192d      	adds	r5, r5, r4
            b += brightness_floor;
    3e20:	1912      	adds	r2, r2, r4
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    3e22:	b2c0      	uxtb	r0, r0
            g += brightness_floor;
    3e24:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    3e26:	b2d2      	uxtb	r2, r2
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    3e28:	2bff      	cmp	r3, #255	; 0xff
    3e2a:	d01a      	beq.n	3e62 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xaa>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    3e2c:	001c      	movs	r4, r3
    3e2e:	1e66      	subs	r6, r4, #1
    3e30:	41b4      	sbcs	r4, r6
    3e32:	435b      	muls	r3, r3
    3e34:	121b      	asrs	r3, r3, #8
    3e36:	18e3      	adds	r3, r4, r3
    3e38:	b2db      	uxtb	r3, r3
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d04e      	beq.n	3edc <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x124>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    3e3e:	2800      	cmp	r0, #0
    3e40:	d003      	beq.n	3e4a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x92>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    3e42:	1c5c      	adds	r4, r3, #1
    3e44:	4360      	muls	r0, r4
    3e46:	1200      	asrs	r0, r0, #8
    3e48:	b2c0      	uxtb	r0, r0
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    3e4a:	2d00      	cmp	r5, #0
    3e4c:	d003      	beq.n	3e56 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x9e>
    3e4e:	1c5c      	adds	r4, r3, #1
    3e50:	4365      	muls	r5, r4
    3e52:	122d      	asrs	r5, r5, #8
    3e54:	b2ed      	uxtb	r5, r5
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    3e56:	2a00      	cmp	r2, #0
    3e58:	d003      	beq.n	3e62 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xaa>
    3e5a:	3301      	adds	r3, #1
    3e5c:	4353      	muls	r3, r2
    3e5e:	121b      	asrs	r3, r3, #8
    3e60:	b2da      	uxtb	r2, r3
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    rgb.g = g;
    3e62:	704d      	strb	r5, [r1, #1]
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    3e64:	7008      	strb	r0, [r1, #0]
    rgb.g = g;
    rgb.b = b;
    3e66:	708a      	strb	r2, [r1, #2]
}
    3e68:	bd70      	pop	{r4, r5, r6, pc}
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    3e6a:	06ad      	lsls	r5, r5, #26
    3e6c:	d421      	bmi.n	3eb2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xfa>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    3e6e:	25ab      	movs	r5, #171	; 0xab
    3e70:	4368      	muls	r0, r5
    3e72:	3d01      	subs	r5, #1
    3e74:	3dff      	subs	r5, #255	; 0xff
    3e76:	1200      	asrs	r0, r0, #8
    3e78:	1a28      	subs	r0, r5, r0
                    g = K170 + third;
    3e7a:	3a56      	subs	r2, #86	; 0x56
    3e7c:	b2d5      	uxtb	r5, r2
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    3e7e:	b2c0      	uxtb	r0, r0
                    g = K170 + third;
                    b = 0;
                    FORCE_REFERENCE(b);
    3e80:	2200      	movs	r2, #0
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
                    g = K170 + third;
                    b = 0;
    3e82:	2200      	movs	r2, #0
    3e84:	e7ad      	b.n	3de2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2a>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    3e86:	066e      	lsls	r6, r5, #25
    3e88:	d418      	bmi.n	3ebc <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x104>
            // 10X
            if( ! ( hue & 0x20) ) {
    3e8a:	06ad      	lsls	r5, r5, #26
    3e8c:	d433      	bmi.n	3ef6 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x13e>
                // 100
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
    3e8e:	2200      	movs	r2, #0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3e90:	22ab      	movs	r2, #171	; 0xab
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    3e92:	2555      	movs	r5, #85	; 0x55
    3e94:	4350      	muls	r0, r2
    3e96:	426d      	negs	r5, r5
    3e98:	0a00      	lsrs	r0, r0, #8
    3e9a:	1a2d      	subs	r5, r5, r0
                b = K85  + twothirds;
    3e9c:	3055      	adds	r0, #85	; 0x55
    3e9e:	b2c2      	uxtb	r2, r0
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    3ea0:	b2ed      	uxtb	r5, r5
        if( ! (hue & 0x40) ) {
            // 10X
            if( ! ( hue & 0x20) ) {
                // 100
                //case 4: // A -> B
                r = 0;
    3ea2:	2000      	movs	r0, #0
    3ea4:	e79d      	b.n	3de2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2a>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    3ea6:	43d0      	mvns	r0, r2
                g = third;
                b = 0;
                FORCE_REFERENCE(b);
    3ea8:	2500      	movs	r5, #0
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    3eaa:	b2c0      	uxtb	r0, r0
                g = third;
    3eac:	0015      	movs	r5, r2
                b = 0;
    3eae:	2200      	movs	r2, #0
    3eb0:	e797      	b.n	3de2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2a>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    3eb2:	2000      	movs	r0, #0
                g = K255 - third;
    3eb4:	43d5      	mvns	r5, r2
                    FORCE_REFERENCE(b);
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
    3eb6:	2000      	movs	r0, #0
                FORCE_REFERENCE(r);
                g = K255 - third;
    3eb8:	b2ed      	uxtb	r5, r5
    3eba:	e792      	b.n	3de2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2a>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    3ebc:	06a8      	lsls	r0, r5, #26
    3ebe:	d411      	bmi.n	3ee4 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x12c>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    3ec0:	0010      	movs	r0, r2
    3ec2:	3055      	adds	r0, #85	; 0x55
    3ec4:	b2c0      	uxtb	r0, r0
                g = 0;
                FORCE_REFERENCE(g);
    3ec6:	2500      	movs	r5, #0
                b = K171 - third;
    3ec8:	2555      	movs	r5, #85	; 0x55
    3eca:	426d      	negs	r5, r5
    3ecc:	1aaa      	subs	r2, r5, r2
    3ece:	b2d2      	uxtb	r2, r2
        } else {
            if( !  (hue & 0x20)  ) {
                // 110
                //case 6: // P -- K
                r = K85 + third;
                g = 0;
    3ed0:	2500      	movs	r5, #0
    3ed2:	e786      	b.n	3de2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2a>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    3ed4:	22ff      	movs	r2, #255	; 0xff
    3ed6:	25ff      	movs	r5, #255	; 0xff
    3ed8:	20ff      	movs	r0, #255	; 0xff
    3eda:	e7a5      	b.n	3e28 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x70>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    3edc:	2200      	movs	r2, #0
    3ede:	2500      	movs	r5, #0
    3ee0:	2000      	movs	r0, #0
    3ee2:	e7be      	b.n	3e62 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xaa>
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    3ee4:	0010      	movs	r0, r2
    3ee6:	3856      	subs	r0, #86	; 0x56
    3ee8:	b2c0      	uxtb	r0, r0
                g = 0;
                FORCE_REFERENCE(g);
    3eea:	2500      	movs	r5, #0
                b = K85 - third;
    3eec:	2555      	movs	r5, #85	; 0x55
    3eee:	1aaa      	subs	r2, r5, r2
    3ef0:	b2d2      	uxtb	r2, r2
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
    3ef2:	2500      	movs	r5, #0
    3ef4:	e775      	b.n	3de2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2a>
            } else {
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
    3ef6:	2000      	movs	r0, #0
                b = K255 - third;
    3ef8:	43d5      	mvns	r5, r2
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    3efa:	0010      	movs	r0, r2
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    3efc:	b2ea      	uxtb	r2, r5
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
    3efe:	2500      	movs	r5, #0
    3f00:	e76f      	b.n	3de2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x2a>
    3f02:	46c0      	nop			; (mov r8, r8)

00003f04 <_Z37calculate_max_brightness_for_power_mWhm>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    3f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f06:	4644      	mov	r4, r8
    3f08:	465f      	mov	r7, fp
    3f0a:	464d      	mov	r5, r9
    3f0c:	4656      	mov	r6, sl
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    3f0e:	4b37      	ldr	r3, [pc, #220]	; (3fec <_Z37calculate_max_brightness_for_power_mWhm+0xe8>)
    3f10:	b4f0      	push	{r4, r5, r6, r7}
    3f12:	681c      	ldr	r4, [r3, #0]
    uint32_t total_mW = gMCU_mW;
    3f14:	237d      	movs	r3, #125	; 0x7d

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    3f16:	4681      	mov	r9, r0
    3f18:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;
    3f1a:	469b      	mov	fp, r3

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3f1c:	2c00      	cmp	r4, #0
    3f1e:	d037      	beq.n	3f90 <_Z37calculate_max_brightness_for_power_mWhm+0x8c>
    3f20:	4b33      	ldr	r3, [pc, #204]	; (3ff0 <_Z37calculate_max_brightness_for_power_mWhm+0xec>)
    3f22:	469a      	mov	sl, r3
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    3f24:	6823      	ldr	r3, [r4, #0]
    3f26:	6866      	ldr	r6, [r4, #4]
    3f28:	691b      	ldr	r3, [r3, #16]
    3f2a:	4553      	cmp	r3, sl
    3f2c:	d142      	bne.n	3fb4 <_Z37calculate_max_brightness_for_power_mWhm+0xb0>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    3f2e:	6960      	ldr	r0, [r4, #20]
    3f30:	b282      	uxth	r2, r0
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    3f32:	2a00      	cmp	r2, #0
    3f34:	d043      	beq.n	3fbe <_Z37calculate_max_brightness_for_power_mWhm+0xba>
    3f36:	3a01      	subs	r2, #1
    3f38:	b292      	uxth	r2, r2
    3f3a:	3201      	adds	r2, #1
    3f3c:	0051      	lsls	r1, r2, #1
    3f3e:	188a      	adds	r2, r1, r2
    3f40:	0033      	movs	r3, r6
    3f42:	2100      	movs	r1, #0
    3f44:	18b6      	adds	r6, r6, r2
    3f46:	2700      	movs	r7, #0
    3f48:	2200      	movs	r2, #0
        red32   += *p++;
    3f4a:	781d      	ldrb	r5, [r3, #0]
    3f4c:	1952      	adds	r2, r2, r5
        green32 += *p++;
    3f4e:	785d      	ldrb	r5, [r3, #1]
    3f50:	197f      	adds	r7, r7, r5
        blue32  += *p++;
    3f52:	789d      	ldrb	r5, [r3, #2]
    3f54:	3303      	adds	r3, #3
    3f56:	1949      	adds	r1, r1, r5
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    3f58:	429e      	cmp	r6, r3
    3f5a:	d1f6      	bne.n	3f4a <_Z37calculate_max_brightness_for_power_mWhm+0x46>
    3f5c:	0093      	lsls	r3, r2, #2
    3f5e:	189a      	adds	r2, r3, r2
    3f60:	00fb      	lsls	r3, r7, #3
    3f62:	1bdb      	subs	r3, r3, r7
    3f64:	00db      	lsls	r3, r3, #3
    3f66:	1bdb      	subs	r3, r3, r7
    3f68:	008f      	lsls	r7, r1, #2
    3f6a:	1879      	adds	r1, r7, r1
    3f6c:	010f      	lsls	r7, r1, #4
    3f6e:	0112      	lsls	r2, r2, #4
    3f70:	1a79      	subs	r1, r7, r1
    3f72:	0a12      	lsrs	r2, r2, #8
    3f74:	0a1b      	lsrs	r3, r3, #8
    3f76:	0a09      	lsrs	r1, r1, #8
    3f78:	0400      	lsls	r0, r0, #16
    3f7a:	0c00      	lsrs	r0, r0, #16
    3f7c:	0087      	lsls	r7, r0, #2
    3f7e:	1838      	adds	r0, r7, r0
    3f80:	1880      	adds	r0, r0, r2
    3f82:	4458      	add	r0, fp
    3f84:	18c5      	adds	r5, r0, r3
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    3f86:	46ab      	mov	fp, r5
    3f88:	68a4      	ldr	r4, [r4, #8]
    3f8a:	448b      	add	fp, r1
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3f8c:	2c00      	cmp	r4, #0
    3f8e:	d1c9      	bne.n	3f24 <_Z37calculate_max_brightness_for_power_mWhm+0x20>
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    3f90:	4659      	mov	r1, fp
    3f92:	464b      	mov	r3, r9
    3f94:	4359      	muls	r1, r3
    3f96:	0a09      	lsrs	r1, r1, #8
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    3f98:	4541      	cmp	r1, r8
    3f9a:	d214      	bcs.n	3fc6 <_Z37calculate_max_brightness_for_power_mWhm+0xc2>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    3f9c:	4b15      	ldr	r3, [pc, #84]	; (3ff4 <_Z37calculate_max_brightness_for_power_mWhm+0xf0>)
    3f9e:	464f      	mov	r7, r9
    3fa0:	7818      	ldrb	r0, [r3, #0]
    3fa2:	2800      	cmp	r0, #0
    3fa4:	d11e      	bne.n	3fe4 <_Z37calculate_max_brightness_for_power_mWhm+0xe0>
        digitalWrite( gMaxPowerIndicatorLEDPinNumber, HIGH);   // turn the LED on
    }
#endif

    return recommended_brightness;
}
    3fa6:	0038      	movs	r0, r7
    3fa8:	bc3c      	pop	{r2, r3, r4, r5}
    3faa:	4690      	mov	r8, r2
    3fac:	4699      	mov	r9, r3
    3fae:	46a2      	mov	sl, r4
    3fb0:	46ab      	mov	fp, r5
    3fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    3fb4:	0020      	movs	r0, r4
    3fb6:	4798      	blx	r3
    3fb8:	b282      	uxth	r2, r0
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    3fba:	2a00      	cmp	r2, #0
    3fbc:	d1bb      	bne.n	3f36 <_Z37calculate_max_brightness_for_power_mWhm+0x32>
    3fbe:	2100      	movs	r1, #0
    3fc0:	2300      	movs	r3, #0
    3fc2:	2200      	movs	r2, #0
    3fc4:	e7d8      	b.n	3f78 <_Z37calculate_max_brightness_for_power_mWhm+0x74>
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    3fc6:	464b      	mov	r3, r9
    3fc8:	4640      	mov	r0, r8
    3fca:	4358      	muls	r0, r3
    3fcc:	f001 fe72 	bl	5cb4 <__aeabi_uidiv>

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    3fd0:	4b08      	ldr	r3, [pc, #32]	; (3ff4 <_Z37calculate_max_brightness_for_power_mWhm+0xf0>)
        digitalWrite( gMaxPowerIndicatorLEDPinNumber, HIGH);   // turn the LED on
    }
#endif

    return recommended_brightness;
    3fd2:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    3fd4:	781b      	ldrb	r3, [r3, #0]
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d0e5      	beq.n	3fa6 <_Z37calculate_max_brightness_for_power_mWhm+0xa2>
        digitalWrite( gMaxPowerIndicatorLEDPinNumber, HIGH);   // turn the LED on
    3fda:	2101      	movs	r1, #1
    3fdc:	0018      	movs	r0, r3
    3fde:	f7ff f9c3 	bl	3368 <digitalWrite>
    3fe2:	e7e0      	b.n	3fa6 <_Z37calculate_max_brightness_for_power_mWhm+0xa2>
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
            digitalWrite(gMaxPowerIndicatorLEDPinNumber, LOW);   // turn the LED off
    3fe4:	2100      	movs	r1, #0
    3fe6:	f7ff f9bf 	bl	3368 <digitalWrite>
    3fea:	e7dc      	b.n	3fa6 <_Z37calculate_max_brightness_for_power_mWhm+0xa2>
    3fec:	20000be0 	.word	0x20000be0
    3ff0:	00000115 	.word	0x00000115
    3ff4:	20000bf4 	.word	0x20000bf4

00003ff8 <_ZN4UartD1Ev>:
#include "SERCOM.h"
#include "RingBuffer.h"

#include <cstddef>

class Uart : public HardwareSerial
    3ff8:	4770      	bx	lr
    3ffa:	46c0      	nop			; (mov r8, r8)

00003ffc <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial5( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    3ffc:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    3ffe:	4802      	ldr	r0, [pc, #8]	; (4008 <SERCOM0_Handler+0xc>)
    4000:	f000 faa8 	bl	4554 <_ZN4Uart10IrqHandlerEv>
}
    4004:	bd10      	pop	{r4, pc}
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	20000bf8 	.word	0x20000bf8

0000400c <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    400c:	b510      	push	{r4, lr}
  Serial5.IrqHandler();
    400e:	4802      	ldr	r0, [pc, #8]	; (4018 <SERCOM5_Handler+0xc>)
    4010:	f000 faa0 	bl	4554 <_ZN4Uart10IrqHandlerEv>
}
    4014:	bd10      	pop	{r4, pc}
    4016:	46c0      	nop			; (mov r8, r8)
    4018:	20000cbc 	.word	0x20000cbc

0000401c <_ZN4UartD0Ev>:
    401c:	b510      	push	{r4, lr}
    401e:	0004      	movs	r4, r0
    4020:	f000 f86e 	bl	4100 <_ZdlPv>
    4024:	0020      	movs	r0, r4
    4026:	bd10      	pop	{r4, pc}

00004028 <_GLOBAL__sub_I_g_APinDescription>:
    4028:	b5f0      	push	{r4, r5, r6, r7, lr}
    402a:	464f      	mov	r7, r9
    402c:	4646      	mov	r6, r8
    402e:	b4c0      	push	{r6, r7}
} ;

const void* g_apTCInstances[TCC_INST_NUM+TC_INST_NUM]={ TCC0, TCC1, TCC2, TC3, TC4, TC5 } ;

// Multi-serial objects instantiation
SERCOM sercom0( SERCOM0 ) ;
    4030:	4d21      	ldr	r5, [pc, #132]	; (40b8 <_GLOBAL__sub_I_g_APinDescription+0x90>)
}

void SERCOM5_Handler()
{
  Serial5.IrqHandler();
}
    4032:	b083      	sub	sp, #12
} ;

const void* g_apTCInstances[TCC_INST_NUM+TC_INST_NUM]={ TCC0, TCC1, TCC2, TC3, TC4, TC5 } ;

// Multi-serial objects instantiation
SERCOM sercom0( SERCOM0 ) ;
    4034:	4921      	ldr	r1, [pc, #132]	; (40bc <_GLOBAL__sub_I_g_APinDescription+0x94>)
    4036:	0028      	movs	r0, r5
    4038:	f000 f866 	bl	4108 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    403c:	4920      	ldr	r1, [pc, #128]	; (40c0 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    403e:	4821      	ldr	r0, [pc, #132]	; (40c4 <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    4040:	f000 f862 	bl	4108 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    4044:	4920      	ldr	r1, [pc, #128]	; (40c8 <_GLOBAL__sub_I_g_APinDescription+0xa0>)
    4046:	4821      	ldr	r0, [pc, #132]	; (40cc <_GLOBAL__sub_I_g_APinDescription+0xa4>)
    4048:	f000 f85e 	bl	4108 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    404c:	4920      	ldr	r1, [pc, #128]	; (40d0 <_GLOBAL__sub_I_g_APinDescription+0xa8>)
    404e:	4821      	ldr	r0, [pc, #132]	; (40d4 <_GLOBAL__sub_I_g_APinDescription+0xac>)
    4050:	f000 f85a 	bl	4108 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    4054:	4920      	ldr	r1, [pc, #128]	; (40d8 <_GLOBAL__sub_I_g_APinDescription+0xb0>)
    4056:	4821      	ldr	r0, [pc, #132]	; (40dc <_GLOBAL__sub_I_g_APinDescription+0xb4>)
    4058:	f000 f856 	bl	4108 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    405c:	4f20      	ldr	r7, [pc, #128]	; (40e0 <_GLOBAL__sub_I_g_APinDescription+0xb8>)
    405e:	4921      	ldr	r1, [pc, #132]	; (40e4 <_GLOBAL__sub_I_g_APinDescription+0xbc>)
    4060:	0038      	movs	r0, r7
    4062:	f000 f851 	bl	4108 <_ZN6SERCOMC1EP6Sercom>

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    4066:	2301      	movs	r3, #1
    4068:	4699      	mov	r9, r3
    406a:	4c1f      	ldr	r4, [pc, #124]	; (40e8 <_GLOBAL__sub_I_g_APinDescription+0xc0>)
    406c:	9301      	str	r3, [sp, #4]
    406e:	3302      	adds	r3, #2
    4070:	4698      	mov	r8, r3
    4072:	9300      	str	r3, [sp, #0]
    4074:	0029      	movs	r1, r5
    4076:	3b02      	subs	r3, #2
    4078:	2200      	movs	r2, #0
    407a:	0020      	movs	r0, r4
    407c:	f000 fa40 	bl	4500 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    4080:	4e1a      	ldr	r6, [pc, #104]	; (40ec <_GLOBAL__sub_I_g_APinDescription+0xc4>)
    4082:	4d1b      	ldr	r5, [pc, #108]	; (40f0 <_GLOBAL__sub_I_g_APinDescription+0xc8>)
    4084:	0032      	movs	r2, r6
    4086:	0029      	movs	r1, r5
    4088:	0020      	movs	r0, r4
    408a:	f000 fb45 	bl	4718 <__aeabi_atexit>
Uart Serial5( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    408e:	464b      	mov	r3, r9
    4090:	9301      	str	r3, [sp, #4]
    4092:	4643      	mov	r3, r8
    4094:	4c17      	ldr	r4, [pc, #92]	; (40f4 <_GLOBAL__sub_I_g_APinDescription+0xcc>)
    4096:	9300      	str	r3, [sp, #0]
    4098:	0039      	movs	r1, r7
    409a:	331b      	adds	r3, #27
    409c:	221f      	movs	r2, #31
    409e:	0020      	movs	r0, r4
    40a0:	f000 fa2e 	bl	4500 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    40a4:	0032      	movs	r2, r6
    40a6:	0029      	movs	r1, r5
    40a8:	0020      	movs	r0, r4
    40aa:	f000 fb35 	bl	4718 <__aeabi_atexit>
}

void SERCOM5_Handler()
{
  Serial5.IrqHandler();
}
    40ae:	b003      	add	sp, #12
    40b0:	bc0c      	pop	{r2, r3}
    40b2:	4690      	mov	r8, r2
    40b4:	4699      	mov	r9, r3
    40b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40b8:	20000d80 	.word	0x20000d80
    40bc:	42000800 	.word	0x42000800
    40c0:	42000c00 	.word	0x42000c00
    40c4:	20000d84 	.word	0x20000d84
    40c8:	42001000 	.word	0x42001000
    40cc:	20000d88 	.word	0x20000d88
    40d0:	42001400 	.word	0x42001400
    40d4:	20000d8c 	.word	0x20000d8c
    40d8:	42001800 	.word	0x42001800
    40dc:	20000d90 	.word	0x20000d90
    40e0:	20000d94 	.word	0x20000d94
    40e4:	42001c00 	.word	0x42001c00
    40e8:	20000bf8 	.word	0x20000bf8
    40ec:	20000000 	.word	0x20000000
    40f0:	00003ff9 	.word	0x00003ff9
    40f4:	20000cbc 	.word	0x20000cbc

000040f8 <_Znwj>:
    40f8:	b510      	push	{r4, lr}
    40fa:	f003 fdf3 	bl	7ce4 <malloc>
    40fe:	bd10      	pop	{r4, pc}

00004100 <_ZdlPv>:
    4100:	b510      	push	{r4, lr}
    4102:	f003 fdf9 	bl	7cf8 <free>
    4106:	bd10      	pop	{r4, pc}

00004108 <_ZN6SERCOMC1EP6Sercom>:
#include "SERCOM.h"
#include "variant.h"

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    4108:	6001      	str	r1, [r0, #0]
}
    410a:	4770      	bx	lr

0000410c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    410c:	b5f0      	push	{r4, r5, r6, r7, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    410e:	6805      	ldr	r5, [r0, #0]
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4110:	1e9f      	subs	r7, r3, #2
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4112:	46ac      	mov	ip, r5
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4114:	682e      	ldr	r6, [r5, #0]
    4116:	1e7d      	subs	r5, r7, #1
    4118:	41af      	sbcs	r7, r5
    411a:	0795      	lsls	r5, r2, #30
    411c:	4662      	mov	r2, ip
    411e:	4335      	orrs	r5, r6
    4120:	063f      	lsls	r7, r7, #24
    4122:	433d      	orrs	r5, r7
    4124:	6015      	str	r5, [r2, #0]

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4126:	2207      	movs	r2, #7
    4128:	4011      	ands	r1, r2
    412a:	000a      	movs	r2, r1
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    412c:	ac05      	add	r4, sp, #20
    412e:	7824      	ldrb	r4, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4130:	6805      	ldr	r5, [r0, #0]
    4132:	01a0      	lsls	r0, r4, #6
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    4134:	686e      	ldr	r6, [r5, #4]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4136:	4302      	orrs	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    4138:	2b02      	cmp	r3, #2
    413a:	d005      	beq.n	4148 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x3c>
    413c:	035b      	lsls	r3, r3, #13
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    413e:	0031      	movs	r1, r6
    4140:	4311      	orrs	r1, r2
    4142:	4319      	orrs	r1, r3
    4144:	6069      	str	r1, [r5, #4]
}
    4146:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    4148:	2300      	movs	r3, #0
    414a:	e7f8      	b.n	413e <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x32>

0000414c <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
}

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    414c:	b530      	push	{r4, r5, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    414e:	24c0      	movs	r4, #192	; 0xc0
    4150:	0512      	lsls	r2, r2, #20
    4152:	03a4      	lsls	r4, r4, #14
    4154:	4022      	ands	r2, r4
    4156:	24c0      	movs	r4, #192	; 0xc0
}

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4158:	6805      	ldr	r5, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    415a:	02a4      	lsls	r4, r4, #10
    415c:	682b      	ldr	r3, [r5, #0]
    415e:	0409      	lsls	r1, r1, #16
    4160:	431a      	orrs	r2, r3
    4162:	4021      	ands	r1, r4
    4164:	4311      	orrs	r1, r2
    4166:	6029      	str	r1, [r5, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    4168:	6802      	ldr	r2, [r0, #0]
    416a:	6853      	ldr	r3, [r2, #4]
    416c:	4323      	orrs	r3, r4
    416e:	6053      	str	r3, [r2, #4]
}
    4170:	bd30      	pop	{r4, r5, pc}
    4172:	46c0      	nop			; (mov r8, r8)

00004174 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    4174:	2301      	movs	r3, #1
    4176:	6802      	ldr	r2, [r0, #0]
    4178:	6811      	ldr	r1, [r2, #0]
    417a:	430b      	orrs	r3, r1
    417c:	6013      	str	r3, [r2, #0]
    417e:	6802      	ldr	r2, [r0, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    4180:	6813      	ldr	r3, [r2, #0]
    4182:	07db      	lsls	r3, r3, #31
    4184:	d4fc      	bmi.n	4180 <_ZN6SERCOM9resetUARTEv+0xc>
    4186:	69d3      	ldr	r3, [r2, #28]
    4188:	07db      	lsls	r3, r3, #31
    418a:	d4f9      	bmi.n	4180 <_ZN6SERCOM9resetUARTEv+0xc>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    418c:	4770      	bx	lr
    418e:	46c0      	nop			; (mov r8, r8)

00004190 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    4190:	2302      	movs	r3, #2
    4192:	6802      	ldr	r2, [r0, #0]
    4194:	6811      	ldr	r1, [r2, #0]
    4196:	430b      	orrs	r3, r1
    4198:	6013      	str	r3, [r2, #0]
    419a:	6802      	ldr	r2, [r0, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    419c:	69d3      	ldr	r3, [r2, #28]
    419e:	079b      	lsls	r3, r3, #30
    41a0:	d4fc      	bmi.n	419c <_ZN6SERCOM10enableUARTEv+0xc>
}
    41a2:	4770      	bx	lr

000041a4 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    41a4:	6802      	ldr	r2, [r0, #0]
    41a6:	7e13      	ldrb	r3, [r2, #24]
}

void SERCOM::flushUART()
{
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    41a8:	07db      	lsls	r3, r3, #31
    41aa:	d402      	bmi.n	41b2 <_ZN6SERCOM9flushUARTEv+0xe>
    return;

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
    41ac:	7e13      	ldrb	r3, [r2, #24]
    41ae:	079b      	lsls	r3, r3, #30
    41b0:	d5fc      	bpl.n	41ac <_ZN6SERCOM9flushUARTEv+0x8>
}
    41b2:	4770      	bx	lr

000041b4 <_ZN6SERCOM15clearStatusUARTEv>:

void SERCOM::clearStatusUART()
{
  //Reset (with 0) the STATUS register
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    41b4:	2200      	movs	r2, #0
    41b6:	6803      	ldr	r3, [r0, #0]
    41b8:	835a      	strh	r2, [r3, #26]
}
    41ba:	4770      	bx	lr

000041bc <_ZN6SERCOM17availableDataUARTEv>:

bool SERCOM::availableDataUART()
{
  //RXC : Receive Complete
  return sercom->USART.INTFLAG.bit.RXC;
    41bc:	6803      	ldr	r3, [r0, #0]
    41be:	7e18      	ldrb	r0, [r3, #24]
    41c0:	0740      	lsls	r0, r0, #29
    41c2:	0fc0      	lsrs	r0, r0, #31
}
    41c4:	4770      	bx	lr
    41c6:	46c0      	nop			; (mov r8, r8)

000041c8 <_ZN6SERCOM11isUARTErrorEv>:

bool SERCOM::isUARTError()
{
  return sercom->USART.INTFLAG.bit.ERROR;
    41c8:	6803      	ldr	r3, [r0, #0]
    41ca:	7e18      	ldrb	r0, [r3, #24]
    41cc:	09c0      	lsrs	r0, r0, #7
}
    41ce:	4770      	bx	lr

000041d0 <_ZN6SERCOM20acknowledgeUARTErrorEv>:

void SERCOM::acknowledgeUARTError()
{
  sercom->USART.INTFLAG.bit.ERROR = 1;
    41d0:	2180      	movs	r1, #128	; 0x80
    41d2:	6802      	ldr	r2, [r0, #0]
    41d4:	4249      	negs	r1, r1
    41d6:	7e13      	ldrb	r3, [r2, #24]
    41d8:	430b      	orrs	r3, r1
    41da:	7613      	strb	r3, [r2, #24]
}
    41dc:	4770      	bx	lr
    41de:	46c0      	nop			; (mov r8, r8)

000041e0 <_ZN6SERCOM12readDataUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
}

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    41e0:	6803      	ldr	r3, [r0, #0]
    41e2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    41e4:	b2c0      	uxtb	r0, r0
}
    41e6:	4770      	bx	lr

000041e8 <_ZN6SERCOM13writeDataUARTEh>:

int SERCOM::writeDataUART(uint8_t data)
{
    41e8:	6802      	ldr	r2, [r0, #0]
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    41ea:	7e13      	ldrb	r3, [r2, #24]
}

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    41ec:	07db      	lsls	r3, r3, #31
    41ee:	d5fc      	bpl.n	41ea <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    41f0:	b289      	uxth	r1, r1
  return 1;
}
    41f2:	2001      	movs	r0, #1
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    41f4:	8511      	strh	r1, [r2, #40]	; 0x28
  return 1;
}
    41f6:	4770      	bx	lr

000041f8 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    41f8:	6803      	ldr	r3, [r0, #0]
    41fa:	4a2a      	ldr	r2, [pc, #168]	; (42a4 <_ZN6SERCOM13initClockNVICEv+0xac>)
  }
}


void SERCOM::initClockNVIC( void )
{
    41fc:	b530      	push	{r4, r5, lr}
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    41fe:	4293      	cmp	r3, r2
    4200:	d028      	beq.n	4254 <_ZN6SERCOM13initClockNVICEv+0x5c>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    4202:	4a29      	ldr	r2, [pc, #164]	; (42a8 <_ZN6SERCOM13initClockNVICEv+0xb0>)
    4204:	4293      	cmp	r3, r2
    4206:	d02d      	beq.n	4264 <_ZN6SERCOM13initClockNVICEv+0x6c>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    4208:	4a28      	ldr	r2, [pc, #160]	; (42ac <_ZN6SERCOM13initClockNVICEv+0xb4>)
    420a:	4293      	cmp	r3, r2
    420c:	d032      	beq.n	4274 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    420e:	4a28      	ldr	r2, [pc, #160]	; (42b0 <_ZN6SERCOM13initClockNVICEv+0xb8>)
    4210:	4293      	cmp	r3, r2
    4212:	d037      	beq.n	4284 <_ZN6SERCOM13initClockNVICEv+0x8c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
#if defined(SERCOM4)
  else if(sercom == SERCOM4)
    4214:	4a27      	ldr	r2, [pc, #156]	; (42b4 <_ZN6SERCOM13initClockNVICEv+0xbc>)
    4216:	4293      	cmp	r3, r2
    4218:	d003      	beq.n	4222 <_ZN6SERCOM13initClockNVICEv+0x2a>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
#endif
#if defined(SERCOM5)
  else if(sercom == SERCOM5)
    421a:	4a27      	ldr	r2, [pc, #156]	; (42b8 <_ZN6SERCOM13initClockNVICEv+0xc0>)
    421c:	4293      	cmp	r3, r2
    421e:	d038      	beq.n	4292 <_ZN6SERCOM13initClockNVICEv+0x9a>

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
  {
    /* Wait for synchronization */
  }
}
    4220:	bd30      	pop	{r4, r5, pc}
    4222:	21c0      	movs	r1, #192	; 0xc0
    4224:	2480      	movs	r4, #128	; 0x80
    4226:	2303      	movs	r3, #3
    4228:	4a24      	ldr	r2, [pc, #144]	; (42bc <_ZN6SERCOM13initClockNVICEv+0xc4>)
    422a:	4d25      	ldr	r5, [pc, #148]	; (42c0 <_ZN6SERCOM13initClockNVICEv+0xc8>)
    422c:	0209      	lsls	r1, r1, #8
    422e:	01a4      	lsls	r4, r4, #6

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    4230:	4824      	ldr	r0, [pc, #144]	; (42c4 <_ZN6SERCOM13initClockNVICEv+0xcc>)
    4232:	009b      	lsls	r3, r3, #2
    4234:	6004      	str	r4, [r0, #0]
    4236:	4684      	mov	ip, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4238:	20c0      	movs	r0, #192	; 0xc0
    423a:	4463      	add	r3, ip
    423c:	0080      	lsls	r0, r0, #2
    423e:	581c      	ldr	r4, [r3, r0]
    4240:	4022      	ands	r2, r4
    4242:	430a      	orrs	r2, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    4244:	501a      	str	r2, [r3, r0]
  NVIC_SetPriority (IdNvic, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;
    4246:	4a20      	ldr	r2, [pc, #128]	; (42c8 <_ZN6SERCOM13initClockNVICEv+0xd0>)
    4248:	8055      	strh	r5, [r2, #2]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    424a:	7853      	ldrb	r3, [r2, #1]
    424c:	b25b      	sxtb	r3, r3
    424e:	2b00      	cmp	r3, #0
    4250:	dbfb      	blt.n	424a <_ZN6SERCOM13initClockNVICEv+0x52>
    4252:	e7e5      	b.n	4220 <_ZN6SERCOM13initClockNVICEv+0x28>
    4254:	21c0      	movs	r1, #192	; 0xc0
    4256:	2480      	movs	r4, #128	; 0x80
    4258:	0209      	lsls	r1, r1, #8
    425a:	4a18      	ldr	r2, [pc, #96]	; (42bc <_ZN6SERCOM13initClockNVICEv+0xc4>)
    425c:	2302      	movs	r3, #2
    425e:	00a4      	lsls	r4, r4, #2
    4260:	4d1a      	ldr	r5, [pc, #104]	; (42cc <_ZN6SERCOM13initClockNVICEv+0xd4>)
    4262:	e7e5      	b.n	4230 <_ZN6SERCOM13initClockNVICEv+0x38>
    4264:	21c0      	movs	r1, #192	; 0xc0
    4266:	2480      	movs	r4, #128	; 0x80
    4268:	0409      	lsls	r1, r1, #16
    426a:	4a19      	ldr	r2, [pc, #100]	; (42d0 <_ZN6SERCOM13initClockNVICEv+0xd8>)
    426c:	2302      	movs	r3, #2
    426e:	00e4      	lsls	r4, r4, #3
    4270:	4d18      	ldr	r5, [pc, #96]	; (42d4 <_ZN6SERCOM13initClockNVICEv+0xdc>)
    4272:	e7dd      	b.n	4230 <_ZN6SERCOM13initClockNVICEv+0x38>
    4274:	21c0      	movs	r1, #192	; 0xc0
    4276:	2480      	movs	r4, #128	; 0x80
    4278:	0609      	lsls	r1, r1, #24
    427a:	4a17      	ldr	r2, [pc, #92]	; (42d8 <_ZN6SERCOM13initClockNVICEv+0xe0>)
    427c:	2302      	movs	r3, #2
    427e:	0124      	lsls	r4, r4, #4
    4280:	4d16      	ldr	r5, [pc, #88]	; (42dc <_ZN6SERCOM13initClockNVICEv+0xe4>)
    4282:	e7d5      	b.n	4230 <_ZN6SERCOM13initClockNVICEv+0x38>
    4284:	2480      	movs	r4, #128	; 0x80
    4286:	21c0      	movs	r1, #192	; 0xc0
    4288:	4a15      	ldr	r2, [pc, #84]	; (42e0 <_ZN6SERCOM13initClockNVICEv+0xe8>)
    428a:	2303      	movs	r3, #3
    428c:	0164      	lsls	r4, r4, #5
    428e:	4d15      	ldr	r5, [pc, #84]	; (42e4 <_ZN6SERCOM13initClockNVICEv+0xec>)
    4290:	e7ce      	b.n	4230 <_ZN6SERCOM13initClockNVICEv+0x38>
    4292:	21c0      	movs	r1, #192	; 0xc0
    4294:	2480      	movs	r4, #128	; 0x80
    4296:	0409      	lsls	r1, r1, #16
    4298:	4a0d      	ldr	r2, [pc, #52]	; (42d0 <_ZN6SERCOM13initClockNVICEv+0xd8>)
    429a:	2303      	movs	r3, #3
    429c:	01e4      	lsls	r4, r4, #7
    429e:	4d12      	ldr	r5, [pc, #72]	; (42e8 <_ZN6SERCOM13initClockNVICEv+0xf0>)
    42a0:	e7c6      	b.n	4230 <_ZN6SERCOM13initClockNVICEv+0x38>
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	42000800 	.word	0x42000800
    42a8:	42000c00 	.word	0x42000c00
    42ac:	42001000 	.word	0x42001000
    42b0:	42001400 	.word	0x42001400
    42b4:	42001800 	.word	0x42001800
    42b8:	42001c00 	.word	0x42001c00
    42bc:	ffff00ff 	.word	0xffff00ff
    42c0:	00004018 	.word	0x00004018
    42c4:	e000e100 	.word	0xe000e100
    42c8:	40000c00 	.word	0x40000c00
    42cc:	00004014 	.word	0x00004014
    42d0:	ff00ffff 	.word	0xff00ffff
    42d4:	00004015 	.word	0x00004015
    42d8:	00ffffff 	.word	0x00ffffff
    42dc:	00004016 	.word	0x00004016
    42e0:	ffffff00 	.word	0xffffff00
    42e4:	00004017 	.word	0x00004017
    42e8:	00004019 	.word	0x00004019

000042ec <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
/* 	=========================
 *	===== Sercom UART
 *	=========================
*/
void SERCOM::initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate)
{
    42ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42ee:	0004      	movs	r4, r0
    42f0:	000d      	movs	r5, r1
    42f2:	0016      	movs	r6, r2
    42f4:	001f      	movs	r7, r3
  initClockNVIC();
    42f6:	f7ff ff7f 	bl	41f8 <_ZN6SERCOM13initClockNVICEv>
}

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    42fa:	2301      	movs	r3, #1
    42fc:	6822      	ldr	r2, [r4, #0]
    42fe:	6811      	ldr	r1, [r2, #0]
    4300:	430b      	orrs	r3, r1
    4302:	6013      	str	r3, [r2, #0]
    4304:	6822      	ldr	r2, [r4, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    4306:	6813      	ldr	r3, [r2, #0]
    4308:	07db      	lsls	r3, r3, #31
    430a:	d4fc      	bmi.n	4306 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x1a>
    430c:	69d3      	ldr	r3, [r2, #28]
    430e:	07db      	lsls	r3, r3, #31
    4310:	d4f9      	bmi.n	4306 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x1a>
{
  initClockNVIC();
  resetUART();

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4312:	211c      	movs	r1, #28
    4314:	00ab      	lsls	r3, r5, #2
    4316:	400b      	ands	r3, r1
    4318:	0771      	lsls	r1, r6, #29
    431a:	0c09      	lsrs	r1, r1, #16
    431c:	430b      	orrs	r3, r1
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    431e:	6013      	str	r3, [r2, #0]

  //Setting the Interrupt register
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
                                SERCOM_USART_INTENSET_ERROR; //All others errors
    4320:	2384      	movs	r3, #132	; 0x84
    4322:	6822      	ldr	r2, [r4, #0]
    4324:	7593      	strb	r3, [r2, #22]

  if ( mode == UART_INT_CLOCK )
    4326:	2d01      	cmp	r5, #1
    4328:	d000      	beq.n	432c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x40>
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
    432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    432c:	2108      	movs	r1, #8

  if ( mode == UART_INT_CLOCK )
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    432e:	2e01      	cmp	r6, #1
    4330:	d017      	beq.n	4362 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x76>
    }

    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    4332:	4b0d      	ldr	r3, [pc, #52]	; (4368 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x7c>)
    4334:	4379      	muls	r1, r7
    4336:	6818      	ldr	r0, [r3, #0]
    4338:	00c0      	lsls	r0, r0, #3
    433a:	f001 fcbb 	bl	5cb4 <__aeabi_uidiv>

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    433e:	2307      	movs	r3, #7
    4340:	6821      	ldr	r1, [r4, #0]
    4342:	4003      	ands	r3, r0
    4344:	898d      	ldrh	r5, [r1, #12]
    4346:	035a      	lsls	r2, r3, #13
    4348:	04eb      	lsls	r3, r5, #19
    434a:	0cdb      	lsrs	r3, r3, #19
    434c:	4313      	orrs	r3, r2
    434e:	818b      	strh	r3, [r1, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    4350:	6821      	ldr	r1, [r4, #0]
    4352:	0400      	lsls	r0, r0, #16
    4354:	898a      	ldrh	r2, [r1, #12]
    4356:	0cc3      	lsrs	r3, r0, #19
    4358:	0b50      	lsrs	r0, r2, #13
    435a:	0340      	lsls	r0, r0, #13
    435c:	4318      	orrs	r0, r3
    435e:	8188      	strh	r0, [r1, #12]
  }
}
    4360:	e7e3      	b.n	432a <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x3e>

  if ( mode == UART_INT_CLOCK )
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    4362:	3108      	adds	r1, #8
    4364:	e7e5      	b.n	4332 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x46>
    4366:	46c0      	nop			; (mov r8, r8)
    4368:	20000084 	.word	0x20000084

0000436c <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    436c:	2001      	movs	r0, #1
    436e:	4770      	bx	lr

00004370 <_ZN4Uart5beginEmt>:
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    4370:	23c0      	movs	r3, #192	; 0xc0
{
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    4372:	b5f0      	push	{r4, r5, r6, r7, lr}
    4374:	000e      	movs	r6, r1
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    4376:	2108      	movs	r1, #8
{
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    4378:	0005      	movs	r5, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    437a:	5cc0      	ldrb	r0, [r0, r3]
    437c:	4f2a      	ldr	r7, [pc, #168]	; (4428 <_ZN4Uart5beginEmt+0xb8>)
    437e:	0043      	lsls	r3, r0, #1
    4380:	181b      	adds	r3, r3, r0
    4382:	00db      	lsls	r3, r3, #3
    4384:	18fb      	adds	r3, r7, r3
{
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    4386:	b083      	sub	sp, #12
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    4388:	5659      	ldrsb	r1, [r3, r1]
{
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    438a:	0014      	movs	r4, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    438c:	f7ff f81a 	bl	33c4 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    4390:	23c1      	movs	r3, #193	; 0xc1
    4392:	2108      	movs	r1, #8
    4394:	5ce8      	ldrb	r0, [r5, r3]
    4396:	0043      	lsls	r3, r0, #1
    4398:	181b      	adds	r3, r3, r0
    439a:	00db      	lsls	r3, r3, #3
    439c:	18fb      	adds	r3, r7, r3
    439e:	5659      	ldrsb	r1, [r3, r1]
    43a0:	f7ff f810 	bl	33c4 <pinPeripheral>

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    43a4:	0033      	movs	r3, r6
    43a6:	2201      	movs	r2, #1
    43a8:	6928      	ldr	r0, [r5, #16]
    43aa:	2101      	movs	r1, #1
    43ac:	f7ff ff9e 	bl	42ec <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    43b0:	23f0      	movs	r3, #240	; 0xf0
    43b2:	2280      	movs	r2, #128	; 0x80
    43b4:	011b      	lsls	r3, r3, #4
{
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    43b6:	6928      	ldr	r0, [r5, #16]
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    43b8:	4023      	ands	r3, r4
    43ba:	0092      	lsls	r2, r2, #2
    43bc:	4293      	cmp	r3, r2
    43be:	d030      	beq.n	4422 <_ZN4Uart5beginEmt+0xb2>
    43c0:	3201      	adds	r2, #1
    43c2:	32ff      	adds	r2, #255	; 0xff
    43c4:	4293      	cmp	r3, r2
    43c6:	d02a      	beq.n	441e <_ZN4Uart5beginEmt+0xae>
    43c8:	2280      	movs	r2, #128	; 0x80
    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    43ca:	2100      	movs	r1, #0
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    43cc:	0052      	lsls	r2, r2, #1
    43ce:	4293      	cmp	r3, r2
    43d0:	d01e      	beq.n	4410 <_ZN4Uart5beginEmt+0xa0>
  }
}

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    43d2:	230f      	movs	r3, #15
    43d4:	4023      	ands	r3, r4
    43d6:	2b01      	cmp	r3, #1
    43d8:	d01f      	beq.n	441a <_ZN4Uart5beginEmt+0xaa>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    43da:	3b02      	subs	r3, #2
    43dc:	425a      	negs	r2, r3
    43de:	415a      	adcs	r2, r3
    43e0:	2302      	movs	r3, #2
    43e2:	1a9b      	subs	r3, r3, r2
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    43e4:	22f0      	movs	r2, #240	; 0xf0
    43e6:	4014      	ands	r4, r2
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    43e8:	0022      	movs	r2, r4
    43ea:	3a30      	subs	r2, #48	; 0x30
    43ec:	4256      	negs	r6, r2
    43ee:	4156      	adcs	r6, r2
{
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    43f0:	2201      	movs	r2, #1
    43f2:	9600      	str	r6, [sp, #0]
    43f4:	f7ff fe8a 	bl	410c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    43f8:	23c2      	movs	r3, #194	; 0xc2
    43fa:	5cea      	ldrb	r2, [r5, r3]
    43fc:	3301      	adds	r3, #1
    43fe:	5ce9      	ldrb	r1, [r5, r3]
    4400:	6928      	ldr	r0, [r5, #16]
    4402:	f7ff fea3 	bl	414c <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    4406:	6928      	ldr	r0, [r5, #16]
    4408:	f7ff fec2 	bl	4190 <_ZN6SERCOM10enableUARTEv>
}
    440c:	b003      	add	sp, #12
    440e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    4410:	230f      	movs	r3, #15
SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;
    4412:	2105      	movs	r1, #5
  }
}

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    4414:	4023      	ands	r3, r4
    4416:	2b01      	cmp	r3, #1
    4418:	d1df      	bne.n	43da <_ZN4Uart5beginEmt+0x6a>
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    441a:	2300      	movs	r3, #0
    441c:	e7e2      	b.n	43e4 <_ZN4Uart5beginEmt+0x74>

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    441e:	2107      	movs	r1, #7
    4420:	e7d7      	b.n	43d2 <_ZN4Uart5beginEmt+0x62>
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    4422:	2106      	movs	r1, #6
    4424:	e7d5      	b.n	43d2 <_ZN4Uart5beginEmt+0x62>
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	0000804c 	.word	0x0000804c

0000442c <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    442c:	b510      	push	{r4, lr}
    442e:	0004      	movs	r4, r0
  sercom->resetUART();
    4430:	6900      	ldr	r0, [r0, #16]
    4432:	f7ff fe9f 	bl	4174 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    4436:	0020      	movs	r0, r4
    4438:	3014      	adds	r0, #20
    443a:	f000 f93f 	bl	46bc <_ZN10RingBuffer5clearEv>
}
    443e:	bd10      	pop	{r4, pc}

00004440 <_ZN4Uart5flushEv>:

void Uart::flush()
{
    4440:	b510      	push	{r4, lr}
  sercom->flushUART();
    4442:	6900      	ldr	r0, [r0, #16]
    4444:	f7ff feae 	bl	41a4 <_ZN6SERCOM9flushUARTEv>
}
    4448:	bd10      	pop	{r4, pc}
    444a:	46c0      	nop			; (mov r8, r8)

0000444c <_ZN4Uart9availableEv>:
    sercom->clearStatusUART();
  }
}

int Uart::available()
{
    444c:	b510      	push	{r4, lr}
  return rxBuffer.available();
    444e:	3014      	adds	r0, #20
    4450:	f000 f94e 	bl	46f0 <_ZN10RingBuffer9availableEv>
}
    4454:	bd10      	pop	{r4, pc}
    4456:	46c0      	nop			; (mov r8, r8)

00004458 <_ZN4Uart4peekEv>:
{
  return (sercom->isDataRegisterEmptyUART() ? 1 : 0);
}

int Uart::peek()
{
    4458:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    445a:	3014      	adds	r0, #20
    445c:	f000 f950 	bl	4700 <_ZN10RingBuffer4peekEv>
}
    4460:	bd10      	pop	{r4, pc}
    4462:	46c0      	nop			; (mov r8, r8)

00004464 <_ZN4Uart4readEv>:

int Uart::read()
{
    4464:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    4466:	3014      	adds	r0, #20
    4468:	f000 f92e 	bl	46c8 <_ZN10RingBuffer9read_charEv>
}
    446c:	bd10      	pop	{r4, pc}
    446e:	46c0      	nop			; (mov r8, r8)

00004470 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    4470:	b510      	push	{r4, lr}
  sercom->writeDataUART(data);
    4472:	6900      	ldr	r0, [r0, #16]
    4474:	f7ff feb8 	bl	41e8 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
}
    4478:	2001      	movs	r0, #1
    447a:	bd10      	pop	{r4, pc}

0000447c <_ZN4Uart5beginEm>:
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
}

void Uart::begin(unsigned long baudrate)
{
    447c:	b570      	push	{r4, r5, r6, lr}
  begin(baudrate, SERIAL_8N1);
    447e:	6803      	ldr	r3, [r0, #0]
    4480:	4a1c      	ldr	r2, [pc, #112]	; (44f4 <_ZN4Uart5beginEm+0x78>)
    4482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
}

void Uart::begin(unsigned long baudrate)
{
    4484:	b082      	sub	sp, #8
    4486:	0004      	movs	r4, r0
    4488:	000d      	movs	r5, r1
    448a:	4293      	cmp	r3, r2
    448c:	d12e      	bne.n	44ec <_ZN4Uart5beginEm+0x70>
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    448e:	23c0      	movs	r3, #192	; 0xc0
    4490:	2108      	movs	r1, #8
    4492:	5cc0      	ldrb	r0, [r0, r3]
    4494:	4e18      	ldr	r6, [pc, #96]	; (44f8 <_ZN4Uart5beginEm+0x7c>)
    4496:	0043      	lsls	r3, r0, #1
    4498:	181b      	adds	r3, r3, r0
    449a:	00db      	lsls	r3, r3, #3
    449c:	18f3      	adds	r3, r6, r3
    449e:	5659      	ldrsb	r1, [r3, r1]
    44a0:	f7fe ff90 	bl	33c4 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    44a4:	23c1      	movs	r3, #193	; 0xc1
    44a6:	2108      	movs	r1, #8
    44a8:	5ce0      	ldrb	r0, [r4, r3]
    44aa:	0043      	lsls	r3, r0, #1
    44ac:	181b      	adds	r3, r3, r0
    44ae:	00db      	lsls	r3, r3, #3
    44b0:	18f3      	adds	r3, r6, r3
    44b2:	5659      	ldrsb	r1, [r3, r1]
    44b4:	f7fe ff86 	bl	33c4 <pinPeripheral>

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    44b8:	002b      	movs	r3, r5
    44ba:	2201      	movs	r2, #1
    44bc:	2101      	movs	r1, #1
    44be:	6920      	ldr	r0, [r4, #16]
    44c0:	f7ff ff14 	bl	42ec <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    44c4:	2300      	movs	r3, #0
    44c6:	2201      	movs	r2, #1
    44c8:	9300      	str	r3, [sp, #0]
    44ca:	2100      	movs	r1, #0
    44cc:	3302      	adds	r3, #2
    44ce:	6920      	ldr	r0, [r4, #16]
    44d0:	f7ff fe1c 	bl	410c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    44d4:	23c2      	movs	r3, #194	; 0xc2
    44d6:	5ce2      	ldrb	r2, [r4, r3]
    44d8:	3301      	adds	r3, #1
    44da:	6920      	ldr	r0, [r4, #16]
    44dc:	5ce1      	ldrb	r1, [r4, r3]
    44de:	f7ff fe35 	bl	414c <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    44e2:	6920      	ldr	r0, [r4, #16]
    44e4:	f7ff fe54 	bl	4190 <_ZN6SERCOM10enableUARTEv>
}

void Uart::begin(unsigned long baudrate)
{
  begin(baudrate, SERIAL_8N1);
}
    44e8:	b002      	add	sp, #8
    44ea:	bd70      	pop	{r4, r5, r6, pc}
  uc_padTX=_padTX;
}

void Uart::begin(unsigned long baudrate)
{
  begin(baudrate, SERIAL_8N1);
    44ec:	4a03      	ldr	r2, [pc, #12]	; (44fc <_ZN4Uart5beginEm+0x80>)
    44ee:	4798      	blx	r3
}
    44f0:	e7fa      	b.n	44e8 <_ZN4Uart5beginEm+0x6c>
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	00004371 	.word	0x00004371
    44f8:	0000804c 	.word	0x0000804c
    44fc:	00000413 	.word	0x00000413

00004500 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:

#include "Uart.h"
#include "Arduino.h"
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
    4500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4502:	464f      	mov	r7, r9
    4504:	4646      	mov	r6, r8
    4506:	b4c0      	push	{r6, r7}
    4508:	001f      	movs	r7, r3
    450a:	ab08      	add	r3, sp, #32
    450c:	781e      	ldrb	r6, [r3, #0]
    450e:	ab09      	add	r3, sp, #36	; 0x24
    4510:	781d      	ldrb	r5, [r3, #0]
    4512:	2300      	movs	r3, #0
    4514:	6043      	str	r3, [r0, #4]
    4516:	23fa      	movs	r3, #250	; 0xfa
    4518:	4689      	mov	r9, r1
    451a:	009b      	lsls	r3, r3, #2
    451c:	6083      	str	r3, [r0, #8]
    451e:	4b0c      	ldr	r3, [pc, #48]	; (4550 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x50>)
    4520:	0004      	movs	r4, r0
    4522:	3308      	adds	r3, #8
    4524:	6003      	str	r3, [r0, #0]
    4526:	3014      	adds	r0, #20
    4528:	4690      	mov	r8, r2
    452a:	f000 f8a9 	bl	4680 <_ZN10RingBufferC1Ev>
{
  sercom = _s;
    452e:	464b      	mov	r3, r9
  uc_pinRX = _pinRX;
    4530:	4642      	mov	r2, r8
#include "Arduino.h"
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
    4532:	6123      	str	r3, [r4, #16]
  uc_pinRX = _pinRX;
    4534:	23c0      	movs	r3, #192	; 0xc0
    4536:	54e2      	strb	r2, [r4, r3]
  uc_pinTX = _pinTX;
    4538:	3301      	adds	r3, #1
    453a:	54e7      	strb	r7, [r4, r3]
  uc_padRX=_padRX ;
    453c:	3301      	adds	r3, #1
    453e:	54e6      	strb	r6, [r4, r3]
  uc_padTX=_padTX;
    4540:	3301      	adds	r3, #1
    4542:	54e5      	strb	r5, [r4, r3]
}
    4544:	0020      	movs	r0, r4
    4546:	bc0c      	pop	{r2, r3}
    4548:	4690      	mov	r8, r2
    454a:	4699      	mov	r9, r3
    454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    454e:	46c0      	nop			; (mov r8, r8)
    4550:	0000849c 	.word	0x0000849c

00004554 <_ZN4Uart10IrqHandlerEv>:
{
  sercom->flushUART();
}

void Uart::IrqHandler()
{
    4554:	b510      	push	{r4, lr}
    4556:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    4558:	6900      	ldr	r0, [r0, #16]
    455a:	f7ff fe2f 	bl	41bc <_ZN6SERCOM17availableDataUARTEv>
    455e:	2800      	cmp	r0, #0
    4560:	d10b      	bne.n	457a <_ZN4Uart10IrqHandlerEv+0x26>
    rxBuffer.store_char(sercom->readDataUART());
  }

  if (sercom->isUARTError()) {
    4562:	6920      	ldr	r0, [r4, #16]
    4564:	f7ff fe30 	bl	41c8 <_ZN6SERCOM11isUARTErrorEv>
    4568:	2800      	cmp	r0, #0
    456a:	d005      	beq.n	4578 <_ZN4Uart10IrqHandlerEv+0x24>
    sercom->acknowledgeUARTError();
    456c:	6920      	ldr	r0, [r4, #16]
    456e:	f7ff fe2f 	bl	41d0 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    // TODO: if (sercom->isBufferOverflowErrorUART()) ....
    // TODO: if (sercom->isFrameErrorUART()) ....
    // TODO: if (sercom->isParityErrorUART()) ....
    sercom->clearStatusUART();
    4572:	6920      	ldr	r0, [r4, #16]
    4574:	f7ff fe1e 	bl	41b4 <_ZN6SERCOM15clearStatusUARTEv>
  }
}
    4578:	bd10      	pop	{r4, pc}
}

void Uart::IrqHandler()
{
  if (sercom->availableDataUART()) {
    rxBuffer.store_char(sercom->readDataUART());
    457a:	6920      	ldr	r0, [r4, #16]
    457c:	f7ff fe30 	bl	41e0 <_ZN6SERCOM12readDataUARTEv>
    4580:	0001      	movs	r1, r0
    4582:	0020      	movs	r0, r4
    4584:	3014      	adds	r0, #20
    4586:	f000 f889 	bl	469c <_ZN10RingBuffer10store_charEh>
    458a:	e7ea      	b.n	4562 <_ZN4Uart10IrqHandlerEv+0xe>

0000458c <_ZN18PluggableUSBModule12getShortNameEPc>:

protected:
  virtual bool setup(USBSetup& setup) = 0;
  virtual int getInterface(uint8_t* interfaceCount) = 0;
  virtual int getDescriptor(USBSetup& setup) = 0;
  virtual uint8_t getShortName(char *name) { name[0] = 'A'+pluggedInterface; return 1; }
    458c:	7903      	ldrb	r3, [r0, #4]
    458e:	3341      	adds	r3, #65	; 0x41
    4590:	2001      	movs	r0, #1
    4592:	700b      	strb	r3, [r1, #0]
    4594:	4770      	bx	lr
    4596:	46c0      	nop			; (mov r8, r8)

00004598 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    4598:	b570      	push	{r4, r5, r6, lr}
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    459a:	6844      	ldr	r4, [r0, #4]
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    459c:	000e      	movs	r6, r1
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    459e:	2c00      	cmp	r4, #0
    45a0:	d011      	beq.n	45c6 <_ZN13PluggableUSB_12getInterfaceEPh+0x2e>
    45a2:	2500      	movs	r5, #0
    45a4:	e003      	b.n	45ae <_ZN13PluggableUSB_12getInterfaceEPh+0x16>
    45a6:	68e4      	ldr	r4, [r4, #12]
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
		sent += res;
    45a8:	182d      	adds	r5, r5, r0

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    45aa:	2c00      	cmp	r4, #0
    45ac:	d009      	beq.n	45c2 <_ZN13PluggableUSB_12getInterfaceEPh+0x2a>
		int res = node->getInterface(interfaceCount);
    45ae:	6823      	ldr	r3, [r4, #0]
    45b0:	0031      	movs	r1, r6
    45b2:	685b      	ldr	r3, [r3, #4]
    45b4:	0020      	movs	r0, r4
    45b6:	4798      	blx	r3
		if (res < 0)
    45b8:	2800      	cmp	r0, #0
    45ba:	daf4      	bge.n	45a6 <_ZN13PluggableUSB_12getInterfaceEPh+0xe>
			return -1;
    45bc:	2001      	movs	r0, #1
    45be:	4240      	negs	r0, r0
		sent += res;
	}
	return sent;
}
    45c0:	bd70      	pop	{r4, r5, r6, pc}
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
		sent += res;
    45c2:	0028      	movs	r0, r5
    45c4:	e7fc      	b.n	45c0 <_ZN13PluggableUSB_12getInterfaceEPh+0x28>

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
    45c6:	2000      	movs	r0, #0
    45c8:	e7fa      	b.n	45c0 <_ZN13PluggableUSB_12getInterfaceEPh+0x28>
    45ca:	46c0      	nop			; (mov r8, r8)

000045cc <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
	}
	return sent;
}

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    45cc:	b570      	push	{r4, r5, r6, lr}
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    45ce:	6844      	ldr	r4, [r0, #4]
	}
	return sent;
}

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    45d0:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    45d2:	2c00      	cmp	r4, #0
    45d4:	d103      	bne.n	45de <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x12>
    45d6:	e00a      	b.n	45ee <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x22>
    45d8:	68e4      	ldr	r4, [r4, #12]
    45da:	2c00      	cmp	r4, #0
    45dc:	d007      	beq.n	45ee <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x22>
		int ret = node->getDescriptor(setup);
    45de:	6823      	ldr	r3, [r4, #0]
    45e0:	0029      	movs	r1, r5
    45e2:	689b      	ldr	r3, [r3, #8]
    45e4:	0020      	movs	r0, r4
    45e6:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    45e8:	2800      	cmp	r0, #0
    45ea:	d0f5      	beq.n	45d8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0xc>
			return ret;
	}
	return 0;
}
    45ec:	bd70      	pop	{r4, r5, r6, pc}
		int ret = node->getDescriptor(setup);
		// ret!=0 -> request has been processed
		if (ret)
			return ret;
	}
	return 0;
    45ee:	2000      	movs	r0, #0
    45f0:	e7fc      	b.n	45ec <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x20>
    45f2:	46c0      	nop			; (mov r8, r8)

000045f4 <_ZN13PluggableUSB_12getShortNameEPc>:
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
    45f4:	b570      	push	{r4, r5, r6, lr}
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    45f6:	6844      	ldr	r4, [r0, #4]
	}
	return 0;
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
    45f8:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    45fa:	2c00      	cmp	r4, #0
    45fc:	d014      	beq.n	4628 <_ZN13PluggableUSB_12getShortNameEPc+0x34>
    45fe:	4e0c      	ldr	r6, [pc, #48]	; (4630 <_ZN13PluggableUSB_12getShortNameEPc+0x3c>)
    4600:	e007      	b.n	4612 <_ZN13PluggableUSB_12getShortNameEPc+0x1e>
    4602:	2001      	movs	r0, #1
    4604:	7923      	ldrb	r3, [r4, #4]
    4606:	3341      	adds	r3, #65	; 0x41
    4608:	702b      	strb	r3, [r5, #0]
    460a:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    460c:	182d      	adds	r5, r5, r0
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    460e:	2c00      	cmp	r4, #0
    4610:	d00a      	beq.n	4628 <_ZN13PluggableUSB_12getShortNameEPc+0x34>
               iSerialNum += node->getShortName(iSerialNum);
    4612:	6823      	ldr	r3, [r4, #0]
    4614:	68db      	ldr	r3, [r3, #12]
    4616:	42b3      	cmp	r3, r6
    4618:	d0f3      	beq.n	4602 <_ZN13PluggableUSB_12getShortNameEPc+0xe>
    461a:	0029      	movs	r1, r5
    461c:	0020      	movs	r0, r4
    461e:	4798      	blx	r3
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    4620:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    4622:	182d      	adds	r5, r5, r0
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    4624:	2c00      	cmp	r4, #0
    4626:	d1f4      	bne.n	4612 <_ZN13PluggableUSB_12getShortNameEPc+0x1e>
               iSerialNum += node->getShortName(iSerialNum);
       }
       *iSerialNum = 0;
    4628:	2300      	movs	r3, #0
    462a:	702b      	strb	r3, [r5, #0]
}
    462c:	bd70      	pop	{r4, r5, r6, pc}
    462e:	46c0      	nop			; (mov r8, r8)
    4630:	0000458d 	.word	0x0000458d

00004634 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    4634:	b570      	push	{r4, r5, r6, lr}
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    4636:	6844      	ldr	r4, [r0, #4]
       }
       *iSerialNum = 0;
}

bool PluggableUSB_::setup(USBSetup& setup)
{
    4638:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    463a:	2c00      	cmp	r4, #0
    463c:	d103      	bne.n	4646 <_ZN13PluggableUSB_5setupER8USBSetup+0x12>
    463e:	e00a      	b.n	4656 <_ZN13PluggableUSB_5setupER8USBSetup+0x22>
    4640:	68e4      	ldr	r4, [r4, #12]
    4642:	2c00      	cmp	r4, #0
    4644:	d007      	beq.n	4656 <_ZN13PluggableUSB_5setupER8USBSetup+0x22>
		if (node->setup(setup)) {
    4646:	6823      	ldr	r3, [r4, #0]
    4648:	0029      	movs	r1, r5
    464a:	681b      	ldr	r3, [r3, #0]
    464c:	0020      	movs	r0, r4
    464e:	4798      	blx	r3
    4650:	2800      	cmp	r0, #0
    4652:	d0f5      	beq.n	4640 <_ZN13PluggableUSB_5setupER8USBSetup+0xc>
			return true;
		}
	}
	return false;
}
    4654:	bd70      	pop	{r4, r5, r6, pc}
	for (node = rootNode; node; node = node->next) {
		if (node->setup(setup)) {
			return true;
		}
	}
	return false;
    4656:	2000      	movs	r0, #0
    4658:	e7fc      	b.n	4654 <_ZN13PluggableUSB_5setupER8USBSetup+0x20>
    465a:	46c0      	nop			; (mov r8, r8)

0000465c <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    465c:	2101      	movs	r1, #1
    465e:	4a06      	ldr	r2, [pc, #24]	; (4678 <_Z12PluggableUSBv+0x1c>)
	return true;
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
    4660:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    4662:	6813      	ldr	r3, [r2, #0]
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    4664:	4805      	ldr	r0, [pc, #20]	; (467c <_Z12PluggableUSBv+0x20>)
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    4666:	400b      	ands	r3, r1
    4668:	d105      	bne.n	4676 <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    466a:	2402      	movs	r4, #2
    466c:	7004      	strb	r4, [r0, #0]
    466e:	3402      	adds	r4, #2
    4670:	7044      	strb	r4, [r0, #1]
    4672:	6043      	str	r3, [r0, #4]
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    4674:	6011      	str	r1, [r2, #0]
	return obj;
}
    4676:	bd10      	pop	{r4, pc}
    4678:	20000da0 	.word	0x20000da0
    467c:	20000d98 	.word	0x20000d98

00004680 <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    4680:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    4682:	22a4      	movs	r2, #164	; 0xa4
    4684:	2100      	movs	r1, #0
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    4686:	0004      	movs	r4, r0
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    4688:	f003 fb49 	bl	7d1e <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    468c:	2300      	movs	r3, #0
    468e:	22a4      	movs	r2, #164	; 0xa4
    4690:	50a3      	str	r3, [r4, r2]
	_iTail = 0;
    4692:	3204      	adds	r2, #4

RingBuffer::RingBuffer( void )
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}
    4694:	0020      	movs	r0, r4
}

void RingBuffer::clear()
{
	_iHead = 0;
	_iTail = 0;
    4696:	50a3      	str	r3, [r4, r2]

RingBuffer::RingBuffer( void )
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}
    4698:	bd10      	pop	{r4, pc}
    469a:	46c0      	nop			; (mov r8, r8)

0000469c <_ZN10RingBuffer10store_charEh>:

void RingBuffer::store_char( uint8_t c )
{
    469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i = nextIndex(_iHead);
    469e:	25a4      	movs	r5, #164	; 0xa4
    46a0:	5946      	ldr	r6, [r0, r5]
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}

void RingBuffer::store_char( uint8_t c )
{
    46a2:	0004      	movs	r4, r0
    46a4:	000f      	movs	r7, r1
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    46a6:	1c70      	adds	r0, r6, #1
    46a8:	21a4      	movs	r1, #164	; 0xa4
    46aa:	f001 fb89 	bl	5dc0 <__aeabi_uidivmod>

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
    46ae:	23a8      	movs	r3, #168	; 0xa8
    46b0:	58e3      	ldr	r3, [r4, r3]
    46b2:	428b      	cmp	r3, r1
    46b4:	d001      	beq.n	46ba <_ZN10RingBuffer10store_charEh+0x1e>
  {
    _aucBuffer[_iHead] = c ;
    46b6:	55a7      	strb	r7, [r4, r6]
    _iHead = i ;
    46b8:	5161      	str	r1, [r4, r5]
  }
}
    46ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000046bc <_ZN10RingBuffer5clearEv>:

void RingBuffer::clear()
{
	_iHead = 0;
    46bc:	2300      	movs	r3, #0
    46be:	22a4      	movs	r2, #164	; 0xa4
    46c0:	5083      	str	r3, [r0, r2]
	_iTail = 0;
    46c2:	3204      	adds	r2, #4
    46c4:	5083      	str	r3, [r0, r2]
}
    46c6:	4770      	bx	lr

000046c8 <_ZN10RingBuffer9read_charEv>:

int RingBuffer::read_char()
{
    46c8:	b570      	push	{r4, r5, r6, lr}
	if(_iTail == _iHead)
    46ca:	23a4      	movs	r3, #164	; 0xa4
	_iHead = 0;
	_iTail = 0;
}

int RingBuffer::read_char()
{
    46cc:	0004      	movs	r4, r0
	if(_iTail == _iHead)
    46ce:	26a8      	movs	r6, #168	; 0xa8
    46d0:	58e3      	ldr	r3, [r4, r3]
    46d2:	5980      	ldr	r0, [r0, r6]
    46d4:	4298      	cmp	r0, r3
    46d6:	d007      	beq.n	46e8 <_ZN10RingBuffer9read_charEv+0x20>
		return -1;

	uint8_t value = _aucBuffer[_iTail];
    46d8:	5c25      	ldrb	r5, [r4, r0]
	_iTail = nextIndex(_iTail);
    46da:	21a4      	movs	r1, #164	; 0xa4
    46dc:	3001      	adds	r0, #1
    46de:	f001 fb6f 	bl	5dc0 <__aeabi_uidivmod>

	return value;
    46e2:	0028      	movs	r0, r5
{
	if(_iTail == _iHead)
		return -1;

	uint8_t value = _aucBuffer[_iTail];
	_iTail = nextIndex(_iTail);
    46e4:	51a1      	str	r1, [r4, r6]

	return value;
}
    46e6:	bd70      	pop	{r4, r5, r6, pc}
}

int RingBuffer::read_char()
{
	if(_iTail == _iHead)
		return -1;
    46e8:	2001      	movs	r0, #1
    46ea:	4240      	negs	r0, r0
    46ec:	e7fb      	b.n	46e6 <_ZN10RingBuffer9read_charEv+0x1e>
    46ee:	46c0      	nop			; (mov r8, r8)

000046f0 <_ZN10RingBuffer9availableEv>:
	return value;
}

int RingBuffer::available()
{
	int delta = _iHead - _iTail;
    46f0:	23a4      	movs	r3, #164	; 0xa4
    46f2:	22a8      	movs	r2, #168	; 0xa8
    46f4:	58c3      	ldr	r3, [r0, r3]
    46f6:	5880      	ldr	r0, [r0, r2]
    46f8:	1a18      	subs	r0, r3, r0

	if(delta < 0)
    46fa:	d500      	bpl.n	46fe <_ZN10RingBuffer9availableEv+0xe>
		return SERIAL_BUFFER_SIZE + delta;
    46fc:	30a4      	adds	r0, #164	; 0xa4
	else
		return delta;
}
    46fe:	4770      	bx	lr

00004700 <_ZN10RingBuffer4peekEv>:

int RingBuffer::peek()
{
	if(_iTail == _iHead)
    4700:	23a8      	movs	r3, #168	; 0xa8
    4702:	22a4      	movs	r2, #164	; 0xa4
    4704:	58c3      	ldr	r3, [r0, r3]
    4706:	5882      	ldr	r2, [r0, r2]
    4708:	4293      	cmp	r3, r2
    470a:	d001      	beq.n	4710 <_ZN10RingBuffer4peekEv+0x10>
		return -1;

	return _aucBuffer[_iTail];
    470c:	5cc0      	ldrb	r0, [r0, r3]
}
    470e:	4770      	bx	lr
}

int RingBuffer::peek()
{
	if(_iTail == _iHead)
		return -1;
    4710:	2001      	movs	r0, #1
    4712:	4240      	negs	r0, r0
    4714:	e7fb      	b.n	470e <_ZN10RingBuffer4peekEv+0xe>
    4716:	46c0      	nop			; (mov r8, r8)

00004718 <__aeabi_atexit>:
    4718:	000b      	movs	r3, r1
    471a:	b510      	push	{r4, lr}
    471c:	0001      	movs	r1, r0
    471e:	0018      	movs	r0, r3
    4720:	f003 faa6 	bl	7c70 <__cxa_atexit>
    4724:	bd10      	pop	{r4, pc}
	...

00004728 <cos>:
    4728:	b530      	push	{r4, r5, lr}
    472a:	4a20      	ldr	r2, [pc, #128]	; (47ac <cos+0x84>)
    472c:	004b      	lsls	r3, r1, #1
    472e:	b087      	sub	sp, #28
    4730:	085b      	lsrs	r3, r3, #1
    4732:	4293      	cmp	r3, r2
    4734:	dd1c      	ble.n	4770 <cos+0x48>
    4736:	4a1e      	ldr	r2, [pc, #120]	; (47b0 <cos+0x88>)
    4738:	4293      	cmp	r3, r2
    473a:	dd05      	ble.n	4748 <cos+0x20>
    473c:	0002      	movs	r2, r0
    473e:	000b      	movs	r3, r1
    4740:	f002 fe54 	bl	73ec <__aeabi_dsub>
    4744:	b007      	add	sp, #28
    4746:	bd30      	pop	{r4, r5, pc}
    4748:	aa02      	add	r2, sp, #8
    474a:	f000 f893 	bl	4874 <__ieee754_rem_pio2>
    474e:	2303      	movs	r3, #3
    4750:	4018      	ands	r0, r3
    4752:	9a04      	ldr	r2, [sp, #16]
    4754:	9b05      	ldr	r3, [sp, #20]
    4756:	2801      	cmp	r0, #1
    4758:	d018      	beq.n	478c <cos+0x64>
    475a:	2802      	cmp	r0, #2
    475c:	d00d      	beq.n	477a <cos+0x52>
    475e:	2800      	cmp	r0, #0
    4760:	d01e      	beq.n	47a0 <cos+0x78>
    4762:	9802      	ldr	r0, [sp, #8]
    4764:	9903      	ldr	r1, [sp, #12]
    4766:	2401      	movs	r4, #1
    4768:	9400      	str	r4, [sp, #0]
    476a:	f001 f8e5 	bl	5938 <__kernel_sin>
    476e:	e7e9      	b.n	4744 <cos+0x1c>
    4770:	2200      	movs	r2, #0
    4772:	2300      	movs	r3, #0
    4774:	f000 fb7a 	bl	4e6c <__kernel_cos>
    4778:	e7e4      	b.n	4744 <cos+0x1c>
    477a:	9802      	ldr	r0, [sp, #8]
    477c:	9903      	ldr	r1, [sp, #12]
    477e:	f000 fb75 	bl	4e6c <__kernel_cos>
    4782:	2380      	movs	r3, #128	; 0x80
    4784:	061b      	lsls	r3, r3, #24
    4786:	469c      	mov	ip, r3
    4788:	4461      	add	r1, ip
    478a:	e7db      	b.n	4744 <cos+0x1c>
    478c:	9000      	str	r0, [sp, #0]
    478e:	9802      	ldr	r0, [sp, #8]
    4790:	9903      	ldr	r1, [sp, #12]
    4792:	f001 f8d1 	bl	5938 <__kernel_sin>
    4796:	2380      	movs	r3, #128	; 0x80
    4798:	061b      	lsls	r3, r3, #24
    479a:	469c      	mov	ip, r3
    479c:	4461      	add	r1, ip
    479e:	e7d1      	b.n	4744 <cos+0x1c>
    47a0:	9802      	ldr	r0, [sp, #8]
    47a2:	9903      	ldr	r1, [sp, #12]
    47a4:	f000 fb62 	bl	4e6c <__kernel_cos>
    47a8:	e7cc      	b.n	4744 <cos+0x1c>
    47aa:	46c0      	nop			; (mov r8, r8)
    47ac:	3fe921fb 	.word	0x3fe921fb
    47b0:	7fefffff 	.word	0x7fefffff

000047b4 <sqrt>:
    47b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47b6:	4646      	mov	r6, r8
    47b8:	464f      	mov	r7, r9
    47ba:	b4c0      	push	{r6, r7}
    47bc:	b08d      	sub	sp, #52	; 0x34
    47be:	0004      	movs	r4, r0
    47c0:	000d      	movs	r5, r1
    47c2:	f000 fa5d 	bl	4c80 <__ieee754_sqrt>
    47c6:	4b29      	ldr	r3, [pc, #164]	; (486c <sqrt+0xb8>)
    47c8:	9000      	str	r0, [sp, #0]
    47ca:	9101      	str	r1, [sp, #4]
    47cc:	781b      	ldrb	r3, [r3, #0]
    47ce:	b25b      	sxtb	r3, r3
    47d0:	4698      	mov	r8, r3
    47d2:	3301      	adds	r3, #1
    47d4:	d012      	beq.n	47fc <sqrt+0x48>
    47d6:	0022      	movs	r2, r4
    47d8:	002b      	movs	r3, r5
    47da:	0020      	movs	r0, r4
    47dc:	0029      	movs	r1, r5
    47de:	f003 f959 	bl	7a94 <__aeabi_dcmpun>
    47e2:	4681      	mov	r9, r0
    47e4:	2800      	cmp	r0, #0
    47e6:	d109      	bne.n	47fc <sqrt+0x48>
    47e8:	2600      	movs	r6, #0
    47ea:	2700      	movs	r7, #0
    47ec:	0032      	movs	r2, r6
    47ee:	003b      	movs	r3, r7
    47f0:	0020      	movs	r0, r4
    47f2:	0029      	movs	r1, r5
    47f4:	f001 fbea 	bl	5fcc <__aeabi_dcmplt>
    47f8:	2800      	cmp	r0, #0
    47fa:	d106      	bne.n	480a <sqrt+0x56>
    47fc:	9800      	ldr	r0, [sp, #0]
    47fe:	9901      	ldr	r1, [sp, #4]
    4800:	b00d      	add	sp, #52	; 0x34
    4802:	bc0c      	pop	{r2, r3}
    4804:	4690      	mov	r8, r2
    4806:	4699      	mov	r9, r3
    4808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    480a:	2301      	movs	r3, #1
    480c:	9302      	str	r3, [sp, #8]
    480e:	4b18      	ldr	r3, [pc, #96]	; (4870 <sqrt+0xbc>)
    4810:	9406      	str	r4, [sp, #24]
    4812:	9507      	str	r5, [sp, #28]
    4814:	9303      	str	r3, [sp, #12]
    4816:	464b      	mov	r3, r9
    4818:	930a      	str	r3, [sp, #40]	; 0x28
    481a:	4643      	mov	r3, r8
    481c:	9404      	str	r4, [sp, #16]
    481e:	9505      	str	r5, [sp, #20]
    4820:	2b00      	cmp	r3, #0
    4822:	d015      	beq.n	4850 <sqrt+0x9c>
    4824:	003b      	movs	r3, r7
    4826:	0032      	movs	r2, r6
    4828:	0030      	movs	r0, r6
    482a:	0039      	movs	r1, r7
    482c:	f001 ff40 	bl	66b0 <__aeabi_ddiv>
    4830:	4643      	mov	r3, r8
    4832:	9008      	str	r0, [sp, #32]
    4834:	9109      	str	r1, [sp, #36]	; 0x24
    4836:	2b02      	cmp	r3, #2
    4838:	d10c      	bne.n	4854 <sqrt+0xa0>
    483a:	f003 fa27 	bl	7c8c <__errno>
    483e:	2321      	movs	r3, #33	; 0x21
    4840:	6003      	str	r3, [r0, #0]
    4842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4844:	9300      	str	r3, [sp, #0]
    4846:	2b00      	cmp	r3, #0
    4848:	d10a      	bne.n	4860 <sqrt+0xac>
    484a:	9808      	ldr	r0, [sp, #32]
    484c:	9909      	ldr	r1, [sp, #36]	; 0x24
    484e:	e7d7      	b.n	4800 <sqrt+0x4c>
    4850:	9608      	str	r6, [sp, #32]
    4852:	9709      	str	r7, [sp, #36]	; 0x24
    4854:	a802      	add	r0, sp, #8
    4856:	f001 f9bb 	bl	5bd0 <matherr>
    485a:	2800      	cmp	r0, #0
    485c:	d1f1      	bne.n	4842 <sqrt+0x8e>
    485e:	e7ec      	b.n	483a <sqrt+0x86>
    4860:	f003 fa14 	bl	7c8c <__errno>
    4864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4866:	9300      	str	r3, [sp, #0]
    4868:	6003      	str	r3, [r0, #0]
    486a:	e7ee      	b.n	484a <sqrt+0x96>
    486c:	20000094 	.word	0x20000094
    4870:	000084d4 	.word	0x000084d4

00004874 <__ieee754_rem_pio2>:
    4874:	b5f0      	push	{r4, r5, r6, r7, lr}
    4876:	464e      	mov	r6, r9
    4878:	4657      	mov	r7, sl
    487a:	4645      	mov	r5, r8
    487c:	b4e0      	push	{r5, r6, r7}
    487e:	4bdc      	ldr	r3, [pc, #880]	; (4bf0 <__ieee754_rem_pio2+0x37c>)
    4880:	004e      	lsls	r6, r1, #1
    4882:	b090      	sub	sp, #64	; 0x40
    4884:	0017      	movs	r7, r2
    4886:	4689      	mov	r9, r1
    4888:	0876      	lsrs	r6, r6, #1
    488a:	429e      	cmp	r6, r3
    488c:	dc00      	bgt.n	4890 <__ieee754_rem_pio2+0x1c>
    488e:	e081      	b.n	4994 <__ieee754_rem_pio2+0x120>
    4890:	4bd8      	ldr	r3, [pc, #864]	; (4bf4 <__ieee754_rem_pio2+0x380>)
    4892:	429e      	cmp	r6, r3
    4894:	dc20      	bgt.n	48d8 <__ieee754_rem_pio2+0x64>
    4896:	4ad8      	ldr	r2, [pc, #864]	; (4bf8 <__ieee754_rem_pio2+0x384>)
    4898:	2900      	cmp	r1, #0
    489a:	dc00      	bgt.n	489e <__ieee754_rem_pio2+0x2a>
    489c:	e189      	b.n	4bb2 <__ieee754_rem_pio2+0x33e>
    489e:	4bd7      	ldr	r3, [pc, #860]	; (4bfc <__ieee754_rem_pio2+0x388>)
    48a0:	f002 fda4 	bl	73ec <__aeabi_dsub>
    48a4:	4bd5      	ldr	r3, [pc, #852]	; (4bfc <__ieee754_rem_pio2+0x388>)
    48a6:	0004      	movs	r4, r0
    48a8:	000d      	movs	r5, r1
    48aa:	429e      	cmp	r6, r3
    48ac:	d100      	bne.n	48b0 <__ieee754_rem_pio2+0x3c>
    48ae:	e08a      	b.n	49c6 <__ieee754_rem_pio2+0x152>
    48b0:	4ad3      	ldr	r2, [pc, #844]	; (4c00 <__ieee754_rem_pio2+0x38c>)
    48b2:	4bd4      	ldr	r3, [pc, #848]	; (4c04 <__ieee754_rem_pio2+0x390>)
    48b4:	f002 fd9a 	bl	73ec <__aeabi_dsub>
    48b8:	0002      	movs	r2, r0
    48ba:	000b      	movs	r3, r1
    48bc:	0020      	movs	r0, r4
    48be:	603a      	str	r2, [r7, #0]
    48c0:	607b      	str	r3, [r7, #4]
    48c2:	0029      	movs	r1, r5
    48c4:	f002 fd92 	bl	73ec <__aeabi_dsub>
    48c8:	4acd      	ldr	r2, [pc, #820]	; (4c00 <__ieee754_rem_pio2+0x38c>)
    48ca:	4bce      	ldr	r3, [pc, #824]	; (4c04 <__ieee754_rem_pio2+0x390>)
    48cc:	f002 fd8e 	bl	73ec <__aeabi_dsub>
    48d0:	60b8      	str	r0, [r7, #8]
    48d2:	60f9      	str	r1, [r7, #12]
    48d4:	2001      	movs	r0, #1
    48d6:	e066      	b.n	49a6 <__ieee754_rem_pio2+0x132>
    48d8:	4bcb      	ldr	r3, [pc, #812]	; (4c08 <__ieee754_rem_pio2+0x394>)
    48da:	429e      	cmp	r6, r3
    48dc:	dc00      	bgt.n	48e0 <__ieee754_rem_pio2+0x6c>
    48de:	e08d      	b.n	49fc <__ieee754_rem_pio2+0x188>
    48e0:	4bca      	ldr	r3, [pc, #808]	; (4c0c <__ieee754_rem_pio2+0x398>)
    48e2:	429e      	cmp	r6, r3
    48e4:	dc65      	bgt.n	49b2 <__ieee754_rem_pio2+0x13e>
    48e6:	49ca      	ldr	r1, [pc, #808]	; (4c10 <__ieee754_rem_pio2+0x39c>)
    48e8:	1532      	asrs	r2, r6, #20
    48ea:	468a      	mov	sl, r1
    48ec:	4492      	add	sl, r2
    48ee:	4653      	mov	r3, sl
    48f0:	051b      	lsls	r3, r3, #20
    48f2:	1af5      	subs	r5, r6, r3
    48f4:	0029      	movs	r1, r5
    48f6:	0004      	movs	r4, r0
    48f8:	f003 f8ec 	bl	7ad4 <__aeabi_d2iz>
    48fc:	f003 f920 	bl	7b40 <__aeabi_i2d>
    4900:	0002      	movs	r2, r0
    4902:	000b      	movs	r3, r1
    4904:	0020      	movs	r0, r4
    4906:	0029      	movs	r1, r5
    4908:	920a      	str	r2, [sp, #40]	; 0x28
    490a:	930b      	str	r3, [sp, #44]	; 0x2c
    490c:	f002 fd6e 	bl	73ec <__aeabi_dsub>
    4910:	2200      	movs	r2, #0
    4912:	4bc0      	ldr	r3, [pc, #768]	; (4c14 <__ieee754_rem_pio2+0x3a0>)
    4914:	f002 faf0 	bl	6ef8 <__aeabi_dmul>
    4918:	9002      	str	r0, [sp, #8]
    491a:	9103      	str	r1, [sp, #12]
    491c:	f003 f8da 	bl	7ad4 <__aeabi_d2iz>
    4920:	f003 f90e 	bl	7b40 <__aeabi_i2d>
    4924:	0004      	movs	r4, r0
    4926:	000d      	movs	r5, r1
    4928:	0002      	movs	r2, r0
    492a:	000b      	movs	r3, r1
    492c:	9802      	ldr	r0, [sp, #8]
    492e:	9903      	ldr	r1, [sp, #12]
    4930:	940c      	str	r4, [sp, #48]	; 0x30
    4932:	950d      	str	r5, [sp, #52]	; 0x34
    4934:	f002 fd5a 	bl	73ec <__aeabi_dsub>
    4938:	2200      	movs	r2, #0
    493a:	4bb6      	ldr	r3, [pc, #728]	; (4c14 <__ieee754_rem_pio2+0x3a0>)
    493c:	f002 fadc 	bl	6ef8 <__aeabi_dmul>
    4940:	2200      	movs	r2, #0
    4942:	2300      	movs	r3, #0
    4944:	900e      	str	r0, [sp, #56]	; 0x38
    4946:	910f      	str	r1, [sp, #60]	; 0x3c
    4948:	f001 fb3a 	bl	5fc0 <__aeabi_dcmpeq>
    494c:	2800      	cmp	r0, #0
    494e:	d100      	bne.n	4952 <__ieee754_rem_pio2+0xde>
    4950:	e14c      	b.n	4bec <__ieee754_rem_pio2+0x378>
    4952:	2300      	movs	r3, #0
    4954:	2200      	movs	r2, #0
    4956:	0020      	movs	r0, r4
    4958:	0029      	movs	r1, r5
    495a:	f001 fb31 	bl	5fc0 <__aeabi_dcmpeq>
    495e:	2202      	movs	r2, #2
    4960:	1e43      	subs	r3, r0, #1
    4962:	4198      	sbcs	r0, r3
    4964:	1a13      	subs	r3, r2, r0
    4966:	4aac      	ldr	r2, [pc, #688]	; (4c18 <__ieee754_rem_pio2+0x3a4>)
    4968:	0039      	movs	r1, r7
    496a:	9201      	str	r2, [sp, #4]
    496c:	2202      	movs	r2, #2
    496e:	a80a      	add	r0, sp, #40	; 0x28
    4970:	9200      	str	r2, [sp, #0]
    4972:	4652      	mov	r2, sl
    4974:	f000 fb94 	bl	50a0 <__kernel_rem_pio2>
    4978:	464b      	mov	r3, r9
    497a:	2b00      	cmp	r3, #0
    497c:	da13      	bge.n	49a6 <__ieee754_rem_pio2+0x132>
    497e:	2280      	movs	r2, #128	; 0x80
    4980:	0612      	lsls	r2, r2, #24
    4982:	4694      	mov	ip, r2
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	4240      	negs	r0, r0
    4988:	4463      	add	r3, ip
    498a:	607b      	str	r3, [r7, #4]
    498c:	68fb      	ldr	r3, [r7, #12]
    498e:	4463      	add	r3, ip
    4990:	60fb      	str	r3, [r7, #12]
    4992:	e008      	b.n	49a6 <__ieee754_rem_pio2+0x132>
    4994:	0002      	movs	r2, r0
    4996:	000b      	movs	r3, r1
    4998:	603a      	str	r2, [r7, #0]
    499a:	607b      	str	r3, [r7, #4]
    499c:	2200      	movs	r2, #0
    499e:	2300      	movs	r3, #0
    49a0:	2000      	movs	r0, #0
    49a2:	60ba      	str	r2, [r7, #8]
    49a4:	60fb      	str	r3, [r7, #12]
    49a6:	b010      	add	sp, #64	; 0x40
    49a8:	bc1c      	pop	{r2, r3, r4}
    49aa:	4690      	mov	r8, r2
    49ac:	4699      	mov	r9, r3
    49ae:	46a2      	mov	sl, r4
    49b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49b2:	0002      	movs	r2, r0
    49b4:	000b      	movs	r3, r1
    49b6:	f002 fd19 	bl	73ec <__aeabi_dsub>
    49ba:	60b8      	str	r0, [r7, #8]
    49bc:	60f9      	str	r1, [r7, #12]
    49be:	6038      	str	r0, [r7, #0]
    49c0:	6079      	str	r1, [r7, #4]
    49c2:	2000      	movs	r0, #0
    49c4:	e7ef      	b.n	49a6 <__ieee754_rem_pio2+0x132>
    49c6:	22d3      	movs	r2, #211	; 0xd3
    49c8:	4b8e      	ldr	r3, [pc, #568]	; (4c04 <__ieee754_rem_pio2+0x390>)
    49ca:	0552      	lsls	r2, r2, #21
    49cc:	f002 fd0e 	bl	73ec <__aeabi_dsub>
    49d0:	4a92      	ldr	r2, [pc, #584]	; (4c1c <__ieee754_rem_pio2+0x3a8>)
    49d2:	4b93      	ldr	r3, [pc, #588]	; (4c20 <__ieee754_rem_pio2+0x3ac>)
    49d4:	0004      	movs	r4, r0
    49d6:	000d      	movs	r5, r1
    49d8:	f002 fd08 	bl	73ec <__aeabi_dsub>
    49dc:	0002      	movs	r2, r0
    49de:	000b      	movs	r3, r1
    49e0:	0020      	movs	r0, r4
    49e2:	603a      	str	r2, [r7, #0]
    49e4:	607b      	str	r3, [r7, #4]
    49e6:	0029      	movs	r1, r5
    49e8:	f002 fd00 	bl	73ec <__aeabi_dsub>
    49ec:	4a8b      	ldr	r2, [pc, #556]	; (4c1c <__ieee754_rem_pio2+0x3a8>)
    49ee:	4b8c      	ldr	r3, [pc, #560]	; (4c20 <__ieee754_rem_pio2+0x3ac>)
    49f0:	f002 fcfc 	bl	73ec <__aeabi_dsub>
    49f4:	60b8      	str	r0, [r7, #8]
    49f6:	60f9      	str	r1, [r7, #12]
    49f8:	2001      	movs	r0, #1
    49fa:	e7d4      	b.n	49a6 <__ieee754_rem_pio2+0x132>
    49fc:	f001 f84c 	bl	5a98 <fabs>
    4a00:	4a88      	ldr	r2, [pc, #544]	; (4c24 <__ieee754_rem_pio2+0x3b0>)
    4a02:	4b89      	ldr	r3, [pc, #548]	; (4c28 <__ieee754_rem_pio2+0x3b4>)
    4a04:	0004      	movs	r4, r0
    4a06:	000d      	movs	r5, r1
    4a08:	f002 fa76 	bl	6ef8 <__aeabi_dmul>
    4a0c:	2200      	movs	r2, #0
    4a0e:	4b87      	ldr	r3, [pc, #540]	; (4c2c <__ieee754_rem_pio2+0x3b8>)
    4a10:	f001 fb22 	bl	6058 <__aeabi_dadd>
    4a14:	f003 f85e 	bl	7ad4 <__aeabi_d2iz>
    4a18:	4680      	mov	r8, r0
    4a1a:	f003 f891 	bl	7b40 <__aeabi_i2d>
    4a1e:	4a76      	ldr	r2, [pc, #472]	; (4bf8 <__ieee754_rem_pio2+0x384>)
    4a20:	4b76      	ldr	r3, [pc, #472]	; (4bfc <__ieee754_rem_pio2+0x388>)
    4a22:	9006      	str	r0, [sp, #24]
    4a24:	9107      	str	r1, [sp, #28]
    4a26:	f002 fa67 	bl	6ef8 <__aeabi_dmul>
    4a2a:	0002      	movs	r2, r0
    4a2c:	000b      	movs	r3, r1
    4a2e:	0020      	movs	r0, r4
    4a30:	0029      	movs	r1, r5
    4a32:	f002 fcdb 	bl	73ec <__aeabi_dsub>
    4a36:	4b73      	ldr	r3, [pc, #460]	; (4c04 <__ieee754_rem_pio2+0x390>)
    4a38:	9002      	str	r0, [sp, #8]
    4a3a:	9103      	str	r1, [sp, #12]
    4a3c:	9806      	ldr	r0, [sp, #24]
    4a3e:	9907      	ldr	r1, [sp, #28]
    4a40:	4a6f      	ldr	r2, [pc, #444]	; (4c00 <__ieee754_rem_pio2+0x38c>)
    4a42:	f002 fa59 	bl	6ef8 <__aeabi_dmul>
    4a46:	4643      	mov	r3, r8
    4a48:	0004      	movs	r4, r0
    4a4a:	000d      	movs	r5, r1
    4a4c:	9404      	str	r4, [sp, #16]
    4a4e:	9505      	str	r5, [sp, #20]
    4a50:	2b1f      	cmp	r3, #31
    4a52:	dc30      	bgt.n	4ab6 <__ieee754_rem_pio2+0x242>
    4a54:	3b01      	subs	r3, #1
    4a56:	4a76      	ldr	r2, [pc, #472]	; (4c30 <__ieee754_rem_pio2+0x3bc>)
    4a58:	009b      	lsls	r3, r3, #2
    4a5a:	589b      	ldr	r3, [r3, r2]
    4a5c:	429e      	cmp	r6, r3
    4a5e:	d02a      	beq.n	4ab6 <__ieee754_rem_pio2+0x242>
    4a60:	0002      	movs	r2, r0
    4a62:	000b      	movs	r3, r1
    4a64:	9802      	ldr	r0, [sp, #8]
    4a66:	9903      	ldr	r1, [sp, #12]
    4a68:	f002 fcc0 	bl	73ec <__aeabi_dsub>
    4a6c:	0002      	movs	r2, r0
    4a6e:	000b      	movs	r3, r1
    4a70:	0005      	movs	r5, r0
    4a72:	000c      	movs	r4, r1
    4a74:	603a      	str	r2, [r7, #0]
    4a76:	607b      	str	r3, [r7, #4]
    4a78:	9802      	ldr	r0, [sp, #8]
    4a7a:	9903      	ldr	r1, [sp, #12]
    4a7c:	002a      	movs	r2, r5
    4a7e:	0023      	movs	r3, r4
    4a80:	f002 fcb4 	bl	73ec <__aeabi_dsub>
    4a84:	9a04      	ldr	r2, [sp, #16]
    4a86:	9b05      	ldr	r3, [sp, #20]
    4a88:	f002 fcb0 	bl	73ec <__aeabi_dsub>
    4a8c:	0006      	movs	r6, r0
    4a8e:	000b      	movs	r3, r1
    4a90:	0032      	movs	r2, r6
    4a92:	60ba      	str	r2, [r7, #8]
    4a94:	60fb      	str	r3, [r7, #12]
    4a96:	464b      	mov	r3, r9
    4a98:	4640      	mov	r0, r8
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	db00      	blt.n	4aa0 <__ieee754_rem_pio2+0x22c>
    4a9e:	e782      	b.n	49a6 <__ieee754_rem_pio2+0x132>
    4aa0:	2380      	movs	r3, #128	; 0x80
    4aa2:	061b      	lsls	r3, r3, #24
    4aa4:	469c      	mov	ip, r3
    4aa6:	4464      	add	r4, ip
    4aa8:	4461      	add	r1, ip
    4aaa:	603d      	str	r5, [r7, #0]
    4aac:	607c      	str	r4, [r7, #4]
    4aae:	60be      	str	r6, [r7, #8]
    4ab0:	60f9      	str	r1, [r7, #12]
    4ab2:	4240      	negs	r0, r0
    4ab4:	e777      	b.n	49a6 <__ieee754_rem_pio2+0x132>
    4ab6:	9a04      	ldr	r2, [sp, #16]
    4ab8:	9b05      	ldr	r3, [sp, #20]
    4aba:	9802      	ldr	r0, [sp, #8]
    4abc:	9903      	ldr	r1, [sp, #12]
    4abe:	f002 fc95 	bl	73ec <__aeabi_dsub>
    4ac2:	000b      	movs	r3, r1
    4ac4:	0002      	movs	r2, r0
    4ac6:	603a      	str	r2, [r7, #0]
    4ac8:	607b      	str	r3, [r7, #4]
    4aca:	004b      	lsls	r3, r1, #1
    4acc:	1536      	asrs	r6, r6, #20
    4ace:	0d5b      	lsrs	r3, r3, #21
    4ad0:	0005      	movs	r5, r0
    4ad2:	000c      	movs	r4, r1
    4ad4:	1af3      	subs	r3, r6, r3
    4ad6:	2b10      	cmp	r3, #16
    4ad8:	ddce      	ble.n	4a78 <__ieee754_rem_pio2+0x204>
    4ada:	9806      	ldr	r0, [sp, #24]
    4adc:	9907      	ldr	r1, [sp, #28]
    4ade:	22d3      	movs	r2, #211	; 0xd3
    4ae0:	4b48      	ldr	r3, [pc, #288]	; (4c04 <__ieee754_rem_pio2+0x390>)
    4ae2:	0552      	lsls	r2, r2, #21
    4ae4:	f002 fa08 	bl	6ef8 <__aeabi_dmul>
    4ae8:	0004      	movs	r4, r0
    4aea:	000d      	movs	r5, r1
    4aec:	0002      	movs	r2, r0
    4aee:	000b      	movs	r3, r1
    4af0:	9802      	ldr	r0, [sp, #8]
    4af2:	9903      	ldr	r1, [sp, #12]
    4af4:	f002 fc7a 	bl	73ec <__aeabi_dsub>
    4af8:	0002      	movs	r2, r0
    4afa:	000b      	movs	r3, r1
    4afc:	9802      	ldr	r0, [sp, #8]
    4afe:	9903      	ldr	r1, [sp, #12]
    4b00:	9208      	str	r2, [sp, #32]
    4b02:	9309      	str	r3, [sp, #36]	; 0x24
    4b04:	f002 fc72 	bl	73ec <__aeabi_dsub>
    4b08:	0022      	movs	r2, r4
    4b0a:	002b      	movs	r3, r5
    4b0c:	f002 fc6e 	bl	73ec <__aeabi_dsub>
    4b10:	0004      	movs	r4, r0
    4b12:	000d      	movs	r5, r1
    4b14:	9806      	ldr	r0, [sp, #24]
    4b16:	9907      	ldr	r1, [sp, #28]
    4b18:	4a40      	ldr	r2, [pc, #256]	; (4c1c <__ieee754_rem_pio2+0x3a8>)
    4b1a:	4b41      	ldr	r3, [pc, #260]	; (4c20 <__ieee754_rem_pio2+0x3ac>)
    4b1c:	f002 f9ec 	bl	6ef8 <__aeabi_dmul>
    4b20:	0022      	movs	r2, r4
    4b22:	002b      	movs	r3, r5
    4b24:	f002 fc62 	bl	73ec <__aeabi_dsub>
    4b28:	0002      	movs	r2, r0
    4b2a:	000b      	movs	r3, r1
    4b2c:	9004      	str	r0, [sp, #16]
    4b2e:	9105      	str	r1, [sp, #20]
    4b30:	9808      	ldr	r0, [sp, #32]
    4b32:	9909      	ldr	r1, [sp, #36]	; 0x24
    4b34:	f002 fc5a 	bl	73ec <__aeabi_dsub>
    4b38:	0002      	movs	r2, r0
    4b3a:	000b      	movs	r3, r1
    4b3c:	603a      	str	r2, [r7, #0]
    4b3e:	607b      	str	r3, [r7, #4]
    4b40:	004b      	lsls	r3, r1, #1
    4b42:	0d5b      	lsrs	r3, r3, #21
    4b44:	1af6      	subs	r6, r6, r3
    4b46:	0005      	movs	r5, r0
    4b48:	9a08      	ldr	r2, [sp, #32]
    4b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4b4c:	000c      	movs	r4, r1
    4b4e:	9202      	str	r2, [sp, #8]
    4b50:	9303      	str	r3, [sp, #12]
    4b52:	2e31      	cmp	r6, #49	; 0x31
    4b54:	dd90      	ble.n	4a78 <__ieee754_rem_pio2+0x204>
    4b56:	9806      	ldr	r0, [sp, #24]
    4b58:	9907      	ldr	r1, [sp, #28]
    4b5a:	22b8      	movs	r2, #184	; 0xb8
    4b5c:	4b30      	ldr	r3, [pc, #192]	; (4c20 <__ieee754_rem_pio2+0x3ac>)
    4b5e:	0592      	lsls	r2, r2, #22
    4b60:	f002 f9ca 	bl	6ef8 <__aeabi_dmul>
    4b64:	0004      	movs	r4, r0
    4b66:	000d      	movs	r5, r1
    4b68:	0002      	movs	r2, r0
    4b6a:	000b      	movs	r3, r1
    4b6c:	9802      	ldr	r0, [sp, #8]
    4b6e:	9903      	ldr	r1, [sp, #12]
    4b70:	f002 fc3c 	bl	73ec <__aeabi_dsub>
    4b74:	000a      	movs	r2, r1
    4b76:	0001      	movs	r1, r0
    4b78:	0013      	movs	r3, r2
    4b7a:	9102      	str	r1, [sp, #8]
    4b7c:	9203      	str	r2, [sp, #12]
    4b7e:	0002      	movs	r2, r0
    4b80:	9808      	ldr	r0, [sp, #32]
    4b82:	9909      	ldr	r1, [sp, #36]	; 0x24
    4b84:	f002 fc32 	bl	73ec <__aeabi_dsub>
    4b88:	0022      	movs	r2, r4
    4b8a:	002b      	movs	r3, r5
    4b8c:	f002 fc2e 	bl	73ec <__aeabi_dsub>
    4b90:	0004      	movs	r4, r0
    4b92:	000d      	movs	r5, r1
    4b94:	9806      	ldr	r0, [sp, #24]
    4b96:	9907      	ldr	r1, [sp, #28]
    4b98:	4a26      	ldr	r2, [pc, #152]	; (4c34 <__ieee754_rem_pio2+0x3c0>)
    4b9a:	4b27      	ldr	r3, [pc, #156]	; (4c38 <__ieee754_rem_pio2+0x3c4>)
    4b9c:	f002 f9ac 	bl	6ef8 <__aeabi_dmul>
    4ba0:	0022      	movs	r2, r4
    4ba2:	002b      	movs	r3, r5
    4ba4:	f002 fc22 	bl	73ec <__aeabi_dsub>
    4ba8:	0002      	movs	r2, r0
    4baa:	000b      	movs	r3, r1
    4bac:	9204      	str	r2, [sp, #16]
    4bae:	9305      	str	r3, [sp, #20]
    4bb0:	e758      	b.n	4a64 <__ieee754_rem_pio2+0x1f0>
    4bb2:	4b12      	ldr	r3, [pc, #72]	; (4bfc <__ieee754_rem_pio2+0x388>)
    4bb4:	f001 fa50 	bl	6058 <__aeabi_dadd>
    4bb8:	4b10      	ldr	r3, [pc, #64]	; (4bfc <__ieee754_rem_pio2+0x388>)
    4bba:	0004      	movs	r4, r0
    4bbc:	000d      	movs	r5, r1
    4bbe:	429e      	cmp	r6, r3
    4bc0:	d03c      	beq.n	4c3c <__ieee754_rem_pio2+0x3c8>
    4bc2:	4a0f      	ldr	r2, [pc, #60]	; (4c00 <__ieee754_rem_pio2+0x38c>)
    4bc4:	4b0f      	ldr	r3, [pc, #60]	; (4c04 <__ieee754_rem_pio2+0x390>)
    4bc6:	f001 fa47 	bl	6058 <__aeabi_dadd>
    4bca:	0002      	movs	r2, r0
    4bcc:	000b      	movs	r3, r1
    4bce:	0020      	movs	r0, r4
    4bd0:	603a      	str	r2, [r7, #0]
    4bd2:	607b      	str	r3, [r7, #4]
    4bd4:	0029      	movs	r1, r5
    4bd6:	f002 fc09 	bl	73ec <__aeabi_dsub>
    4bda:	4a09      	ldr	r2, [pc, #36]	; (4c00 <__ieee754_rem_pio2+0x38c>)
    4bdc:	4b09      	ldr	r3, [pc, #36]	; (4c04 <__ieee754_rem_pio2+0x390>)
    4bde:	f001 fa3b 	bl	6058 <__aeabi_dadd>
    4be2:	60b8      	str	r0, [r7, #8]
    4be4:	60f9      	str	r1, [r7, #12]
    4be6:	2001      	movs	r0, #1
    4be8:	4240      	negs	r0, r0
    4bea:	e6dc      	b.n	49a6 <__ieee754_rem_pio2+0x132>
    4bec:	2303      	movs	r3, #3
    4bee:	e6ba      	b.n	4966 <__ieee754_rem_pio2+0xf2>
    4bf0:	3fe921fb 	.word	0x3fe921fb
    4bf4:	4002d97b 	.word	0x4002d97b
    4bf8:	54400000 	.word	0x54400000
    4bfc:	3ff921fb 	.word	0x3ff921fb
    4c00:	1a626331 	.word	0x1a626331
    4c04:	3dd0b461 	.word	0x3dd0b461
    4c08:	413921fb 	.word	0x413921fb
    4c0c:	7fefffff 	.word	0x7fefffff
    4c10:	fffffbea 	.word	0xfffffbea
    4c14:	41700000 	.word	0x41700000
    4c18:	0000855c 	.word	0x0000855c
    4c1c:	2e037073 	.word	0x2e037073
    4c20:	3ba3198a 	.word	0x3ba3198a
    4c24:	6dc9c883 	.word	0x6dc9c883
    4c28:	3fe45f30 	.word	0x3fe45f30
    4c2c:	3fe00000 	.word	0x3fe00000
    4c30:	000084dc 	.word	0x000084dc
    4c34:	252049c1 	.word	0x252049c1
    4c38:	397b839a 	.word	0x397b839a
    4c3c:	22d3      	movs	r2, #211	; 0xd3
    4c3e:	4b0d      	ldr	r3, [pc, #52]	; (4c74 <__ieee754_rem_pio2+0x400>)
    4c40:	0552      	lsls	r2, r2, #21
    4c42:	f001 fa09 	bl	6058 <__aeabi_dadd>
    4c46:	4a0c      	ldr	r2, [pc, #48]	; (4c78 <__ieee754_rem_pio2+0x404>)
    4c48:	4b0c      	ldr	r3, [pc, #48]	; (4c7c <__ieee754_rem_pio2+0x408>)
    4c4a:	0004      	movs	r4, r0
    4c4c:	000d      	movs	r5, r1
    4c4e:	f001 fa03 	bl	6058 <__aeabi_dadd>
    4c52:	0002      	movs	r2, r0
    4c54:	000b      	movs	r3, r1
    4c56:	0020      	movs	r0, r4
    4c58:	603a      	str	r2, [r7, #0]
    4c5a:	607b      	str	r3, [r7, #4]
    4c5c:	0029      	movs	r1, r5
    4c5e:	f002 fbc5 	bl	73ec <__aeabi_dsub>
    4c62:	4a05      	ldr	r2, [pc, #20]	; (4c78 <__ieee754_rem_pio2+0x404>)
    4c64:	4b05      	ldr	r3, [pc, #20]	; (4c7c <__ieee754_rem_pio2+0x408>)
    4c66:	f001 f9f7 	bl	6058 <__aeabi_dadd>
    4c6a:	60b8      	str	r0, [r7, #8]
    4c6c:	60f9      	str	r1, [r7, #12]
    4c6e:	2001      	movs	r0, #1
    4c70:	4240      	negs	r0, r0
    4c72:	e698      	b.n	49a6 <__ieee754_rem_pio2+0x132>
    4c74:	3dd0b461 	.word	0x3dd0b461
    4c78:	2e037073 	.word	0x2e037073
    4c7c:	3ba3198a 	.word	0x3ba3198a

00004c80 <__ieee754_sqrt>:
    4c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c82:	4656      	mov	r6, sl
    4c84:	464d      	mov	r5, r9
    4c86:	4644      	mov	r4, r8
    4c88:	465f      	mov	r7, fp
    4c8a:	4b75      	ldr	r3, [pc, #468]	; (4e60 <__ieee754_sqrt+0x1e0>)
    4c8c:	b4f0      	push	{r4, r5, r6, r7}
    4c8e:	000a      	movs	r2, r1
    4c90:	000d      	movs	r5, r1
    4c92:	0019      	movs	r1, r3
    4c94:	b083      	sub	sp, #12
    4c96:	0006      	movs	r6, r0
    4c98:	0004      	movs	r4, r0
    4c9a:	4029      	ands	r1, r5
    4c9c:	4299      	cmp	r1, r3
    4c9e:	d100      	bne.n	4ca2 <__ieee754_sqrt+0x22>
    4ca0:	e0ba      	b.n	4e18 <__ieee754_sqrt+0x198>
    4ca2:	2d00      	cmp	r5, #0
    4ca4:	dc00      	bgt.n	4ca8 <__ieee754_sqrt+0x28>
    4ca6:	e094      	b.n	4dd2 <__ieee754_sqrt+0x152>
    4ca8:	152d      	asrs	r5, r5, #20
    4caa:	d100      	bne.n	4cae <__ieee754_sqrt+0x2e>
    4cac:	e0a3      	b.n	4df6 <__ieee754_sqrt+0x176>
    4cae:	4b6d      	ldr	r3, [pc, #436]	; (4e64 <__ieee754_sqrt+0x1e4>)
    4cb0:	0312      	lsls	r2, r2, #12
    4cb2:	469c      	mov	ip, r3
    4cb4:	2380      	movs	r3, #128	; 0x80
    4cb6:	0b12      	lsrs	r2, r2, #12
    4cb8:	035b      	lsls	r3, r3, #13
    4cba:	4465      	add	r5, ip
    4cbc:	431a      	orrs	r2, r3
    4cbe:	07eb      	lsls	r3, r5, #31
    4cc0:	d500      	bpl.n	4cc4 <__ieee754_sqrt+0x44>
    4cc2:	e081      	b.n	4dc8 <__ieee754_sqrt+0x148>
    4cc4:	106b      	asrs	r3, r5, #1
    4cc6:	4698      	mov	r8, r3
    4cc8:	0fe3      	lsrs	r3, r4, #31
    4cca:	189b      	adds	r3, r3, r2
    4ccc:	189b      	adds	r3, r3, r2
    4cce:	2280      	movs	r2, #128	; 0x80
    4cd0:	2116      	movs	r1, #22
    4cd2:	2600      	movs	r6, #0
    4cd4:	2700      	movs	r7, #0
    4cd6:	0064      	lsls	r4, r4, #1
    4cd8:	0392      	lsls	r2, r2, #14
    4cda:	18b8      	adds	r0, r7, r2
    4cdc:	4298      	cmp	r0, r3
    4cde:	dc02      	bgt.n	4ce6 <__ieee754_sqrt+0x66>
    4ce0:	1887      	adds	r7, r0, r2
    4ce2:	1a1b      	subs	r3, r3, r0
    4ce4:	18b6      	adds	r6, r6, r2
    4ce6:	0fe0      	lsrs	r0, r4, #31
    4ce8:	005b      	lsls	r3, r3, #1
    4cea:	3901      	subs	r1, #1
    4cec:	181b      	adds	r3, r3, r0
    4cee:	0064      	lsls	r4, r4, #1
    4cf0:	0852      	lsrs	r2, r2, #1
    4cf2:	2900      	cmp	r1, #0
    4cf4:	d1f1      	bne.n	4cda <__ieee754_sqrt+0x5a>
    4cf6:	2200      	movs	r2, #0
    4cf8:	9201      	str	r2, [sp, #4]
    4cfa:	4694      	mov	ip, r2
    4cfc:	2280      	movs	r2, #128	; 0x80
    4cfe:	0612      	lsls	r2, r2, #24
    4d00:	2020      	movs	r0, #32
    4d02:	4691      	mov	r9, r2
    4d04:	e009      	b.n	4d1a <__ieee754_sqrt+0x9a>
    4d06:	429f      	cmp	r7, r3
    4d08:	d041      	beq.n	4d8e <__ieee754_sqrt+0x10e>
    4d0a:	0fe1      	lsrs	r1, r4, #31
    4d0c:	18c9      	adds	r1, r1, r3
    4d0e:	3801      	subs	r0, #1
    4d10:	18cb      	adds	r3, r1, r3
    4d12:	0064      	lsls	r4, r4, #1
    4d14:	0852      	lsrs	r2, r2, #1
    4d16:	2800      	cmp	r0, #0
    4d18:	d01e      	beq.n	4d58 <__ieee754_sqrt+0xd8>
    4d1a:	4661      	mov	r1, ip
    4d1c:	1851      	adds	r1, r2, r1
    4d1e:	429f      	cmp	r7, r3
    4d20:	daf1      	bge.n	4d06 <__ieee754_sqrt+0x86>
    4d22:	188d      	adds	r5, r1, r2
    4d24:	46ac      	mov	ip, r5
    4d26:	0fcd      	lsrs	r5, r1, #31
    4d28:	07ed      	lsls	r5, r5, #31
    4d2a:	46ba      	mov	sl, r7
    4d2c:	454d      	cmp	r5, r9
    4d2e:	d039      	beq.n	4da4 <__ieee754_sqrt+0x124>
    4d30:	1bdb      	subs	r3, r3, r7
    4d32:	428c      	cmp	r4, r1
    4d34:	41bf      	sbcs	r7, r7
    4d36:	427f      	negs	r7, r7
    4d38:	1bdb      	subs	r3, r3, r7
    4d3a:	1a64      	subs	r4, r4, r1
    4d3c:	9901      	ldr	r1, [sp, #4]
    4d3e:	3801      	subs	r0, #1
    4d40:	468b      	mov	fp, r1
    4d42:	4493      	add	fp, r2
    4d44:	4659      	mov	r1, fp
    4d46:	9101      	str	r1, [sp, #4]
    4d48:	0fe1      	lsrs	r1, r4, #31
    4d4a:	18c9      	adds	r1, r1, r3
    4d4c:	4657      	mov	r7, sl
    4d4e:	18cb      	adds	r3, r1, r3
    4d50:	0064      	lsls	r4, r4, #1
    4d52:	0852      	lsrs	r2, r2, #1
    4d54:	2800      	cmp	r0, #0
    4d56:	d1e0      	bne.n	4d1a <__ieee754_sqrt+0x9a>
    4d58:	4323      	orrs	r3, r4
    4d5a:	d12b      	bne.n	4db4 <__ieee754_sqrt+0x134>
    4d5c:	9b01      	ldr	r3, [sp, #4]
    4d5e:	085b      	lsrs	r3, r3, #1
    4d60:	4941      	ldr	r1, [pc, #260]	; (4e68 <__ieee754_sqrt+0x1e8>)
    4d62:	1072      	asrs	r2, r6, #1
    4d64:	468c      	mov	ip, r1
    4d66:	4462      	add	r2, ip
    4d68:	07f1      	lsls	r1, r6, #31
    4d6a:	d502      	bpl.n	4d72 <__ieee754_sqrt+0xf2>
    4d6c:	2180      	movs	r1, #128	; 0x80
    4d6e:	0609      	lsls	r1, r1, #24
    4d70:	430b      	orrs	r3, r1
    4d72:	4641      	mov	r1, r8
    4d74:	0509      	lsls	r1, r1, #20
    4d76:	188d      	adds	r5, r1, r2
    4d78:	001e      	movs	r6, r3
    4d7a:	002f      	movs	r7, r5
    4d7c:	0030      	movs	r0, r6
    4d7e:	0039      	movs	r1, r7
    4d80:	b003      	add	sp, #12
    4d82:	bc3c      	pop	{r2, r3, r4, r5}
    4d84:	4690      	mov	r8, r2
    4d86:	4699      	mov	r9, r3
    4d88:	46a2      	mov	sl, r4
    4d8a:	46ab      	mov	fp, r5
    4d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d8e:	42a1      	cmp	r1, r4
    4d90:	d80e      	bhi.n	4db0 <__ieee754_sqrt+0x130>
    4d92:	188d      	adds	r5, r1, r2
    4d94:	46ac      	mov	ip, r5
    4d96:	0fcd      	lsrs	r5, r1, #31
    4d98:	07ed      	lsls	r5, r5, #31
    4d9a:	454d      	cmp	r5, r9
    4d9c:	d048      	beq.n	4e30 <__ieee754_sqrt+0x1b0>
    4d9e:	469a      	mov	sl, r3
    4da0:	2300      	movs	r3, #0
    4da2:	e7ca      	b.n	4d3a <__ieee754_sqrt+0xba>
    4da4:	4665      	mov	r5, ip
    4da6:	2d00      	cmp	r5, #0
    4da8:	dbc2      	blt.n	4d30 <__ieee754_sqrt+0xb0>
    4daa:	1c7d      	adds	r5, r7, #1
    4dac:	46aa      	mov	sl, r5
    4dae:	e7bf      	b.n	4d30 <__ieee754_sqrt+0xb0>
    4db0:	003b      	movs	r3, r7
    4db2:	e7aa      	b.n	4d0a <__ieee754_sqrt+0x8a>
    4db4:	9b01      	ldr	r3, [sp, #4]
    4db6:	3301      	adds	r3, #1
    4db8:	d03e      	beq.n	4e38 <__ieee754_sqrt+0x1b8>
    4dba:	9a01      	ldr	r2, [sp, #4]
    4dbc:	2301      	movs	r3, #1
    4dbe:	4694      	mov	ip, r2
    4dc0:	4013      	ands	r3, r2
    4dc2:	4463      	add	r3, ip
    4dc4:	085b      	lsrs	r3, r3, #1
    4dc6:	e7cb      	b.n	4d60 <__ieee754_sqrt+0xe0>
    4dc8:	0fe3      	lsrs	r3, r4, #31
    4dca:	0052      	lsls	r2, r2, #1
    4dcc:	189a      	adds	r2, r3, r2
    4dce:	0064      	lsls	r4, r4, #1
    4dd0:	e778      	b.n	4cc4 <__ieee754_sqrt+0x44>
    4dd2:	006b      	lsls	r3, r5, #1
    4dd4:	085b      	lsrs	r3, r3, #1
    4dd6:	4303      	orrs	r3, r0
    4dd8:	002f      	movs	r7, r5
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d0ce      	beq.n	4d7c <__ieee754_sqrt+0xfc>
    4dde:	2500      	movs	r5, #0
    4de0:	2a00      	cmp	r2, #0
    4de2:	d131      	bne.n	4e48 <__ieee754_sqrt+0x1c8>
    4de4:	0ae2      	lsrs	r2, r4, #11
    4de6:	3d15      	subs	r5, #21
    4de8:	0564      	lsls	r4, r4, #21
    4dea:	2a00      	cmp	r2, #0
    4dec:	d0fa      	beq.n	4de4 <__ieee754_sqrt+0x164>
    4dee:	2380      	movs	r3, #128	; 0x80
    4df0:	035b      	lsls	r3, r3, #13
    4df2:	421a      	tst	r2, r3
    4df4:	d123      	bne.n	4e3e <__ieee754_sqrt+0x1be>
    4df6:	2080      	movs	r0, #128	; 0x80
    4df8:	2300      	movs	r3, #0
    4dfa:	0340      	lsls	r0, r0, #13
    4dfc:	e000      	b.n	4e00 <__ieee754_sqrt+0x180>
    4dfe:	000b      	movs	r3, r1
    4e00:	0052      	lsls	r2, r2, #1
    4e02:	1c59      	adds	r1, r3, #1
    4e04:	4202      	tst	r2, r0
    4e06:	d0fa      	beq.n	4dfe <__ieee754_sqrt+0x17e>
    4e08:	2020      	movs	r0, #32
    4e0a:	1a40      	subs	r0, r0, r1
    4e0c:	1aed      	subs	r5, r5, r3
    4e0e:	0023      	movs	r3, r4
    4e10:	40c3      	lsrs	r3, r0
    4e12:	408c      	lsls	r4, r1
    4e14:	431a      	orrs	r2, r3
    4e16:	e74a      	b.n	4cae <__ieee754_sqrt+0x2e>
    4e18:	0002      	movs	r2, r0
    4e1a:	002b      	movs	r3, r5
    4e1c:	0029      	movs	r1, r5
    4e1e:	f002 f86b 	bl	6ef8 <__aeabi_dmul>
    4e22:	0032      	movs	r2, r6
    4e24:	002b      	movs	r3, r5
    4e26:	f001 f917 	bl	6058 <__aeabi_dadd>
    4e2a:	0006      	movs	r6, r0
    4e2c:	000f      	movs	r7, r1
    4e2e:	e7a5      	b.n	4d7c <__ieee754_sqrt+0xfc>
    4e30:	4665      	mov	r5, ip
    4e32:	2d00      	cmp	r5, #0
    4e34:	dab9      	bge.n	4daa <__ieee754_sqrt+0x12a>
    4e36:	e7b2      	b.n	4d9e <__ieee754_sqrt+0x11e>
    4e38:	3601      	adds	r6, #1
    4e3a:	2300      	movs	r3, #0
    4e3c:	e790      	b.n	4d60 <__ieee754_sqrt+0xe0>
    4e3e:	2301      	movs	r3, #1
    4e40:	2020      	movs	r0, #32
    4e42:	425b      	negs	r3, r3
    4e44:	2100      	movs	r1, #0
    4e46:	e7e1      	b.n	4e0c <__ieee754_sqrt+0x18c>
    4e48:	003b      	movs	r3, r7
    4e4a:	0002      	movs	r2, r0
    4e4c:	0039      	movs	r1, r7
    4e4e:	f002 facd 	bl	73ec <__aeabi_dsub>
    4e52:	0002      	movs	r2, r0
    4e54:	000b      	movs	r3, r1
    4e56:	f001 fc2b 	bl	66b0 <__aeabi_ddiv>
    4e5a:	0006      	movs	r6, r0
    4e5c:	000f      	movs	r7, r1
    4e5e:	e78d      	b.n	4d7c <__ieee754_sqrt+0xfc>
    4e60:	7ff00000 	.word	0x7ff00000
    4e64:	fffffc01 	.word	0xfffffc01
    4e68:	3fe00000 	.word	0x3fe00000

00004e6c <__kernel_cos>:
    4e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e6e:	464f      	mov	r7, r9
    4e70:	4646      	mov	r6, r8
    4e72:	b4c0      	push	{r6, r7}
    4e74:	b087      	sub	sp, #28
    4e76:	9200      	str	r2, [sp, #0]
    4e78:	9301      	str	r3, [sp, #4]
    4e7a:	4b75      	ldr	r3, [pc, #468]	; (5050 <__kernel_cos+0x1e4>)
    4e7c:	004f      	lsls	r7, r1, #1
    4e7e:	4681      	mov	r9, r0
    4e80:	4688      	mov	r8, r1
    4e82:	087f      	lsrs	r7, r7, #1
    4e84:	429f      	cmp	r7, r3
    4e86:	dc63      	bgt.n	4f50 <__kernel_cos+0xe4>
    4e88:	f002 fe24 	bl	7ad4 <__aeabi_d2iz>
    4e8c:	2800      	cmp	r0, #0
    4e8e:	d100      	bne.n	4e92 <__kernel_cos+0x26>
    4e90:	e0da      	b.n	5048 <__kernel_cos+0x1dc>
    4e92:	464a      	mov	r2, r9
    4e94:	4643      	mov	r3, r8
    4e96:	4648      	mov	r0, r9
    4e98:	4641      	mov	r1, r8
    4e9a:	f002 f82d 	bl	6ef8 <__aeabi_dmul>
    4e9e:	0004      	movs	r4, r0
    4ea0:	000d      	movs	r5, r1
    4ea2:	4a6c      	ldr	r2, [pc, #432]	; (5054 <__kernel_cos+0x1e8>)
    4ea4:	4b6c      	ldr	r3, [pc, #432]	; (5058 <__kernel_cos+0x1ec>)
    4ea6:	f002 f827 	bl	6ef8 <__aeabi_dmul>
    4eaa:	4a6c      	ldr	r2, [pc, #432]	; (505c <__kernel_cos+0x1f0>)
    4eac:	4b6c      	ldr	r3, [pc, #432]	; (5060 <__kernel_cos+0x1f4>)
    4eae:	f001 f8d3 	bl	6058 <__aeabi_dadd>
    4eb2:	0022      	movs	r2, r4
    4eb4:	002b      	movs	r3, r5
    4eb6:	f002 f81f 	bl	6ef8 <__aeabi_dmul>
    4eba:	4a6a      	ldr	r2, [pc, #424]	; (5064 <__kernel_cos+0x1f8>)
    4ebc:	4b6a      	ldr	r3, [pc, #424]	; (5068 <__kernel_cos+0x1fc>)
    4ebe:	f002 fa95 	bl	73ec <__aeabi_dsub>
    4ec2:	0022      	movs	r2, r4
    4ec4:	002b      	movs	r3, r5
    4ec6:	f002 f817 	bl	6ef8 <__aeabi_dmul>
    4eca:	4a68      	ldr	r2, [pc, #416]	; (506c <__kernel_cos+0x200>)
    4ecc:	4b68      	ldr	r3, [pc, #416]	; (5070 <__kernel_cos+0x204>)
    4ece:	f001 f8c3 	bl	6058 <__aeabi_dadd>
    4ed2:	0022      	movs	r2, r4
    4ed4:	002b      	movs	r3, r5
    4ed6:	f002 f80f 	bl	6ef8 <__aeabi_dmul>
    4eda:	4a66      	ldr	r2, [pc, #408]	; (5074 <__kernel_cos+0x208>)
    4edc:	4b66      	ldr	r3, [pc, #408]	; (5078 <__kernel_cos+0x20c>)
    4ede:	f002 fa85 	bl	73ec <__aeabi_dsub>
    4ee2:	0022      	movs	r2, r4
    4ee4:	002b      	movs	r3, r5
    4ee6:	f002 f807 	bl	6ef8 <__aeabi_dmul>
    4eea:	4a64      	ldr	r2, [pc, #400]	; (507c <__kernel_cos+0x210>)
    4eec:	4b64      	ldr	r3, [pc, #400]	; (5080 <__kernel_cos+0x214>)
    4eee:	f001 f8b3 	bl	6058 <__aeabi_dadd>
    4ef2:	0022      	movs	r2, r4
    4ef4:	002b      	movs	r3, r5
    4ef6:	f001 ffff 	bl	6ef8 <__aeabi_dmul>
    4efa:	9002      	str	r0, [sp, #8]
    4efc:	9103      	str	r1, [sp, #12]
    4efe:	2200      	movs	r2, #0
    4f00:	4b60      	ldr	r3, [pc, #384]	; (5084 <__kernel_cos+0x218>)
    4f02:	0020      	movs	r0, r4
    4f04:	0029      	movs	r1, r5
    4f06:	f001 fff7 	bl	6ef8 <__aeabi_dmul>
    4f0a:	9a02      	ldr	r2, [sp, #8]
    4f0c:	9b03      	ldr	r3, [sp, #12]
    4f0e:	0006      	movs	r6, r0
    4f10:	000f      	movs	r7, r1
    4f12:	0020      	movs	r0, r4
    4f14:	0029      	movs	r1, r5
    4f16:	f001 ffef 	bl	6ef8 <__aeabi_dmul>
    4f1a:	9a00      	ldr	r2, [sp, #0]
    4f1c:	9b01      	ldr	r3, [sp, #4]
    4f1e:	0004      	movs	r4, r0
    4f20:	000d      	movs	r5, r1
    4f22:	4648      	mov	r0, r9
    4f24:	4641      	mov	r1, r8
    4f26:	f001 ffe7 	bl	6ef8 <__aeabi_dmul>
    4f2a:	0002      	movs	r2, r0
    4f2c:	000b      	movs	r3, r1
    4f2e:	0020      	movs	r0, r4
    4f30:	0029      	movs	r1, r5
    4f32:	f002 fa5b 	bl	73ec <__aeabi_dsub>
    4f36:	0002      	movs	r2, r0
    4f38:	000b      	movs	r3, r1
    4f3a:	0030      	movs	r0, r6
    4f3c:	0039      	movs	r1, r7
    4f3e:	f002 fa55 	bl	73ec <__aeabi_dsub>
    4f42:	0002      	movs	r2, r0
    4f44:	000b      	movs	r3, r1
    4f46:	2000      	movs	r0, #0
    4f48:	494f      	ldr	r1, [pc, #316]	; (5088 <__kernel_cos+0x21c>)
    4f4a:	f002 fa4f 	bl	73ec <__aeabi_dsub>
    4f4e:	e070      	b.n	5032 <__kernel_cos+0x1c6>
    4f50:	0002      	movs	r2, r0
    4f52:	000b      	movs	r3, r1
    4f54:	f001 ffd0 	bl	6ef8 <__aeabi_dmul>
    4f58:	0004      	movs	r4, r0
    4f5a:	000d      	movs	r5, r1
    4f5c:	4a3d      	ldr	r2, [pc, #244]	; (5054 <__kernel_cos+0x1e8>)
    4f5e:	4b3e      	ldr	r3, [pc, #248]	; (5058 <__kernel_cos+0x1ec>)
    4f60:	f001 ffca 	bl	6ef8 <__aeabi_dmul>
    4f64:	4a3d      	ldr	r2, [pc, #244]	; (505c <__kernel_cos+0x1f0>)
    4f66:	4b3e      	ldr	r3, [pc, #248]	; (5060 <__kernel_cos+0x1f4>)
    4f68:	f001 f876 	bl	6058 <__aeabi_dadd>
    4f6c:	0022      	movs	r2, r4
    4f6e:	002b      	movs	r3, r5
    4f70:	f001 ffc2 	bl	6ef8 <__aeabi_dmul>
    4f74:	4a3b      	ldr	r2, [pc, #236]	; (5064 <__kernel_cos+0x1f8>)
    4f76:	4b3c      	ldr	r3, [pc, #240]	; (5068 <__kernel_cos+0x1fc>)
    4f78:	f002 fa38 	bl	73ec <__aeabi_dsub>
    4f7c:	0022      	movs	r2, r4
    4f7e:	002b      	movs	r3, r5
    4f80:	f001 ffba 	bl	6ef8 <__aeabi_dmul>
    4f84:	4a39      	ldr	r2, [pc, #228]	; (506c <__kernel_cos+0x200>)
    4f86:	4b3a      	ldr	r3, [pc, #232]	; (5070 <__kernel_cos+0x204>)
    4f88:	f001 f866 	bl	6058 <__aeabi_dadd>
    4f8c:	0022      	movs	r2, r4
    4f8e:	002b      	movs	r3, r5
    4f90:	f001 ffb2 	bl	6ef8 <__aeabi_dmul>
    4f94:	4a37      	ldr	r2, [pc, #220]	; (5074 <__kernel_cos+0x208>)
    4f96:	4b38      	ldr	r3, [pc, #224]	; (5078 <__kernel_cos+0x20c>)
    4f98:	f002 fa28 	bl	73ec <__aeabi_dsub>
    4f9c:	0022      	movs	r2, r4
    4f9e:	002b      	movs	r3, r5
    4fa0:	f001 ffaa 	bl	6ef8 <__aeabi_dmul>
    4fa4:	4a35      	ldr	r2, [pc, #212]	; (507c <__kernel_cos+0x210>)
    4fa6:	4b36      	ldr	r3, [pc, #216]	; (5080 <__kernel_cos+0x214>)
    4fa8:	f001 f856 	bl	6058 <__aeabi_dadd>
    4fac:	002b      	movs	r3, r5
    4fae:	0022      	movs	r2, r4
    4fb0:	f001 ffa2 	bl	6ef8 <__aeabi_dmul>
    4fb4:	4b35      	ldr	r3, [pc, #212]	; (508c <__kernel_cos+0x220>)
    4fb6:	9002      	str	r0, [sp, #8]
    4fb8:	9103      	str	r1, [sp, #12]
    4fba:	429f      	cmp	r7, r3
    4fbc:	dd9f      	ble.n	4efe <__kernel_cos+0x92>
    4fbe:	4b34      	ldr	r3, [pc, #208]	; (5090 <__kernel_cos+0x224>)
    4fc0:	2200      	movs	r2, #0
    4fc2:	429f      	cmp	r7, r3
    4fc4:	dc3a      	bgt.n	503c <__kernel_cos+0x1d0>
    4fc6:	4933      	ldr	r1, [pc, #204]	; (5094 <__kernel_cos+0x228>)
    4fc8:	2000      	movs	r0, #0
    4fca:	187b      	adds	r3, r7, r1
    4fcc:	492e      	ldr	r1, [pc, #184]	; (5088 <__kernel_cos+0x21c>)
    4fce:	0016      	movs	r6, r2
    4fd0:	001f      	movs	r7, r3
    4fd2:	f002 fa0b 	bl	73ec <__aeabi_dsub>
    4fd6:	9004      	str	r0, [sp, #16]
    4fd8:	9105      	str	r1, [sp, #20]
    4fda:	2200      	movs	r2, #0
    4fdc:	4b29      	ldr	r3, [pc, #164]	; (5084 <__kernel_cos+0x218>)
    4fde:	0020      	movs	r0, r4
    4fe0:	0029      	movs	r1, r5
    4fe2:	f001 ff89 	bl	6ef8 <__aeabi_dmul>
    4fe6:	0032      	movs	r2, r6
    4fe8:	003b      	movs	r3, r7
    4fea:	f002 f9ff 	bl	73ec <__aeabi_dsub>
    4fee:	9a02      	ldr	r2, [sp, #8]
    4ff0:	9b03      	ldr	r3, [sp, #12]
    4ff2:	0006      	movs	r6, r0
    4ff4:	000f      	movs	r7, r1
    4ff6:	0020      	movs	r0, r4
    4ff8:	0029      	movs	r1, r5
    4ffa:	f001 ff7d 	bl	6ef8 <__aeabi_dmul>
    4ffe:	9a00      	ldr	r2, [sp, #0]
    5000:	9b01      	ldr	r3, [sp, #4]
    5002:	0004      	movs	r4, r0
    5004:	000d      	movs	r5, r1
    5006:	4648      	mov	r0, r9
    5008:	4641      	mov	r1, r8
    500a:	f001 ff75 	bl	6ef8 <__aeabi_dmul>
    500e:	0002      	movs	r2, r0
    5010:	000b      	movs	r3, r1
    5012:	0020      	movs	r0, r4
    5014:	0029      	movs	r1, r5
    5016:	f002 f9e9 	bl	73ec <__aeabi_dsub>
    501a:	0002      	movs	r2, r0
    501c:	000b      	movs	r3, r1
    501e:	0030      	movs	r0, r6
    5020:	0039      	movs	r1, r7
    5022:	f002 f9e3 	bl	73ec <__aeabi_dsub>
    5026:	0002      	movs	r2, r0
    5028:	000b      	movs	r3, r1
    502a:	9804      	ldr	r0, [sp, #16]
    502c:	9905      	ldr	r1, [sp, #20]
    502e:	f002 f9dd 	bl	73ec <__aeabi_dsub>
    5032:	b007      	add	sp, #28
    5034:	bc0c      	pop	{r2, r3}
    5036:	4690      	mov	r8, r2
    5038:	4699      	mov	r9, r3
    503a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    503c:	4b16      	ldr	r3, [pc, #88]	; (5098 <__kernel_cos+0x22c>)
    503e:	2600      	movs	r6, #0
    5040:	9204      	str	r2, [sp, #16]
    5042:	9305      	str	r3, [sp, #20]
    5044:	4f15      	ldr	r7, [pc, #84]	; (509c <__kernel_cos+0x230>)
    5046:	e7c8      	b.n	4fda <__kernel_cos+0x16e>
    5048:	2000      	movs	r0, #0
    504a:	490f      	ldr	r1, [pc, #60]	; (5088 <__kernel_cos+0x21c>)
    504c:	e7f1      	b.n	5032 <__kernel_cos+0x1c6>
    504e:	46c0      	nop			; (mov r8, r8)
    5050:	3e3fffff 	.word	0x3e3fffff
    5054:	be8838d4 	.word	0xbe8838d4
    5058:	bda8fae9 	.word	0xbda8fae9
    505c:	bdb4b1c4 	.word	0xbdb4b1c4
    5060:	3e21ee9e 	.word	0x3e21ee9e
    5064:	809c52ad 	.word	0x809c52ad
    5068:	3e927e4f 	.word	0x3e927e4f
    506c:	19cb1590 	.word	0x19cb1590
    5070:	3efa01a0 	.word	0x3efa01a0
    5074:	16c15177 	.word	0x16c15177
    5078:	3f56c16c 	.word	0x3f56c16c
    507c:	5555554c 	.word	0x5555554c
    5080:	3fa55555 	.word	0x3fa55555
    5084:	3fe00000 	.word	0x3fe00000
    5088:	3ff00000 	.word	0x3ff00000
    508c:	3fd33332 	.word	0x3fd33332
    5090:	3fe90000 	.word	0x3fe90000
    5094:	ffe00000 	.word	0xffe00000
    5098:	3fe70000 	.word	0x3fe70000
    509c:	3fd20000 	.word	0x3fd20000

000050a0 <__kernel_rem_pio2>:
    50a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50a2:	4656      	mov	r6, sl
    50a4:	464d      	mov	r5, r9
    50a6:	4644      	mov	r4, r8
    50a8:	465f      	mov	r7, fp
    50aa:	b4f0      	push	{r4, r5, r6, r7}
    50ac:	4c8e      	ldr	r4, [pc, #568]	; (52e8 <__kernel_rem_pio2+0x248>)
    50ae:	44a5      	add	sp, r4
    50b0:	9109      	str	r1, [sp, #36]	; 0x24
    50b2:	0019      	movs	r1, r3
    50b4:	0014      	movs	r4, r2
    50b6:	9aa8      	ldr	r2, [sp, #672]	; 0x2a0
    50b8:	930b      	str	r3, [sp, #44]	; 0x2c
    50ba:	4b8c      	ldr	r3, [pc, #560]	; (52ec <__kernel_rem_pio2+0x24c>)
    50bc:	0092      	lsls	r2, r2, #2
    50be:	58d2      	ldr	r2, [r2, r3]
    50c0:	000b      	movs	r3, r1
    50c2:	9002      	str	r0, [sp, #8]
    50c4:	3b01      	subs	r3, #1
    50c6:	1ee0      	subs	r0, r4, #3
    50c8:	2118      	movs	r1, #24
    50ca:	001d      	movs	r5, r3
    50cc:	0016      	movs	r6, r2
    50ce:	9208      	str	r2, [sp, #32]
    50d0:	9300      	str	r3, [sp, #0]
    50d2:	f000 fe79 	bl	5dc8 <__aeabi_idiv>
    50d6:	43c3      	mvns	r3, r0
    50d8:	0002      	movs	r2, r0
    50da:	17db      	asrs	r3, r3, #31
    50dc:	401a      	ands	r2, r3
    50de:	0013      	movs	r3, r2
    50e0:	0011      	movs	r1, r2
    50e2:	3301      	adds	r3, #1
    50e4:	920e      	str	r2, [sp, #56]	; 0x38
    50e6:	009a      	lsls	r2, r3, #2
    50e8:	1a9b      	subs	r3, r3, r2
    50ea:	00db      	lsls	r3, r3, #3
    50ec:	191b      	adds	r3, r3, r4
    50ee:	9306      	str	r3, [sp, #24]
    50f0:	1b4c      	subs	r4, r1, r5
    50f2:	1976      	adds	r6, r6, r5
    50f4:	d418      	bmi.n	5128 <__kernel_rem_pio2+0x88>
    50f6:	9ba9      	ldr	r3, [sp, #676]	; 0x2a4
    50f8:	00a5      	lsls	r5, r4, #2
    50fa:	469c      	mov	ip, r3
    50fc:	1936      	adds	r6, r6, r4
    50fe:	af26      	add	r7, sp, #152	; 0x98
    5100:	4465      	add	r5, ip
    5102:	3601      	adds	r6, #1
    5104:	e007      	b.n	5116 <__kernel_rem_pio2+0x76>
    5106:	6828      	ldr	r0, [r5, #0]
    5108:	f002 fd1a 	bl	7b40 <__aeabi_i2d>
    510c:	3401      	adds	r4, #1
    510e:	c703      	stmia	r7!, {r0, r1}
    5110:	3504      	adds	r5, #4
    5112:	42b4      	cmp	r4, r6
    5114:	d008      	beq.n	5128 <__kernel_rem_pio2+0x88>
    5116:	2c00      	cmp	r4, #0
    5118:	daf5      	bge.n	5106 <__kernel_rem_pio2+0x66>
    511a:	2000      	movs	r0, #0
    511c:	2100      	movs	r1, #0
    511e:	3401      	adds	r4, #1
    5120:	c703      	stmia	r7!, {r0, r1}
    5122:	3504      	adds	r5, #4
    5124:	42b4      	cmp	r4, r6
    5126:	d1f6      	bne.n	5116 <__kernel_rem_pio2+0x76>
    5128:	9b08      	ldr	r3, [sp, #32]
    512a:	2b00      	cmp	r3, #0
    512c:	da01      	bge.n	5132 <__kernel_rem_pio2+0x92>
    512e:	f000 fbf9 	bl	5924 <__kernel_rem_pio2+0x884>
    5132:	ab76      	add	r3, sp, #472	; 0x1d8
    5134:	0019      	movs	r1, r3
    5136:	468b      	mov	fp, r1
    5138:	aa26      	add	r2, sp, #152	; 0x98
    513a:	4691      	mov	r9, r2
    513c:	9a08      	ldr	r2, [sp, #32]
    513e:	930a      	str	r3, [sp, #40]	; 0x28
    5140:	3201      	adds	r2, #1
    5142:	00d2      	lsls	r2, r2, #3
    5144:	4493      	add	fp, r2
    5146:	9a02      	ldr	r2, [sp, #8]
    5148:	469a      	mov	sl, r3
    514a:	4690      	mov	r8, r2
    514c:	9b00      	ldr	r3, [sp, #0]
    514e:	00db      	lsls	r3, r3, #3
    5150:	4499      	add	r9, r3
    5152:	3308      	adds	r3, #8
    5154:	4498      	add	r8, r3
    5156:	9b00      	ldr	r3, [sp, #0]
    5158:	2b00      	cmp	r3, #0
    515a:	da00      	bge.n	515e <__kernel_rem_pio2+0xbe>
    515c:	e1b5      	b.n	54ca <__kernel_rem_pio2+0x42a>
    515e:	464c      	mov	r4, r9
    5160:	2600      	movs	r6, #0
    5162:	2700      	movs	r7, #0
    5164:	9d02      	ldr	r5, [sp, #8]
    5166:	6822      	ldr	r2, [r4, #0]
    5168:	6863      	ldr	r3, [r4, #4]
    516a:	cd03      	ldmia	r5!, {r0, r1}
    516c:	f001 fec4 	bl	6ef8 <__aeabi_dmul>
    5170:	0002      	movs	r2, r0
    5172:	000b      	movs	r3, r1
    5174:	0030      	movs	r0, r6
    5176:	0039      	movs	r1, r7
    5178:	f000 ff6e 	bl	6058 <__aeabi_dadd>
    517c:	3c08      	subs	r4, #8
    517e:	0006      	movs	r6, r0
    5180:	000f      	movs	r7, r1
    5182:	4545      	cmp	r5, r8
    5184:	d1ef      	bne.n	5166 <__kernel_rem_pio2+0xc6>
    5186:	4653      	mov	r3, sl
    5188:	c3c0      	stmia	r3!, {r6, r7}
    518a:	469a      	mov	sl, r3
    518c:	2308      	movs	r3, #8
    518e:	469c      	mov	ip, r3
    5190:	44e1      	add	r9, ip
    5192:	45da      	cmp	sl, fp
    5194:	d1df      	bne.n	5156 <__kernel_rem_pio2+0xb6>
    5196:	9908      	ldr	r1, [sp, #32]
    5198:	4a55      	ldr	r2, [pc, #340]	; (52f0 <__kernel_rem_pio2+0x250>)
    519a:	000b      	movs	r3, r1
    519c:	4694      	mov	ip, r2
    519e:	4463      	add	r3, ip
    51a0:	009b      	lsls	r3, r3, #2
    51a2:	a812      	add	r0, sp, #72	; 0x48
    51a4:	4684      	mov	ip, r0
    51a6:	001a      	movs	r2, r3
    51a8:	9802      	ldr	r0, [sp, #8]
    51aa:	4462      	add	r2, ip
    51ac:	4683      	mov	fp, r0
    51ae:	920d      	str	r2, [sp, #52]	; 0x34
    51b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    51b2:	3304      	adds	r3, #4
    51b4:	00d2      	lsls	r2, r2, #3
    51b6:	4463      	add	r3, ip
    51b8:	4493      	add	fp, r2
    51ba:	930f      	str	r3, [sp, #60]	; 0x3c
    51bc:	9105      	str	r1, [sp, #20]
    51be:	9a05      	ldr	r2, [sp, #20]
    51c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    51c2:	00d3      	lsls	r3, r2, #3
    51c4:	0019      	movs	r1, r3
    51c6:	930c      	str	r3, [sp, #48]	; 0x30
    51c8:	468c      	mov	ip, r1
    51ca:	0003      	movs	r3, r0
    51cc:	4463      	add	r3, ip
    51ce:	681e      	ldr	r6, [r3, #0]
    51d0:	685f      	ldr	r7, [r3, #4]
    51d2:	2a00      	cmp	r2, #0
    51d4:	dd34      	ble.n	5240 <__kernel_rem_pio2+0x1a0>
    51d6:	ab12      	add	r3, sp, #72	; 0x48
    51d8:	4699      	mov	r9, r3
    51da:	0013      	movs	r3, r2
    51dc:	4a45      	ldr	r2, [pc, #276]	; (52f4 <__kernel_rem_pio2+0x254>)
    51de:	4680      	mov	r8, r0
    51e0:	4694      	mov	ip, r2
    51e2:	4463      	add	r3, ip
    51e4:	00db      	lsls	r3, r3, #3
    51e6:	4498      	add	r8, r3
    51e8:	ab74      	add	r3, sp, #464	; 0x1d0
    51ea:	469a      	mov	sl, r3
    51ec:	2200      	movs	r2, #0
    51ee:	4b42      	ldr	r3, [pc, #264]	; (52f8 <__kernel_rem_pio2+0x258>)
    51f0:	0030      	movs	r0, r6
    51f2:	0039      	movs	r1, r7
    51f4:	f001 fe80 	bl	6ef8 <__aeabi_dmul>
    51f8:	f002 fc6c 	bl	7ad4 <__aeabi_d2iz>
    51fc:	f002 fca0 	bl	7b40 <__aeabi_i2d>
    5200:	2200      	movs	r2, #0
    5202:	4b3e      	ldr	r3, [pc, #248]	; (52fc <__kernel_rem_pio2+0x25c>)
    5204:	0004      	movs	r4, r0
    5206:	000d      	movs	r5, r1
    5208:	f001 fe76 	bl	6ef8 <__aeabi_dmul>
    520c:	0002      	movs	r2, r0
    520e:	000b      	movs	r3, r1
    5210:	0030      	movs	r0, r6
    5212:	0039      	movs	r1, r7
    5214:	f002 f8ea 	bl	73ec <__aeabi_dsub>
    5218:	f002 fc5c 	bl	7ad4 <__aeabi_d2iz>
    521c:	464b      	mov	r3, r9
    521e:	c301      	stmia	r3!, {r0}
    5220:	4699      	mov	r9, r3
    5222:	4643      	mov	r3, r8
    5224:	0020      	movs	r0, r4
    5226:	681a      	ldr	r2, [r3, #0]
    5228:	685b      	ldr	r3, [r3, #4]
    522a:	0029      	movs	r1, r5
    522c:	f000 ff14 	bl	6058 <__aeabi_dadd>
    5230:	2308      	movs	r3, #8
    5232:	425b      	negs	r3, r3
    5234:	469c      	mov	ip, r3
    5236:	44e0      	add	r8, ip
    5238:	0006      	movs	r6, r0
    523a:	000f      	movs	r7, r1
    523c:	45d0      	cmp	r8, sl
    523e:	d1d5      	bne.n	51ec <__kernel_rem_pio2+0x14c>
    5240:	9b06      	ldr	r3, [sp, #24]
    5242:	0030      	movs	r0, r6
    5244:	001a      	movs	r2, r3
    5246:	0039      	movs	r1, r7
    5248:	4699      	mov	r9, r3
    524a:	f000 fcc3 	bl	5bd4 <scalbn>
    524e:	23ff      	movs	r3, #255	; 0xff
    5250:	2200      	movs	r2, #0
    5252:	059b      	lsls	r3, r3, #22
    5254:	0004      	movs	r4, r0
    5256:	000d      	movs	r5, r1
    5258:	f001 fe4e 	bl	6ef8 <__aeabi_dmul>
    525c:	f000 fc20 	bl	5aa0 <floor>
    5260:	2200      	movs	r2, #0
    5262:	4b27      	ldr	r3, [pc, #156]	; (5300 <__kernel_rem_pio2+0x260>)
    5264:	f001 fe48 	bl	6ef8 <__aeabi_dmul>
    5268:	0002      	movs	r2, r0
    526a:	000b      	movs	r3, r1
    526c:	0020      	movs	r0, r4
    526e:	0029      	movs	r1, r5
    5270:	f002 f8bc 	bl	73ec <__aeabi_dsub>
    5274:	0004      	movs	r4, r0
    5276:	000d      	movs	r5, r1
    5278:	f002 fc2c 	bl	7ad4 <__aeabi_d2iz>
    527c:	4680      	mov	r8, r0
    527e:	f002 fc5f 	bl	7b40 <__aeabi_i2d>
    5282:	0002      	movs	r2, r0
    5284:	000b      	movs	r3, r1
    5286:	0020      	movs	r0, r4
    5288:	0029      	movs	r1, r5
    528a:	f002 f8af 	bl	73ec <__aeabi_dsub>
    528e:	464c      	mov	r4, r9
    5290:	0006      	movs	r6, r0
    5292:	000f      	movs	r7, r1
    5294:	2c00      	cmp	r4, #0
    5296:	dc00      	bgt.n	529a <__kernel_rem_pio2+0x1fa>
    5298:	e0f8      	b.n	548c <__kernel_rem_pio2+0x3ec>
    529a:	9b05      	ldr	r3, [sp, #20]
    529c:	2018      	movs	r0, #24
    529e:	1e5a      	subs	r2, r3, #1
    52a0:	0092      	lsls	r2, r2, #2
    52a2:	ab12      	add	r3, sp, #72	; 0x48
    52a4:	589b      	ldr	r3, [r3, r2]
    52a6:	1b00      	subs	r0, r0, r4
    52a8:	0019      	movs	r1, r3
    52aa:	4101      	asrs	r1, r0
    52ac:	4488      	add	r8, r1
    52ae:	4081      	lsls	r1, r0
    52b0:	1a5b      	subs	r3, r3, r1
    52b2:	a912      	add	r1, sp, #72	; 0x48
    52b4:	508b      	str	r3, [r1, r2]
    52b6:	2217      	movs	r2, #23
    52b8:	1b12      	subs	r2, r2, r4
    52ba:	4113      	asrs	r3, r2
    52bc:	9307      	str	r3, [sp, #28]
    52be:	9b07      	ldr	r3, [sp, #28]
    52c0:	2b00      	cmp	r3, #0
    52c2:	dd4b      	ble.n	535c <__kernel_rem_pio2+0x2bc>
    52c4:	2301      	movs	r3, #1
    52c6:	469c      	mov	ip, r3
    52c8:	9b05      	ldr	r3, [sp, #20]
    52ca:	44e0      	add	r8, ip
    52cc:	2b00      	cmp	r3, #0
    52ce:	dc00      	bgt.n	52d2 <__kernel_rem_pio2+0x232>
    52d0:	e2f2      	b.n	58b8 <__kernel_rem_pio2+0x818>
    52d2:	2580      	movs	r5, #128	; 0x80
    52d4:	9610      	str	r6, [sp, #64]	; 0x40
    52d6:	9711      	str	r7, [sp, #68]	; 0x44
    52d8:	ab12      	add	r3, sp, #72	; 0x48
    52da:	2100      	movs	r1, #0
    52dc:	2400      	movs	r4, #0
    52de:	4809      	ldr	r0, [pc, #36]	; (5304 <__kernel_rem_pio2+0x264>)
    52e0:	046d      	lsls	r5, r5, #17
    52e2:	9f05      	ldr	r7, [sp, #20]
    52e4:	e019      	b.n	531a <__kernel_rem_pio2+0x27a>
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	fffffd84 	.word	0xfffffd84
    52ec:	00008664 	.word	0x00008664
    52f0:	3ffffffe 	.word	0x3ffffffe
    52f4:	1fffffff 	.word	0x1fffffff
    52f8:	3e700000 	.word	0x3e700000
    52fc:	41700000 	.word	0x41700000
    5300:	40200000 	.word	0x40200000
    5304:	00ffffff 	.word	0x00ffffff
    5308:	2a00      	cmp	r2, #0
    530a:	d002      	beq.n	5312 <__kernel_rem_pio2+0x272>
    530c:	1aaa      	subs	r2, r5, r2
    530e:	601a      	str	r2, [r3, #0]
    5310:	3401      	adds	r4, #1
    5312:	3101      	adds	r1, #1
    5314:	3304      	adds	r3, #4
    5316:	428f      	cmp	r7, r1
    5318:	dd09      	ble.n	532e <__kernel_rem_pio2+0x28e>
    531a:	681a      	ldr	r2, [r3, #0]
    531c:	2c00      	cmp	r4, #0
    531e:	d0f3      	beq.n	5308 <__kernel_rem_pio2+0x268>
    5320:	1a82      	subs	r2, r0, r2
    5322:	3101      	adds	r1, #1
    5324:	601a      	str	r2, [r3, #0]
    5326:	2401      	movs	r4, #1
    5328:	3304      	adds	r3, #4
    532a:	428f      	cmp	r7, r1
    532c:	dcf5      	bgt.n	531a <__kernel_rem_pio2+0x27a>
    532e:	9e10      	ldr	r6, [sp, #64]	; 0x40
    5330:	9f11      	ldr	r7, [sp, #68]	; 0x44
    5332:	9b06      	ldr	r3, [sp, #24]
    5334:	2b00      	cmp	r3, #0
    5336:	dd0e      	ble.n	5356 <__kernel_rem_pio2+0x2b6>
    5338:	2b01      	cmp	r3, #1
    533a:	d100      	bne.n	533e <__kernel_rem_pio2+0x29e>
    533c:	e0b1      	b.n	54a2 <__kernel_rem_pio2+0x402>
    533e:	2b02      	cmp	r3, #2
    5340:	d109      	bne.n	5356 <__kernel_rem_pio2+0x2b6>
    5342:	9b05      	ldr	r3, [sp, #20]
    5344:	a912      	add	r1, sp, #72	; 0x48
    5346:	1e5a      	subs	r2, r3, #1
    5348:	0092      	lsls	r2, r2, #2
    534a:	ab12      	add	r3, sp, #72	; 0x48
    534c:	589b      	ldr	r3, [r3, r2]
    534e:	9310      	str	r3, [sp, #64]	; 0x40
    5350:	029b      	lsls	r3, r3, #10
    5352:	0a9b      	lsrs	r3, r3, #10
    5354:	508b      	str	r3, [r1, r2]
    5356:	9b07      	ldr	r3, [sp, #28]
    5358:	2b02      	cmp	r3, #2
    535a:	d07e      	beq.n	545a <__kernel_rem_pio2+0x3ba>
    535c:	2300      	movs	r3, #0
    535e:	2200      	movs	r2, #0
    5360:	0030      	movs	r0, r6
    5362:	0039      	movs	r1, r7
    5364:	f000 fe2c 	bl	5fc0 <__aeabi_dcmpeq>
    5368:	9b05      	ldr	r3, [sp, #20]
    536a:	2800      	cmp	r0, #0
    536c:	d100      	bne.n	5370 <__kernel_rem_pio2+0x2d0>
    536e:	e26b      	b.n	5848 <__kernel_rem_pio2+0x7a8>
    5370:	9908      	ldr	r1, [sp, #32]
    5372:	1e5a      	subs	r2, r3, #1
    5374:	4291      	cmp	r1, r2
    5376:	dc10      	bgt.n	539a <__kernel_rem_pio2+0x2fa>
    5378:	49bf      	ldr	r1, [pc, #764]	; (5678 <__kernel_rem_pio2+0x5d8>)
    537a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    537c:	468c      	mov	ip, r1
    537e:	a912      	add	r1, sp, #72	; 0x48
    5380:	4463      	add	r3, ip
    5382:	468c      	mov	ip, r1
    5384:	2100      	movs	r1, #0
    5386:	009b      	lsls	r3, r3, #2
    5388:	4463      	add	r3, ip
    538a:	681c      	ldr	r4, [r3, #0]
    538c:	3b04      	subs	r3, #4
    538e:	4321      	orrs	r1, r4
    5390:	4283      	cmp	r3, r0
    5392:	d1fa      	bne.n	538a <__kernel_rem_pio2+0x2ea>
    5394:	2900      	cmp	r1, #0
    5396:	d000      	beq.n	539a <__kernel_rem_pio2+0x2fa>
    5398:	e0b5      	b.n	5506 <__kernel_rem_pio2+0x466>
    539a:	9b08      	ldr	r3, [sp, #32]
    539c:	aa12      	add	r2, sp, #72	; 0x48
    539e:	3b01      	subs	r3, #1
    53a0:	009b      	lsls	r3, r3, #2
    53a2:	58d3      	ldr	r3, [r2, r3]
    53a4:	2b00      	cmp	r3, #0
    53a6:	d000      	beq.n	53aa <__kernel_rem_pio2+0x30a>
    53a8:	e284      	b.n	58b4 <__kernel_rem_pio2+0x814>
    53aa:	2201      	movs	r2, #1
    53ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    53ae:	3b04      	subs	r3, #4
    53b0:	6859      	ldr	r1, [r3, #4]
    53b2:	3201      	adds	r2, #1
    53b4:	2900      	cmp	r1, #0
    53b6:	d0fa      	beq.n	53ae <__kernel_rem_pio2+0x30e>
    53b8:	9905      	ldr	r1, [sp, #20]
    53ba:	000b      	movs	r3, r1
    53bc:	468c      	mov	ip, r1
    53be:	3301      	adds	r3, #1
    53c0:	4462      	add	r2, ip
    53c2:	9207      	str	r2, [sp, #28]
    53c4:	4293      	cmp	r3, r2
    53c6:	dc42      	bgt.n	544e <__kernel_rem_pio2+0x3ae>
    53c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    53ca:	4694      	mov	ip, r2
    53cc:	9aa9      	ldr	r2, [sp, #676]	; 0x2a4
    53ce:	4463      	add	r3, ip
    53d0:	4692      	mov	sl, r2
    53d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    53d4:	009b      	lsls	r3, r3, #2
    53d6:	4694      	mov	ip, r2
    53d8:	aa26      	add	r2, sp, #152	; 0x98
    53da:	4690      	mov	r8, r2
    53dc:	449a      	add	sl, r3
    53de:	9b05      	ldr	r3, [sp, #20]
    53e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    53e2:	4463      	add	r3, ip
    53e4:	00db      	lsls	r3, r3, #3
    53e6:	4498      	add	r8, r3
    53e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    53ea:	4694      	mov	ip, r2
    53ec:	4699      	mov	r9, r3
    53ee:	9b07      	ldr	r3, [sp, #28]
    53f0:	44e1      	add	r9, ip
    53f2:	00db      	lsls	r3, r3, #3
    53f4:	4463      	add	r3, ip
    53f6:	9305      	str	r3, [sp, #20]
    53f8:	4653      	mov	r3, sl
    53fa:	6818      	ldr	r0, [r3, #0]
    53fc:	f002 fba0 	bl	7b40 <__aeabi_i2d>
    5400:	4643      	mov	r3, r8
    5402:	6018      	str	r0, [r3, #0]
    5404:	6059      	str	r1, [r3, #4]
    5406:	9b00      	ldr	r3, [sp, #0]
    5408:	2b00      	cmp	r3, #0
    540a:	db23      	blt.n	5454 <__kernel_rem_pio2+0x3b4>
    540c:	4644      	mov	r4, r8
    540e:	2600      	movs	r6, #0
    5410:	2700      	movs	r7, #0
    5412:	9d02      	ldr	r5, [sp, #8]
    5414:	6822      	ldr	r2, [r4, #0]
    5416:	6863      	ldr	r3, [r4, #4]
    5418:	cd03      	ldmia	r5!, {r0, r1}
    541a:	f001 fd6d 	bl	6ef8 <__aeabi_dmul>
    541e:	0002      	movs	r2, r0
    5420:	000b      	movs	r3, r1
    5422:	0030      	movs	r0, r6
    5424:	0039      	movs	r1, r7
    5426:	f000 fe17 	bl	6058 <__aeabi_dadd>
    542a:	3c08      	subs	r4, #8
    542c:	0006      	movs	r6, r0
    542e:	000f      	movs	r7, r1
    5430:	455d      	cmp	r5, fp
    5432:	d1ef      	bne.n	5414 <__kernel_rem_pio2+0x374>
    5434:	464b      	mov	r3, r9
    5436:	609e      	str	r6, [r3, #8]
    5438:	60df      	str	r7, [r3, #12]
    543a:	2304      	movs	r3, #4
    543c:	469c      	mov	ip, r3
    543e:	3304      	adds	r3, #4
    5440:	44e2      	add	sl, ip
    5442:	469c      	mov	ip, r3
    5444:	9b05      	ldr	r3, [sp, #20]
    5446:	44e1      	add	r9, ip
    5448:	44e0      	add	r8, ip
    544a:	4599      	cmp	r9, r3
    544c:	d1d4      	bne.n	53f8 <__kernel_rem_pio2+0x358>
    544e:	9b07      	ldr	r3, [sp, #28]
    5450:	9305      	str	r3, [sp, #20]
    5452:	e6b4      	b.n	51be <__kernel_rem_pio2+0x11e>
    5454:	2600      	movs	r6, #0
    5456:	2700      	movs	r7, #0
    5458:	e7ec      	b.n	5434 <__kernel_rem_pio2+0x394>
    545a:	0032      	movs	r2, r6
    545c:	003b      	movs	r3, r7
    545e:	2000      	movs	r0, #0
    5460:	4986      	ldr	r1, [pc, #536]	; (567c <__kernel_rem_pio2+0x5dc>)
    5462:	f001 ffc3 	bl	73ec <__aeabi_dsub>
    5466:	0006      	movs	r6, r0
    5468:	000f      	movs	r7, r1
    546a:	2c00      	cmp	r4, #0
    546c:	d100      	bne.n	5470 <__kernel_rem_pio2+0x3d0>
    546e:	e775      	b.n	535c <__kernel_rem_pio2+0x2bc>
    5470:	9a06      	ldr	r2, [sp, #24]
    5472:	2000      	movs	r0, #0
    5474:	4981      	ldr	r1, [pc, #516]	; (567c <__kernel_rem_pio2+0x5dc>)
    5476:	f000 fbad 	bl	5bd4 <scalbn>
    547a:	0002      	movs	r2, r0
    547c:	000b      	movs	r3, r1
    547e:	0030      	movs	r0, r6
    5480:	0039      	movs	r1, r7
    5482:	f001 ffb3 	bl	73ec <__aeabi_dsub>
    5486:	0006      	movs	r6, r0
    5488:	000f      	movs	r7, r1
    548a:	e767      	b.n	535c <__kernel_rem_pio2+0x2bc>
    548c:	9b06      	ldr	r3, [sp, #24]
    548e:	2b00      	cmp	r3, #0
    5490:	d112      	bne.n	54b8 <__kernel_rem_pio2+0x418>
    5492:	9b05      	ldr	r3, [sp, #20]
    5494:	aa12      	add	r2, sp, #72	; 0x48
    5496:	3b01      	subs	r3, #1
    5498:	009b      	lsls	r3, r3, #2
    549a:	58d5      	ldr	r5, [r2, r3]
    549c:	15eb      	asrs	r3, r5, #23
    549e:	9307      	str	r3, [sp, #28]
    54a0:	e70d      	b.n	52be <__kernel_rem_pio2+0x21e>
    54a2:	9b05      	ldr	r3, [sp, #20]
    54a4:	a912      	add	r1, sp, #72	; 0x48
    54a6:	1e5a      	subs	r2, r3, #1
    54a8:	0092      	lsls	r2, r2, #2
    54aa:	ab12      	add	r3, sp, #72	; 0x48
    54ac:	589b      	ldr	r3, [r3, r2]
    54ae:	9310      	str	r3, [sp, #64]	; 0x40
    54b0:	025b      	lsls	r3, r3, #9
    54b2:	0a5b      	lsrs	r3, r3, #9
    54b4:	508b      	str	r3, [r1, r2]
    54b6:	e74e      	b.n	5356 <__kernel_rem_pio2+0x2b6>
    54b8:	2200      	movs	r2, #0
    54ba:	4b71      	ldr	r3, [pc, #452]	; (5680 <__kernel_rem_pio2+0x5e0>)
    54bc:	f000 fda4 	bl	6008 <__aeabi_dcmpge>
    54c0:	2800      	cmp	r0, #0
    54c2:	d10e      	bne.n	54e2 <__kernel_rem_pio2+0x442>
    54c4:	2300      	movs	r3, #0
    54c6:	9307      	str	r3, [sp, #28]
    54c8:	e748      	b.n	535c <__kernel_rem_pio2+0x2bc>
    54ca:	4653      	mov	r3, sl
    54cc:	2600      	movs	r6, #0
    54ce:	2700      	movs	r7, #0
    54d0:	c3c0      	stmia	r3!, {r6, r7}
    54d2:	469a      	mov	sl, r3
    54d4:	2308      	movs	r3, #8
    54d6:	469c      	mov	ip, r3
    54d8:	44e1      	add	r9, ip
    54da:	45da      	cmp	sl, fp
    54dc:	d000      	beq.n	54e0 <__kernel_rem_pio2+0x440>
    54de:	e63a      	b.n	5156 <__kernel_rem_pio2+0xb6>
    54e0:	e659      	b.n	5196 <__kernel_rem_pio2+0xf6>
    54e2:	2301      	movs	r3, #1
    54e4:	469c      	mov	ip, r3
    54e6:	3301      	adds	r3, #1
    54e8:	9307      	str	r3, [sp, #28]
    54ea:	9b05      	ldr	r3, [sp, #20]
    54ec:	44e0      	add	r8, ip
    54ee:	2b00      	cmp	r3, #0
    54f0:	dd00      	ble.n	54f4 <__kernel_rem_pio2+0x454>
    54f2:	e6ee      	b.n	52d2 <__kernel_rem_pio2+0x232>
    54f4:	0032      	movs	r2, r6
    54f6:	003b      	movs	r3, r7
    54f8:	2000      	movs	r0, #0
    54fa:	4960      	ldr	r1, [pc, #384]	; (567c <__kernel_rem_pio2+0x5dc>)
    54fc:	f001 ff76 	bl	73ec <__aeabi_dsub>
    5500:	0006      	movs	r6, r0
    5502:	000f      	movs	r7, r1
    5504:	e72a      	b.n	535c <__kernel_rem_pio2+0x2bc>
    5506:	4643      	mov	r3, r8
    5508:	930b      	str	r3, [sp, #44]	; 0x2c
    550a:	9b06      	ldr	r3, [sp, #24]
    550c:	a812      	add	r0, sp, #72	; 0x48
    550e:	3b18      	subs	r3, #24
    5510:	0019      	movs	r1, r3
    5512:	9306      	str	r3, [sp, #24]
    5514:	0093      	lsls	r3, r2, #2
    5516:	58c3      	ldr	r3, [r0, r3]
    5518:	9200      	str	r2, [sp, #0]
    551a:	2b00      	cmp	r3, #0
    551c:	d10f      	bne.n	553e <__kernel_rem_pio2+0x49e>
    551e:	4856      	ldr	r0, [pc, #344]	; (5678 <__kernel_rem_pio2+0x5d8>)
    5520:	0013      	movs	r3, r2
    5522:	4684      	mov	ip, r0
    5524:	a812      	add	r0, sp, #72	; 0x48
    5526:	4463      	add	r3, ip
    5528:	4684      	mov	ip, r0
    552a:	009b      	lsls	r3, r3, #2
    552c:	4463      	add	r3, ip
    552e:	3b04      	subs	r3, #4
    5530:	6858      	ldr	r0, [r3, #4]
    5532:	3a01      	subs	r2, #1
    5534:	3918      	subs	r1, #24
    5536:	2800      	cmp	r0, #0
    5538:	d0f9      	beq.n	552e <__kernel_rem_pio2+0x48e>
    553a:	9200      	str	r2, [sp, #0]
    553c:	9106      	str	r1, [sp, #24]
    553e:	9a06      	ldr	r2, [sp, #24]
    5540:	2000      	movs	r0, #0
    5542:	494e      	ldr	r1, [pc, #312]	; (567c <__kernel_rem_pio2+0x5dc>)
    5544:	f000 fb46 	bl	5bd4 <scalbn>
    5548:	9b00      	ldr	r3, [sp, #0]
    554a:	0004      	movs	r4, r0
    554c:	000d      	movs	r5, r1
    554e:	2b00      	cmp	r3, #0
    5550:	da00      	bge.n	5554 <__kernel_rem_pio2+0x4b4>
    5552:	e1b3      	b.n	58bc <__kernel_rem_pio2+0x81c>
    5554:	aa12      	add	r2, sp, #72	; 0x48
    5556:	4694      	mov	ip, r2
    5558:	009f      	lsls	r7, r3, #2
    555a:	00db      	lsls	r3, r3, #3
    555c:	4467      	add	r7, ip
    555e:	469c      	mov	ip, r3
    5560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5562:	9305      	str	r3, [sp, #20]
    5564:	4462      	add	r2, ip
    5566:	4693      	mov	fp, r2
    5568:	0016      	movs	r6, r2
    556a:	6838      	ldr	r0, [r7, #0]
    556c:	f002 fae8 	bl	7b40 <__aeabi_i2d>
    5570:	0022      	movs	r2, r4
    5572:	002b      	movs	r3, r5
    5574:	f001 fcc0 	bl	6ef8 <__aeabi_dmul>
    5578:	4b42      	ldr	r3, [pc, #264]	; (5684 <__kernel_rem_pio2+0x5e4>)
    557a:	6030      	str	r0, [r6, #0]
    557c:	6071      	str	r1, [r6, #4]
    557e:	2200      	movs	r2, #0
    5580:	0020      	movs	r0, r4
    5582:	0029      	movs	r1, r5
    5584:	f001 fcb8 	bl	6ef8 <__aeabi_dmul>
    5588:	3e08      	subs	r6, #8
    558a:	ab74      	add	r3, sp, #464	; 0x1d0
    558c:	0004      	movs	r4, r0
    558e:	000d      	movs	r5, r1
    5590:	3f04      	subs	r7, #4
    5592:	42b3      	cmp	r3, r6
    5594:	d1e9      	bne.n	556a <__kernel_rem_pio2+0x4ca>
    5596:	2300      	movs	r3, #0
    5598:	469a      	mov	sl, r3
    559a:	ab4e      	add	r3, sp, #312	; 0x138
    559c:	9302      	str	r3, [sp, #8]
    559e:	9b08      	ldr	r3, [sp, #32]
    55a0:	4699      	mov	r9, r3
    55a2:	464b      	mov	r3, r9
    55a4:	2600      	movs	r6, #0
    55a6:	2700      	movs	r7, #0
    55a8:	2b00      	cmp	r3, #0
    55aa:	db21      	blt.n	55f0 <__kernel_rem_pio2+0x550>
    55ac:	2080      	movs	r0, #128	; 0x80
    55ae:	4b36      	ldr	r3, [pc, #216]	; (5688 <__kernel_rem_pio2+0x5e8>)
    55b0:	465d      	mov	r5, fp
    55b2:	4698      	mov	r8, r3
    55b4:	05c0      	lsls	r0, r0, #23
    55b6:	4935      	ldr	r1, [pc, #212]	; (568c <__kernel_rem_pio2+0x5ec>)
    55b8:	2600      	movs	r6, #0
    55ba:	2700      	movs	r7, #0
    55bc:	2400      	movs	r4, #0
    55be:	e008      	b.n	55d2 <__kernel_rem_pio2+0x532>
    55c0:	2308      	movs	r3, #8
    55c2:	469c      	mov	ip, r3
    55c4:	3508      	adds	r5, #8
    55c6:	44e0      	add	r8, ip
    55c8:	45a2      	cmp	sl, r4
    55ca:	db11      	blt.n	55f0 <__kernel_rem_pio2+0x550>
    55cc:	4643      	mov	r3, r8
    55ce:	6818      	ldr	r0, [r3, #0]
    55d0:	6859      	ldr	r1, [r3, #4]
    55d2:	682a      	ldr	r2, [r5, #0]
    55d4:	686b      	ldr	r3, [r5, #4]
    55d6:	f001 fc8f 	bl	6ef8 <__aeabi_dmul>
    55da:	0002      	movs	r2, r0
    55dc:	000b      	movs	r3, r1
    55de:	0030      	movs	r0, r6
    55e0:	0039      	movs	r1, r7
    55e2:	f000 fd39 	bl	6058 <__aeabi_dadd>
    55e6:	3401      	adds	r4, #1
    55e8:	0006      	movs	r6, r0
    55ea:	000f      	movs	r7, r1
    55ec:	45a1      	cmp	r9, r4
    55ee:	dae7      	bge.n	55c0 <__kernel_rem_pio2+0x520>
    55f0:	9a02      	ldr	r2, [sp, #8]
    55f2:	4653      	mov	r3, sl
    55f4:	4694      	mov	ip, r2
    55f6:	00db      	lsls	r3, r3, #3
    55f8:	4463      	add	r3, ip
    55fa:	601e      	str	r6, [r3, #0]
    55fc:	605f      	str	r7, [r3, #4]
    55fe:	2301      	movs	r3, #1
    5600:	469c      	mov	ip, r3
    5602:	3b09      	subs	r3, #9
    5604:	44e2      	add	sl, ip
    5606:	469c      	mov	ip, r3
    5608:	ab74      	add	r3, sp, #464	; 0x1d0
    560a:	44e3      	add	fp, ip
    560c:	459b      	cmp	fp, r3
    560e:	d1c8      	bne.n	55a2 <__kernel_rem_pio2+0x502>
    5610:	9b02      	ldr	r3, [sp, #8]
    5612:	4699      	mov	r9, r3
    5614:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5616:	2b02      	cmp	r3, #2
    5618:	dd00      	ble.n	561c <__kernel_rem_pio2+0x57c>
    561a:	e082      	b.n	5722 <__kernel_rem_pio2+0x682>
    561c:	2b00      	cmp	r3, #0
    561e:	dc37      	bgt.n	5690 <__kernel_rem_pio2+0x5f0>
    5620:	d11d      	bne.n	565e <__kernel_rem_pio2+0x5be>
    5622:	9b05      	ldr	r3, [sp, #20]
    5624:	2500      	movs	r5, #0
    5626:	444b      	add	r3, r9
    5628:	001e      	movs	r6, r3
    562a:	2400      	movs	r4, #0
    562c:	6832      	ldr	r2, [r6, #0]
    562e:	6873      	ldr	r3, [r6, #4]
    5630:	0028      	movs	r0, r5
    5632:	0021      	movs	r1, r4
    5634:	f000 fd10 	bl	6058 <__aeabi_dadd>
    5638:	9b00      	ldr	r3, [sp, #0]
    563a:	0005      	movs	r5, r0
    563c:	000c      	movs	r4, r1
    563e:	3e08      	subs	r6, #8
    5640:	1e5a      	subs	r2, r3, #1
    5642:	9200      	str	r2, [sp, #0]
    5644:	d2f2      	bcs.n	562c <__kernel_rem_pio2+0x58c>
    5646:	9b07      	ldr	r3, [sp, #28]
    5648:	2b00      	cmp	r3, #0
    564a:	d003      	beq.n	5654 <__kernel_rem_pio2+0x5b4>
    564c:	2380      	movs	r3, #128	; 0x80
    564e:	061b      	lsls	r3, r3, #24
    5650:	469c      	mov	ip, r3
    5652:	4464      	add	r4, ip
    5654:	002a      	movs	r2, r5
    5656:	0023      	movs	r3, r4
    5658:	9909      	ldr	r1, [sp, #36]	; 0x24
    565a:	600a      	str	r2, [r1, #0]
    565c:	604b      	str	r3, [r1, #4]
    565e:	2007      	movs	r0, #7
    5660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5662:	4018      	ands	r0, r3
    5664:	239f      	movs	r3, #159	; 0x9f
    5666:	009b      	lsls	r3, r3, #2
    5668:	449d      	add	sp, r3
    566a:	bc3c      	pop	{r2, r3, r4, r5}
    566c:	4690      	mov	r8, r2
    566e:	4699      	mov	r9, r3
    5670:	46a2      	mov	sl, r4
    5672:	46ab      	mov	fp, r5
    5674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5676:	46c0      	nop			; (mov r8, r8)
    5678:	3fffffff 	.word	0x3fffffff
    567c:	3ff00000 	.word	0x3ff00000
    5680:	3fe00000 	.word	0x3fe00000
    5684:	3e700000 	.word	0x3e700000
    5688:	00008678 	.word	0x00008678
    568c:	3ff921fb 	.word	0x3ff921fb
    5690:	9b05      	ldr	r3, [sp, #20]
    5692:	2000      	movs	r0, #0
    5694:	444b      	add	r3, r9
    5696:	001e      	movs	r6, r3
    5698:	2100      	movs	r1, #0
    569a:	af4c      	add	r7, sp, #304	; 0x130
    569c:	6832      	ldr	r2, [r6, #0]
    569e:	6873      	ldr	r3, [r6, #4]
    56a0:	3e08      	subs	r6, #8
    56a2:	f000 fcd9 	bl	6058 <__aeabi_dadd>
    56a6:	42be      	cmp	r6, r7
    56a8:	d1f8      	bne.n	569c <__kernel_rem_pio2+0x5fc>
    56aa:	9b07      	ldr	r3, [sp, #28]
    56ac:	2b00      	cmp	r3, #0
    56ae:	d024      	beq.n	56fa <__kernel_rem_pio2+0x65a>
    56b0:	2380      	movs	r3, #128	; 0x80
    56b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    56b4:	061b      	lsls	r3, r3, #24
    56b6:	18cb      	adds	r3, r1, r3
    56b8:	6010      	str	r0, [r2, #0]
    56ba:	6053      	str	r3, [r2, #4]
    56bc:	000b      	movs	r3, r1
    56be:	0002      	movs	r2, r0
    56c0:	984e      	ldr	r0, [sp, #312]	; 0x138
    56c2:	994f      	ldr	r1, [sp, #316]	; 0x13c
    56c4:	f001 fe92 	bl	73ec <__aeabi_dsub>
    56c8:	9b00      	ldr	r3, [sp, #0]
    56ca:	2b00      	cmp	r3, #0
    56cc:	dd0b      	ble.n	56e6 <__kernel_rem_pio2+0x646>
    56ce:	2401      	movs	r4, #1
    56d0:	ad50      	add	r5, sp, #320	; 0x140
    56d2:	cd0c      	ldmia	r5!, {r2, r3}
    56d4:	f000 fcc0 	bl	6058 <__aeabi_dadd>
    56d8:	9b00      	ldr	r3, [sp, #0]
    56da:	3401      	adds	r4, #1
    56dc:	42a3      	cmp	r3, r4
    56de:	daf8      	bge.n	56d2 <__kernel_rem_pio2+0x632>
    56e0:	9b07      	ldr	r3, [sp, #28]
    56e2:	2b00      	cmp	r3, #0
    56e4:	d003      	beq.n	56ee <__kernel_rem_pio2+0x64e>
    56e6:	2380      	movs	r3, #128	; 0x80
    56e8:	061b      	lsls	r3, r3, #24
    56ea:	469c      	mov	ip, r3
    56ec:	4461      	add	r1, ip
    56ee:	000b      	movs	r3, r1
    56f0:	0002      	movs	r2, r0
    56f2:	9909      	ldr	r1, [sp, #36]	; 0x24
    56f4:	608a      	str	r2, [r1, #8]
    56f6:	60cb      	str	r3, [r1, #12]
    56f8:	e7b1      	b.n	565e <__kernel_rem_pio2+0x5be>
    56fa:	0002      	movs	r2, r0
    56fc:	000b      	movs	r3, r1
    56fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5700:	6022      	str	r2, [r4, #0]
    5702:	6063      	str	r3, [r4, #4]
    5704:	000b      	movs	r3, r1
    5706:	0002      	movs	r2, r0
    5708:	984e      	ldr	r0, [sp, #312]	; 0x138
    570a:	994f      	ldr	r1, [sp, #316]	; 0x13c
    570c:	f001 fe6e 	bl	73ec <__aeabi_dsub>
    5710:	9b00      	ldr	r3, [sp, #0]
    5712:	2b00      	cmp	r3, #0
    5714:	dcdb      	bgt.n	56ce <__kernel_rem_pio2+0x62e>
    5716:	000b      	movs	r3, r1
    5718:	0002      	movs	r2, r0
    571a:	9909      	ldr	r1, [sp, #36]	; 0x24
    571c:	608a      	str	r2, [r1, #8]
    571e:	60cb      	str	r3, [r1, #12]
    5720:	e79d      	b.n	565e <__kernel_rem_pio2+0x5be>
    5722:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5724:	2b03      	cmp	r3, #3
    5726:	d19a      	bne.n	565e <__kernel_rem_pio2+0x5be>
    5728:	9b00      	ldr	r3, [sp, #0]
    572a:	2b00      	cmp	r3, #0
    572c:	dc00      	bgt.n	5730 <__kernel_rem_pio2+0x690>
    572e:	e0e3      	b.n	58f8 <__kernel_rem_pio2+0x858>
    5730:	4a7e      	ldr	r2, [pc, #504]	; (592c <__kernel_rem_pio2+0x88c>)
    5732:	9b05      	ldr	r3, [sp, #20]
    5734:	4694      	mov	ip, r2
    5736:	444b      	add	r3, r9
    5738:	681e      	ldr	r6, [r3, #0]
    573a:	685f      	ldr	r7, [r3, #4]
    573c:	9b00      	ldr	r3, [sp, #0]
    573e:	4463      	add	r3, ip
    5740:	469a      	mov	sl, r3
    5742:	00db      	lsls	r3, r3, #3
    5744:	444b      	add	r3, r9
    5746:	4698      	mov	r8, r3
    5748:	ab4c      	add	r3, sp, #304	; 0x130
    574a:	469b      	mov	fp, r3
    574c:	4643      	mov	r3, r8
    574e:	685c      	ldr	r4, [r3, #4]
    5750:	681b      	ldr	r3, [r3, #0]
    5752:	0018      	movs	r0, r3
    5754:	0021      	movs	r1, r4
    5756:	0032      	movs	r2, r6
    5758:	003b      	movs	r3, r7
    575a:	9002      	str	r0, [sp, #8]
    575c:	9103      	str	r1, [sp, #12]
    575e:	f000 fc7b 	bl	6058 <__aeabi_dadd>
    5762:	0004      	movs	r4, r0
    5764:	000d      	movs	r5, r1
    5766:	0002      	movs	r2, r0
    5768:	000b      	movs	r3, r1
    576a:	9802      	ldr	r0, [sp, #8]
    576c:	9903      	ldr	r1, [sp, #12]
    576e:	f001 fe3d 	bl	73ec <__aeabi_dsub>
    5772:	003b      	movs	r3, r7
    5774:	0032      	movs	r2, r6
    5776:	f000 fc6f 	bl	6058 <__aeabi_dadd>
    577a:	4643      	mov	r3, r8
    577c:	6098      	str	r0, [r3, #8]
    577e:	60d9      	str	r1, [r3, #12]
    5780:	601c      	str	r4, [r3, #0]
    5782:	605d      	str	r5, [r3, #4]
    5784:	2308      	movs	r3, #8
    5786:	425b      	negs	r3, r3
    5788:	469c      	mov	ip, r3
    578a:	44e0      	add	r8, ip
    578c:	0026      	movs	r6, r4
    578e:	002f      	movs	r7, r5
    5790:	45c3      	cmp	fp, r8
    5792:	d1db      	bne.n	574c <__kernel_rem_pio2+0x6ac>
    5794:	9b00      	ldr	r3, [sp, #0]
    5796:	2b01      	cmp	r3, #1
    5798:	dc00      	bgt.n	579c <__kernel_rem_pio2+0x6fc>
    579a:	e0ad      	b.n	58f8 <__kernel_rem_pio2+0x858>
    579c:	9b05      	ldr	r3, [sp, #20]
    579e:	46c8      	mov	r8, r9
    57a0:	444b      	add	r3, r9
    57a2:	681e      	ldr	r6, [r3, #0]
    57a4:	685f      	ldr	r7, [r3, #4]
    57a6:	4653      	mov	r3, sl
    57a8:	00db      	lsls	r3, r3, #3
    57aa:	469b      	mov	fp, r3
    57ac:	44d8      	add	r8, fp
    57ae:	4643      	mov	r3, r8
    57b0:	0030      	movs	r0, r6
    57b2:	685c      	ldr	r4, [r3, #4]
    57b4:	681b      	ldr	r3, [r3, #0]
    57b6:	0039      	movs	r1, r7
    57b8:	9300      	str	r3, [sp, #0]
    57ba:	9401      	str	r4, [sp, #4]
    57bc:	001a      	movs	r2, r3
    57be:	0023      	movs	r3, r4
    57c0:	f000 fc4a 	bl	6058 <__aeabi_dadd>
    57c4:	0004      	movs	r4, r0
    57c6:	000d      	movs	r5, r1
    57c8:	0002      	movs	r2, r0
    57ca:	000b      	movs	r3, r1
    57cc:	9800      	ldr	r0, [sp, #0]
    57ce:	9901      	ldr	r1, [sp, #4]
    57d0:	f001 fe0c 	bl	73ec <__aeabi_dsub>
    57d4:	003b      	movs	r3, r7
    57d6:	0032      	movs	r2, r6
    57d8:	f000 fc3e 	bl	6058 <__aeabi_dadd>
    57dc:	4643      	mov	r3, r8
    57de:	6098      	str	r0, [r3, #8]
    57e0:	60d9      	str	r1, [r3, #12]
    57e2:	601c      	str	r4, [r3, #0]
    57e4:	605d      	str	r5, [r3, #4]
    57e6:	2308      	movs	r3, #8
    57e8:	425b      	negs	r3, r3
    57ea:	469c      	mov	ip, r3
    57ec:	44e0      	add	r8, ip
    57ee:	0026      	movs	r6, r4
    57f0:	002f      	movs	r7, r5
    57f2:	45c1      	cmp	r9, r8
    57f4:	d1db      	bne.n	57ae <__kernel_rem_pio2+0x70e>
    57f6:	465d      	mov	r5, fp
    57f8:	2700      	movs	r7, #0
    57fa:	2400      	movs	r4, #0
    57fc:	3508      	adds	r5, #8
    57fe:	444d      	add	r5, r9
    5800:	ae50      	add	r6, sp, #320	; 0x140
    5802:	682a      	ldr	r2, [r5, #0]
    5804:	686b      	ldr	r3, [r5, #4]
    5806:	0038      	movs	r0, r7
    5808:	0021      	movs	r1, r4
    580a:	f000 fc25 	bl	6058 <__aeabi_dadd>
    580e:	3d08      	subs	r5, #8
    5810:	0007      	movs	r7, r0
    5812:	000c      	movs	r4, r1
    5814:	42ae      	cmp	r6, r5
    5816:	d1f4      	bne.n	5802 <__kernel_rem_pio2+0x762>
    5818:	9b07      	ldr	r3, [sp, #28]
    581a:	2b00      	cmp	r3, #0
    581c:	d071      	beq.n	5902 <__kernel_rem_pio2+0x862>
    581e:	2180      	movs	r1, #128	; 0x80
    5820:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5822:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    5824:	0609      	lsls	r1, r1, #24
    5826:	6013      	str	r3, [r2, #0]
    5828:	464b      	mov	r3, r9
    582a:	468c      	mov	ip, r1
    582c:	685b      	ldr	r3, [r3, #4]
    582e:	4464      	add	r4, ip
    5830:	4463      	add	r3, ip
    5832:	6053      	str	r3, [r2, #4]
    5834:	464b      	mov	r3, r9
    5836:	689b      	ldr	r3, [r3, #8]
    5838:	6117      	str	r7, [r2, #16]
    583a:	6093      	str	r3, [r2, #8]
    583c:	464b      	mov	r3, r9
    583e:	68db      	ldr	r3, [r3, #12]
    5840:	6154      	str	r4, [r2, #20]
    5842:	4463      	add	r3, ip
    5844:	60d3      	str	r3, [r2, #12]
    5846:	e70a      	b.n	565e <__kernel_rem_pio2+0x5be>
    5848:	4699      	mov	r9, r3
    584a:	4643      	mov	r3, r8
    584c:	930b      	str	r3, [sp, #44]	; 0x2c
    584e:	9b06      	ldr	r3, [sp, #24]
    5850:	0030      	movs	r0, r6
    5852:	425a      	negs	r2, r3
    5854:	0039      	movs	r1, r7
    5856:	f000 f9bd 	bl	5bd4 <scalbn>
    585a:	2200      	movs	r2, #0
    585c:	4b34      	ldr	r3, [pc, #208]	; (5930 <__kernel_rem_pio2+0x890>)
    585e:	0004      	movs	r4, r0
    5860:	000d      	movs	r5, r1
    5862:	f000 fbd1 	bl	6008 <__aeabi_dcmpge>
    5866:	2800      	cmp	r0, #0
    5868:	d032      	beq.n	58d0 <__kernel_rem_pio2+0x830>
    586a:	4b32      	ldr	r3, [pc, #200]	; (5934 <__kernel_rem_pio2+0x894>)
    586c:	2200      	movs	r2, #0
    586e:	0020      	movs	r0, r4
    5870:	0029      	movs	r1, r5
    5872:	f001 fb41 	bl	6ef8 <__aeabi_dmul>
    5876:	f002 f92d 	bl	7ad4 <__aeabi_d2iz>
    587a:	464a      	mov	r2, r9
    587c:	0006      	movs	r6, r0
    587e:	0097      	lsls	r7, r2, #2
    5880:	f002 f95e 	bl	7b40 <__aeabi_i2d>
    5884:	2200      	movs	r2, #0
    5886:	4b2a      	ldr	r3, [pc, #168]	; (5930 <__kernel_rem_pio2+0x890>)
    5888:	f001 fb36 	bl	6ef8 <__aeabi_dmul>
    588c:	0002      	movs	r2, r0
    588e:	000b      	movs	r3, r1
    5890:	0020      	movs	r0, r4
    5892:	0029      	movs	r1, r5
    5894:	f001 fdaa 	bl	73ec <__aeabi_dsub>
    5898:	f002 f91c 	bl	7ad4 <__aeabi_d2iz>
    589c:	aa12      	add	r2, sp, #72	; 0x48
    589e:	51d0      	str	r0, [r2, r7]
    58a0:	464a      	mov	r2, r9
    58a2:	9b06      	ldr	r3, [sp, #24]
    58a4:	3201      	adds	r2, #1
    58a6:	3318      	adds	r3, #24
    58a8:	9200      	str	r2, [sp, #0]
    58aa:	9306      	str	r3, [sp, #24]
    58ac:	0093      	lsls	r3, r2, #2
    58ae:	aa12      	add	r2, sp, #72	; 0x48
    58b0:	50d6      	str	r6, [r2, r3]
    58b2:	e644      	b.n	553e <__kernel_rem_pio2+0x49e>
    58b4:	2201      	movs	r2, #1
    58b6:	e57f      	b.n	53b8 <__kernel_rem_pio2+0x318>
    58b8:	2400      	movs	r4, #0
    58ba:	e53a      	b.n	5332 <__kernel_rem_pio2+0x292>
    58bc:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    58be:	2b02      	cmp	r3, #2
    58c0:	dc14      	bgt.n	58ec <__kernel_rem_pio2+0x84c>
    58c2:	2b00      	cmp	r3, #0
    58c4:	dc0f      	bgt.n	58e6 <__kernel_rem_pio2+0x846>
    58c6:	d000      	beq.n	58ca <__kernel_rem_pio2+0x82a>
    58c8:	e6c9      	b.n	565e <__kernel_rem_pio2+0x5be>
    58ca:	2500      	movs	r5, #0
    58cc:	2400      	movs	r4, #0
    58ce:	e6ba      	b.n	5646 <__kernel_rem_pio2+0x5a6>
    58d0:	464b      	mov	r3, r9
    58d2:	0020      	movs	r0, r4
    58d4:	0029      	movs	r1, r5
    58d6:	009e      	lsls	r6, r3, #2
    58d8:	f002 f8fc 	bl	7ad4 <__aeabi_d2iz>
    58dc:	ab12      	add	r3, sp, #72	; 0x48
    58de:	5198      	str	r0, [r3, r6]
    58e0:	464b      	mov	r3, r9
    58e2:	9300      	str	r3, [sp, #0]
    58e4:	e62b      	b.n	553e <__kernel_rem_pio2+0x49e>
    58e6:	2000      	movs	r0, #0
    58e8:	2100      	movs	r1, #0
    58ea:	e6de      	b.n	56aa <__kernel_rem_pio2+0x60a>
    58ec:	ab4e      	add	r3, sp, #312	; 0x138
    58ee:	4699      	mov	r9, r3
    58f0:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    58f2:	2b03      	cmp	r3, #3
    58f4:	d000      	beq.n	58f8 <__kernel_rem_pio2+0x858>
    58f6:	e6b2      	b.n	565e <__kernel_rem_pio2+0x5be>
    58f8:	9b07      	ldr	r3, [sp, #28]
    58fa:	2700      	movs	r7, #0
    58fc:	2400      	movs	r4, #0
    58fe:	2b00      	cmp	r3, #0
    5900:	d18d      	bne.n	581e <__kernel_rem_pio2+0x77e>
    5902:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    5904:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    5906:	9909      	ldr	r1, [sp, #36]	; 0x24
    5908:	600a      	str	r2, [r1, #0]
    590a:	604b      	str	r3, [r1, #4]
    590c:	464b      	mov	r3, r9
    590e:	689a      	ldr	r2, [r3, #8]
    5910:	68db      	ldr	r3, [r3, #12]
    5912:	9200      	str	r2, [sp, #0]
    5914:	9301      	str	r3, [sp, #4]
    5916:	608a      	str	r2, [r1, #8]
    5918:	60cb      	str	r3, [r1, #12]
    591a:	003a      	movs	r2, r7
    591c:	0023      	movs	r3, r4
    591e:	610a      	str	r2, [r1, #16]
    5920:	614b      	str	r3, [r1, #20]
    5922:	e69c      	b.n	565e <__kernel_rem_pio2+0x5be>
    5924:	ab76      	add	r3, sp, #472	; 0x1d8
    5926:	930a      	str	r3, [sp, #40]	; 0x28
    5928:	e435      	b.n	5196 <__kernel_rem_pio2+0xf6>
    592a:	46c0      	nop			; (mov r8, r8)
    592c:	1fffffff 	.word	0x1fffffff
    5930:	41700000 	.word	0x41700000
    5934:	3e700000 	.word	0x3e700000

00005938 <__kernel_sin>:
    5938:	b5f0      	push	{r4, r5, r6, r7, lr}
    593a:	464f      	mov	r7, r9
    593c:	4646      	mov	r6, r8
    593e:	b4c0      	push	{r6, r7}
    5940:	b087      	sub	sp, #28
    5942:	9200      	str	r2, [sp, #0]
    5944:	9301      	str	r3, [sp, #4]
    5946:	4a46      	ldr	r2, [pc, #280]	; (5a60 <__kernel_sin+0x128>)
    5948:	004b      	lsls	r3, r1, #1
    594a:	4681      	mov	r9, r0
    594c:	4688      	mov	r8, r1
    594e:	085b      	lsrs	r3, r3, #1
    5950:	4293      	cmp	r3, r2
    5952:	dc05      	bgt.n	5960 <__kernel_sin+0x28>
    5954:	f002 f8be 	bl	7ad4 <__aeabi_d2iz>
    5958:	4641      	mov	r1, r8
    595a:	1e03      	subs	r3, r0, #0
    595c:	4648      	mov	r0, r9
    595e:	d066      	beq.n	5a2e <__kernel_sin+0xf6>
    5960:	464a      	mov	r2, r9
    5962:	4643      	mov	r3, r8
    5964:	4648      	mov	r0, r9
    5966:	4641      	mov	r1, r8
    5968:	f001 fac6 	bl	6ef8 <__aeabi_dmul>
    596c:	0004      	movs	r4, r0
    596e:	000d      	movs	r5, r1
    5970:	0002      	movs	r2, r0
    5972:	000b      	movs	r3, r1
    5974:	4648      	mov	r0, r9
    5976:	4641      	mov	r1, r8
    5978:	f001 fabe 	bl	6ef8 <__aeabi_dmul>
    597c:	4a39      	ldr	r2, [pc, #228]	; (5a64 <__kernel_sin+0x12c>)
    597e:	4b3a      	ldr	r3, [pc, #232]	; (5a68 <__kernel_sin+0x130>)
    5980:	0006      	movs	r6, r0
    5982:	000f      	movs	r7, r1
    5984:	0020      	movs	r0, r4
    5986:	0029      	movs	r1, r5
    5988:	f001 fab6 	bl	6ef8 <__aeabi_dmul>
    598c:	4a37      	ldr	r2, [pc, #220]	; (5a6c <__kernel_sin+0x134>)
    598e:	4b38      	ldr	r3, [pc, #224]	; (5a70 <__kernel_sin+0x138>)
    5990:	f001 fd2c 	bl	73ec <__aeabi_dsub>
    5994:	0022      	movs	r2, r4
    5996:	002b      	movs	r3, r5
    5998:	f001 faae 	bl	6ef8 <__aeabi_dmul>
    599c:	4a35      	ldr	r2, [pc, #212]	; (5a74 <__kernel_sin+0x13c>)
    599e:	4b36      	ldr	r3, [pc, #216]	; (5a78 <__kernel_sin+0x140>)
    59a0:	f000 fb5a 	bl	6058 <__aeabi_dadd>
    59a4:	0022      	movs	r2, r4
    59a6:	002b      	movs	r3, r5
    59a8:	f001 faa6 	bl	6ef8 <__aeabi_dmul>
    59ac:	4a33      	ldr	r2, [pc, #204]	; (5a7c <__kernel_sin+0x144>)
    59ae:	4b34      	ldr	r3, [pc, #208]	; (5a80 <__kernel_sin+0x148>)
    59b0:	f001 fd1c 	bl	73ec <__aeabi_dsub>
    59b4:	0022      	movs	r2, r4
    59b6:	002b      	movs	r3, r5
    59b8:	f001 fa9e 	bl	6ef8 <__aeabi_dmul>
    59bc:	4b31      	ldr	r3, [pc, #196]	; (5a84 <__kernel_sin+0x14c>)
    59be:	4a32      	ldr	r2, [pc, #200]	; (5a88 <__kernel_sin+0x150>)
    59c0:	f000 fb4a 	bl	6058 <__aeabi_dadd>
    59c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    59c6:	9002      	str	r0, [sp, #8]
    59c8:	9103      	str	r1, [sp, #12]
    59ca:	2b00      	cmp	r3, #0
    59cc:	d034      	beq.n	5a38 <__kernel_sin+0x100>
    59ce:	9800      	ldr	r0, [sp, #0]
    59d0:	9901      	ldr	r1, [sp, #4]
    59d2:	2200      	movs	r2, #0
    59d4:	4b2d      	ldr	r3, [pc, #180]	; (5a8c <__kernel_sin+0x154>)
    59d6:	f001 fa8f 	bl	6ef8 <__aeabi_dmul>
    59da:	9a02      	ldr	r2, [sp, #8]
    59dc:	9b03      	ldr	r3, [sp, #12]
    59de:	9004      	str	r0, [sp, #16]
    59e0:	9105      	str	r1, [sp, #20]
    59e2:	0030      	movs	r0, r6
    59e4:	0039      	movs	r1, r7
    59e6:	f001 fa87 	bl	6ef8 <__aeabi_dmul>
    59ea:	0002      	movs	r2, r0
    59ec:	000b      	movs	r3, r1
    59ee:	9804      	ldr	r0, [sp, #16]
    59f0:	9905      	ldr	r1, [sp, #20]
    59f2:	f001 fcfb 	bl	73ec <__aeabi_dsub>
    59f6:	0022      	movs	r2, r4
    59f8:	002b      	movs	r3, r5
    59fa:	f001 fa7d 	bl	6ef8 <__aeabi_dmul>
    59fe:	9a00      	ldr	r2, [sp, #0]
    5a00:	9b01      	ldr	r3, [sp, #4]
    5a02:	f001 fcf3 	bl	73ec <__aeabi_dsub>
    5a06:	4a22      	ldr	r2, [pc, #136]	; (5a90 <__kernel_sin+0x158>)
    5a08:	0004      	movs	r4, r0
    5a0a:	000d      	movs	r5, r1
    5a0c:	4b21      	ldr	r3, [pc, #132]	; (5a94 <__kernel_sin+0x15c>)
    5a0e:	0030      	movs	r0, r6
    5a10:	0039      	movs	r1, r7
    5a12:	f001 fa71 	bl	6ef8 <__aeabi_dmul>
    5a16:	0002      	movs	r2, r0
    5a18:	000b      	movs	r3, r1
    5a1a:	0020      	movs	r0, r4
    5a1c:	0029      	movs	r1, r5
    5a1e:	f000 fb1b 	bl	6058 <__aeabi_dadd>
    5a22:	0002      	movs	r2, r0
    5a24:	000b      	movs	r3, r1
    5a26:	4648      	mov	r0, r9
    5a28:	4641      	mov	r1, r8
    5a2a:	f001 fcdf 	bl	73ec <__aeabi_dsub>
    5a2e:	b007      	add	sp, #28
    5a30:	bc0c      	pop	{r2, r3}
    5a32:	4690      	mov	r8, r2
    5a34:	4699      	mov	r9, r3
    5a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a38:	0002      	movs	r2, r0
    5a3a:	000b      	movs	r3, r1
    5a3c:	0020      	movs	r0, r4
    5a3e:	0029      	movs	r1, r5
    5a40:	f001 fa5a 	bl	6ef8 <__aeabi_dmul>
    5a44:	4a12      	ldr	r2, [pc, #72]	; (5a90 <__kernel_sin+0x158>)
    5a46:	4b13      	ldr	r3, [pc, #76]	; (5a94 <__kernel_sin+0x15c>)
    5a48:	f001 fcd0 	bl	73ec <__aeabi_dsub>
    5a4c:	0032      	movs	r2, r6
    5a4e:	003b      	movs	r3, r7
    5a50:	f001 fa52 	bl	6ef8 <__aeabi_dmul>
    5a54:	464a      	mov	r2, r9
    5a56:	4643      	mov	r3, r8
    5a58:	f000 fafe 	bl	6058 <__aeabi_dadd>
    5a5c:	e7e7      	b.n	5a2e <__kernel_sin+0xf6>
    5a5e:	46c0      	nop			; (mov r8, r8)
    5a60:	3e3fffff 	.word	0x3e3fffff
    5a64:	5acfd57c 	.word	0x5acfd57c
    5a68:	3de5d93a 	.word	0x3de5d93a
    5a6c:	8a2b9ceb 	.word	0x8a2b9ceb
    5a70:	3e5ae5e6 	.word	0x3e5ae5e6
    5a74:	57b1fe7d 	.word	0x57b1fe7d
    5a78:	3ec71de3 	.word	0x3ec71de3
    5a7c:	19c161d5 	.word	0x19c161d5
    5a80:	3f2a01a0 	.word	0x3f2a01a0
    5a84:	3f811111 	.word	0x3f811111
    5a88:	1110f8a6 	.word	0x1110f8a6
    5a8c:	3fe00000 	.word	0x3fe00000
    5a90:	55555549 	.word	0x55555549
    5a94:	3fc55555 	.word	0x3fc55555

00005a98 <fabs>:
    5a98:	0049      	lsls	r1, r1, #1
    5a9a:	084b      	lsrs	r3, r1, #1
    5a9c:	0019      	movs	r1, r3
    5a9e:	4770      	bx	lr

00005aa0 <floor>:
    5aa0:	4a45      	ldr	r2, [pc, #276]	; (5bb8 <floor+0x118>)
    5aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aa4:	4656      	mov	r6, sl
    5aa6:	4692      	mov	sl, r2
    5aa8:	004b      	lsls	r3, r1, #1
    5aaa:	0d5b      	lsrs	r3, r3, #21
    5aac:	449a      	add	sl, r3
    5aae:	464d      	mov	r5, r9
    5ab0:	465f      	mov	r7, fp
    5ab2:	4644      	mov	r4, r8
    5ab4:	4652      	mov	r2, sl
    5ab6:	b4f0      	push	{r4, r5, r6, r7}
    5ab8:	4689      	mov	r9, r1
    5aba:	0005      	movs	r5, r0
    5abc:	000c      	movs	r4, r1
    5abe:	000e      	movs	r6, r1
    5ac0:	0007      	movs	r7, r0
    5ac2:	2a13      	cmp	r2, #19
    5ac4:	dc22      	bgt.n	5b0c <floor+0x6c>
    5ac6:	2a00      	cmp	r2, #0
    5ac8:	db47      	blt.n	5b5a <floor+0xba>
    5aca:	4652      	mov	r2, sl
    5acc:	4b3b      	ldr	r3, [pc, #236]	; (5bbc <floor+0x11c>)
    5ace:	4113      	asrs	r3, r2
    5ad0:	4698      	mov	r8, r3
    5ad2:	000b      	movs	r3, r1
    5ad4:	4642      	mov	r2, r8
    5ad6:	4013      	ands	r3, r2
    5ad8:	4303      	orrs	r3, r0
    5ada:	d011      	beq.n	5b00 <floor+0x60>
    5adc:	4a38      	ldr	r2, [pc, #224]	; (5bc0 <floor+0x120>)
    5ade:	4b39      	ldr	r3, [pc, #228]	; (5bc4 <floor+0x124>)
    5ae0:	f000 faba 	bl	6058 <__aeabi_dadd>
    5ae4:	2200      	movs	r2, #0
    5ae6:	2300      	movs	r3, #0
    5ae8:	f000 fa84 	bl	5ff4 <__aeabi_dcmpgt>
    5aec:	2800      	cmp	r0, #0
    5aee:	d005      	beq.n	5afc <floor+0x5c>
    5af0:	2c00      	cmp	r4, #0
    5af2:	db41      	blt.n	5b78 <floor+0xd8>
    5af4:	464e      	mov	r6, r9
    5af6:	4643      	mov	r3, r8
    5af8:	2700      	movs	r7, #0
    5afa:	439e      	bics	r6, r3
    5afc:	0038      	movs	r0, r7
    5afe:	0031      	movs	r1, r6
    5b00:	bc3c      	pop	{r2, r3, r4, r5}
    5b02:	4690      	mov	r8, r2
    5b04:	4699      	mov	r9, r3
    5b06:	46a2      	mov	sl, r4
    5b08:	46ab      	mov	fp, r5
    5b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b0c:	4652      	mov	r2, sl
    5b0e:	2a33      	cmp	r2, #51	; 0x33
    5b10:	dd08      	ble.n	5b24 <floor+0x84>
    5b12:	2380      	movs	r3, #128	; 0x80
    5b14:	00db      	lsls	r3, r3, #3
    5b16:	459a      	cmp	sl, r3
    5b18:	d1f2      	bne.n	5b00 <floor+0x60>
    5b1a:	0002      	movs	r2, r0
    5b1c:	000b      	movs	r3, r1
    5b1e:	f000 fa9b 	bl	6058 <__aeabi_dadd>
    5b22:	e7ed      	b.n	5b00 <floor+0x60>
    5b24:	4a28      	ldr	r2, [pc, #160]	; (5bc8 <floor+0x128>)
    5b26:	4694      	mov	ip, r2
    5b28:	2201      	movs	r2, #1
    5b2a:	4463      	add	r3, ip
    5b2c:	4252      	negs	r2, r2
    5b2e:	40da      	lsrs	r2, r3
    5b30:	4693      	mov	fp, r2
    5b32:	4202      	tst	r2, r0
    5b34:	d0e4      	beq.n	5b00 <floor+0x60>
    5b36:	4a22      	ldr	r2, [pc, #136]	; (5bc0 <floor+0x120>)
    5b38:	4b22      	ldr	r3, [pc, #136]	; (5bc4 <floor+0x124>)
    5b3a:	f000 fa8d 	bl	6058 <__aeabi_dadd>
    5b3e:	2200      	movs	r2, #0
    5b40:	2300      	movs	r3, #0
    5b42:	f000 fa57 	bl	5ff4 <__aeabi_dcmpgt>
    5b46:	2800      	cmp	r0, #0
    5b48:	d0d8      	beq.n	5afc <floor+0x5c>
    5b4a:	2c00      	cmp	r4, #0
    5b4c:	db1a      	blt.n	5b84 <floor+0xe4>
    5b4e:	465b      	mov	r3, fp
    5b50:	464e      	mov	r6, r9
    5b52:	439f      	bics	r7, r3
    5b54:	0038      	movs	r0, r7
    5b56:	0031      	movs	r1, r6
    5b58:	e7d2      	b.n	5b00 <floor+0x60>
    5b5a:	4a19      	ldr	r2, [pc, #100]	; (5bc0 <floor+0x120>)
    5b5c:	4b19      	ldr	r3, [pc, #100]	; (5bc4 <floor+0x124>)
    5b5e:	f000 fa7b 	bl	6058 <__aeabi_dadd>
    5b62:	2200      	movs	r2, #0
    5b64:	2300      	movs	r3, #0
    5b66:	f000 fa45 	bl	5ff4 <__aeabi_dcmpgt>
    5b6a:	2800      	cmp	r0, #0
    5b6c:	d0c6      	beq.n	5afc <floor+0x5c>
    5b6e:	2c00      	cmp	r4, #0
    5b70:	db16      	blt.n	5ba0 <floor+0x100>
    5b72:	2700      	movs	r7, #0
    5b74:	2600      	movs	r6, #0
    5b76:	e7c1      	b.n	5afc <floor+0x5c>
    5b78:	2380      	movs	r3, #128	; 0x80
    5b7a:	4652      	mov	r2, sl
    5b7c:	035b      	lsls	r3, r3, #13
    5b7e:	4113      	asrs	r3, r2
    5b80:	4499      	add	r9, r3
    5b82:	e7b7      	b.n	5af4 <floor+0x54>
    5b84:	4653      	mov	r3, sl
    5b86:	2b14      	cmp	r3, #20
    5b88:	d012      	beq.n	5bb0 <floor+0x110>
    5b8a:	2334      	movs	r3, #52	; 0x34
    5b8c:	4652      	mov	r2, sl
    5b8e:	2701      	movs	r7, #1
    5b90:	1a9b      	subs	r3, r3, r2
    5b92:	409f      	lsls	r7, r3
    5b94:	197f      	adds	r7, r7, r5
    5b96:	42af      	cmp	r7, r5
    5b98:	419b      	sbcs	r3, r3
    5b9a:	425b      	negs	r3, r3
    5b9c:	4499      	add	r9, r3
    5b9e:	e7d6      	b.n	5b4e <floor+0xae>
    5ba0:	0064      	lsls	r4, r4, #1
    5ba2:	0864      	lsrs	r4, r4, #1
    5ba4:	4325      	orrs	r5, r4
    5ba6:	2700      	movs	r7, #0
    5ba8:	2d00      	cmp	r5, #0
    5baa:	d0a7      	beq.n	5afc <floor+0x5c>
    5bac:	4e07      	ldr	r6, [pc, #28]	; (5bcc <floor+0x12c>)
    5bae:	e7a5      	b.n	5afc <floor+0x5c>
    5bb0:	3b13      	subs	r3, #19
    5bb2:	469c      	mov	ip, r3
    5bb4:	44e1      	add	r9, ip
    5bb6:	e7ca      	b.n	5b4e <floor+0xae>
    5bb8:	fffffc01 	.word	0xfffffc01
    5bbc:	000fffff 	.word	0x000fffff
    5bc0:	8800759c 	.word	0x8800759c
    5bc4:	7e37e43c 	.word	0x7e37e43c
    5bc8:	fffffbed 	.word	0xfffffbed
    5bcc:	bff00000 	.word	0xbff00000

00005bd0 <matherr>:
    5bd0:	2000      	movs	r0, #0
    5bd2:	4770      	bx	lr

00005bd4 <scalbn>:
    5bd4:	004b      	lsls	r3, r1, #1
    5bd6:	b570      	push	{r4, r5, r6, lr}
    5bd8:	0d5b      	lsrs	r3, r3, #21
    5bda:	0014      	movs	r4, r2
    5bdc:	000a      	movs	r2, r1
    5bde:	2b00      	cmp	r3, #0
    5be0:	d11a      	bne.n	5c18 <scalbn+0x44>
    5be2:	004b      	lsls	r3, r1, #1
    5be4:	085b      	lsrs	r3, r3, #1
    5be6:	4303      	orrs	r3, r0
    5be8:	d015      	beq.n	5c16 <scalbn+0x42>
    5bea:	2200      	movs	r2, #0
    5bec:	4b22      	ldr	r3, [pc, #136]	; (5c78 <scalbn+0xa4>)
    5bee:	f001 f983 	bl	6ef8 <__aeabi_dmul>
    5bf2:	4b22      	ldr	r3, [pc, #136]	; (5c7c <scalbn+0xa8>)
    5bf4:	000a      	movs	r2, r1
    5bf6:	429c      	cmp	r4, r3
    5bf8:	db22      	blt.n	5c40 <scalbn+0x6c>
    5bfa:	004b      	lsls	r3, r1, #1
    5bfc:	0d5b      	lsrs	r3, r3, #21
    5bfe:	3b36      	subs	r3, #54	; 0x36
    5c00:	4d1f      	ldr	r5, [pc, #124]	; (5c80 <scalbn+0xac>)
    5c02:	18e3      	adds	r3, r4, r3
    5c04:	42ab      	cmp	r3, r5
    5c06:	dc20      	bgt.n	5c4a <scalbn+0x76>
    5c08:	2b00      	cmp	r3, #0
    5c0a:	dd0d      	ble.n	5c28 <scalbn+0x54>
    5c0c:	4c1d      	ldr	r4, [pc, #116]	; (5c84 <scalbn+0xb0>)
    5c0e:	051b      	lsls	r3, r3, #20
    5c10:	4022      	ands	r2, r4
    5c12:	431a      	orrs	r2, r3
    5c14:	0011      	movs	r1, r2
    5c16:	bd70      	pop	{r4, r5, r6, pc}
    5c18:	4d1b      	ldr	r5, [pc, #108]	; (5c88 <scalbn+0xb4>)
    5c1a:	42ab      	cmp	r3, r5
    5c1c:	d1f0      	bne.n	5c00 <scalbn+0x2c>
    5c1e:	0002      	movs	r2, r0
    5c20:	000b      	movs	r3, r1
    5c22:	f000 fa19 	bl	6058 <__aeabi_dadd>
    5c26:	e7f6      	b.n	5c16 <scalbn+0x42>
    5c28:	001d      	movs	r5, r3
    5c2a:	3535      	adds	r5, #53	; 0x35
    5c2c:	da18      	bge.n	5c60 <scalbn+0x8c>
    5c2e:	4b17      	ldr	r3, [pc, #92]	; (5c8c <scalbn+0xb8>)
    5c30:	0002      	movs	r2, r0
    5c32:	429c      	cmp	r4, r3
    5c34:	dc0a      	bgt.n	5c4c <scalbn+0x78>
    5c36:	000b      	movs	r3, r1
    5c38:	4815      	ldr	r0, [pc, #84]	; (5c90 <scalbn+0xbc>)
    5c3a:	4916      	ldr	r1, [pc, #88]	; (5c94 <scalbn+0xc0>)
    5c3c:	f000 f832 	bl	5ca4 <copysign>
    5c40:	4a13      	ldr	r2, [pc, #76]	; (5c90 <scalbn+0xbc>)
    5c42:	4b14      	ldr	r3, [pc, #80]	; (5c94 <scalbn+0xc0>)
    5c44:	f001 f958 	bl	6ef8 <__aeabi_dmul>
    5c48:	e7e5      	b.n	5c16 <scalbn+0x42>
    5c4a:	0002      	movs	r2, r0
    5c4c:	000b      	movs	r3, r1
    5c4e:	4812      	ldr	r0, [pc, #72]	; (5c98 <scalbn+0xc4>)
    5c50:	4912      	ldr	r1, [pc, #72]	; (5c9c <scalbn+0xc8>)
    5c52:	f000 f827 	bl	5ca4 <copysign>
    5c56:	4a10      	ldr	r2, [pc, #64]	; (5c98 <scalbn+0xc4>)
    5c58:	4b10      	ldr	r3, [pc, #64]	; (5c9c <scalbn+0xc8>)
    5c5a:	f001 f94d 	bl	6ef8 <__aeabi_dmul>
    5c5e:	e7da      	b.n	5c16 <scalbn+0x42>
    5c60:	4c08      	ldr	r4, [pc, #32]	; (5c84 <scalbn+0xb0>)
    5c62:	3336      	adds	r3, #54	; 0x36
    5c64:	4022      	ands	r2, r4
    5c66:	051b      	lsls	r3, r3, #20
    5c68:	4313      	orrs	r3, r2
    5c6a:	0019      	movs	r1, r3
    5c6c:	2200      	movs	r2, #0
    5c6e:	4b0c      	ldr	r3, [pc, #48]	; (5ca0 <scalbn+0xcc>)
    5c70:	f001 f942 	bl	6ef8 <__aeabi_dmul>
    5c74:	e7cf      	b.n	5c16 <scalbn+0x42>
    5c76:	46c0      	nop			; (mov r8, r8)
    5c78:	43500000 	.word	0x43500000
    5c7c:	ffff3cb0 	.word	0xffff3cb0
    5c80:	000007fe 	.word	0x000007fe
    5c84:	800fffff 	.word	0x800fffff
    5c88:	000007ff 	.word	0x000007ff
    5c8c:	0000c350 	.word	0x0000c350
    5c90:	c2f8f359 	.word	0xc2f8f359
    5c94:	01a56e1f 	.word	0x01a56e1f
    5c98:	8800759c 	.word	0x8800759c
    5c9c:	7e37e43c 	.word	0x7e37e43c
    5ca0:	3c900000 	.word	0x3c900000

00005ca4 <copysign>:
    5ca4:	b530      	push	{r4, r5, lr}
    5ca6:	004a      	lsls	r2, r1, #1
    5ca8:	0fdb      	lsrs	r3, r3, #31
    5caa:	07db      	lsls	r3, r3, #31
    5cac:	0852      	lsrs	r2, r2, #1
    5cae:	431a      	orrs	r2, r3
    5cb0:	0011      	movs	r1, r2
    5cb2:	bd30      	pop	{r4, r5, pc}

00005cb4 <__aeabi_uidiv>:
    5cb4:	2200      	movs	r2, #0
    5cb6:	0843      	lsrs	r3, r0, #1
    5cb8:	428b      	cmp	r3, r1
    5cba:	d374      	bcc.n	5da6 <__aeabi_uidiv+0xf2>
    5cbc:	0903      	lsrs	r3, r0, #4
    5cbe:	428b      	cmp	r3, r1
    5cc0:	d35f      	bcc.n	5d82 <__aeabi_uidiv+0xce>
    5cc2:	0a03      	lsrs	r3, r0, #8
    5cc4:	428b      	cmp	r3, r1
    5cc6:	d344      	bcc.n	5d52 <__aeabi_uidiv+0x9e>
    5cc8:	0b03      	lsrs	r3, r0, #12
    5cca:	428b      	cmp	r3, r1
    5ccc:	d328      	bcc.n	5d20 <__aeabi_uidiv+0x6c>
    5cce:	0c03      	lsrs	r3, r0, #16
    5cd0:	428b      	cmp	r3, r1
    5cd2:	d30d      	bcc.n	5cf0 <__aeabi_uidiv+0x3c>
    5cd4:	22ff      	movs	r2, #255	; 0xff
    5cd6:	0209      	lsls	r1, r1, #8
    5cd8:	ba12      	rev	r2, r2
    5cda:	0c03      	lsrs	r3, r0, #16
    5cdc:	428b      	cmp	r3, r1
    5cde:	d302      	bcc.n	5ce6 <__aeabi_uidiv+0x32>
    5ce0:	1212      	asrs	r2, r2, #8
    5ce2:	0209      	lsls	r1, r1, #8
    5ce4:	d065      	beq.n	5db2 <__aeabi_uidiv+0xfe>
    5ce6:	0b03      	lsrs	r3, r0, #12
    5ce8:	428b      	cmp	r3, r1
    5cea:	d319      	bcc.n	5d20 <__aeabi_uidiv+0x6c>
    5cec:	e000      	b.n	5cf0 <__aeabi_uidiv+0x3c>
    5cee:	0a09      	lsrs	r1, r1, #8
    5cf0:	0bc3      	lsrs	r3, r0, #15
    5cf2:	428b      	cmp	r3, r1
    5cf4:	d301      	bcc.n	5cfa <__aeabi_uidiv+0x46>
    5cf6:	03cb      	lsls	r3, r1, #15
    5cf8:	1ac0      	subs	r0, r0, r3
    5cfa:	4152      	adcs	r2, r2
    5cfc:	0b83      	lsrs	r3, r0, #14
    5cfe:	428b      	cmp	r3, r1
    5d00:	d301      	bcc.n	5d06 <__aeabi_uidiv+0x52>
    5d02:	038b      	lsls	r3, r1, #14
    5d04:	1ac0      	subs	r0, r0, r3
    5d06:	4152      	adcs	r2, r2
    5d08:	0b43      	lsrs	r3, r0, #13
    5d0a:	428b      	cmp	r3, r1
    5d0c:	d301      	bcc.n	5d12 <__aeabi_uidiv+0x5e>
    5d0e:	034b      	lsls	r3, r1, #13
    5d10:	1ac0      	subs	r0, r0, r3
    5d12:	4152      	adcs	r2, r2
    5d14:	0b03      	lsrs	r3, r0, #12
    5d16:	428b      	cmp	r3, r1
    5d18:	d301      	bcc.n	5d1e <__aeabi_uidiv+0x6a>
    5d1a:	030b      	lsls	r3, r1, #12
    5d1c:	1ac0      	subs	r0, r0, r3
    5d1e:	4152      	adcs	r2, r2
    5d20:	0ac3      	lsrs	r3, r0, #11
    5d22:	428b      	cmp	r3, r1
    5d24:	d301      	bcc.n	5d2a <__aeabi_uidiv+0x76>
    5d26:	02cb      	lsls	r3, r1, #11
    5d28:	1ac0      	subs	r0, r0, r3
    5d2a:	4152      	adcs	r2, r2
    5d2c:	0a83      	lsrs	r3, r0, #10
    5d2e:	428b      	cmp	r3, r1
    5d30:	d301      	bcc.n	5d36 <__aeabi_uidiv+0x82>
    5d32:	028b      	lsls	r3, r1, #10
    5d34:	1ac0      	subs	r0, r0, r3
    5d36:	4152      	adcs	r2, r2
    5d38:	0a43      	lsrs	r3, r0, #9
    5d3a:	428b      	cmp	r3, r1
    5d3c:	d301      	bcc.n	5d42 <__aeabi_uidiv+0x8e>
    5d3e:	024b      	lsls	r3, r1, #9
    5d40:	1ac0      	subs	r0, r0, r3
    5d42:	4152      	adcs	r2, r2
    5d44:	0a03      	lsrs	r3, r0, #8
    5d46:	428b      	cmp	r3, r1
    5d48:	d301      	bcc.n	5d4e <__aeabi_uidiv+0x9a>
    5d4a:	020b      	lsls	r3, r1, #8
    5d4c:	1ac0      	subs	r0, r0, r3
    5d4e:	4152      	adcs	r2, r2
    5d50:	d2cd      	bcs.n	5cee <__aeabi_uidiv+0x3a>
    5d52:	09c3      	lsrs	r3, r0, #7
    5d54:	428b      	cmp	r3, r1
    5d56:	d301      	bcc.n	5d5c <__aeabi_uidiv+0xa8>
    5d58:	01cb      	lsls	r3, r1, #7
    5d5a:	1ac0      	subs	r0, r0, r3
    5d5c:	4152      	adcs	r2, r2
    5d5e:	0983      	lsrs	r3, r0, #6
    5d60:	428b      	cmp	r3, r1
    5d62:	d301      	bcc.n	5d68 <__aeabi_uidiv+0xb4>
    5d64:	018b      	lsls	r3, r1, #6
    5d66:	1ac0      	subs	r0, r0, r3
    5d68:	4152      	adcs	r2, r2
    5d6a:	0943      	lsrs	r3, r0, #5
    5d6c:	428b      	cmp	r3, r1
    5d6e:	d301      	bcc.n	5d74 <__aeabi_uidiv+0xc0>
    5d70:	014b      	lsls	r3, r1, #5
    5d72:	1ac0      	subs	r0, r0, r3
    5d74:	4152      	adcs	r2, r2
    5d76:	0903      	lsrs	r3, r0, #4
    5d78:	428b      	cmp	r3, r1
    5d7a:	d301      	bcc.n	5d80 <__aeabi_uidiv+0xcc>
    5d7c:	010b      	lsls	r3, r1, #4
    5d7e:	1ac0      	subs	r0, r0, r3
    5d80:	4152      	adcs	r2, r2
    5d82:	08c3      	lsrs	r3, r0, #3
    5d84:	428b      	cmp	r3, r1
    5d86:	d301      	bcc.n	5d8c <__aeabi_uidiv+0xd8>
    5d88:	00cb      	lsls	r3, r1, #3
    5d8a:	1ac0      	subs	r0, r0, r3
    5d8c:	4152      	adcs	r2, r2
    5d8e:	0883      	lsrs	r3, r0, #2
    5d90:	428b      	cmp	r3, r1
    5d92:	d301      	bcc.n	5d98 <__aeabi_uidiv+0xe4>
    5d94:	008b      	lsls	r3, r1, #2
    5d96:	1ac0      	subs	r0, r0, r3
    5d98:	4152      	adcs	r2, r2
    5d9a:	0843      	lsrs	r3, r0, #1
    5d9c:	428b      	cmp	r3, r1
    5d9e:	d301      	bcc.n	5da4 <__aeabi_uidiv+0xf0>
    5da0:	004b      	lsls	r3, r1, #1
    5da2:	1ac0      	subs	r0, r0, r3
    5da4:	4152      	adcs	r2, r2
    5da6:	1a41      	subs	r1, r0, r1
    5da8:	d200      	bcs.n	5dac <__aeabi_uidiv+0xf8>
    5daa:	4601      	mov	r1, r0
    5dac:	4152      	adcs	r2, r2
    5dae:	4610      	mov	r0, r2
    5db0:	4770      	bx	lr
    5db2:	e7ff      	b.n	5db4 <__aeabi_uidiv+0x100>
    5db4:	b501      	push	{r0, lr}
    5db6:	2000      	movs	r0, #0
    5db8:	f000 f8f0 	bl	5f9c <__aeabi_idiv0>
    5dbc:	bd02      	pop	{r1, pc}
    5dbe:	46c0      	nop			; (mov r8, r8)

00005dc0 <__aeabi_uidivmod>:
    5dc0:	2900      	cmp	r1, #0
    5dc2:	d0f7      	beq.n	5db4 <__aeabi_uidiv+0x100>
    5dc4:	e776      	b.n	5cb4 <__aeabi_uidiv>
    5dc6:	4770      	bx	lr

00005dc8 <__aeabi_idiv>:
    5dc8:	4603      	mov	r3, r0
    5dca:	430b      	orrs	r3, r1
    5dcc:	d47f      	bmi.n	5ece <__aeabi_idiv+0x106>
    5dce:	2200      	movs	r2, #0
    5dd0:	0843      	lsrs	r3, r0, #1
    5dd2:	428b      	cmp	r3, r1
    5dd4:	d374      	bcc.n	5ec0 <__aeabi_idiv+0xf8>
    5dd6:	0903      	lsrs	r3, r0, #4
    5dd8:	428b      	cmp	r3, r1
    5dda:	d35f      	bcc.n	5e9c <__aeabi_idiv+0xd4>
    5ddc:	0a03      	lsrs	r3, r0, #8
    5dde:	428b      	cmp	r3, r1
    5de0:	d344      	bcc.n	5e6c <__aeabi_idiv+0xa4>
    5de2:	0b03      	lsrs	r3, r0, #12
    5de4:	428b      	cmp	r3, r1
    5de6:	d328      	bcc.n	5e3a <__aeabi_idiv+0x72>
    5de8:	0c03      	lsrs	r3, r0, #16
    5dea:	428b      	cmp	r3, r1
    5dec:	d30d      	bcc.n	5e0a <__aeabi_idiv+0x42>
    5dee:	22ff      	movs	r2, #255	; 0xff
    5df0:	0209      	lsls	r1, r1, #8
    5df2:	ba12      	rev	r2, r2
    5df4:	0c03      	lsrs	r3, r0, #16
    5df6:	428b      	cmp	r3, r1
    5df8:	d302      	bcc.n	5e00 <__aeabi_idiv+0x38>
    5dfa:	1212      	asrs	r2, r2, #8
    5dfc:	0209      	lsls	r1, r1, #8
    5dfe:	d065      	beq.n	5ecc <__aeabi_idiv+0x104>
    5e00:	0b03      	lsrs	r3, r0, #12
    5e02:	428b      	cmp	r3, r1
    5e04:	d319      	bcc.n	5e3a <__aeabi_idiv+0x72>
    5e06:	e000      	b.n	5e0a <__aeabi_idiv+0x42>
    5e08:	0a09      	lsrs	r1, r1, #8
    5e0a:	0bc3      	lsrs	r3, r0, #15
    5e0c:	428b      	cmp	r3, r1
    5e0e:	d301      	bcc.n	5e14 <__aeabi_idiv+0x4c>
    5e10:	03cb      	lsls	r3, r1, #15
    5e12:	1ac0      	subs	r0, r0, r3
    5e14:	4152      	adcs	r2, r2
    5e16:	0b83      	lsrs	r3, r0, #14
    5e18:	428b      	cmp	r3, r1
    5e1a:	d301      	bcc.n	5e20 <__aeabi_idiv+0x58>
    5e1c:	038b      	lsls	r3, r1, #14
    5e1e:	1ac0      	subs	r0, r0, r3
    5e20:	4152      	adcs	r2, r2
    5e22:	0b43      	lsrs	r3, r0, #13
    5e24:	428b      	cmp	r3, r1
    5e26:	d301      	bcc.n	5e2c <__aeabi_idiv+0x64>
    5e28:	034b      	lsls	r3, r1, #13
    5e2a:	1ac0      	subs	r0, r0, r3
    5e2c:	4152      	adcs	r2, r2
    5e2e:	0b03      	lsrs	r3, r0, #12
    5e30:	428b      	cmp	r3, r1
    5e32:	d301      	bcc.n	5e38 <__aeabi_idiv+0x70>
    5e34:	030b      	lsls	r3, r1, #12
    5e36:	1ac0      	subs	r0, r0, r3
    5e38:	4152      	adcs	r2, r2
    5e3a:	0ac3      	lsrs	r3, r0, #11
    5e3c:	428b      	cmp	r3, r1
    5e3e:	d301      	bcc.n	5e44 <__aeabi_idiv+0x7c>
    5e40:	02cb      	lsls	r3, r1, #11
    5e42:	1ac0      	subs	r0, r0, r3
    5e44:	4152      	adcs	r2, r2
    5e46:	0a83      	lsrs	r3, r0, #10
    5e48:	428b      	cmp	r3, r1
    5e4a:	d301      	bcc.n	5e50 <__aeabi_idiv+0x88>
    5e4c:	028b      	lsls	r3, r1, #10
    5e4e:	1ac0      	subs	r0, r0, r3
    5e50:	4152      	adcs	r2, r2
    5e52:	0a43      	lsrs	r3, r0, #9
    5e54:	428b      	cmp	r3, r1
    5e56:	d301      	bcc.n	5e5c <__aeabi_idiv+0x94>
    5e58:	024b      	lsls	r3, r1, #9
    5e5a:	1ac0      	subs	r0, r0, r3
    5e5c:	4152      	adcs	r2, r2
    5e5e:	0a03      	lsrs	r3, r0, #8
    5e60:	428b      	cmp	r3, r1
    5e62:	d301      	bcc.n	5e68 <__aeabi_idiv+0xa0>
    5e64:	020b      	lsls	r3, r1, #8
    5e66:	1ac0      	subs	r0, r0, r3
    5e68:	4152      	adcs	r2, r2
    5e6a:	d2cd      	bcs.n	5e08 <__aeabi_idiv+0x40>
    5e6c:	09c3      	lsrs	r3, r0, #7
    5e6e:	428b      	cmp	r3, r1
    5e70:	d301      	bcc.n	5e76 <__aeabi_idiv+0xae>
    5e72:	01cb      	lsls	r3, r1, #7
    5e74:	1ac0      	subs	r0, r0, r3
    5e76:	4152      	adcs	r2, r2
    5e78:	0983      	lsrs	r3, r0, #6
    5e7a:	428b      	cmp	r3, r1
    5e7c:	d301      	bcc.n	5e82 <__aeabi_idiv+0xba>
    5e7e:	018b      	lsls	r3, r1, #6
    5e80:	1ac0      	subs	r0, r0, r3
    5e82:	4152      	adcs	r2, r2
    5e84:	0943      	lsrs	r3, r0, #5
    5e86:	428b      	cmp	r3, r1
    5e88:	d301      	bcc.n	5e8e <__aeabi_idiv+0xc6>
    5e8a:	014b      	lsls	r3, r1, #5
    5e8c:	1ac0      	subs	r0, r0, r3
    5e8e:	4152      	adcs	r2, r2
    5e90:	0903      	lsrs	r3, r0, #4
    5e92:	428b      	cmp	r3, r1
    5e94:	d301      	bcc.n	5e9a <__aeabi_idiv+0xd2>
    5e96:	010b      	lsls	r3, r1, #4
    5e98:	1ac0      	subs	r0, r0, r3
    5e9a:	4152      	adcs	r2, r2
    5e9c:	08c3      	lsrs	r3, r0, #3
    5e9e:	428b      	cmp	r3, r1
    5ea0:	d301      	bcc.n	5ea6 <__aeabi_idiv+0xde>
    5ea2:	00cb      	lsls	r3, r1, #3
    5ea4:	1ac0      	subs	r0, r0, r3
    5ea6:	4152      	adcs	r2, r2
    5ea8:	0883      	lsrs	r3, r0, #2
    5eaa:	428b      	cmp	r3, r1
    5eac:	d301      	bcc.n	5eb2 <__aeabi_idiv+0xea>
    5eae:	008b      	lsls	r3, r1, #2
    5eb0:	1ac0      	subs	r0, r0, r3
    5eb2:	4152      	adcs	r2, r2
    5eb4:	0843      	lsrs	r3, r0, #1
    5eb6:	428b      	cmp	r3, r1
    5eb8:	d301      	bcc.n	5ebe <__aeabi_idiv+0xf6>
    5eba:	004b      	lsls	r3, r1, #1
    5ebc:	1ac0      	subs	r0, r0, r3
    5ebe:	4152      	adcs	r2, r2
    5ec0:	1a41      	subs	r1, r0, r1
    5ec2:	d200      	bcs.n	5ec6 <__aeabi_idiv+0xfe>
    5ec4:	4601      	mov	r1, r0
    5ec6:	4152      	adcs	r2, r2
    5ec8:	4610      	mov	r0, r2
    5eca:	4770      	bx	lr
    5ecc:	e05d      	b.n	5f8a <__aeabi_idiv+0x1c2>
    5ece:	0fca      	lsrs	r2, r1, #31
    5ed0:	d000      	beq.n	5ed4 <__aeabi_idiv+0x10c>
    5ed2:	4249      	negs	r1, r1
    5ed4:	1003      	asrs	r3, r0, #32
    5ed6:	d300      	bcc.n	5eda <__aeabi_idiv+0x112>
    5ed8:	4240      	negs	r0, r0
    5eda:	4053      	eors	r3, r2
    5edc:	2200      	movs	r2, #0
    5ede:	469c      	mov	ip, r3
    5ee0:	0903      	lsrs	r3, r0, #4
    5ee2:	428b      	cmp	r3, r1
    5ee4:	d32d      	bcc.n	5f42 <__aeabi_idiv+0x17a>
    5ee6:	0a03      	lsrs	r3, r0, #8
    5ee8:	428b      	cmp	r3, r1
    5eea:	d312      	bcc.n	5f12 <__aeabi_idiv+0x14a>
    5eec:	22fc      	movs	r2, #252	; 0xfc
    5eee:	0189      	lsls	r1, r1, #6
    5ef0:	ba12      	rev	r2, r2
    5ef2:	0a03      	lsrs	r3, r0, #8
    5ef4:	428b      	cmp	r3, r1
    5ef6:	d30c      	bcc.n	5f12 <__aeabi_idiv+0x14a>
    5ef8:	0189      	lsls	r1, r1, #6
    5efa:	1192      	asrs	r2, r2, #6
    5efc:	428b      	cmp	r3, r1
    5efe:	d308      	bcc.n	5f12 <__aeabi_idiv+0x14a>
    5f00:	0189      	lsls	r1, r1, #6
    5f02:	1192      	asrs	r2, r2, #6
    5f04:	428b      	cmp	r3, r1
    5f06:	d304      	bcc.n	5f12 <__aeabi_idiv+0x14a>
    5f08:	0189      	lsls	r1, r1, #6
    5f0a:	d03a      	beq.n	5f82 <__aeabi_idiv+0x1ba>
    5f0c:	1192      	asrs	r2, r2, #6
    5f0e:	e000      	b.n	5f12 <__aeabi_idiv+0x14a>
    5f10:	0989      	lsrs	r1, r1, #6
    5f12:	09c3      	lsrs	r3, r0, #7
    5f14:	428b      	cmp	r3, r1
    5f16:	d301      	bcc.n	5f1c <__aeabi_idiv+0x154>
    5f18:	01cb      	lsls	r3, r1, #7
    5f1a:	1ac0      	subs	r0, r0, r3
    5f1c:	4152      	adcs	r2, r2
    5f1e:	0983      	lsrs	r3, r0, #6
    5f20:	428b      	cmp	r3, r1
    5f22:	d301      	bcc.n	5f28 <__aeabi_idiv+0x160>
    5f24:	018b      	lsls	r3, r1, #6
    5f26:	1ac0      	subs	r0, r0, r3
    5f28:	4152      	adcs	r2, r2
    5f2a:	0943      	lsrs	r3, r0, #5
    5f2c:	428b      	cmp	r3, r1
    5f2e:	d301      	bcc.n	5f34 <__aeabi_idiv+0x16c>
    5f30:	014b      	lsls	r3, r1, #5
    5f32:	1ac0      	subs	r0, r0, r3
    5f34:	4152      	adcs	r2, r2
    5f36:	0903      	lsrs	r3, r0, #4
    5f38:	428b      	cmp	r3, r1
    5f3a:	d301      	bcc.n	5f40 <__aeabi_idiv+0x178>
    5f3c:	010b      	lsls	r3, r1, #4
    5f3e:	1ac0      	subs	r0, r0, r3
    5f40:	4152      	adcs	r2, r2
    5f42:	08c3      	lsrs	r3, r0, #3
    5f44:	428b      	cmp	r3, r1
    5f46:	d301      	bcc.n	5f4c <__aeabi_idiv+0x184>
    5f48:	00cb      	lsls	r3, r1, #3
    5f4a:	1ac0      	subs	r0, r0, r3
    5f4c:	4152      	adcs	r2, r2
    5f4e:	0883      	lsrs	r3, r0, #2
    5f50:	428b      	cmp	r3, r1
    5f52:	d301      	bcc.n	5f58 <__aeabi_idiv+0x190>
    5f54:	008b      	lsls	r3, r1, #2
    5f56:	1ac0      	subs	r0, r0, r3
    5f58:	4152      	adcs	r2, r2
    5f5a:	d2d9      	bcs.n	5f10 <__aeabi_idiv+0x148>
    5f5c:	0843      	lsrs	r3, r0, #1
    5f5e:	428b      	cmp	r3, r1
    5f60:	d301      	bcc.n	5f66 <__aeabi_idiv+0x19e>
    5f62:	004b      	lsls	r3, r1, #1
    5f64:	1ac0      	subs	r0, r0, r3
    5f66:	4152      	adcs	r2, r2
    5f68:	1a41      	subs	r1, r0, r1
    5f6a:	d200      	bcs.n	5f6e <__aeabi_idiv+0x1a6>
    5f6c:	4601      	mov	r1, r0
    5f6e:	4663      	mov	r3, ip
    5f70:	4152      	adcs	r2, r2
    5f72:	105b      	asrs	r3, r3, #1
    5f74:	4610      	mov	r0, r2
    5f76:	d301      	bcc.n	5f7c <__aeabi_idiv+0x1b4>
    5f78:	4240      	negs	r0, r0
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d500      	bpl.n	5f80 <__aeabi_idiv+0x1b8>
    5f7e:	4249      	negs	r1, r1
    5f80:	4770      	bx	lr
    5f82:	4663      	mov	r3, ip
    5f84:	105b      	asrs	r3, r3, #1
    5f86:	d300      	bcc.n	5f8a <__aeabi_idiv+0x1c2>
    5f88:	4240      	negs	r0, r0
    5f8a:	b501      	push	{r0, lr}
    5f8c:	2000      	movs	r0, #0
    5f8e:	f000 f805 	bl	5f9c <__aeabi_idiv0>
    5f92:	bd02      	pop	{r1, pc}

00005f94 <__aeabi_idivmod>:
    5f94:	2900      	cmp	r1, #0
    5f96:	d0f8      	beq.n	5f8a <__aeabi_idiv+0x1c2>
    5f98:	e716      	b.n	5dc8 <__aeabi_idiv>
    5f9a:	4770      	bx	lr

00005f9c <__aeabi_idiv0>:
    5f9c:	4770      	bx	lr
    5f9e:	46c0      	nop			; (mov r8, r8)

00005fa0 <__aeabi_cdrcmple>:
    5fa0:	4684      	mov	ip, r0
    5fa2:	1c10      	adds	r0, r2, #0
    5fa4:	4662      	mov	r2, ip
    5fa6:	468c      	mov	ip, r1
    5fa8:	1c19      	adds	r1, r3, #0
    5faa:	4663      	mov	r3, ip
    5fac:	e000      	b.n	5fb0 <__aeabi_cdcmpeq>
    5fae:	46c0      	nop			; (mov r8, r8)

00005fb0 <__aeabi_cdcmpeq>:
    5fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5fb2:	f000 ff37 	bl	6e24 <__ledf2>
    5fb6:	2800      	cmp	r0, #0
    5fb8:	d401      	bmi.n	5fbe <__aeabi_cdcmpeq+0xe>
    5fba:	2100      	movs	r1, #0
    5fbc:	42c8      	cmn	r0, r1
    5fbe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005fc0 <__aeabi_dcmpeq>:
    5fc0:	b510      	push	{r4, lr}
    5fc2:	f000 fe8b 	bl	6cdc <__eqdf2>
    5fc6:	4240      	negs	r0, r0
    5fc8:	3001      	adds	r0, #1
    5fca:	bd10      	pop	{r4, pc}

00005fcc <__aeabi_dcmplt>:
    5fcc:	b510      	push	{r4, lr}
    5fce:	f000 ff29 	bl	6e24 <__ledf2>
    5fd2:	2800      	cmp	r0, #0
    5fd4:	db01      	blt.n	5fda <__aeabi_dcmplt+0xe>
    5fd6:	2000      	movs	r0, #0
    5fd8:	bd10      	pop	{r4, pc}
    5fda:	2001      	movs	r0, #1
    5fdc:	bd10      	pop	{r4, pc}
    5fde:	46c0      	nop			; (mov r8, r8)

00005fe0 <__aeabi_dcmple>:
    5fe0:	b510      	push	{r4, lr}
    5fe2:	f000 ff1f 	bl	6e24 <__ledf2>
    5fe6:	2800      	cmp	r0, #0
    5fe8:	dd01      	ble.n	5fee <__aeabi_dcmple+0xe>
    5fea:	2000      	movs	r0, #0
    5fec:	bd10      	pop	{r4, pc}
    5fee:	2001      	movs	r0, #1
    5ff0:	bd10      	pop	{r4, pc}
    5ff2:	46c0      	nop			; (mov r8, r8)

00005ff4 <__aeabi_dcmpgt>:
    5ff4:	b510      	push	{r4, lr}
    5ff6:	f000 feb1 	bl	6d5c <__gedf2>
    5ffa:	2800      	cmp	r0, #0
    5ffc:	dc01      	bgt.n	6002 <__aeabi_dcmpgt+0xe>
    5ffe:	2000      	movs	r0, #0
    6000:	bd10      	pop	{r4, pc}
    6002:	2001      	movs	r0, #1
    6004:	bd10      	pop	{r4, pc}
    6006:	46c0      	nop			; (mov r8, r8)

00006008 <__aeabi_dcmpge>:
    6008:	b510      	push	{r4, lr}
    600a:	f000 fea7 	bl	6d5c <__gedf2>
    600e:	2800      	cmp	r0, #0
    6010:	da01      	bge.n	6016 <__aeabi_dcmpge+0xe>
    6012:	2000      	movs	r0, #0
    6014:	bd10      	pop	{r4, pc}
    6016:	2001      	movs	r0, #1
    6018:	bd10      	pop	{r4, pc}
    601a:	46c0      	nop			; (mov r8, r8)

0000601c <__aeabi_d2uiz>:
    601c:	b570      	push	{r4, r5, r6, lr}
    601e:	2200      	movs	r2, #0
    6020:	4b0c      	ldr	r3, [pc, #48]	; (6054 <__aeabi_d2uiz+0x38>)
    6022:	0004      	movs	r4, r0
    6024:	000d      	movs	r5, r1
    6026:	f7ff ffef 	bl	6008 <__aeabi_dcmpge>
    602a:	2800      	cmp	r0, #0
    602c:	d104      	bne.n	6038 <__aeabi_d2uiz+0x1c>
    602e:	0020      	movs	r0, r4
    6030:	0029      	movs	r1, r5
    6032:	f001 fd4f 	bl	7ad4 <__aeabi_d2iz>
    6036:	bd70      	pop	{r4, r5, r6, pc}
    6038:	4b06      	ldr	r3, [pc, #24]	; (6054 <__aeabi_d2uiz+0x38>)
    603a:	2200      	movs	r2, #0
    603c:	0020      	movs	r0, r4
    603e:	0029      	movs	r1, r5
    6040:	f001 f9d4 	bl	73ec <__aeabi_dsub>
    6044:	f001 fd46 	bl	7ad4 <__aeabi_d2iz>
    6048:	2380      	movs	r3, #128	; 0x80
    604a:	061b      	lsls	r3, r3, #24
    604c:	469c      	mov	ip, r3
    604e:	4460      	add	r0, ip
    6050:	e7f1      	b.n	6036 <__aeabi_d2uiz+0x1a>
    6052:	46c0      	nop			; (mov r8, r8)
    6054:	41e00000 	.word	0x41e00000

00006058 <__aeabi_dadd>:
    6058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    605a:	4656      	mov	r6, sl
    605c:	465f      	mov	r7, fp
    605e:	464d      	mov	r5, r9
    6060:	4644      	mov	r4, r8
    6062:	b4f0      	push	{r4, r5, r6, r7}
    6064:	000f      	movs	r7, r1
    6066:	0ffd      	lsrs	r5, r7, #31
    6068:	46aa      	mov	sl, r5
    606a:	0309      	lsls	r1, r1, #12
    606c:	007c      	lsls	r4, r7, #1
    606e:	002e      	movs	r6, r5
    6070:	005f      	lsls	r7, r3, #1
    6072:	0f45      	lsrs	r5, r0, #29
    6074:	0a49      	lsrs	r1, r1, #9
    6076:	0d7f      	lsrs	r7, r7, #21
    6078:	4329      	orrs	r1, r5
    607a:	00c5      	lsls	r5, r0, #3
    607c:	0318      	lsls	r0, r3, #12
    607e:	46bc      	mov	ip, r7
    6080:	0a40      	lsrs	r0, r0, #9
    6082:	0f57      	lsrs	r7, r2, #29
    6084:	0d64      	lsrs	r4, r4, #21
    6086:	0fdb      	lsrs	r3, r3, #31
    6088:	4338      	orrs	r0, r7
    608a:	00d2      	lsls	r2, r2, #3
    608c:	459a      	cmp	sl, r3
    608e:	d100      	bne.n	6092 <__aeabi_dadd+0x3a>
    6090:	e0aa      	b.n	61e8 <__aeabi_dadd+0x190>
    6092:	4666      	mov	r6, ip
    6094:	1ba6      	subs	r6, r4, r6
    6096:	2e00      	cmp	r6, #0
    6098:	dc00      	bgt.n	609c <__aeabi_dadd+0x44>
    609a:	e0ff      	b.n	629c <__aeabi_dadd+0x244>
    609c:	4663      	mov	r3, ip
    609e:	2b00      	cmp	r3, #0
    60a0:	d139      	bne.n	6116 <__aeabi_dadd+0xbe>
    60a2:	0003      	movs	r3, r0
    60a4:	4313      	orrs	r3, r2
    60a6:	d000      	beq.n	60aa <__aeabi_dadd+0x52>
    60a8:	e0d9      	b.n	625e <__aeabi_dadd+0x206>
    60aa:	076b      	lsls	r3, r5, #29
    60ac:	d009      	beq.n	60c2 <__aeabi_dadd+0x6a>
    60ae:	230f      	movs	r3, #15
    60b0:	402b      	ands	r3, r5
    60b2:	2b04      	cmp	r3, #4
    60b4:	d005      	beq.n	60c2 <__aeabi_dadd+0x6a>
    60b6:	1d2b      	adds	r3, r5, #4
    60b8:	42ab      	cmp	r3, r5
    60ba:	41ad      	sbcs	r5, r5
    60bc:	426d      	negs	r5, r5
    60be:	1949      	adds	r1, r1, r5
    60c0:	001d      	movs	r5, r3
    60c2:	020b      	lsls	r3, r1, #8
    60c4:	d400      	bmi.n	60c8 <__aeabi_dadd+0x70>
    60c6:	e082      	b.n	61ce <__aeabi_dadd+0x176>
    60c8:	4bca      	ldr	r3, [pc, #808]	; (63f4 <__aeabi_dadd+0x39c>)
    60ca:	3401      	adds	r4, #1
    60cc:	429c      	cmp	r4, r3
    60ce:	d100      	bne.n	60d2 <__aeabi_dadd+0x7a>
    60d0:	e0fe      	b.n	62d0 <__aeabi_dadd+0x278>
    60d2:	000a      	movs	r2, r1
    60d4:	4656      	mov	r6, sl
    60d6:	4bc8      	ldr	r3, [pc, #800]	; (63f8 <__aeabi_dadd+0x3a0>)
    60d8:	08ed      	lsrs	r5, r5, #3
    60da:	401a      	ands	r2, r3
    60dc:	0750      	lsls	r0, r2, #29
    60de:	0564      	lsls	r4, r4, #21
    60e0:	0252      	lsls	r2, r2, #9
    60e2:	4305      	orrs	r5, r0
    60e4:	0b12      	lsrs	r2, r2, #12
    60e6:	0d64      	lsrs	r4, r4, #21
    60e8:	2100      	movs	r1, #0
    60ea:	0312      	lsls	r2, r2, #12
    60ec:	0d0b      	lsrs	r3, r1, #20
    60ee:	051b      	lsls	r3, r3, #20
    60f0:	0564      	lsls	r4, r4, #21
    60f2:	0b12      	lsrs	r2, r2, #12
    60f4:	431a      	orrs	r2, r3
    60f6:	0863      	lsrs	r3, r4, #1
    60f8:	4cc0      	ldr	r4, [pc, #768]	; (63fc <__aeabi_dadd+0x3a4>)
    60fa:	07f6      	lsls	r6, r6, #31
    60fc:	4014      	ands	r4, r2
    60fe:	431c      	orrs	r4, r3
    6100:	0064      	lsls	r4, r4, #1
    6102:	0864      	lsrs	r4, r4, #1
    6104:	4334      	orrs	r4, r6
    6106:	0028      	movs	r0, r5
    6108:	0021      	movs	r1, r4
    610a:	bc3c      	pop	{r2, r3, r4, r5}
    610c:	4690      	mov	r8, r2
    610e:	4699      	mov	r9, r3
    6110:	46a2      	mov	sl, r4
    6112:	46ab      	mov	fp, r5
    6114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6116:	4bb7      	ldr	r3, [pc, #732]	; (63f4 <__aeabi_dadd+0x39c>)
    6118:	429c      	cmp	r4, r3
    611a:	d0c6      	beq.n	60aa <__aeabi_dadd+0x52>
    611c:	2380      	movs	r3, #128	; 0x80
    611e:	041b      	lsls	r3, r3, #16
    6120:	4318      	orrs	r0, r3
    6122:	2e38      	cmp	r6, #56	; 0x38
    6124:	dd00      	ble.n	6128 <__aeabi_dadd+0xd0>
    6126:	e0eb      	b.n	6300 <__aeabi_dadd+0x2a8>
    6128:	2e1f      	cmp	r6, #31
    612a:	dd00      	ble.n	612e <__aeabi_dadd+0xd6>
    612c:	e11e      	b.n	636c <__aeabi_dadd+0x314>
    612e:	2320      	movs	r3, #32
    6130:	1b9b      	subs	r3, r3, r6
    6132:	469c      	mov	ip, r3
    6134:	0003      	movs	r3, r0
    6136:	4667      	mov	r7, ip
    6138:	40bb      	lsls	r3, r7
    613a:	4698      	mov	r8, r3
    613c:	0013      	movs	r3, r2
    613e:	4647      	mov	r7, r8
    6140:	40f3      	lsrs	r3, r6
    6142:	433b      	orrs	r3, r7
    6144:	4667      	mov	r7, ip
    6146:	40ba      	lsls	r2, r7
    6148:	1e57      	subs	r7, r2, #1
    614a:	41ba      	sbcs	r2, r7
    614c:	4313      	orrs	r3, r2
    614e:	0002      	movs	r2, r0
    6150:	40f2      	lsrs	r2, r6
    6152:	1aeb      	subs	r3, r5, r3
    6154:	429d      	cmp	r5, r3
    6156:	41b6      	sbcs	r6, r6
    6158:	001d      	movs	r5, r3
    615a:	1a8a      	subs	r2, r1, r2
    615c:	4276      	negs	r6, r6
    615e:	1b91      	subs	r1, r2, r6
    6160:	020b      	lsls	r3, r1, #8
    6162:	d531      	bpl.n	61c8 <__aeabi_dadd+0x170>
    6164:	024a      	lsls	r2, r1, #9
    6166:	0a56      	lsrs	r6, r2, #9
    6168:	2e00      	cmp	r6, #0
    616a:	d100      	bne.n	616e <__aeabi_dadd+0x116>
    616c:	e0b4      	b.n	62d8 <__aeabi_dadd+0x280>
    616e:	0030      	movs	r0, r6
    6170:	f001 fd60 	bl	7c34 <__clzsi2>
    6174:	0003      	movs	r3, r0
    6176:	3b08      	subs	r3, #8
    6178:	2b1f      	cmp	r3, #31
    617a:	dd00      	ble.n	617e <__aeabi_dadd+0x126>
    617c:	e0b5      	b.n	62ea <__aeabi_dadd+0x292>
    617e:	2220      	movs	r2, #32
    6180:	0029      	movs	r1, r5
    6182:	1ad2      	subs	r2, r2, r3
    6184:	40d1      	lsrs	r1, r2
    6186:	409e      	lsls	r6, r3
    6188:	000a      	movs	r2, r1
    618a:	409d      	lsls	r5, r3
    618c:	4332      	orrs	r2, r6
    618e:	429c      	cmp	r4, r3
    6190:	dd00      	ble.n	6194 <__aeabi_dadd+0x13c>
    6192:	e0b1      	b.n	62f8 <__aeabi_dadd+0x2a0>
    6194:	1b1c      	subs	r4, r3, r4
    6196:	1c63      	adds	r3, r4, #1
    6198:	2b1f      	cmp	r3, #31
    619a:	dd00      	ble.n	619e <__aeabi_dadd+0x146>
    619c:	e0d5      	b.n	634a <__aeabi_dadd+0x2f2>
    619e:	2120      	movs	r1, #32
    61a0:	0014      	movs	r4, r2
    61a2:	0028      	movs	r0, r5
    61a4:	1ac9      	subs	r1, r1, r3
    61a6:	408c      	lsls	r4, r1
    61a8:	40d8      	lsrs	r0, r3
    61aa:	408d      	lsls	r5, r1
    61ac:	4304      	orrs	r4, r0
    61ae:	40da      	lsrs	r2, r3
    61b0:	1e68      	subs	r0, r5, #1
    61b2:	4185      	sbcs	r5, r0
    61b4:	0011      	movs	r1, r2
    61b6:	4325      	orrs	r5, r4
    61b8:	2400      	movs	r4, #0
    61ba:	e776      	b.n	60aa <__aeabi_dadd+0x52>
    61bc:	4641      	mov	r1, r8
    61be:	4331      	orrs	r1, r6
    61c0:	d100      	bne.n	61c4 <__aeabi_dadd+0x16c>
    61c2:	e234      	b.n	662e <__aeabi_dadd+0x5d6>
    61c4:	0031      	movs	r1, r6
    61c6:	4645      	mov	r5, r8
    61c8:	076b      	lsls	r3, r5, #29
    61ca:	d000      	beq.n	61ce <__aeabi_dadd+0x176>
    61cc:	e76f      	b.n	60ae <__aeabi_dadd+0x56>
    61ce:	4656      	mov	r6, sl
    61d0:	0748      	lsls	r0, r1, #29
    61d2:	08ed      	lsrs	r5, r5, #3
    61d4:	08c9      	lsrs	r1, r1, #3
    61d6:	4305      	orrs	r5, r0
    61d8:	4b86      	ldr	r3, [pc, #536]	; (63f4 <__aeabi_dadd+0x39c>)
    61da:	429c      	cmp	r4, r3
    61dc:	d035      	beq.n	624a <__aeabi_dadd+0x1f2>
    61de:	030a      	lsls	r2, r1, #12
    61e0:	0564      	lsls	r4, r4, #21
    61e2:	0b12      	lsrs	r2, r2, #12
    61e4:	0d64      	lsrs	r4, r4, #21
    61e6:	e77f      	b.n	60e8 <__aeabi_dadd+0x90>
    61e8:	4663      	mov	r3, ip
    61ea:	1ae3      	subs	r3, r4, r3
    61ec:	469b      	mov	fp, r3
    61ee:	2b00      	cmp	r3, #0
    61f0:	dc00      	bgt.n	61f4 <__aeabi_dadd+0x19c>
    61f2:	e08b      	b.n	630c <__aeabi_dadd+0x2b4>
    61f4:	4667      	mov	r7, ip
    61f6:	2f00      	cmp	r7, #0
    61f8:	d03c      	beq.n	6274 <__aeabi_dadd+0x21c>
    61fa:	4f7e      	ldr	r7, [pc, #504]	; (63f4 <__aeabi_dadd+0x39c>)
    61fc:	42bc      	cmp	r4, r7
    61fe:	d100      	bne.n	6202 <__aeabi_dadd+0x1aa>
    6200:	e753      	b.n	60aa <__aeabi_dadd+0x52>
    6202:	2780      	movs	r7, #128	; 0x80
    6204:	043f      	lsls	r7, r7, #16
    6206:	4338      	orrs	r0, r7
    6208:	465b      	mov	r3, fp
    620a:	2b38      	cmp	r3, #56	; 0x38
    620c:	dc00      	bgt.n	6210 <__aeabi_dadd+0x1b8>
    620e:	e0f7      	b.n	6400 <__aeabi_dadd+0x3a8>
    6210:	4302      	orrs	r2, r0
    6212:	1e50      	subs	r0, r2, #1
    6214:	4182      	sbcs	r2, r0
    6216:	2000      	movs	r0, #0
    6218:	b2d2      	uxtb	r2, r2
    621a:	1953      	adds	r3, r2, r5
    621c:	1842      	adds	r2, r0, r1
    621e:	42ab      	cmp	r3, r5
    6220:	4189      	sbcs	r1, r1
    6222:	001d      	movs	r5, r3
    6224:	4249      	negs	r1, r1
    6226:	1889      	adds	r1, r1, r2
    6228:	020b      	lsls	r3, r1, #8
    622a:	d5cd      	bpl.n	61c8 <__aeabi_dadd+0x170>
    622c:	4b71      	ldr	r3, [pc, #452]	; (63f4 <__aeabi_dadd+0x39c>)
    622e:	3401      	adds	r4, #1
    6230:	429c      	cmp	r4, r3
    6232:	d100      	bne.n	6236 <__aeabi_dadd+0x1de>
    6234:	e13d      	b.n	64b2 <__aeabi_dadd+0x45a>
    6236:	2001      	movs	r0, #1
    6238:	4a6f      	ldr	r2, [pc, #444]	; (63f8 <__aeabi_dadd+0x3a0>)
    623a:	086b      	lsrs	r3, r5, #1
    623c:	400a      	ands	r2, r1
    623e:	4028      	ands	r0, r5
    6240:	4318      	orrs	r0, r3
    6242:	07d5      	lsls	r5, r2, #31
    6244:	4305      	orrs	r5, r0
    6246:	0851      	lsrs	r1, r2, #1
    6248:	e72f      	b.n	60aa <__aeabi_dadd+0x52>
    624a:	002b      	movs	r3, r5
    624c:	430b      	orrs	r3, r1
    624e:	d100      	bne.n	6252 <__aeabi_dadd+0x1fa>
    6250:	e1cb      	b.n	65ea <__aeabi_dadd+0x592>
    6252:	2380      	movs	r3, #128	; 0x80
    6254:	031b      	lsls	r3, r3, #12
    6256:	430b      	orrs	r3, r1
    6258:	031a      	lsls	r2, r3, #12
    625a:	0b12      	lsrs	r2, r2, #12
    625c:	e744      	b.n	60e8 <__aeabi_dadd+0x90>
    625e:	3e01      	subs	r6, #1
    6260:	2e00      	cmp	r6, #0
    6262:	d16d      	bne.n	6340 <__aeabi_dadd+0x2e8>
    6264:	1aae      	subs	r6, r5, r2
    6266:	42b5      	cmp	r5, r6
    6268:	419b      	sbcs	r3, r3
    626a:	1a09      	subs	r1, r1, r0
    626c:	425b      	negs	r3, r3
    626e:	1ac9      	subs	r1, r1, r3
    6270:	0035      	movs	r5, r6
    6272:	e775      	b.n	6160 <__aeabi_dadd+0x108>
    6274:	0007      	movs	r7, r0
    6276:	4317      	orrs	r7, r2
    6278:	d100      	bne.n	627c <__aeabi_dadd+0x224>
    627a:	e716      	b.n	60aa <__aeabi_dadd+0x52>
    627c:	2301      	movs	r3, #1
    627e:	425b      	negs	r3, r3
    6280:	469c      	mov	ip, r3
    6282:	44e3      	add	fp, ip
    6284:	465b      	mov	r3, fp
    6286:	2b00      	cmp	r3, #0
    6288:	d000      	beq.n	628c <__aeabi_dadd+0x234>
    628a:	e0e0      	b.n	644e <__aeabi_dadd+0x3f6>
    628c:	18aa      	adds	r2, r5, r2
    628e:	42aa      	cmp	r2, r5
    6290:	419b      	sbcs	r3, r3
    6292:	1809      	adds	r1, r1, r0
    6294:	425b      	negs	r3, r3
    6296:	1859      	adds	r1, r3, r1
    6298:	0015      	movs	r5, r2
    629a:	e7c5      	b.n	6228 <__aeabi_dadd+0x1d0>
    629c:	2e00      	cmp	r6, #0
    629e:	d175      	bne.n	638c <__aeabi_dadd+0x334>
    62a0:	1c66      	adds	r6, r4, #1
    62a2:	0576      	lsls	r6, r6, #21
    62a4:	0d76      	lsrs	r6, r6, #21
    62a6:	2e01      	cmp	r6, #1
    62a8:	dc00      	bgt.n	62ac <__aeabi_dadd+0x254>
    62aa:	e0f3      	b.n	6494 <__aeabi_dadd+0x43c>
    62ac:	1aae      	subs	r6, r5, r2
    62ae:	46b0      	mov	r8, r6
    62b0:	4545      	cmp	r5, r8
    62b2:	41bf      	sbcs	r7, r7
    62b4:	1a0e      	subs	r6, r1, r0
    62b6:	427f      	negs	r7, r7
    62b8:	1bf6      	subs	r6, r6, r7
    62ba:	0237      	lsls	r7, r6, #8
    62bc:	d400      	bmi.n	62c0 <__aeabi_dadd+0x268>
    62be:	e08f      	b.n	63e0 <__aeabi_dadd+0x388>
    62c0:	1b55      	subs	r5, r2, r5
    62c2:	42aa      	cmp	r2, r5
    62c4:	41b6      	sbcs	r6, r6
    62c6:	1a41      	subs	r1, r0, r1
    62c8:	4276      	negs	r6, r6
    62ca:	1b8e      	subs	r6, r1, r6
    62cc:	469a      	mov	sl, r3
    62ce:	e74b      	b.n	6168 <__aeabi_dadd+0x110>
    62d0:	4656      	mov	r6, sl
    62d2:	2200      	movs	r2, #0
    62d4:	2500      	movs	r5, #0
    62d6:	e707      	b.n	60e8 <__aeabi_dadd+0x90>
    62d8:	0028      	movs	r0, r5
    62da:	f001 fcab 	bl	7c34 <__clzsi2>
    62de:	3020      	adds	r0, #32
    62e0:	0003      	movs	r3, r0
    62e2:	3b08      	subs	r3, #8
    62e4:	2b1f      	cmp	r3, #31
    62e6:	dc00      	bgt.n	62ea <__aeabi_dadd+0x292>
    62e8:	e749      	b.n	617e <__aeabi_dadd+0x126>
    62ea:	002a      	movs	r2, r5
    62ec:	3828      	subs	r0, #40	; 0x28
    62ee:	4082      	lsls	r2, r0
    62f0:	2500      	movs	r5, #0
    62f2:	429c      	cmp	r4, r3
    62f4:	dc00      	bgt.n	62f8 <__aeabi_dadd+0x2a0>
    62f6:	e74d      	b.n	6194 <__aeabi_dadd+0x13c>
    62f8:	493f      	ldr	r1, [pc, #252]	; (63f8 <__aeabi_dadd+0x3a0>)
    62fa:	1ae4      	subs	r4, r4, r3
    62fc:	4011      	ands	r1, r2
    62fe:	e6d4      	b.n	60aa <__aeabi_dadd+0x52>
    6300:	4302      	orrs	r2, r0
    6302:	1e50      	subs	r0, r2, #1
    6304:	4182      	sbcs	r2, r0
    6306:	b2d3      	uxtb	r3, r2
    6308:	2200      	movs	r2, #0
    630a:	e722      	b.n	6152 <__aeabi_dadd+0xfa>
    630c:	2b00      	cmp	r3, #0
    630e:	d000      	beq.n	6312 <__aeabi_dadd+0x2ba>
    6310:	e0f3      	b.n	64fa <__aeabi_dadd+0x4a2>
    6312:	1c63      	adds	r3, r4, #1
    6314:	469c      	mov	ip, r3
    6316:	055b      	lsls	r3, r3, #21
    6318:	0d5b      	lsrs	r3, r3, #21
    631a:	2b01      	cmp	r3, #1
    631c:	dc00      	bgt.n	6320 <__aeabi_dadd+0x2c8>
    631e:	e09f      	b.n	6460 <__aeabi_dadd+0x408>
    6320:	4b34      	ldr	r3, [pc, #208]	; (63f4 <__aeabi_dadd+0x39c>)
    6322:	459c      	cmp	ip, r3
    6324:	d100      	bne.n	6328 <__aeabi_dadd+0x2d0>
    6326:	e0c3      	b.n	64b0 <__aeabi_dadd+0x458>
    6328:	18aa      	adds	r2, r5, r2
    632a:	1809      	adds	r1, r1, r0
    632c:	42aa      	cmp	r2, r5
    632e:	4180      	sbcs	r0, r0
    6330:	4240      	negs	r0, r0
    6332:	1841      	adds	r1, r0, r1
    6334:	07cd      	lsls	r5, r1, #31
    6336:	0852      	lsrs	r2, r2, #1
    6338:	4315      	orrs	r5, r2
    633a:	0849      	lsrs	r1, r1, #1
    633c:	4664      	mov	r4, ip
    633e:	e6b4      	b.n	60aa <__aeabi_dadd+0x52>
    6340:	4b2c      	ldr	r3, [pc, #176]	; (63f4 <__aeabi_dadd+0x39c>)
    6342:	429c      	cmp	r4, r3
    6344:	d000      	beq.n	6348 <__aeabi_dadd+0x2f0>
    6346:	e6ec      	b.n	6122 <__aeabi_dadd+0xca>
    6348:	e6af      	b.n	60aa <__aeabi_dadd+0x52>
    634a:	0011      	movs	r1, r2
    634c:	3c1f      	subs	r4, #31
    634e:	40e1      	lsrs	r1, r4
    6350:	000c      	movs	r4, r1
    6352:	2b20      	cmp	r3, #32
    6354:	d100      	bne.n	6358 <__aeabi_dadd+0x300>
    6356:	e07f      	b.n	6458 <__aeabi_dadd+0x400>
    6358:	2140      	movs	r1, #64	; 0x40
    635a:	1acb      	subs	r3, r1, r3
    635c:	409a      	lsls	r2, r3
    635e:	4315      	orrs	r5, r2
    6360:	1e6a      	subs	r2, r5, #1
    6362:	4195      	sbcs	r5, r2
    6364:	2100      	movs	r1, #0
    6366:	4325      	orrs	r5, r4
    6368:	2400      	movs	r4, #0
    636a:	e72d      	b.n	61c8 <__aeabi_dadd+0x170>
    636c:	0033      	movs	r3, r6
    636e:	0007      	movs	r7, r0
    6370:	3b20      	subs	r3, #32
    6372:	40df      	lsrs	r7, r3
    6374:	003b      	movs	r3, r7
    6376:	2e20      	cmp	r6, #32
    6378:	d070      	beq.n	645c <__aeabi_dadd+0x404>
    637a:	2740      	movs	r7, #64	; 0x40
    637c:	1bbe      	subs	r6, r7, r6
    637e:	40b0      	lsls	r0, r6
    6380:	4302      	orrs	r2, r0
    6382:	1e50      	subs	r0, r2, #1
    6384:	4182      	sbcs	r2, r0
    6386:	4313      	orrs	r3, r2
    6388:	2200      	movs	r2, #0
    638a:	e6e2      	b.n	6152 <__aeabi_dadd+0xfa>
    638c:	2c00      	cmp	r4, #0
    638e:	d04f      	beq.n	6430 <__aeabi_dadd+0x3d8>
    6390:	4c18      	ldr	r4, [pc, #96]	; (63f4 <__aeabi_dadd+0x39c>)
    6392:	45a4      	cmp	ip, r4
    6394:	d100      	bne.n	6398 <__aeabi_dadd+0x340>
    6396:	e0ab      	b.n	64f0 <__aeabi_dadd+0x498>
    6398:	2480      	movs	r4, #128	; 0x80
    639a:	0424      	lsls	r4, r4, #16
    639c:	4276      	negs	r6, r6
    639e:	4321      	orrs	r1, r4
    63a0:	2e38      	cmp	r6, #56	; 0x38
    63a2:	dd00      	ble.n	63a6 <__aeabi_dadd+0x34e>
    63a4:	e0df      	b.n	6566 <__aeabi_dadd+0x50e>
    63a6:	2e1f      	cmp	r6, #31
    63a8:	dd00      	ble.n	63ac <__aeabi_dadd+0x354>
    63aa:	e143      	b.n	6634 <__aeabi_dadd+0x5dc>
    63ac:	2720      	movs	r7, #32
    63ae:	1bbc      	subs	r4, r7, r6
    63b0:	46a1      	mov	r9, r4
    63b2:	000c      	movs	r4, r1
    63b4:	464f      	mov	r7, r9
    63b6:	40bc      	lsls	r4, r7
    63b8:	46a0      	mov	r8, r4
    63ba:	002c      	movs	r4, r5
    63bc:	4647      	mov	r7, r8
    63be:	40f4      	lsrs	r4, r6
    63c0:	433c      	orrs	r4, r7
    63c2:	464f      	mov	r7, r9
    63c4:	40bd      	lsls	r5, r7
    63c6:	1e6f      	subs	r7, r5, #1
    63c8:	41bd      	sbcs	r5, r7
    63ca:	40f1      	lsrs	r1, r6
    63cc:	432c      	orrs	r4, r5
    63ce:	1b15      	subs	r5, r2, r4
    63d0:	42aa      	cmp	r2, r5
    63d2:	4192      	sbcs	r2, r2
    63d4:	1a41      	subs	r1, r0, r1
    63d6:	4252      	negs	r2, r2
    63d8:	1a89      	subs	r1, r1, r2
    63da:	4664      	mov	r4, ip
    63dc:	469a      	mov	sl, r3
    63de:	e6bf      	b.n	6160 <__aeabi_dadd+0x108>
    63e0:	4641      	mov	r1, r8
    63e2:	4645      	mov	r5, r8
    63e4:	4331      	orrs	r1, r6
    63e6:	d000      	beq.n	63ea <__aeabi_dadd+0x392>
    63e8:	e6be      	b.n	6168 <__aeabi_dadd+0x110>
    63ea:	2600      	movs	r6, #0
    63ec:	2400      	movs	r4, #0
    63ee:	2500      	movs	r5, #0
    63f0:	e6f2      	b.n	61d8 <__aeabi_dadd+0x180>
    63f2:	46c0      	nop			; (mov r8, r8)
    63f4:	000007ff 	.word	0x000007ff
    63f8:	ff7fffff 	.word	0xff7fffff
    63fc:	800fffff 	.word	0x800fffff
    6400:	2b1f      	cmp	r3, #31
    6402:	dc59      	bgt.n	64b8 <__aeabi_dadd+0x460>
    6404:	2720      	movs	r7, #32
    6406:	1aff      	subs	r7, r7, r3
    6408:	46bc      	mov	ip, r7
    640a:	0007      	movs	r7, r0
    640c:	4663      	mov	r3, ip
    640e:	409f      	lsls	r7, r3
    6410:	465b      	mov	r3, fp
    6412:	46b9      	mov	r9, r7
    6414:	0017      	movs	r7, r2
    6416:	40df      	lsrs	r7, r3
    6418:	46b8      	mov	r8, r7
    641a:	464f      	mov	r7, r9
    641c:	4643      	mov	r3, r8
    641e:	431f      	orrs	r7, r3
    6420:	4663      	mov	r3, ip
    6422:	409a      	lsls	r2, r3
    6424:	1e53      	subs	r3, r2, #1
    6426:	419a      	sbcs	r2, r3
    6428:	465b      	mov	r3, fp
    642a:	433a      	orrs	r2, r7
    642c:	40d8      	lsrs	r0, r3
    642e:	e6f4      	b.n	621a <__aeabi_dadd+0x1c2>
    6430:	000c      	movs	r4, r1
    6432:	432c      	orrs	r4, r5
    6434:	d05c      	beq.n	64f0 <__aeabi_dadd+0x498>
    6436:	43f6      	mvns	r6, r6
    6438:	2e00      	cmp	r6, #0
    643a:	d155      	bne.n	64e8 <__aeabi_dadd+0x490>
    643c:	1b55      	subs	r5, r2, r5
    643e:	42aa      	cmp	r2, r5
    6440:	41a4      	sbcs	r4, r4
    6442:	1a41      	subs	r1, r0, r1
    6444:	4264      	negs	r4, r4
    6446:	1b09      	subs	r1, r1, r4
    6448:	469a      	mov	sl, r3
    644a:	4664      	mov	r4, ip
    644c:	e688      	b.n	6160 <__aeabi_dadd+0x108>
    644e:	4f96      	ldr	r7, [pc, #600]	; (66a8 <__aeabi_dadd+0x650>)
    6450:	42bc      	cmp	r4, r7
    6452:	d000      	beq.n	6456 <__aeabi_dadd+0x3fe>
    6454:	e6d8      	b.n	6208 <__aeabi_dadd+0x1b0>
    6456:	e628      	b.n	60aa <__aeabi_dadd+0x52>
    6458:	2200      	movs	r2, #0
    645a:	e780      	b.n	635e <__aeabi_dadd+0x306>
    645c:	2000      	movs	r0, #0
    645e:	e78f      	b.n	6380 <__aeabi_dadd+0x328>
    6460:	000b      	movs	r3, r1
    6462:	432b      	orrs	r3, r5
    6464:	2c00      	cmp	r4, #0
    6466:	d000      	beq.n	646a <__aeabi_dadd+0x412>
    6468:	e0c2      	b.n	65f0 <__aeabi_dadd+0x598>
    646a:	2b00      	cmp	r3, #0
    646c:	d100      	bne.n	6470 <__aeabi_dadd+0x418>
    646e:	e101      	b.n	6674 <__aeabi_dadd+0x61c>
    6470:	0003      	movs	r3, r0
    6472:	4313      	orrs	r3, r2
    6474:	d100      	bne.n	6478 <__aeabi_dadd+0x420>
    6476:	e618      	b.n	60aa <__aeabi_dadd+0x52>
    6478:	18ab      	adds	r3, r5, r2
    647a:	42ab      	cmp	r3, r5
    647c:	41b6      	sbcs	r6, r6
    647e:	1809      	adds	r1, r1, r0
    6480:	4276      	negs	r6, r6
    6482:	1871      	adds	r1, r6, r1
    6484:	020a      	lsls	r2, r1, #8
    6486:	d400      	bmi.n	648a <__aeabi_dadd+0x432>
    6488:	e109      	b.n	669e <__aeabi_dadd+0x646>
    648a:	4a88      	ldr	r2, [pc, #544]	; (66ac <__aeabi_dadd+0x654>)
    648c:	001d      	movs	r5, r3
    648e:	4011      	ands	r1, r2
    6490:	4664      	mov	r4, ip
    6492:	e60a      	b.n	60aa <__aeabi_dadd+0x52>
    6494:	2c00      	cmp	r4, #0
    6496:	d15b      	bne.n	6550 <__aeabi_dadd+0x4f8>
    6498:	000e      	movs	r6, r1
    649a:	432e      	orrs	r6, r5
    649c:	d000      	beq.n	64a0 <__aeabi_dadd+0x448>
    649e:	e08a      	b.n	65b6 <__aeabi_dadd+0x55e>
    64a0:	0001      	movs	r1, r0
    64a2:	4311      	orrs	r1, r2
    64a4:	d100      	bne.n	64a8 <__aeabi_dadd+0x450>
    64a6:	e0c2      	b.n	662e <__aeabi_dadd+0x5d6>
    64a8:	0001      	movs	r1, r0
    64aa:	0015      	movs	r5, r2
    64ac:	469a      	mov	sl, r3
    64ae:	e5fc      	b.n	60aa <__aeabi_dadd+0x52>
    64b0:	4664      	mov	r4, ip
    64b2:	2100      	movs	r1, #0
    64b4:	2500      	movs	r5, #0
    64b6:	e68f      	b.n	61d8 <__aeabi_dadd+0x180>
    64b8:	2320      	movs	r3, #32
    64ba:	425b      	negs	r3, r3
    64bc:	469c      	mov	ip, r3
    64be:	44dc      	add	ip, fp
    64c0:	4663      	mov	r3, ip
    64c2:	0007      	movs	r7, r0
    64c4:	40df      	lsrs	r7, r3
    64c6:	465b      	mov	r3, fp
    64c8:	46bc      	mov	ip, r7
    64ca:	2b20      	cmp	r3, #32
    64cc:	d100      	bne.n	64d0 <__aeabi_dadd+0x478>
    64ce:	e0ac      	b.n	662a <__aeabi_dadd+0x5d2>
    64d0:	2340      	movs	r3, #64	; 0x40
    64d2:	465f      	mov	r7, fp
    64d4:	1bdb      	subs	r3, r3, r7
    64d6:	4098      	lsls	r0, r3
    64d8:	4302      	orrs	r2, r0
    64da:	1e50      	subs	r0, r2, #1
    64dc:	4182      	sbcs	r2, r0
    64de:	4663      	mov	r3, ip
    64e0:	4313      	orrs	r3, r2
    64e2:	001a      	movs	r2, r3
    64e4:	2000      	movs	r0, #0
    64e6:	e698      	b.n	621a <__aeabi_dadd+0x1c2>
    64e8:	4c6f      	ldr	r4, [pc, #444]	; (66a8 <__aeabi_dadd+0x650>)
    64ea:	45a4      	cmp	ip, r4
    64ec:	d000      	beq.n	64f0 <__aeabi_dadd+0x498>
    64ee:	e757      	b.n	63a0 <__aeabi_dadd+0x348>
    64f0:	0001      	movs	r1, r0
    64f2:	0015      	movs	r5, r2
    64f4:	4664      	mov	r4, ip
    64f6:	469a      	mov	sl, r3
    64f8:	e5d7      	b.n	60aa <__aeabi_dadd+0x52>
    64fa:	2c00      	cmp	r4, #0
    64fc:	d139      	bne.n	6572 <__aeabi_dadd+0x51a>
    64fe:	000c      	movs	r4, r1
    6500:	432c      	orrs	r4, r5
    6502:	d06e      	beq.n	65e2 <__aeabi_dadd+0x58a>
    6504:	43db      	mvns	r3, r3
    6506:	2b00      	cmp	r3, #0
    6508:	d01a      	beq.n	6540 <__aeabi_dadd+0x4e8>
    650a:	4c67      	ldr	r4, [pc, #412]	; (66a8 <__aeabi_dadd+0x650>)
    650c:	45a4      	cmp	ip, r4
    650e:	d068      	beq.n	65e2 <__aeabi_dadd+0x58a>
    6510:	2b38      	cmp	r3, #56	; 0x38
    6512:	dd00      	ble.n	6516 <__aeabi_dadd+0x4be>
    6514:	e0a4      	b.n	6660 <__aeabi_dadd+0x608>
    6516:	2b1f      	cmp	r3, #31
    6518:	dd00      	ble.n	651c <__aeabi_dadd+0x4c4>
    651a:	e0ae      	b.n	667a <__aeabi_dadd+0x622>
    651c:	2420      	movs	r4, #32
    651e:	000f      	movs	r7, r1
    6520:	1ae4      	subs	r4, r4, r3
    6522:	40a7      	lsls	r7, r4
    6524:	46b9      	mov	r9, r7
    6526:	002f      	movs	r7, r5
    6528:	40df      	lsrs	r7, r3
    652a:	46b8      	mov	r8, r7
    652c:	46a3      	mov	fp, r4
    652e:	464f      	mov	r7, r9
    6530:	4644      	mov	r4, r8
    6532:	4327      	orrs	r7, r4
    6534:	465c      	mov	r4, fp
    6536:	40a5      	lsls	r5, r4
    6538:	1e6c      	subs	r4, r5, #1
    653a:	41a5      	sbcs	r5, r4
    653c:	40d9      	lsrs	r1, r3
    653e:	433d      	orrs	r5, r7
    6540:	18ad      	adds	r5, r5, r2
    6542:	4295      	cmp	r5, r2
    6544:	419b      	sbcs	r3, r3
    6546:	1809      	adds	r1, r1, r0
    6548:	425b      	negs	r3, r3
    654a:	1859      	adds	r1, r3, r1
    654c:	4664      	mov	r4, ip
    654e:	e66b      	b.n	6228 <__aeabi_dadd+0x1d0>
    6550:	000c      	movs	r4, r1
    6552:	432c      	orrs	r4, r5
    6554:	d115      	bne.n	6582 <__aeabi_dadd+0x52a>
    6556:	0001      	movs	r1, r0
    6558:	4311      	orrs	r1, r2
    655a:	d07b      	beq.n	6654 <__aeabi_dadd+0x5fc>
    655c:	0001      	movs	r1, r0
    655e:	0015      	movs	r5, r2
    6560:	469a      	mov	sl, r3
    6562:	4c51      	ldr	r4, [pc, #324]	; (66a8 <__aeabi_dadd+0x650>)
    6564:	e5a1      	b.n	60aa <__aeabi_dadd+0x52>
    6566:	430d      	orrs	r5, r1
    6568:	1e69      	subs	r1, r5, #1
    656a:	418d      	sbcs	r5, r1
    656c:	2100      	movs	r1, #0
    656e:	b2ec      	uxtb	r4, r5
    6570:	e72d      	b.n	63ce <__aeabi_dadd+0x376>
    6572:	4c4d      	ldr	r4, [pc, #308]	; (66a8 <__aeabi_dadd+0x650>)
    6574:	45a4      	cmp	ip, r4
    6576:	d034      	beq.n	65e2 <__aeabi_dadd+0x58a>
    6578:	2480      	movs	r4, #128	; 0x80
    657a:	0424      	lsls	r4, r4, #16
    657c:	425b      	negs	r3, r3
    657e:	4321      	orrs	r1, r4
    6580:	e7c6      	b.n	6510 <__aeabi_dadd+0x4b8>
    6582:	0004      	movs	r4, r0
    6584:	4314      	orrs	r4, r2
    6586:	d04e      	beq.n	6626 <__aeabi_dadd+0x5ce>
    6588:	08ed      	lsrs	r5, r5, #3
    658a:	074c      	lsls	r4, r1, #29
    658c:	432c      	orrs	r4, r5
    658e:	2580      	movs	r5, #128	; 0x80
    6590:	08c9      	lsrs	r1, r1, #3
    6592:	032d      	lsls	r5, r5, #12
    6594:	4229      	tst	r1, r5
    6596:	d008      	beq.n	65aa <__aeabi_dadd+0x552>
    6598:	08c6      	lsrs	r6, r0, #3
    659a:	422e      	tst	r6, r5
    659c:	d105      	bne.n	65aa <__aeabi_dadd+0x552>
    659e:	08d2      	lsrs	r2, r2, #3
    65a0:	0741      	lsls	r1, r0, #29
    65a2:	4311      	orrs	r1, r2
    65a4:	000c      	movs	r4, r1
    65a6:	469a      	mov	sl, r3
    65a8:	0031      	movs	r1, r6
    65aa:	0f62      	lsrs	r2, r4, #29
    65ac:	00c9      	lsls	r1, r1, #3
    65ae:	00e5      	lsls	r5, r4, #3
    65b0:	4311      	orrs	r1, r2
    65b2:	4c3d      	ldr	r4, [pc, #244]	; (66a8 <__aeabi_dadd+0x650>)
    65b4:	e579      	b.n	60aa <__aeabi_dadd+0x52>
    65b6:	0006      	movs	r6, r0
    65b8:	4316      	orrs	r6, r2
    65ba:	d100      	bne.n	65be <__aeabi_dadd+0x566>
    65bc:	e575      	b.n	60aa <__aeabi_dadd+0x52>
    65be:	1aae      	subs	r6, r5, r2
    65c0:	46b0      	mov	r8, r6
    65c2:	4545      	cmp	r5, r8
    65c4:	41bf      	sbcs	r7, r7
    65c6:	1a0e      	subs	r6, r1, r0
    65c8:	427f      	negs	r7, r7
    65ca:	1bf6      	subs	r6, r6, r7
    65cc:	0237      	lsls	r7, r6, #8
    65ce:	d400      	bmi.n	65d2 <__aeabi_dadd+0x57a>
    65d0:	e5f4      	b.n	61bc <__aeabi_dadd+0x164>
    65d2:	1b55      	subs	r5, r2, r5
    65d4:	42aa      	cmp	r2, r5
    65d6:	41b6      	sbcs	r6, r6
    65d8:	1a41      	subs	r1, r0, r1
    65da:	4276      	negs	r6, r6
    65dc:	1b89      	subs	r1, r1, r6
    65de:	469a      	mov	sl, r3
    65e0:	e563      	b.n	60aa <__aeabi_dadd+0x52>
    65e2:	0001      	movs	r1, r0
    65e4:	0015      	movs	r5, r2
    65e6:	4664      	mov	r4, ip
    65e8:	e55f      	b.n	60aa <__aeabi_dadd+0x52>
    65ea:	2200      	movs	r2, #0
    65ec:	2500      	movs	r5, #0
    65ee:	e57b      	b.n	60e8 <__aeabi_dadd+0x90>
    65f0:	2b00      	cmp	r3, #0
    65f2:	d03b      	beq.n	666c <__aeabi_dadd+0x614>
    65f4:	0003      	movs	r3, r0
    65f6:	4313      	orrs	r3, r2
    65f8:	d015      	beq.n	6626 <__aeabi_dadd+0x5ce>
    65fa:	08ed      	lsrs	r5, r5, #3
    65fc:	074b      	lsls	r3, r1, #29
    65fe:	432b      	orrs	r3, r5
    6600:	2580      	movs	r5, #128	; 0x80
    6602:	08c9      	lsrs	r1, r1, #3
    6604:	032d      	lsls	r5, r5, #12
    6606:	4229      	tst	r1, r5
    6608:	d007      	beq.n	661a <__aeabi_dadd+0x5c2>
    660a:	08c4      	lsrs	r4, r0, #3
    660c:	422c      	tst	r4, r5
    660e:	d104      	bne.n	661a <__aeabi_dadd+0x5c2>
    6610:	0741      	lsls	r1, r0, #29
    6612:	000b      	movs	r3, r1
    6614:	0021      	movs	r1, r4
    6616:	08d2      	lsrs	r2, r2, #3
    6618:	4313      	orrs	r3, r2
    661a:	00c9      	lsls	r1, r1, #3
    661c:	0f5a      	lsrs	r2, r3, #29
    661e:	4311      	orrs	r1, r2
    6620:	00dd      	lsls	r5, r3, #3
    6622:	4c21      	ldr	r4, [pc, #132]	; (66a8 <__aeabi_dadd+0x650>)
    6624:	e541      	b.n	60aa <__aeabi_dadd+0x52>
    6626:	4c20      	ldr	r4, [pc, #128]	; (66a8 <__aeabi_dadd+0x650>)
    6628:	e53f      	b.n	60aa <__aeabi_dadd+0x52>
    662a:	2000      	movs	r0, #0
    662c:	e754      	b.n	64d8 <__aeabi_dadd+0x480>
    662e:	2600      	movs	r6, #0
    6630:	2500      	movs	r5, #0
    6632:	e5d1      	b.n	61d8 <__aeabi_dadd+0x180>
    6634:	0034      	movs	r4, r6
    6636:	000f      	movs	r7, r1
    6638:	3c20      	subs	r4, #32
    663a:	40e7      	lsrs	r7, r4
    663c:	003c      	movs	r4, r7
    663e:	2e20      	cmp	r6, #32
    6640:	d02b      	beq.n	669a <__aeabi_dadd+0x642>
    6642:	2740      	movs	r7, #64	; 0x40
    6644:	1bbe      	subs	r6, r7, r6
    6646:	40b1      	lsls	r1, r6
    6648:	430d      	orrs	r5, r1
    664a:	1e69      	subs	r1, r5, #1
    664c:	418d      	sbcs	r5, r1
    664e:	2100      	movs	r1, #0
    6650:	432c      	orrs	r4, r5
    6652:	e6bc      	b.n	63ce <__aeabi_dadd+0x376>
    6654:	2180      	movs	r1, #128	; 0x80
    6656:	2600      	movs	r6, #0
    6658:	0309      	lsls	r1, r1, #12
    665a:	4c13      	ldr	r4, [pc, #76]	; (66a8 <__aeabi_dadd+0x650>)
    665c:	2500      	movs	r5, #0
    665e:	e5bb      	b.n	61d8 <__aeabi_dadd+0x180>
    6660:	430d      	orrs	r5, r1
    6662:	1e69      	subs	r1, r5, #1
    6664:	418d      	sbcs	r5, r1
    6666:	2100      	movs	r1, #0
    6668:	b2ed      	uxtb	r5, r5
    666a:	e769      	b.n	6540 <__aeabi_dadd+0x4e8>
    666c:	0001      	movs	r1, r0
    666e:	0015      	movs	r5, r2
    6670:	4c0d      	ldr	r4, [pc, #52]	; (66a8 <__aeabi_dadd+0x650>)
    6672:	e51a      	b.n	60aa <__aeabi_dadd+0x52>
    6674:	0001      	movs	r1, r0
    6676:	0015      	movs	r5, r2
    6678:	e517      	b.n	60aa <__aeabi_dadd+0x52>
    667a:	001c      	movs	r4, r3
    667c:	000f      	movs	r7, r1
    667e:	3c20      	subs	r4, #32
    6680:	40e7      	lsrs	r7, r4
    6682:	003c      	movs	r4, r7
    6684:	2b20      	cmp	r3, #32
    6686:	d00c      	beq.n	66a2 <__aeabi_dadd+0x64a>
    6688:	2740      	movs	r7, #64	; 0x40
    668a:	1afb      	subs	r3, r7, r3
    668c:	4099      	lsls	r1, r3
    668e:	430d      	orrs	r5, r1
    6690:	1e69      	subs	r1, r5, #1
    6692:	418d      	sbcs	r5, r1
    6694:	2100      	movs	r1, #0
    6696:	4325      	orrs	r5, r4
    6698:	e752      	b.n	6540 <__aeabi_dadd+0x4e8>
    669a:	2100      	movs	r1, #0
    669c:	e7d4      	b.n	6648 <__aeabi_dadd+0x5f0>
    669e:	001d      	movs	r5, r3
    66a0:	e592      	b.n	61c8 <__aeabi_dadd+0x170>
    66a2:	2100      	movs	r1, #0
    66a4:	e7f3      	b.n	668e <__aeabi_dadd+0x636>
    66a6:	46c0      	nop			; (mov r8, r8)
    66a8:	000007ff 	.word	0x000007ff
    66ac:	ff7fffff 	.word	0xff7fffff

000066b0 <__aeabi_ddiv>:
    66b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    66b2:	4656      	mov	r6, sl
    66b4:	464d      	mov	r5, r9
    66b6:	4644      	mov	r4, r8
    66b8:	465f      	mov	r7, fp
    66ba:	b4f0      	push	{r4, r5, r6, r7}
    66bc:	001d      	movs	r5, r3
    66be:	030e      	lsls	r6, r1, #12
    66c0:	004c      	lsls	r4, r1, #1
    66c2:	0fcb      	lsrs	r3, r1, #31
    66c4:	b087      	sub	sp, #28
    66c6:	0007      	movs	r7, r0
    66c8:	4692      	mov	sl, r2
    66ca:	4681      	mov	r9, r0
    66cc:	0b36      	lsrs	r6, r6, #12
    66ce:	0d64      	lsrs	r4, r4, #21
    66d0:	4698      	mov	r8, r3
    66d2:	d06a      	beq.n	67aa <__aeabi_ddiv+0xfa>
    66d4:	4b6d      	ldr	r3, [pc, #436]	; (688c <__aeabi_ddiv+0x1dc>)
    66d6:	429c      	cmp	r4, r3
    66d8:	d035      	beq.n	6746 <__aeabi_ddiv+0x96>
    66da:	2280      	movs	r2, #128	; 0x80
    66dc:	0f43      	lsrs	r3, r0, #29
    66de:	0412      	lsls	r2, r2, #16
    66e0:	4313      	orrs	r3, r2
    66e2:	00f6      	lsls	r6, r6, #3
    66e4:	431e      	orrs	r6, r3
    66e6:	00c3      	lsls	r3, r0, #3
    66e8:	4699      	mov	r9, r3
    66ea:	4b69      	ldr	r3, [pc, #420]	; (6890 <__aeabi_ddiv+0x1e0>)
    66ec:	2700      	movs	r7, #0
    66ee:	469c      	mov	ip, r3
    66f0:	2300      	movs	r3, #0
    66f2:	4464      	add	r4, ip
    66f4:	9302      	str	r3, [sp, #8]
    66f6:	032b      	lsls	r3, r5, #12
    66f8:	0068      	lsls	r0, r5, #1
    66fa:	0b1b      	lsrs	r3, r3, #12
    66fc:	0fed      	lsrs	r5, r5, #31
    66fe:	4651      	mov	r1, sl
    6700:	469b      	mov	fp, r3
    6702:	0d40      	lsrs	r0, r0, #21
    6704:	9500      	str	r5, [sp, #0]
    6706:	d100      	bne.n	670a <__aeabi_ddiv+0x5a>
    6708:	e078      	b.n	67fc <__aeabi_ddiv+0x14c>
    670a:	4b60      	ldr	r3, [pc, #384]	; (688c <__aeabi_ddiv+0x1dc>)
    670c:	4298      	cmp	r0, r3
    670e:	d06c      	beq.n	67ea <__aeabi_ddiv+0x13a>
    6710:	465b      	mov	r3, fp
    6712:	00da      	lsls	r2, r3, #3
    6714:	0f4b      	lsrs	r3, r1, #29
    6716:	2180      	movs	r1, #128	; 0x80
    6718:	0409      	lsls	r1, r1, #16
    671a:	430b      	orrs	r3, r1
    671c:	4313      	orrs	r3, r2
    671e:	469b      	mov	fp, r3
    6720:	4653      	mov	r3, sl
    6722:	00d9      	lsls	r1, r3, #3
    6724:	4b5a      	ldr	r3, [pc, #360]	; (6890 <__aeabi_ddiv+0x1e0>)
    6726:	469c      	mov	ip, r3
    6728:	2300      	movs	r3, #0
    672a:	4460      	add	r0, ip
    672c:	4642      	mov	r2, r8
    672e:	1a20      	subs	r0, r4, r0
    6730:	406a      	eors	r2, r5
    6732:	4692      	mov	sl, r2
    6734:	9001      	str	r0, [sp, #4]
    6736:	431f      	orrs	r7, r3
    6738:	2f0f      	cmp	r7, #15
    673a:	d900      	bls.n	673e <__aeabi_ddiv+0x8e>
    673c:	e0b0      	b.n	68a0 <__aeabi_ddiv+0x1f0>
    673e:	4855      	ldr	r0, [pc, #340]	; (6894 <__aeabi_ddiv+0x1e4>)
    6740:	00bf      	lsls	r7, r7, #2
    6742:	59c0      	ldr	r0, [r0, r7]
    6744:	4687      	mov	pc, r0
    6746:	4337      	orrs	r7, r6
    6748:	d000      	beq.n	674c <__aeabi_ddiv+0x9c>
    674a:	e088      	b.n	685e <__aeabi_ddiv+0x1ae>
    674c:	2300      	movs	r3, #0
    674e:	4699      	mov	r9, r3
    6750:	3302      	adds	r3, #2
    6752:	2708      	movs	r7, #8
    6754:	2600      	movs	r6, #0
    6756:	9302      	str	r3, [sp, #8]
    6758:	e7cd      	b.n	66f6 <__aeabi_ddiv+0x46>
    675a:	4643      	mov	r3, r8
    675c:	46b3      	mov	fp, r6
    675e:	4649      	mov	r1, r9
    6760:	9300      	str	r3, [sp, #0]
    6762:	9b02      	ldr	r3, [sp, #8]
    6764:	9a00      	ldr	r2, [sp, #0]
    6766:	4692      	mov	sl, r2
    6768:	2b02      	cmp	r3, #2
    676a:	d000      	beq.n	676e <__aeabi_ddiv+0xbe>
    676c:	e1bf      	b.n	6aee <__aeabi_ddiv+0x43e>
    676e:	2100      	movs	r1, #0
    6770:	4653      	mov	r3, sl
    6772:	2201      	movs	r2, #1
    6774:	2600      	movs	r6, #0
    6776:	4689      	mov	r9, r1
    6778:	401a      	ands	r2, r3
    677a:	4b44      	ldr	r3, [pc, #272]	; (688c <__aeabi_ddiv+0x1dc>)
    677c:	2100      	movs	r1, #0
    677e:	0336      	lsls	r6, r6, #12
    6780:	0d0c      	lsrs	r4, r1, #20
    6782:	0524      	lsls	r4, r4, #20
    6784:	0b36      	lsrs	r6, r6, #12
    6786:	4326      	orrs	r6, r4
    6788:	4c43      	ldr	r4, [pc, #268]	; (6898 <__aeabi_ddiv+0x1e8>)
    678a:	051b      	lsls	r3, r3, #20
    678c:	4026      	ands	r6, r4
    678e:	431e      	orrs	r6, r3
    6790:	0076      	lsls	r6, r6, #1
    6792:	07d2      	lsls	r2, r2, #31
    6794:	0876      	lsrs	r6, r6, #1
    6796:	4316      	orrs	r6, r2
    6798:	4648      	mov	r0, r9
    679a:	0031      	movs	r1, r6
    679c:	b007      	add	sp, #28
    679e:	bc3c      	pop	{r2, r3, r4, r5}
    67a0:	4690      	mov	r8, r2
    67a2:	4699      	mov	r9, r3
    67a4:	46a2      	mov	sl, r4
    67a6:	46ab      	mov	fp, r5
    67a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67aa:	0033      	movs	r3, r6
    67ac:	4303      	orrs	r3, r0
    67ae:	d04f      	beq.n	6850 <__aeabi_ddiv+0x1a0>
    67b0:	2e00      	cmp	r6, #0
    67b2:	d100      	bne.n	67b6 <__aeabi_ddiv+0x106>
    67b4:	e1bc      	b.n	6b30 <__aeabi_ddiv+0x480>
    67b6:	0030      	movs	r0, r6
    67b8:	f001 fa3c 	bl	7c34 <__clzsi2>
    67bc:	0003      	movs	r3, r0
    67be:	3b0b      	subs	r3, #11
    67c0:	2b1c      	cmp	r3, #28
    67c2:	dd00      	ble.n	67c6 <__aeabi_ddiv+0x116>
    67c4:	e1ad      	b.n	6b22 <__aeabi_ddiv+0x472>
    67c6:	221d      	movs	r2, #29
    67c8:	0001      	movs	r1, r0
    67ca:	1ad3      	subs	r3, r2, r3
    67cc:	3908      	subs	r1, #8
    67ce:	003a      	movs	r2, r7
    67d0:	408f      	lsls	r7, r1
    67d2:	408e      	lsls	r6, r1
    67d4:	40da      	lsrs	r2, r3
    67d6:	46b9      	mov	r9, r7
    67d8:	4316      	orrs	r6, r2
    67da:	4b30      	ldr	r3, [pc, #192]	; (689c <__aeabi_ddiv+0x1ec>)
    67dc:	2700      	movs	r7, #0
    67de:	469c      	mov	ip, r3
    67e0:	2300      	movs	r3, #0
    67e2:	4460      	add	r0, ip
    67e4:	4244      	negs	r4, r0
    67e6:	9302      	str	r3, [sp, #8]
    67e8:	e785      	b.n	66f6 <__aeabi_ddiv+0x46>
    67ea:	4653      	mov	r3, sl
    67ec:	465a      	mov	r2, fp
    67ee:	4313      	orrs	r3, r2
    67f0:	d12c      	bne.n	684c <__aeabi_ddiv+0x19c>
    67f2:	2300      	movs	r3, #0
    67f4:	2100      	movs	r1, #0
    67f6:	469b      	mov	fp, r3
    67f8:	3302      	adds	r3, #2
    67fa:	e797      	b.n	672c <__aeabi_ddiv+0x7c>
    67fc:	430b      	orrs	r3, r1
    67fe:	d020      	beq.n	6842 <__aeabi_ddiv+0x192>
    6800:	465b      	mov	r3, fp
    6802:	2b00      	cmp	r3, #0
    6804:	d100      	bne.n	6808 <__aeabi_ddiv+0x158>
    6806:	e19e      	b.n	6b46 <__aeabi_ddiv+0x496>
    6808:	4658      	mov	r0, fp
    680a:	f001 fa13 	bl	7c34 <__clzsi2>
    680e:	0003      	movs	r3, r0
    6810:	3b0b      	subs	r3, #11
    6812:	2b1c      	cmp	r3, #28
    6814:	dd00      	ble.n	6818 <__aeabi_ddiv+0x168>
    6816:	e18f      	b.n	6b38 <__aeabi_ddiv+0x488>
    6818:	0002      	movs	r2, r0
    681a:	4659      	mov	r1, fp
    681c:	3a08      	subs	r2, #8
    681e:	4091      	lsls	r1, r2
    6820:	468b      	mov	fp, r1
    6822:	211d      	movs	r1, #29
    6824:	1acb      	subs	r3, r1, r3
    6826:	4651      	mov	r1, sl
    6828:	40d9      	lsrs	r1, r3
    682a:	000b      	movs	r3, r1
    682c:	4659      	mov	r1, fp
    682e:	430b      	orrs	r3, r1
    6830:	4651      	mov	r1, sl
    6832:	469b      	mov	fp, r3
    6834:	4091      	lsls	r1, r2
    6836:	4b19      	ldr	r3, [pc, #100]	; (689c <__aeabi_ddiv+0x1ec>)
    6838:	469c      	mov	ip, r3
    683a:	4460      	add	r0, ip
    683c:	4240      	negs	r0, r0
    683e:	2300      	movs	r3, #0
    6840:	e774      	b.n	672c <__aeabi_ddiv+0x7c>
    6842:	2300      	movs	r3, #0
    6844:	2100      	movs	r1, #0
    6846:	469b      	mov	fp, r3
    6848:	3301      	adds	r3, #1
    684a:	e76f      	b.n	672c <__aeabi_ddiv+0x7c>
    684c:	2303      	movs	r3, #3
    684e:	e76d      	b.n	672c <__aeabi_ddiv+0x7c>
    6850:	2300      	movs	r3, #0
    6852:	4699      	mov	r9, r3
    6854:	3301      	adds	r3, #1
    6856:	2704      	movs	r7, #4
    6858:	2600      	movs	r6, #0
    685a:	9302      	str	r3, [sp, #8]
    685c:	e74b      	b.n	66f6 <__aeabi_ddiv+0x46>
    685e:	2303      	movs	r3, #3
    6860:	270c      	movs	r7, #12
    6862:	9302      	str	r3, [sp, #8]
    6864:	e747      	b.n	66f6 <__aeabi_ddiv+0x46>
    6866:	2201      	movs	r2, #1
    6868:	1ad5      	subs	r5, r2, r3
    686a:	2d38      	cmp	r5, #56	; 0x38
    686c:	dc00      	bgt.n	6870 <__aeabi_ddiv+0x1c0>
    686e:	e1b0      	b.n	6bd2 <__aeabi_ddiv+0x522>
    6870:	4653      	mov	r3, sl
    6872:	401a      	ands	r2, r3
    6874:	2100      	movs	r1, #0
    6876:	2300      	movs	r3, #0
    6878:	2600      	movs	r6, #0
    687a:	4689      	mov	r9, r1
    687c:	e77e      	b.n	677c <__aeabi_ddiv+0xcc>
    687e:	2300      	movs	r3, #0
    6880:	2680      	movs	r6, #128	; 0x80
    6882:	4699      	mov	r9, r3
    6884:	2200      	movs	r2, #0
    6886:	0336      	lsls	r6, r6, #12
    6888:	4b00      	ldr	r3, [pc, #0]	; (688c <__aeabi_ddiv+0x1dc>)
    688a:	e777      	b.n	677c <__aeabi_ddiv+0xcc>
    688c:	000007ff 	.word	0x000007ff
    6890:	fffffc01 	.word	0xfffffc01
    6894:	000086b8 	.word	0x000086b8
    6898:	800fffff 	.word	0x800fffff
    689c:	000003f3 	.word	0x000003f3
    68a0:	455e      	cmp	r6, fp
    68a2:	d900      	bls.n	68a6 <__aeabi_ddiv+0x1f6>
    68a4:	e172      	b.n	6b8c <__aeabi_ddiv+0x4dc>
    68a6:	d100      	bne.n	68aa <__aeabi_ddiv+0x1fa>
    68a8:	e16d      	b.n	6b86 <__aeabi_ddiv+0x4d6>
    68aa:	9b01      	ldr	r3, [sp, #4]
    68ac:	464d      	mov	r5, r9
    68ae:	3b01      	subs	r3, #1
    68b0:	9301      	str	r3, [sp, #4]
    68b2:	2300      	movs	r3, #0
    68b4:	0034      	movs	r4, r6
    68b6:	9302      	str	r3, [sp, #8]
    68b8:	465b      	mov	r3, fp
    68ba:	021e      	lsls	r6, r3, #8
    68bc:	0e0b      	lsrs	r3, r1, #24
    68be:	431e      	orrs	r6, r3
    68c0:	020b      	lsls	r3, r1, #8
    68c2:	9303      	str	r3, [sp, #12]
    68c4:	0c33      	lsrs	r3, r6, #16
    68c6:	4699      	mov	r9, r3
    68c8:	0433      	lsls	r3, r6, #16
    68ca:	0c1b      	lsrs	r3, r3, #16
    68cc:	4649      	mov	r1, r9
    68ce:	0020      	movs	r0, r4
    68d0:	9300      	str	r3, [sp, #0]
    68d2:	f7ff f9ef 	bl	5cb4 <__aeabi_uidiv>
    68d6:	9b00      	ldr	r3, [sp, #0]
    68d8:	0037      	movs	r7, r6
    68da:	4343      	muls	r3, r0
    68dc:	0006      	movs	r6, r0
    68de:	4649      	mov	r1, r9
    68e0:	0020      	movs	r0, r4
    68e2:	4698      	mov	r8, r3
    68e4:	f7ff fa6c 	bl	5dc0 <__aeabi_uidivmod>
    68e8:	0c2c      	lsrs	r4, r5, #16
    68ea:	0409      	lsls	r1, r1, #16
    68ec:	430c      	orrs	r4, r1
    68ee:	45a0      	cmp	r8, r4
    68f0:	d909      	bls.n	6906 <__aeabi_ddiv+0x256>
    68f2:	19e4      	adds	r4, r4, r7
    68f4:	1e73      	subs	r3, r6, #1
    68f6:	42a7      	cmp	r7, r4
    68f8:	d900      	bls.n	68fc <__aeabi_ddiv+0x24c>
    68fa:	e15c      	b.n	6bb6 <__aeabi_ddiv+0x506>
    68fc:	45a0      	cmp	r8, r4
    68fe:	d800      	bhi.n	6902 <__aeabi_ddiv+0x252>
    6900:	e159      	b.n	6bb6 <__aeabi_ddiv+0x506>
    6902:	3e02      	subs	r6, #2
    6904:	19e4      	adds	r4, r4, r7
    6906:	4643      	mov	r3, r8
    6908:	1ae4      	subs	r4, r4, r3
    690a:	4649      	mov	r1, r9
    690c:	0020      	movs	r0, r4
    690e:	f7ff f9d1 	bl	5cb4 <__aeabi_uidiv>
    6912:	0003      	movs	r3, r0
    6914:	9a00      	ldr	r2, [sp, #0]
    6916:	4680      	mov	r8, r0
    6918:	4353      	muls	r3, r2
    691a:	4649      	mov	r1, r9
    691c:	0020      	movs	r0, r4
    691e:	469b      	mov	fp, r3
    6920:	f7ff fa4e 	bl	5dc0 <__aeabi_uidivmod>
    6924:	042a      	lsls	r2, r5, #16
    6926:	0409      	lsls	r1, r1, #16
    6928:	0c12      	lsrs	r2, r2, #16
    692a:	430a      	orrs	r2, r1
    692c:	4593      	cmp	fp, r2
    692e:	d90d      	bls.n	694c <__aeabi_ddiv+0x29c>
    6930:	4643      	mov	r3, r8
    6932:	19d2      	adds	r2, r2, r7
    6934:	3b01      	subs	r3, #1
    6936:	4297      	cmp	r7, r2
    6938:	d900      	bls.n	693c <__aeabi_ddiv+0x28c>
    693a:	e13a      	b.n	6bb2 <__aeabi_ddiv+0x502>
    693c:	4593      	cmp	fp, r2
    693e:	d800      	bhi.n	6942 <__aeabi_ddiv+0x292>
    6940:	e137      	b.n	6bb2 <__aeabi_ddiv+0x502>
    6942:	2302      	movs	r3, #2
    6944:	425b      	negs	r3, r3
    6946:	469c      	mov	ip, r3
    6948:	19d2      	adds	r2, r2, r7
    694a:	44e0      	add	r8, ip
    694c:	465b      	mov	r3, fp
    694e:	1ad2      	subs	r2, r2, r3
    6950:	4643      	mov	r3, r8
    6952:	0436      	lsls	r6, r6, #16
    6954:	4333      	orrs	r3, r6
    6956:	469b      	mov	fp, r3
    6958:	9903      	ldr	r1, [sp, #12]
    695a:	0c18      	lsrs	r0, r3, #16
    695c:	0c0b      	lsrs	r3, r1, #16
    695e:	001d      	movs	r5, r3
    6960:	9305      	str	r3, [sp, #20]
    6962:	0409      	lsls	r1, r1, #16
    6964:	465b      	mov	r3, fp
    6966:	0c09      	lsrs	r1, r1, #16
    6968:	000c      	movs	r4, r1
    696a:	041b      	lsls	r3, r3, #16
    696c:	0c1b      	lsrs	r3, r3, #16
    696e:	4344      	muls	r4, r0
    6970:	9104      	str	r1, [sp, #16]
    6972:	4359      	muls	r1, r3
    6974:	436b      	muls	r3, r5
    6976:	4368      	muls	r0, r5
    6978:	191b      	adds	r3, r3, r4
    697a:	0c0d      	lsrs	r5, r1, #16
    697c:	18eb      	adds	r3, r5, r3
    697e:	429c      	cmp	r4, r3
    6980:	d903      	bls.n	698a <__aeabi_ddiv+0x2da>
    6982:	2480      	movs	r4, #128	; 0x80
    6984:	0264      	lsls	r4, r4, #9
    6986:	46a4      	mov	ip, r4
    6988:	4460      	add	r0, ip
    698a:	0c1c      	lsrs	r4, r3, #16
    698c:	0409      	lsls	r1, r1, #16
    698e:	041b      	lsls	r3, r3, #16
    6990:	0c09      	lsrs	r1, r1, #16
    6992:	1820      	adds	r0, r4, r0
    6994:	185d      	adds	r5, r3, r1
    6996:	4282      	cmp	r2, r0
    6998:	d200      	bcs.n	699c <__aeabi_ddiv+0x2ec>
    699a:	e0de      	b.n	6b5a <__aeabi_ddiv+0x4aa>
    699c:	d100      	bne.n	69a0 <__aeabi_ddiv+0x2f0>
    699e:	e0d7      	b.n	6b50 <__aeabi_ddiv+0x4a0>
    69a0:	1a16      	subs	r6, r2, r0
    69a2:	9b02      	ldr	r3, [sp, #8]
    69a4:	469c      	mov	ip, r3
    69a6:	1b5d      	subs	r5, r3, r5
    69a8:	45ac      	cmp	ip, r5
    69aa:	419b      	sbcs	r3, r3
    69ac:	425b      	negs	r3, r3
    69ae:	1af6      	subs	r6, r6, r3
    69b0:	42b7      	cmp	r7, r6
    69b2:	d100      	bne.n	69b6 <__aeabi_ddiv+0x306>
    69b4:	e106      	b.n	6bc4 <__aeabi_ddiv+0x514>
    69b6:	4649      	mov	r1, r9
    69b8:	0030      	movs	r0, r6
    69ba:	f7ff f97b 	bl	5cb4 <__aeabi_uidiv>
    69be:	9b00      	ldr	r3, [sp, #0]
    69c0:	0004      	movs	r4, r0
    69c2:	4343      	muls	r3, r0
    69c4:	4649      	mov	r1, r9
    69c6:	0030      	movs	r0, r6
    69c8:	4698      	mov	r8, r3
    69ca:	f7ff f9f9 	bl	5dc0 <__aeabi_uidivmod>
    69ce:	0c2e      	lsrs	r6, r5, #16
    69d0:	0409      	lsls	r1, r1, #16
    69d2:	430e      	orrs	r6, r1
    69d4:	45b0      	cmp	r8, r6
    69d6:	d909      	bls.n	69ec <__aeabi_ddiv+0x33c>
    69d8:	19f6      	adds	r6, r6, r7
    69da:	1e63      	subs	r3, r4, #1
    69dc:	42b7      	cmp	r7, r6
    69de:	d900      	bls.n	69e2 <__aeabi_ddiv+0x332>
    69e0:	e0f3      	b.n	6bca <__aeabi_ddiv+0x51a>
    69e2:	45b0      	cmp	r8, r6
    69e4:	d800      	bhi.n	69e8 <__aeabi_ddiv+0x338>
    69e6:	e0f0      	b.n	6bca <__aeabi_ddiv+0x51a>
    69e8:	3c02      	subs	r4, #2
    69ea:	19f6      	adds	r6, r6, r7
    69ec:	4643      	mov	r3, r8
    69ee:	1af3      	subs	r3, r6, r3
    69f0:	4649      	mov	r1, r9
    69f2:	0018      	movs	r0, r3
    69f4:	9302      	str	r3, [sp, #8]
    69f6:	f7ff f95d 	bl	5cb4 <__aeabi_uidiv>
    69fa:	9b00      	ldr	r3, [sp, #0]
    69fc:	0006      	movs	r6, r0
    69fe:	4343      	muls	r3, r0
    6a00:	4649      	mov	r1, r9
    6a02:	9802      	ldr	r0, [sp, #8]
    6a04:	4698      	mov	r8, r3
    6a06:	f7ff f9db 	bl	5dc0 <__aeabi_uidivmod>
    6a0a:	042d      	lsls	r5, r5, #16
    6a0c:	0409      	lsls	r1, r1, #16
    6a0e:	0c2d      	lsrs	r5, r5, #16
    6a10:	430d      	orrs	r5, r1
    6a12:	45a8      	cmp	r8, r5
    6a14:	d909      	bls.n	6a2a <__aeabi_ddiv+0x37a>
    6a16:	19ed      	adds	r5, r5, r7
    6a18:	1e73      	subs	r3, r6, #1
    6a1a:	42af      	cmp	r7, r5
    6a1c:	d900      	bls.n	6a20 <__aeabi_ddiv+0x370>
    6a1e:	e0d6      	b.n	6bce <__aeabi_ddiv+0x51e>
    6a20:	45a8      	cmp	r8, r5
    6a22:	d800      	bhi.n	6a26 <__aeabi_ddiv+0x376>
    6a24:	e0d3      	b.n	6bce <__aeabi_ddiv+0x51e>
    6a26:	3e02      	subs	r6, #2
    6a28:	19ed      	adds	r5, r5, r7
    6a2a:	0424      	lsls	r4, r4, #16
    6a2c:	0021      	movs	r1, r4
    6a2e:	4643      	mov	r3, r8
    6a30:	4331      	orrs	r1, r6
    6a32:	9e04      	ldr	r6, [sp, #16]
    6a34:	9a05      	ldr	r2, [sp, #20]
    6a36:	0030      	movs	r0, r6
    6a38:	1aed      	subs	r5, r5, r3
    6a3a:	040b      	lsls	r3, r1, #16
    6a3c:	0c0c      	lsrs	r4, r1, #16
    6a3e:	0c1b      	lsrs	r3, r3, #16
    6a40:	4358      	muls	r0, r3
    6a42:	4366      	muls	r6, r4
    6a44:	4353      	muls	r3, r2
    6a46:	4354      	muls	r4, r2
    6a48:	199a      	adds	r2, r3, r6
    6a4a:	0c03      	lsrs	r3, r0, #16
    6a4c:	189b      	adds	r3, r3, r2
    6a4e:	429e      	cmp	r6, r3
    6a50:	d903      	bls.n	6a5a <__aeabi_ddiv+0x3aa>
    6a52:	2280      	movs	r2, #128	; 0x80
    6a54:	0252      	lsls	r2, r2, #9
    6a56:	4694      	mov	ip, r2
    6a58:	4464      	add	r4, ip
    6a5a:	0c1a      	lsrs	r2, r3, #16
    6a5c:	0400      	lsls	r0, r0, #16
    6a5e:	041b      	lsls	r3, r3, #16
    6a60:	0c00      	lsrs	r0, r0, #16
    6a62:	1914      	adds	r4, r2, r4
    6a64:	181b      	adds	r3, r3, r0
    6a66:	42a5      	cmp	r5, r4
    6a68:	d350      	bcc.n	6b0c <__aeabi_ddiv+0x45c>
    6a6a:	d04d      	beq.n	6b08 <__aeabi_ddiv+0x458>
    6a6c:	2301      	movs	r3, #1
    6a6e:	4319      	orrs	r1, r3
    6a70:	4a96      	ldr	r2, [pc, #600]	; (6ccc <__aeabi_ddiv+0x61c>)
    6a72:	9b01      	ldr	r3, [sp, #4]
    6a74:	4694      	mov	ip, r2
    6a76:	4463      	add	r3, ip
    6a78:	2b00      	cmp	r3, #0
    6a7a:	dc00      	bgt.n	6a7e <__aeabi_ddiv+0x3ce>
    6a7c:	e6f3      	b.n	6866 <__aeabi_ddiv+0x1b6>
    6a7e:	074a      	lsls	r2, r1, #29
    6a80:	d009      	beq.n	6a96 <__aeabi_ddiv+0x3e6>
    6a82:	220f      	movs	r2, #15
    6a84:	400a      	ands	r2, r1
    6a86:	2a04      	cmp	r2, #4
    6a88:	d005      	beq.n	6a96 <__aeabi_ddiv+0x3e6>
    6a8a:	1d0a      	adds	r2, r1, #4
    6a8c:	428a      	cmp	r2, r1
    6a8e:	4189      	sbcs	r1, r1
    6a90:	4249      	negs	r1, r1
    6a92:	448b      	add	fp, r1
    6a94:	0011      	movs	r1, r2
    6a96:	465a      	mov	r2, fp
    6a98:	01d2      	lsls	r2, r2, #7
    6a9a:	d508      	bpl.n	6aae <__aeabi_ddiv+0x3fe>
    6a9c:	465a      	mov	r2, fp
    6a9e:	4b8c      	ldr	r3, [pc, #560]	; (6cd0 <__aeabi_ddiv+0x620>)
    6aa0:	401a      	ands	r2, r3
    6aa2:	4693      	mov	fp, r2
    6aa4:	2280      	movs	r2, #128	; 0x80
    6aa6:	00d2      	lsls	r2, r2, #3
    6aa8:	4694      	mov	ip, r2
    6aaa:	9b01      	ldr	r3, [sp, #4]
    6aac:	4463      	add	r3, ip
    6aae:	4a89      	ldr	r2, [pc, #548]	; (6cd4 <__aeabi_ddiv+0x624>)
    6ab0:	4293      	cmp	r3, r2
    6ab2:	dd00      	ble.n	6ab6 <__aeabi_ddiv+0x406>
    6ab4:	e65b      	b.n	676e <__aeabi_ddiv+0xbe>
    6ab6:	465a      	mov	r2, fp
    6ab8:	08c9      	lsrs	r1, r1, #3
    6aba:	0750      	lsls	r0, r2, #29
    6abc:	4308      	orrs	r0, r1
    6abe:	0256      	lsls	r6, r2, #9
    6ac0:	4651      	mov	r1, sl
    6ac2:	2201      	movs	r2, #1
    6ac4:	055b      	lsls	r3, r3, #21
    6ac6:	4681      	mov	r9, r0
    6ac8:	0b36      	lsrs	r6, r6, #12
    6aca:	0d5b      	lsrs	r3, r3, #21
    6acc:	400a      	ands	r2, r1
    6ace:	e655      	b.n	677c <__aeabi_ddiv+0xcc>
    6ad0:	2380      	movs	r3, #128	; 0x80
    6ad2:	031b      	lsls	r3, r3, #12
    6ad4:	421e      	tst	r6, r3
    6ad6:	d011      	beq.n	6afc <__aeabi_ddiv+0x44c>
    6ad8:	465a      	mov	r2, fp
    6ada:	421a      	tst	r2, r3
    6adc:	d10e      	bne.n	6afc <__aeabi_ddiv+0x44c>
    6ade:	465e      	mov	r6, fp
    6ae0:	431e      	orrs	r6, r3
    6ae2:	0336      	lsls	r6, r6, #12
    6ae4:	0b36      	lsrs	r6, r6, #12
    6ae6:	002a      	movs	r2, r5
    6ae8:	4689      	mov	r9, r1
    6aea:	4b7b      	ldr	r3, [pc, #492]	; (6cd8 <__aeabi_ddiv+0x628>)
    6aec:	e646      	b.n	677c <__aeabi_ddiv+0xcc>
    6aee:	2b03      	cmp	r3, #3
    6af0:	d100      	bne.n	6af4 <__aeabi_ddiv+0x444>
    6af2:	e0e1      	b.n	6cb8 <__aeabi_ddiv+0x608>
    6af4:	2b01      	cmp	r3, #1
    6af6:	d1bb      	bne.n	6a70 <__aeabi_ddiv+0x3c0>
    6af8:	401a      	ands	r2, r3
    6afa:	e6bb      	b.n	6874 <__aeabi_ddiv+0x1c4>
    6afc:	431e      	orrs	r6, r3
    6afe:	0336      	lsls	r6, r6, #12
    6b00:	0b36      	lsrs	r6, r6, #12
    6b02:	4642      	mov	r2, r8
    6b04:	4b74      	ldr	r3, [pc, #464]	; (6cd8 <__aeabi_ddiv+0x628>)
    6b06:	e639      	b.n	677c <__aeabi_ddiv+0xcc>
    6b08:	2b00      	cmp	r3, #0
    6b0a:	d0b1      	beq.n	6a70 <__aeabi_ddiv+0x3c0>
    6b0c:	197d      	adds	r5, r7, r5
    6b0e:	1e4a      	subs	r2, r1, #1
    6b10:	42af      	cmp	r7, r5
    6b12:	d952      	bls.n	6bba <__aeabi_ddiv+0x50a>
    6b14:	0011      	movs	r1, r2
    6b16:	42a5      	cmp	r5, r4
    6b18:	d1a8      	bne.n	6a6c <__aeabi_ddiv+0x3bc>
    6b1a:	9a03      	ldr	r2, [sp, #12]
    6b1c:	429a      	cmp	r2, r3
    6b1e:	d1a5      	bne.n	6a6c <__aeabi_ddiv+0x3bc>
    6b20:	e7a6      	b.n	6a70 <__aeabi_ddiv+0x3c0>
    6b22:	0003      	movs	r3, r0
    6b24:	003e      	movs	r6, r7
    6b26:	3b28      	subs	r3, #40	; 0x28
    6b28:	409e      	lsls	r6, r3
    6b2a:	2300      	movs	r3, #0
    6b2c:	4699      	mov	r9, r3
    6b2e:	e654      	b.n	67da <__aeabi_ddiv+0x12a>
    6b30:	f001 f880 	bl	7c34 <__clzsi2>
    6b34:	3020      	adds	r0, #32
    6b36:	e641      	b.n	67bc <__aeabi_ddiv+0x10c>
    6b38:	0003      	movs	r3, r0
    6b3a:	4652      	mov	r2, sl
    6b3c:	3b28      	subs	r3, #40	; 0x28
    6b3e:	409a      	lsls	r2, r3
    6b40:	2100      	movs	r1, #0
    6b42:	4693      	mov	fp, r2
    6b44:	e677      	b.n	6836 <__aeabi_ddiv+0x186>
    6b46:	4650      	mov	r0, sl
    6b48:	f001 f874 	bl	7c34 <__clzsi2>
    6b4c:	3020      	adds	r0, #32
    6b4e:	e65e      	b.n	680e <__aeabi_ddiv+0x15e>
    6b50:	9b02      	ldr	r3, [sp, #8]
    6b52:	2600      	movs	r6, #0
    6b54:	42ab      	cmp	r3, r5
    6b56:	d300      	bcc.n	6b5a <__aeabi_ddiv+0x4aa>
    6b58:	e723      	b.n	69a2 <__aeabi_ddiv+0x2f2>
    6b5a:	9e03      	ldr	r6, [sp, #12]
    6b5c:	9902      	ldr	r1, [sp, #8]
    6b5e:	46b4      	mov	ip, r6
    6b60:	4461      	add	r1, ip
    6b62:	4688      	mov	r8, r1
    6b64:	45b0      	cmp	r8, r6
    6b66:	41b6      	sbcs	r6, r6
    6b68:	465b      	mov	r3, fp
    6b6a:	4276      	negs	r6, r6
    6b6c:	19f6      	adds	r6, r6, r7
    6b6e:	18b2      	adds	r2, r6, r2
    6b70:	3b01      	subs	r3, #1
    6b72:	9102      	str	r1, [sp, #8]
    6b74:	4297      	cmp	r7, r2
    6b76:	d213      	bcs.n	6ba0 <__aeabi_ddiv+0x4f0>
    6b78:	4290      	cmp	r0, r2
    6b7a:	d84f      	bhi.n	6c1c <__aeabi_ddiv+0x56c>
    6b7c:	d100      	bne.n	6b80 <__aeabi_ddiv+0x4d0>
    6b7e:	e08e      	b.n	6c9e <__aeabi_ddiv+0x5ee>
    6b80:	1a16      	subs	r6, r2, r0
    6b82:	469b      	mov	fp, r3
    6b84:	e70d      	b.n	69a2 <__aeabi_ddiv+0x2f2>
    6b86:	4589      	cmp	r9, r1
    6b88:	d200      	bcs.n	6b8c <__aeabi_ddiv+0x4dc>
    6b8a:	e68e      	b.n	68aa <__aeabi_ddiv+0x1fa>
    6b8c:	0874      	lsrs	r4, r6, #1
    6b8e:	464b      	mov	r3, r9
    6b90:	07f6      	lsls	r6, r6, #31
    6b92:	0035      	movs	r5, r6
    6b94:	085b      	lsrs	r3, r3, #1
    6b96:	431d      	orrs	r5, r3
    6b98:	464b      	mov	r3, r9
    6b9a:	07db      	lsls	r3, r3, #31
    6b9c:	9302      	str	r3, [sp, #8]
    6b9e:	e68b      	b.n	68b8 <__aeabi_ddiv+0x208>
    6ba0:	4297      	cmp	r7, r2
    6ba2:	d1ed      	bne.n	6b80 <__aeabi_ddiv+0x4d0>
    6ba4:	9903      	ldr	r1, [sp, #12]
    6ba6:	9c02      	ldr	r4, [sp, #8]
    6ba8:	42a1      	cmp	r1, r4
    6baa:	d9e5      	bls.n	6b78 <__aeabi_ddiv+0x4c8>
    6bac:	1a3e      	subs	r6, r7, r0
    6bae:	469b      	mov	fp, r3
    6bb0:	e6f7      	b.n	69a2 <__aeabi_ddiv+0x2f2>
    6bb2:	4698      	mov	r8, r3
    6bb4:	e6ca      	b.n	694c <__aeabi_ddiv+0x29c>
    6bb6:	001e      	movs	r6, r3
    6bb8:	e6a5      	b.n	6906 <__aeabi_ddiv+0x256>
    6bba:	42ac      	cmp	r4, r5
    6bbc:	d83e      	bhi.n	6c3c <__aeabi_ddiv+0x58c>
    6bbe:	d074      	beq.n	6caa <__aeabi_ddiv+0x5fa>
    6bc0:	0011      	movs	r1, r2
    6bc2:	e753      	b.n	6a6c <__aeabi_ddiv+0x3bc>
    6bc4:	2101      	movs	r1, #1
    6bc6:	4249      	negs	r1, r1
    6bc8:	e752      	b.n	6a70 <__aeabi_ddiv+0x3c0>
    6bca:	001c      	movs	r4, r3
    6bcc:	e70e      	b.n	69ec <__aeabi_ddiv+0x33c>
    6bce:	001e      	movs	r6, r3
    6bd0:	e72b      	b.n	6a2a <__aeabi_ddiv+0x37a>
    6bd2:	2d1f      	cmp	r5, #31
    6bd4:	dc3c      	bgt.n	6c50 <__aeabi_ddiv+0x5a0>
    6bd6:	2320      	movs	r3, #32
    6bd8:	000a      	movs	r2, r1
    6bda:	4658      	mov	r0, fp
    6bdc:	1b5b      	subs	r3, r3, r5
    6bde:	4098      	lsls	r0, r3
    6be0:	40ea      	lsrs	r2, r5
    6be2:	4099      	lsls	r1, r3
    6be4:	4302      	orrs	r2, r0
    6be6:	1e48      	subs	r0, r1, #1
    6be8:	4181      	sbcs	r1, r0
    6bea:	465e      	mov	r6, fp
    6bec:	4311      	orrs	r1, r2
    6bee:	40ee      	lsrs	r6, r5
    6bf0:	074b      	lsls	r3, r1, #29
    6bf2:	d009      	beq.n	6c08 <__aeabi_ddiv+0x558>
    6bf4:	230f      	movs	r3, #15
    6bf6:	400b      	ands	r3, r1
    6bf8:	2b04      	cmp	r3, #4
    6bfa:	d005      	beq.n	6c08 <__aeabi_ddiv+0x558>
    6bfc:	000b      	movs	r3, r1
    6bfe:	1d19      	adds	r1, r3, #4
    6c00:	4299      	cmp	r1, r3
    6c02:	419b      	sbcs	r3, r3
    6c04:	425b      	negs	r3, r3
    6c06:	18f6      	adds	r6, r6, r3
    6c08:	0233      	lsls	r3, r6, #8
    6c0a:	d53c      	bpl.n	6c86 <__aeabi_ddiv+0x5d6>
    6c0c:	4653      	mov	r3, sl
    6c0e:	2201      	movs	r2, #1
    6c10:	2100      	movs	r1, #0
    6c12:	401a      	ands	r2, r3
    6c14:	2600      	movs	r6, #0
    6c16:	2301      	movs	r3, #1
    6c18:	4689      	mov	r9, r1
    6c1a:	e5af      	b.n	677c <__aeabi_ddiv+0xcc>
    6c1c:	2302      	movs	r3, #2
    6c1e:	425b      	negs	r3, r3
    6c20:	469c      	mov	ip, r3
    6c22:	9c03      	ldr	r4, [sp, #12]
    6c24:	44e3      	add	fp, ip
    6c26:	46a4      	mov	ip, r4
    6c28:	9b02      	ldr	r3, [sp, #8]
    6c2a:	4463      	add	r3, ip
    6c2c:	4698      	mov	r8, r3
    6c2e:	45a0      	cmp	r8, r4
    6c30:	41b6      	sbcs	r6, r6
    6c32:	4276      	negs	r6, r6
    6c34:	19f6      	adds	r6, r6, r7
    6c36:	9302      	str	r3, [sp, #8]
    6c38:	18b2      	adds	r2, r6, r2
    6c3a:	e6b1      	b.n	69a0 <__aeabi_ddiv+0x2f0>
    6c3c:	9803      	ldr	r0, [sp, #12]
    6c3e:	1e8a      	subs	r2, r1, #2
    6c40:	0041      	lsls	r1, r0, #1
    6c42:	4281      	cmp	r1, r0
    6c44:	41b6      	sbcs	r6, r6
    6c46:	4276      	negs	r6, r6
    6c48:	19f6      	adds	r6, r6, r7
    6c4a:	19ad      	adds	r5, r5, r6
    6c4c:	9103      	str	r1, [sp, #12]
    6c4e:	e761      	b.n	6b14 <__aeabi_ddiv+0x464>
    6c50:	221f      	movs	r2, #31
    6c52:	4252      	negs	r2, r2
    6c54:	1ad3      	subs	r3, r2, r3
    6c56:	465a      	mov	r2, fp
    6c58:	40da      	lsrs	r2, r3
    6c5a:	0013      	movs	r3, r2
    6c5c:	2d20      	cmp	r5, #32
    6c5e:	d029      	beq.n	6cb4 <__aeabi_ddiv+0x604>
    6c60:	2240      	movs	r2, #64	; 0x40
    6c62:	4658      	mov	r0, fp
    6c64:	1b55      	subs	r5, r2, r5
    6c66:	40a8      	lsls	r0, r5
    6c68:	4301      	orrs	r1, r0
    6c6a:	1e48      	subs	r0, r1, #1
    6c6c:	4181      	sbcs	r1, r0
    6c6e:	2007      	movs	r0, #7
    6c70:	430b      	orrs	r3, r1
    6c72:	4018      	ands	r0, r3
    6c74:	2600      	movs	r6, #0
    6c76:	2800      	cmp	r0, #0
    6c78:	d009      	beq.n	6c8e <__aeabi_ddiv+0x5de>
    6c7a:	220f      	movs	r2, #15
    6c7c:	2600      	movs	r6, #0
    6c7e:	401a      	ands	r2, r3
    6c80:	0019      	movs	r1, r3
    6c82:	2a04      	cmp	r2, #4
    6c84:	d1bb      	bne.n	6bfe <__aeabi_ddiv+0x54e>
    6c86:	000b      	movs	r3, r1
    6c88:	0770      	lsls	r0, r6, #29
    6c8a:	0276      	lsls	r6, r6, #9
    6c8c:	0b36      	lsrs	r6, r6, #12
    6c8e:	08db      	lsrs	r3, r3, #3
    6c90:	4303      	orrs	r3, r0
    6c92:	4699      	mov	r9, r3
    6c94:	2201      	movs	r2, #1
    6c96:	4653      	mov	r3, sl
    6c98:	401a      	ands	r2, r3
    6c9a:	2300      	movs	r3, #0
    6c9c:	e56e      	b.n	677c <__aeabi_ddiv+0xcc>
    6c9e:	9902      	ldr	r1, [sp, #8]
    6ca0:	428d      	cmp	r5, r1
    6ca2:	d8bb      	bhi.n	6c1c <__aeabi_ddiv+0x56c>
    6ca4:	469b      	mov	fp, r3
    6ca6:	2600      	movs	r6, #0
    6ca8:	e67b      	b.n	69a2 <__aeabi_ddiv+0x2f2>
    6caa:	9803      	ldr	r0, [sp, #12]
    6cac:	4298      	cmp	r0, r3
    6cae:	d3c5      	bcc.n	6c3c <__aeabi_ddiv+0x58c>
    6cb0:	0011      	movs	r1, r2
    6cb2:	e732      	b.n	6b1a <__aeabi_ddiv+0x46a>
    6cb4:	2000      	movs	r0, #0
    6cb6:	e7d7      	b.n	6c68 <__aeabi_ddiv+0x5b8>
    6cb8:	2680      	movs	r6, #128	; 0x80
    6cba:	465b      	mov	r3, fp
    6cbc:	0336      	lsls	r6, r6, #12
    6cbe:	431e      	orrs	r6, r3
    6cc0:	0336      	lsls	r6, r6, #12
    6cc2:	0b36      	lsrs	r6, r6, #12
    6cc4:	9a00      	ldr	r2, [sp, #0]
    6cc6:	4689      	mov	r9, r1
    6cc8:	4b03      	ldr	r3, [pc, #12]	; (6cd8 <__aeabi_ddiv+0x628>)
    6cca:	e557      	b.n	677c <__aeabi_ddiv+0xcc>
    6ccc:	000003ff 	.word	0x000003ff
    6cd0:	feffffff 	.word	0xfeffffff
    6cd4:	000007fe 	.word	0x000007fe
    6cd8:	000007ff 	.word	0x000007ff

00006cdc <__eqdf2>:
    6cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cde:	465f      	mov	r7, fp
    6ce0:	4656      	mov	r6, sl
    6ce2:	464d      	mov	r5, r9
    6ce4:	4644      	mov	r4, r8
    6ce6:	b4f0      	push	{r4, r5, r6, r7}
    6ce8:	031f      	lsls	r7, r3, #12
    6cea:	005c      	lsls	r4, r3, #1
    6cec:	0fdb      	lsrs	r3, r3, #31
    6cee:	469a      	mov	sl, r3
    6cf0:	4b19      	ldr	r3, [pc, #100]	; (6d58 <__eqdf2+0x7c>)
    6cf2:	030e      	lsls	r6, r1, #12
    6cf4:	004d      	lsls	r5, r1, #1
    6cf6:	0fc9      	lsrs	r1, r1, #31
    6cf8:	4680      	mov	r8, r0
    6cfa:	0b36      	lsrs	r6, r6, #12
    6cfc:	0d6d      	lsrs	r5, r5, #21
    6cfe:	468b      	mov	fp, r1
    6d00:	4691      	mov	r9, r2
    6d02:	0b3f      	lsrs	r7, r7, #12
    6d04:	0d64      	lsrs	r4, r4, #21
    6d06:	429d      	cmp	r5, r3
    6d08:	d019      	beq.n	6d3e <__eqdf2+0x62>
    6d0a:	4b13      	ldr	r3, [pc, #76]	; (6d58 <__eqdf2+0x7c>)
    6d0c:	429c      	cmp	r4, r3
    6d0e:	d01b      	beq.n	6d48 <__eqdf2+0x6c>
    6d10:	2301      	movs	r3, #1
    6d12:	42a5      	cmp	r5, r4
    6d14:	d006      	beq.n	6d24 <__eqdf2+0x48>
    6d16:	0018      	movs	r0, r3
    6d18:	bc3c      	pop	{r2, r3, r4, r5}
    6d1a:	4690      	mov	r8, r2
    6d1c:	4699      	mov	r9, r3
    6d1e:	46a2      	mov	sl, r4
    6d20:	46ab      	mov	fp, r5
    6d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d24:	42be      	cmp	r6, r7
    6d26:	d1f6      	bne.n	6d16 <__eqdf2+0x3a>
    6d28:	45c8      	cmp	r8, r9
    6d2a:	d1f4      	bne.n	6d16 <__eqdf2+0x3a>
    6d2c:	45d3      	cmp	fp, sl
    6d2e:	d010      	beq.n	6d52 <__eqdf2+0x76>
    6d30:	2d00      	cmp	r5, #0
    6d32:	d1f0      	bne.n	6d16 <__eqdf2+0x3a>
    6d34:	4330      	orrs	r0, r6
    6d36:	0003      	movs	r3, r0
    6d38:	1e5a      	subs	r2, r3, #1
    6d3a:	4193      	sbcs	r3, r2
    6d3c:	e7eb      	b.n	6d16 <__eqdf2+0x3a>
    6d3e:	0031      	movs	r1, r6
    6d40:	2301      	movs	r3, #1
    6d42:	4301      	orrs	r1, r0
    6d44:	d1e7      	bne.n	6d16 <__eqdf2+0x3a>
    6d46:	e7e0      	b.n	6d0a <__eqdf2+0x2e>
    6d48:	433a      	orrs	r2, r7
    6d4a:	2301      	movs	r3, #1
    6d4c:	2a00      	cmp	r2, #0
    6d4e:	d1e2      	bne.n	6d16 <__eqdf2+0x3a>
    6d50:	e7de      	b.n	6d10 <__eqdf2+0x34>
    6d52:	2300      	movs	r3, #0
    6d54:	e7df      	b.n	6d16 <__eqdf2+0x3a>
    6d56:	46c0      	nop			; (mov r8, r8)
    6d58:	000007ff 	.word	0x000007ff

00006d5c <__gedf2>:
    6d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d5e:	465f      	mov	r7, fp
    6d60:	4644      	mov	r4, r8
    6d62:	4656      	mov	r6, sl
    6d64:	464d      	mov	r5, r9
    6d66:	b4f0      	push	{r4, r5, r6, r7}
    6d68:	031f      	lsls	r7, r3, #12
    6d6a:	0b3c      	lsrs	r4, r7, #12
    6d6c:	4f2c      	ldr	r7, [pc, #176]	; (6e20 <__gedf2+0xc4>)
    6d6e:	030e      	lsls	r6, r1, #12
    6d70:	004d      	lsls	r5, r1, #1
    6d72:	46a3      	mov	fp, r4
    6d74:	005c      	lsls	r4, r3, #1
    6d76:	4684      	mov	ip, r0
    6d78:	0b36      	lsrs	r6, r6, #12
    6d7a:	0d6d      	lsrs	r5, r5, #21
    6d7c:	0fc9      	lsrs	r1, r1, #31
    6d7e:	4690      	mov	r8, r2
    6d80:	0d64      	lsrs	r4, r4, #21
    6d82:	0fdb      	lsrs	r3, r3, #31
    6d84:	42bd      	cmp	r5, r7
    6d86:	d02b      	beq.n	6de0 <__gedf2+0x84>
    6d88:	4f25      	ldr	r7, [pc, #148]	; (6e20 <__gedf2+0xc4>)
    6d8a:	42bc      	cmp	r4, r7
    6d8c:	d02e      	beq.n	6dec <__gedf2+0x90>
    6d8e:	2d00      	cmp	r5, #0
    6d90:	d10e      	bne.n	6db0 <__gedf2+0x54>
    6d92:	4330      	orrs	r0, r6
    6d94:	0007      	movs	r7, r0
    6d96:	4681      	mov	r9, r0
    6d98:	4278      	negs	r0, r7
    6d9a:	4178      	adcs	r0, r7
    6d9c:	2c00      	cmp	r4, #0
    6d9e:	d117      	bne.n	6dd0 <__gedf2+0x74>
    6da0:	465f      	mov	r7, fp
    6da2:	433a      	orrs	r2, r7
    6da4:	d114      	bne.n	6dd0 <__gedf2+0x74>
    6da6:	464b      	mov	r3, r9
    6da8:	2000      	movs	r0, #0
    6daa:	2b00      	cmp	r3, #0
    6dac:	d00a      	beq.n	6dc4 <__gedf2+0x68>
    6dae:	e006      	b.n	6dbe <__gedf2+0x62>
    6db0:	2c00      	cmp	r4, #0
    6db2:	d102      	bne.n	6dba <__gedf2+0x5e>
    6db4:	4658      	mov	r0, fp
    6db6:	4302      	orrs	r2, r0
    6db8:	d001      	beq.n	6dbe <__gedf2+0x62>
    6dba:	4299      	cmp	r1, r3
    6dbc:	d01a      	beq.n	6df4 <__gedf2+0x98>
    6dbe:	2301      	movs	r3, #1
    6dc0:	4248      	negs	r0, r1
    6dc2:	4318      	orrs	r0, r3
    6dc4:	bc3c      	pop	{r2, r3, r4, r5}
    6dc6:	4690      	mov	r8, r2
    6dc8:	4699      	mov	r9, r3
    6dca:	46a2      	mov	sl, r4
    6dcc:	46ab      	mov	fp, r5
    6dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6dd0:	2800      	cmp	r0, #0
    6dd2:	d0f2      	beq.n	6dba <__gedf2+0x5e>
    6dd4:	4258      	negs	r0, r3
    6dd6:	4158      	adcs	r0, r3
    6dd8:	2201      	movs	r2, #1
    6dda:	4240      	negs	r0, r0
    6ddc:	4310      	orrs	r0, r2
    6dde:	e7f1      	b.n	6dc4 <__gedf2+0x68>
    6de0:	0037      	movs	r7, r6
    6de2:	4307      	orrs	r7, r0
    6de4:	d0d0      	beq.n	6d88 <__gedf2+0x2c>
    6de6:	2002      	movs	r0, #2
    6de8:	4240      	negs	r0, r0
    6dea:	e7eb      	b.n	6dc4 <__gedf2+0x68>
    6dec:	465f      	mov	r7, fp
    6dee:	4317      	orrs	r7, r2
    6df0:	d0cd      	beq.n	6d8e <__gedf2+0x32>
    6df2:	e7f8      	b.n	6de6 <__gedf2+0x8a>
    6df4:	42a5      	cmp	r5, r4
    6df6:	dce2      	bgt.n	6dbe <__gedf2+0x62>
    6df8:	db05      	blt.n	6e06 <__gedf2+0xaa>
    6dfa:	455e      	cmp	r6, fp
    6dfc:	d8df      	bhi.n	6dbe <__gedf2+0x62>
    6dfe:	d008      	beq.n	6e12 <__gedf2+0xb6>
    6e00:	2000      	movs	r0, #0
    6e02:	455e      	cmp	r6, fp
    6e04:	d2de      	bcs.n	6dc4 <__gedf2+0x68>
    6e06:	4248      	negs	r0, r1
    6e08:	4148      	adcs	r0, r1
    6e0a:	2301      	movs	r3, #1
    6e0c:	4240      	negs	r0, r0
    6e0e:	4318      	orrs	r0, r3
    6e10:	e7d8      	b.n	6dc4 <__gedf2+0x68>
    6e12:	45c4      	cmp	ip, r8
    6e14:	d8d3      	bhi.n	6dbe <__gedf2+0x62>
    6e16:	2000      	movs	r0, #0
    6e18:	45c4      	cmp	ip, r8
    6e1a:	d3f4      	bcc.n	6e06 <__gedf2+0xaa>
    6e1c:	e7d2      	b.n	6dc4 <__gedf2+0x68>
    6e1e:	46c0      	nop			; (mov r8, r8)
    6e20:	000007ff 	.word	0x000007ff

00006e24 <__ledf2>:
    6e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e26:	465f      	mov	r7, fp
    6e28:	464d      	mov	r5, r9
    6e2a:	4644      	mov	r4, r8
    6e2c:	4656      	mov	r6, sl
    6e2e:	b4f0      	push	{r4, r5, r6, r7}
    6e30:	031c      	lsls	r4, r3, #12
    6e32:	0b24      	lsrs	r4, r4, #12
    6e34:	46a4      	mov	ip, r4
    6e36:	4c2f      	ldr	r4, [pc, #188]	; (6ef4 <__ledf2+0xd0>)
    6e38:	030f      	lsls	r7, r1, #12
    6e3a:	004d      	lsls	r5, r1, #1
    6e3c:	005e      	lsls	r6, r3, #1
    6e3e:	0fc9      	lsrs	r1, r1, #31
    6e40:	4680      	mov	r8, r0
    6e42:	0b3f      	lsrs	r7, r7, #12
    6e44:	0d6d      	lsrs	r5, r5, #21
    6e46:	468b      	mov	fp, r1
    6e48:	4691      	mov	r9, r2
    6e4a:	0d76      	lsrs	r6, r6, #21
    6e4c:	0fdb      	lsrs	r3, r3, #31
    6e4e:	42a5      	cmp	r5, r4
    6e50:	d020      	beq.n	6e94 <__ledf2+0x70>
    6e52:	4c28      	ldr	r4, [pc, #160]	; (6ef4 <__ledf2+0xd0>)
    6e54:	42a6      	cmp	r6, r4
    6e56:	d022      	beq.n	6e9e <__ledf2+0x7a>
    6e58:	2d00      	cmp	r5, #0
    6e5a:	d112      	bne.n	6e82 <__ledf2+0x5e>
    6e5c:	4338      	orrs	r0, r7
    6e5e:	4244      	negs	r4, r0
    6e60:	4144      	adcs	r4, r0
    6e62:	2e00      	cmp	r6, #0
    6e64:	d020      	beq.n	6ea8 <__ledf2+0x84>
    6e66:	2c00      	cmp	r4, #0
    6e68:	d00d      	beq.n	6e86 <__ledf2+0x62>
    6e6a:	425c      	negs	r4, r3
    6e6c:	4163      	adcs	r3, r4
    6e6e:	2401      	movs	r4, #1
    6e70:	425b      	negs	r3, r3
    6e72:	431c      	orrs	r4, r3
    6e74:	0020      	movs	r0, r4
    6e76:	bc3c      	pop	{r2, r3, r4, r5}
    6e78:	4690      	mov	r8, r2
    6e7a:	4699      	mov	r9, r3
    6e7c:	46a2      	mov	sl, r4
    6e7e:	46ab      	mov	fp, r5
    6e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e82:	2e00      	cmp	r6, #0
    6e84:	d017      	beq.n	6eb6 <__ledf2+0x92>
    6e86:	455b      	cmp	r3, fp
    6e88:	d019      	beq.n	6ebe <__ledf2+0x9a>
    6e8a:	465b      	mov	r3, fp
    6e8c:	425c      	negs	r4, r3
    6e8e:	2301      	movs	r3, #1
    6e90:	431c      	orrs	r4, r3
    6e92:	e7ef      	b.n	6e74 <__ledf2+0x50>
    6e94:	0039      	movs	r1, r7
    6e96:	2402      	movs	r4, #2
    6e98:	4301      	orrs	r1, r0
    6e9a:	d1eb      	bne.n	6e74 <__ledf2+0x50>
    6e9c:	e7d9      	b.n	6e52 <__ledf2+0x2e>
    6e9e:	4661      	mov	r1, ip
    6ea0:	2402      	movs	r4, #2
    6ea2:	4311      	orrs	r1, r2
    6ea4:	d1e6      	bne.n	6e74 <__ledf2+0x50>
    6ea6:	e7d7      	b.n	6e58 <__ledf2+0x34>
    6ea8:	4661      	mov	r1, ip
    6eaa:	430a      	orrs	r2, r1
    6eac:	d1db      	bne.n	6e66 <__ledf2+0x42>
    6eae:	2400      	movs	r4, #0
    6eb0:	2800      	cmp	r0, #0
    6eb2:	d0df      	beq.n	6e74 <__ledf2+0x50>
    6eb4:	e7e9      	b.n	6e8a <__ledf2+0x66>
    6eb6:	4661      	mov	r1, ip
    6eb8:	430a      	orrs	r2, r1
    6eba:	d1e4      	bne.n	6e86 <__ledf2+0x62>
    6ebc:	e7e5      	b.n	6e8a <__ledf2+0x66>
    6ebe:	42b5      	cmp	r5, r6
    6ec0:	dd03      	ble.n	6eca <__ledf2+0xa6>
    6ec2:	2201      	movs	r2, #1
    6ec4:	425c      	negs	r4, r3
    6ec6:	4314      	orrs	r4, r2
    6ec8:	e7d4      	b.n	6e74 <__ledf2+0x50>
    6eca:	42b5      	cmp	r5, r6
    6ecc:	dbcd      	blt.n	6e6a <__ledf2+0x46>
    6ece:	4567      	cmp	r7, ip
    6ed0:	d8db      	bhi.n	6e8a <__ledf2+0x66>
    6ed2:	d009      	beq.n	6ee8 <__ledf2+0xc4>
    6ed4:	2400      	movs	r4, #0
    6ed6:	4567      	cmp	r7, ip
    6ed8:	d2cc      	bcs.n	6e74 <__ledf2+0x50>
    6eda:	4659      	mov	r1, fp
    6edc:	424c      	negs	r4, r1
    6ede:	4161      	adcs	r1, r4
    6ee0:	2401      	movs	r4, #1
    6ee2:	4249      	negs	r1, r1
    6ee4:	430c      	orrs	r4, r1
    6ee6:	e7c5      	b.n	6e74 <__ledf2+0x50>
    6ee8:	45c8      	cmp	r8, r9
    6eea:	d8ce      	bhi.n	6e8a <__ledf2+0x66>
    6eec:	2400      	movs	r4, #0
    6eee:	45c8      	cmp	r8, r9
    6ef0:	d3f3      	bcc.n	6eda <__ledf2+0xb6>
    6ef2:	e7bf      	b.n	6e74 <__ledf2+0x50>
    6ef4:	000007ff 	.word	0x000007ff

00006ef8 <__aeabi_dmul>:
    6ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6efa:	465f      	mov	r7, fp
    6efc:	4656      	mov	r6, sl
    6efe:	464d      	mov	r5, r9
    6f00:	4644      	mov	r4, r8
    6f02:	b4f0      	push	{r4, r5, r6, r7}
    6f04:	030d      	lsls	r5, r1, #12
    6f06:	4699      	mov	r9, r3
    6f08:	004e      	lsls	r6, r1, #1
    6f0a:	0b2b      	lsrs	r3, r5, #12
    6f0c:	b087      	sub	sp, #28
    6f0e:	0007      	movs	r7, r0
    6f10:	4692      	mov	sl, r2
    6f12:	4680      	mov	r8, r0
    6f14:	469b      	mov	fp, r3
    6f16:	0d76      	lsrs	r6, r6, #21
    6f18:	0fcc      	lsrs	r4, r1, #31
    6f1a:	2e00      	cmp	r6, #0
    6f1c:	d069      	beq.n	6ff2 <__aeabi_dmul+0xfa>
    6f1e:	4b6d      	ldr	r3, [pc, #436]	; (70d4 <__aeabi_dmul+0x1dc>)
    6f20:	429e      	cmp	r6, r3
    6f22:	d035      	beq.n	6f90 <__aeabi_dmul+0x98>
    6f24:	465b      	mov	r3, fp
    6f26:	2280      	movs	r2, #128	; 0x80
    6f28:	00dd      	lsls	r5, r3, #3
    6f2a:	0412      	lsls	r2, r2, #16
    6f2c:	0f43      	lsrs	r3, r0, #29
    6f2e:	4313      	orrs	r3, r2
    6f30:	432b      	orrs	r3, r5
    6f32:	469b      	mov	fp, r3
    6f34:	00c3      	lsls	r3, r0, #3
    6f36:	4698      	mov	r8, r3
    6f38:	4b67      	ldr	r3, [pc, #412]	; (70d8 <__aeabi_dmul+0x1e0>)
    6f3a:	2700      	movs	r7, #0
    6f3c:	469c      	mov	ip, r3
    6f3e:	2300      	movs	r3, #0
    6f40:	4466      	add	r6, ip
    6f42:	9301      	str	r3, [sp, #4]
    6f44:	464a      	mov	r2, r9
    6f46:	0315      	lsls	r5, r2, #12
    6f48:	0050      	lsls	r0, r2, #1
    6f4a:	0fd2      	lsrs	r2, r2, #31
    6f4c:	4653      	mov	r3, sl
    6f4e:	0b2d      	lsrs	r5, r5, #12
    6f50:	0d40      	lsrs	r0, r0, #21
    6f52:	4691      	mov	r9, r2
    6f54:	d100      	bne.n	6f58 <__aeabi_dmul+0x60>
    6f56:	e076      	b.n	7046 <__aeabi_dmul+0x14e>
    6f58:	4a5e      	ldr	r2, [pc, #376]	; (70d4 <__aeabi_dmul+0x1dc>)
    6f5a:	4290      	cmp	r0, r2
    6f5c:	d06c      	beq.n	7038 <__aeabi_dmul+0x140>
    6f5e:	2280      	movs	r2, #128	; 0x80
    6f60:	0f5b      	lsrs	r3, r3, #29
    6f62:	0412      	lsls	r2, r2, #16
    6f64:	4313      	orrs	r3, r2
    6f66:	4a5c      	ldr	r2, [pc, #368]	; (70d8 <__aeabi_dmul+0x1e0>)
    6f68:	00ed      	lsls	r5, r5, #3
    6f6a:	4694      	mov	ip, r2
    6f6c:	431d      	orrs	r5, r3
    6f6e:	4653      	mov	r3, sl
    6f70:	2200      	movs	r2, #0
    6f72:	00db      	lsls	r3, r3, #3
    6f74:	4460      	add	r0, ip
    6f76:	4649      	mov	r1, r9
    6f78:	1836      	adds	r6, r6, r0
    6f7a:	1c70      	adds	r0, r6, #1
    6f7c:	4061      	eors	r1, r4
    6f7e:	9002      	str	r0, [sp, #8]
    6f80:	4317      	orrs	r7, r2
    6f82:	2f0f      	cmp	r7, #15
    6f84:	d900      	bls.n	6f88 <__aeabi_dmul+0x90>
    6f86:	e0af      	b.n	70e8 <__aeabi_dmul+0x1f0>
    6f88:	4854      	ldr	r0, [pc, #336]	; (70dc <__aeabi_dmul+0x1e4>)
    6f8a:	00bf      	lsls	r7, r7, #2
    6f8c:	59c7      	ldr	r7, [r0, r7]
    6f8e:	46bf      	mov	pc, r7
    6f90:	465b      	mov	r3, fp
    6f92:	431f      	orrs	r7, r3
    6f94:	d000      	beq.n	6f98 <__aeabi_dmul+0xa0>
    6f96:	e088      	b.n	70aa <__aeabi_dmul+0x1b2>
    6f98:	2300      	movs	r3, #0
    6f9a:	469b      	mov	fp, r3
    6f9c:	4698      	mov	r8, r3
    6f9e:	3302      	adds	r3, #2
    6fa0:	2708      	movs	r7, #8
    6fa2:	9301      	str	r3, [sp, #4]
    6fa4:	e7ce      	b.n	6f44 <__aeabi_dmul+0x4c>
    6fa6:	4649      	mov	r1, r9
    6fa8:	2a02      	cmp	r2, #2
    6faa:	d06a      	beq.n	7082 <__aeabi_dmul+0x18a>
    6fac:	2a03      	cmp	r2, #3
    6fae:	d100      	bne.n	6fb2 <__aeabi_dmul+0xba>
    6fb0:	e209      	b.n	73c6 <__aeabi_dmul+0x4ce>
    6fb2:	2a01      	cmp	r2, #1
    6fb4:	d000      	beq.n	6fb8 <__aeabi_dmul+0xc0>
    6fb6:	e1bb      	b.n	7330 <__aeabi_dmul+0x438>
    6fb8:	4011      	ands	r1, r2
    6fba:	2200      	movs	r2, #0
    6fbc:	2300      	movs	r3, #0
    6fbe:	2500      	movs	r5, #0
    6fc0:	4690      	mov	r8, r2
    6fc2:	b2cc      	uxtb	r4, r1
    6fc4:	2100      	movs	r1, #0
    6fc6:	032d      	lsls	r5, r5, #12
    6fc8:	0d0a      	lsrs	r2, r1, #20
    6fca:	0512      	lsls	r2, r2, #20
    6fcc:	0b2d      	lsrs	r5, r5, #12
    6fce:	4315      	orrs	r5, r2
    6fd0:	4a43      	ldr	r2, [pc, #268]	; (70e0 <__aeabi_dmul+0x1e8>)
    6fd2:	051b      	lsls	r3, r3, #20
    6fd4:	4015      	ands	r5, r2
    6fd6:	431d      	orrs	r5, r3
    6fd8:	006d      	lsls	r5, r5, #1
    6fda:	07e4      	lsls	r4, r4, #31
    6fdc:	086d      	lsrs	r5, r5, #1
    6fde:	4325      	orrs	r5, r4
    6fe0:	4640      	mov	r0, r8
    6fe2:	0029      	movs	r1, r5
    6fe4:	b007      	add	sp, #28
    6fe6:	bc3c      	pop	{r2, r3, r4, r5}
    6fe8:	4690      	mov	r8, r2
    6fea:	4699      	mov	r9, r3
    6fec:	46a2      	mov	sl, r4
    6fee:	46ab      	mov	fp, r5
    6ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ff2:	4303      	orrs	r3, r0
    6ff4:	d052      	beq.n	709c <__aeabi_dmul+0x1a4>
    6ff6:	465b      	mov	r3, fp
    6ff8:	2b00      	cmp	r3, #0
    6ffa:	d100      	bne.n	6ffe <__aeabi_dmul+0x106>
    6ffc:	e18a      	b.n	7314 <__aeabi_dmul+0x41c>
    6ffe:	4658      	mov	r0, fp
    7000:	f000 fe18 	bl	7c34 <__clzsi2>
    7004:	0003      	movs	r3, r0
    7006:	3b0b      	subs	r3, #11
    7008:	2b1c      	cmp	r3, #28
    700a:	dd00      	ble.n	700e <__aeabi_dmul+0x116>
    700c:	e17b      	b.n	7306 <__aeabi_dmul+0x40e>
    700e:	221d      	movs	r2, #29
    7010:	1ad3      	subs	r3, r2, r3
    7012:	003a      	movs	r2, r7
    7014:	0001      	movs	r1, r0
    7016:	465d      	mov	r5, fp
    7018:	40da      	lsrs	r2, r3
    701a:	3908      	subs	r1, #8
    701c:	408d      	lsls	r5, r1
    701e:	0013      	movs	r3, r2
    7020:	408f      	lsls	r7, r1
    7022:	432b      	orrs	r3, r5
    7024:	469b      	mov	fp, r3
    7026:	46b8      	mov	r8, r7
    7028:	4b2e      	ldr	r3, [pc, #184]	; (70e4 <__aeabi_dmul+0x1ec>)
    702a:	2700      	movs	r7, #0
    702c:	469c      	mov	ip, r3
    702e:	2300      	movs	r3, #0
    7030:	4460      	add	r0, ip
    7032:	4246      	negs	r6, r0
    7034:	9301      	str	r3, [sp, #4]
    7036:	e785      	b.n	6f44 <__aeabi_dmul+0x4c>
    7038:	4652      	mov	r2, sl
    703a:	432a      	orrs	r2, r5
    703c:	d12c      	bne.n	7098 <__aeabi_dmul+0x1a0>
    703e:	2500      	movs	r5, #0
    7040:	2300      	movs	r3, #0
    7042:	2202      	movs	r2, #2
    7044:	e797      	b.n	6f76 <__aeabi_dmul+0x7e>
    7046:	4652      	mov	r2, sl
    7048:	432a      	orrs	r2, r5
    704a:	d021      	beq.n	7090 <__aeabi_dmul+0x198>
    704c:	2d00      	cmp	r5, #0
    704e:	d100      	bne.n	7052 <__aeabi_dmul+0x15a>
    7050:	e154      	b.n	72fc <__aeabi_dmul+0x404>
    7052:	0028      	movs	r0, r5
    7054:	f000 fdee 	bl	7c34 <__clzsi2>
    7058:	0003      	movs	r3, r0
    705a:	3b0b      	subs	r3, #11
    705c:	2b1c      	cmp	r3, #28
    705e:	dd00      	ble.n	7062 <__aeabi_dmul+0x16a>
    7060:	e146      	b.n	72f0 <__aeabi_dmul+0x3f8>
    7062:	211d      	movs	r1, #29
    7064:	1acb      	subs	r3, r1, r3
    7066:	4651      	mov	r1, sl
    7068:	0002      	movs	r2, r0
    706a:	40d9      	lsrs	r1, r3
    706c:	4653      	mov	r3, sl
    706e:	3a08      	subs	r2, #8
    7070:	4095      	lsls	r5, r2
    7072:	4093      	lsls	r3, r2
    7074:	430d      	orrs	r5, r1
    7076:	4a1b      	ldr	r2, [pc, #108]	; (70e4 <__aeabi_dmul+0x1ec>)
    7078:	4694      	mov	ip, r2
    707a:	4460      	add	r0, ip
    707c:	4240      	negs	r0, r0
    707e:	2200      	movs	r2, #0
    7080:	e779      	b.n	6f76 <__aeabi_dmul+0x7e>
    7082:	2401      	movs	r4, #1
    7084:	2200      	movs	r2, #0
    7086:	400c      	ands	r4, r1
    7088:	4b12      	ldr	r3, [pc, #72]	; (70d4 <__aeabi_dmul+0x1dc>)
    708a:	2500      	movs	r5, #0
    708c:	4690      	mov	r8, r2
    708e:	e799      	b.n	6fc4 <__aeabi_dmul+0xcc>
    7090:	2500      	movs	r5, #0
    7092:	2300      	movs	r3, #0
    7094:	2201      	movs	r2, #1
    7096:	e76e      	b.n	6f76 <__aeabi_dmul+0x7e>
    7098:	2203      	movs	r2, #3
    709a:	e76c      	b.n	6f76 <__aeabi_dmul+0x7e>
    709c:	2300      	movs	r3, #0
    709e:	469b      	mov	fp, r3
    70a0:	4698      	mov	r8, r3
    70a2:	3301      	adds	r3, #1
    70a4:	2704      	movs	r7, #4
    70a6:	9301      	str	r3, [sp, #4]
    70a8:	e74c      	b.n	6f44 <__aeabi_dmul+0x4c>
    70aa:	2303      	movs	r3, #3
    70ac:	270c      	movs	r7, #12
    70ae:	9301      	str	r3, [sp, #4]
    70b0:	e748      	b.n	6f44 <__aeabi_dmul+0x4c>
    70b2:	2300      	movs	r3, #0
    70b4:	2580      	movs	r5, #128	; 0x80
    70b6:	4698      	mov	r8, r3
    70b8:	2400      	movs	r4, #0
    70ba:	032d      	lsls	r5, r5, #12
    70bc:	4b05      	ldr	r3, [pc, #20]	; (70d4 <__aeabi_dmul+0x1dc>)
    70be:	e781      	b.n	6fc4 <__aeabi_dmul+0xcc>
    70c0:	465d      	mov	r5, fp
    70c2:	4643      	mov	r3, r8
    70c4:	9a01      	ldr	r2, [sp, #4]
    70c6:	e76f      	b.n	6fa8 <__aeabi_dmul+0xb0>
    70c8:	465d      	mov	r5, fp
    70ca:	4643      	mov	r3, r8
    70cc:	0021      	movs	r1, r4
    70ce:	9a01      	ldr	r2, [sp, #4]
    70d0:	e76a      	b.n	6fa8 <__aeabi_dmul+0xb0>
    70d2:	46c0      	nop			; (mov r8, r8)
    70d4:	000007ff 	.word	0x000007ff
    70d8:	fffffc01 	.word	0xfffffc01
    70dc:	000086f8 	.word	0x000086f8
    70e0:	800fffff 	.word	0x800fffff
    70e4:	000003f3 	.word	0x000003f3
    70e8:	4642      	mov	r2, r8
    70ea:	0c12      	lsrs	r2, r2, #16
    70ec:	4691      	mov	r9, r2
    70ee:	0c1a      	lsrs	r2, r3, #16
    70f0:	4694      	mov	ip, r2
    70f2:	4642      	mov	r2, r8
    70f4:	0417      	lsls	r7, r2, #16
    70f6:	464a      	mov	r2, r9
    70f8:	041b      	lsls	r3, r3, #16
    70fa:	0c1b      	lsrs	r3, r3, #16
    70fc:	435a      	muls	r2, r3
    70fe:	4660      	mov	r0, ip
    7100:	4690      	mov	r8, r2
    7102:	464a      	mov	r2, r9
    7104:	4342      	muls	r2, r0
    7106:	0010      	movs	r0, r2
    7108:	9203      	str	r2, [sp, #12]
    710a:	4662      	mov	r2, ip
    710c:	001c      	movs	r4, r3
    710e:	0c3f      	lsrs	r7, r7, #16
    7110:	437a      	muls	r2, r7
    7112:	437c      	muls	r4, r7
    7114:	4442      	add	r2, r8
    7116:	9201      	str	r2, [sp, #4]
    7118:	0c22      	lsrs	r2, r4, #16
    711a:	4692      	mov	sl, r2
    711c:	9a01      	ldr	r2, [sp, #4]
    711e:	4452      	add	r2, sl
    7120:	4590      	cmp	r8, r2
    7122:	d906      	bls.n	7132 <__aeabi_dmul+0x23a>
    7124:	4682      	mov	sl, r0
    7126:	2080      	movs	r0, #128	; 0x80
    7128:	0240      	lsls	r0, r0, #9
    712a:	4680      	mov	r8, r0
    712c:	44c2      	add	sl, r8
    712e:	4650      	mov	r0, sl
    7130:	9003      	str	r0, [sp, #12]
    7132:	0c10      	lsrs	r0, r2, #16
    7134:	9004      	str	r0, [sp, #16]
    7136:	4648      	mov	r0, r9
    7138:	0424      	lsls	r4, r4, #16
    713a:	0c24      	lsrs	r4, r4, #16
    713c:	0412      	lsls	r2, r2, #16
    713e:	1912      	adds	r2, r2, r4
    7140:	9205      	str	r2, [sp, #20]
    7142:	0c2a      	lsrs	r2, r5, #16
    7144:	042d      	lsls	r5, r5, #16
    7146:	0c2d      	lsrs	r5, r5, #16
    7148:	4368      	muls	r0, r5
    714a:	002c      	movs	r4, r5
    714c:	4682      	mov	sl, r0
    714e:	4648      	mov	r0, r9
    7150:	437c      	muls	r4, r7
    7152:	4350      	muls	r0, r2
    7154:	4681      	mov	r9, r0
    7156:	0c20      	lsrs	r0, r4, #16
    7158:	4680      	mov	r8, r0
    715a:	4357      	muls	r7, r2
    715c:	4457      	add	r7, sl
    715e:	4447      	add	r7, r8
    7160:	45ba      	cmp	sl, r7
    7162:	d903      	bls.n	716c <__aeabi_dmul+0x274>
    7164:	2080      	movs	r0, #128	; 0x80
    7166:	0240      	lsls	r0, r0, #9
    7168:	4680      	mov	r8, r0
    716a:	44c1      	add	r9, r8
    716c:	0c38      	lsrs	r0, r7, #16
    716e:	043f      	lsls	r7, r7, #16
    7170:	46b8      	mov	r8, r7
    7172:	4448      	add	r0, r9
    7174:	0424      	lsls	r4, r4, #16
    7176:	0c24      	lsrs	r4, r4, #16
    7178:	9001      	str	r0, [sp, #4]
    717a:	9804      	ldr	r0, [sp, #16]
    717c:	44a0      	add	r8, r4
    717e:	4440      	add	r0, r8
    7180:	9004      	str	r0, [sp, #16]
    7182:	4658      	mov	r0, fp
    7184:	0c00      	lsrs	r0, r0, #16
    7186:	4681      	mov	r9, r0
    7188:	4658      	mov	r0, fp
    718a:	0404      	lsls	r4, r0, #16
    718c:	0c20      	lsrs	r0, r4, #16
    718e:	4682      	mov	sl, r0
    7190:	0007      	movs	r7, r0
    7192:	4648      	mov	r0, r9
    7194:	435f      	muls	r7, r3
    7196:	464c      	mov	r4, r9
    7198:	4343      	muls	r3, r0
    719a:	4660      	mov	r0, ip
    719c:	4360      	muls	r0, r4
    719e:	4664      	mov	r4, ip
    71a0:	4683      	mov	fp, r0
    71a2:	4650      	mov	r0, sl
    71a4:	4344      	muls	r4, r0
    71a6:	0c38      	lsrs	r0, r7, #16
    71a8:	4684      	mov	ip, r0
    71aa:	18e4      	adds	r4, r4, r3
    71ac:	4464      	add	r4, ip
    71ae:	42a3      	cmp	r3, r4
    71b0:	d903      	bls.n	71ba <__aeabi_dmul+0x2c2>
    71b2:	2380      	movs	r3, #128	; 0x80
    71b4:	025b      	lsls	r3, r3, #9
    71b6:	469c      	mov	ip, r3
    71b8:	44e3      	add	fp, ip
    71ba:	4648      	mov	r0, r9
    71bc:	043f      	lsls	r7, r7, #16
    71be:	0c23      	lsrs	r3, r4, #16
    71c0:	0c3f      	lsrs	r7, r7, #16
    71c2:	0424      	lsls	r4, r4, #16
    71c4:	19e4      	adds	r4, r4, r7
    71c6:	4657      	mov	r7, sl
    71c8:	4368      	muls	r0, r5
    71ca:	436f      	muls	r7, r5
    71cc:	4684      	mov	ip, r0
    71ce:	464d      	mov	r5, r9
    71d0:	4650      	mov	r0, sl
    71d2:	4355      	muls	r5, r2
    71d4:	4342      	muls	r2, r0
    71d6:	0c38      	lsrs	r0, r7, #16
    71d8:	4681      	mov	r9, r0
    71da:	4462      	add	r2, ip
    71dc:	444a      	add	r2, r9
    71de:	445b      	add	r3, fp
    71e0:	4594      	cmp	ip, r2
    71e2:	d903      	bls.n	71ec <__aeabi_dmul+0x2f4>
    71e4:	2080      	movs	r0, #128	; 0x80
    71e6:	0240      	lsls	r0, r0, #9
    71e8:	4684      	mov	ip, r0
    71ea:	4465      	add	r5, ip
    71ec:	9803      	ldr	r0, [sp, #12]
    71ee:	043f      	lsls	r7, r7, #16
    71f0:	4683      	mov	fp, r0
    71f2:	9804      	ldr	r0, [sp, #16]
    71f4:	0c3f      	lsrs	r7, r7, #16
    71f6:	4684      	mov	ip, r0
    71f8:	44e3      	add	fp, ip
    71fa:	45c3      	cmp	fp, r8
    71fc:	4180      	sbcs	r0, r0
    71fe:	4240      	negs	r0, r0
    7200:	4682      	mov	sl, r0
    7202:	0410      	lsls	r0, r2, #16
    7204:	4684      	mov	ip, r0
    7206:	9801      	ldr	r0, [sp, #4]
    7208:	4467      	add	r7, ip
    720a:	4684      	mov	ip, r0
    720c:	4467      	add	r7, ip
    720e:	44a3      	add	fp, r4
    7210:	46bc      	mov	ip, r7
    7212:	45a3      	cmp	fp, r4
    7214:	41a4      	sbcs	r4, r4
    7216:	4699      	mov	r9, r3
    7218:	44d4      	add	ip, sl
    721a:	4264      	negs	r4, r4
    721c:	4287      	cmp	r7, r0
    721e:	41bf      	sbcs	r7, r7
    7220:	45d4      	cmp	ip, sl
    7222:	4180      	sbcs	r0, r0
    7224:	44e1      	add	r9, ip
    7226:	46a0      	mov	r8, r4
    7228:	4599      	cmp	r9, r3
    722a:	419b      	sbcs	r3, r3
    722c:	427f      	negs	r7, r7
    722e:	4240      	negs	r0, r0
    7230:	44c8      	add	r8, r9
    7232:	4307      	orrs	r7, r0
    7234:	0c12      	lsrs	r2, r2, #16
    7236:	18ba      	adds	r2, r7, r2
    7238:	45a0      	cmp	r8, r4
    723a:	41a4      	sbcs	r4, r4
    723c:	425f      	negs	r7, r3
    723e:	003b      	movs	r3, r7
    7240:	4264      	negs	r4, r4
    7242:	4323      	orrs	r3, r4
    7244:	18d7      	adds	r7, r2, r3
    7246:	4643      	mov	r3, r8
    7248:	197d      	adds	r5, r7, r5
    724a:	0ddb      	lsrs	r3, r3, #23
    724c:	026d      	lsls	r5, r5, #9
    724e:	431d      	orrs	r5, r3
    7250:	465b      	mov	r3, fp
    7252:	025a      	lsls	r2, r3, #9
    7254:	9b05      	ldr	r3, [sp, #20]
    7256:	431a      	orrs	r2, r3
    7258:	1e53      	subs	r3, r2, #1
    725a:	419a      	sbcs	r2, r3
    725c:	465b      	mov	r3, fp
    725e:	0ddb      	lsrs	r3, r3, #23
    7260:	431a      	orrs	r2, r3
    7262:	4643      	mov	r3, r8
    7264:	025b      	lsls	r3, r3, #9
    7266:	4313      	orrs	r3, r2
    7268:	01ea      	lsls	r2, r5, #7
    726a:	d507      	bpl.n	727c <__aeabi_dmul+0x384>
    726c:	2201      	movs	r2, #1
    726e:	085c      	lsrs	r4, r3, #1
    7270:	4013      	ands	r3, r2
    7272:	4323      	orrs	r3, r4
    7274:	07ea      	lsls	r2, r5, #31
    7276:	9e02      	ldr	r6, [sp, #8]
    7278:	4313      	orrs	r3, r2
    727a:	086d      	lsrs	r5, r5, #1
    727c:	4a57      	ldr	r2, [pc, #348]	; (73dc <__aeabi_dmul+0x4e4>)
    727e:	18b2      	adds	r2, r6, r2
    7280:	2a00      	cmp	r2, #0
    7282:	dd4b      	ble.n	731c <__aeabi_dmul+0x424>
    7284:	0758      	lsls	r0, r3, #29
    7286:	d009      	beq.n	729c <__aeabi_dmul+0x3a4>
    7288:	200f      	movs	r0, #15
    728a:	4018      	ands	r0, r3
    728c:	2804      	cmp	r0, #4
    728e:	d005      	beq.n	729c <__aeabi_dmul+0x3a4>
    7290:	1d18      	adds	r0, r3, #4
    7292:	4298      	cmp	r0, r3
    7294:	419b      	sbcs	r3, r3
    7296:	425b      	negs	r3, r3
    7298:	18ed      	adds	r5, r5, r3
    729a:	0003      	movs	r3, r0
    729c:	01e8      	lsls	r0, r5, #7
    729e:	d504      	bpl.n	72aa <__aeabi_dmul+0x3b2>
    72a0:	4a4f      	ldr	r2, [pc, #316]	; (73e0 <__aeabi_dmul+0x4e8>)
    72a2:	4015      	ands	r5, r2
    72a4:	2280      	movs	r2, #128	; 0x80
    72a6:	00d2      	lsls	r2, r2, #3
    72a8:	18b2      	adds	r2, r6, r2
    72aa:	484e      	ldr	r0, [pc, #312]	; (73e4 <__aeabi_dmul+0x4ec>)
    72ac:	4282      	cmp	r2, r0
    72ae:	dd00      	ble.n	72b2 <__aeabi_dmul+0x3ba>
    72b0:	e6e7      	b.n	7082 <__aeabi_dmul+0x18a>
    72b2:	2401      	movs	r4, #1
    72b4:	08db      	lsrs	r3, r3, #3
    72b6:	0768      	lsls	r0, r5, #29
    72b8:	4318      	orrs	r0, r3
    72ba:	026d      	lsls	r5, r5, #9
    72bc:	0553      	lsls	r3, r2, #21
    72be:	4680      	mov	r8, r0
    72c0:	0b2d      	lsrs	r5, r5, #12
    72c2:	0d5b      	lsrs	r3, r3, #21
    72c4:	400c      	ands	r4, r1
    72c6:	e67d      	b.n	6fc4 <__aeabi_dmul+0xcc>
    72c8:	2280      	movs	r2, #128	; 0x80
    72ca:	4659      	mov	r1, fp
    72cc:	0312      	lsls	r2, r2, #12
    72ce:	4211      	tst	r1, r2
    72d0:	d008      	beq.n	72e4 <__aeabi_dmul+0x3ec>
    72d2:	4215      	tst	r5, r2
    72d4:	d106      	bne.n	72e4 <__aeabi_dmul+0x3ec>
    72d6:	4315      	orrs	r5, r2
    72d8:	032d      	lsls	r5, r5, #12
    72da:	4698      	mov	r8, r3
    72dc:	0b2d      	lsrs	r5, r5, #12
    72de:	464c      	mov	r4, r9
    72e0:	4b41      	ldr	r3, [pc, #260]	; (73e8 <__aeabi_dmul+0x4f0>)
    72e2:	e66f      	b.n	6fc4 <__aeabi_dmul+0xcc>
    72e4:	465d      	mov	r5, fp
    72e6:	4315      	orrs	r5, r2
    72e8:	032d      	lsls	r5, r5, #12
    72ea:	0b2d      	lsrs	r5, r5, #12
    72ec:	4b3e      	ldr	r3, [pc, #248]	; (73e8 <__aeabi_dmul+0x4f0>)
    72ee:	e669      	b.n	6fc4 <__aeabi_dmul+0xcc>
    72f0:	0003      	movs	r3, r0
    72f2:	4655      	mov	r5, sl
    72f4:	3b28      	subs	r3, #40	; 0x28
    72f6:	409d      	lsls	r5, r3
    72f8:	2300      	movs	r3, #0
    72fa:	e6bc      	b.n	7076 <__aeabi_dmul+0x17e>
    72fc:	4650      	mov	r0, sl
    72fe:	f000 fc99 	bl	7c34 <__clzsi2>
    7302:	3020      	adds	r0, #32
    7304:	e6a8      	b.n	7058 <__aeabi_dmul+0x160>
    7306:	0003      	movs	r3, r0
    7308:	3b28      	subs	r3, #40	; 0x28
    730a:	409f      	lsls	r7, r3
    730c:	2300      	movs	r3, #0
    730e:	46bb      	mov	fp, r7
    7310:	4698      	mov	r8, r3
    7312:	e689      	b.n	7028 <__aeabi_dmul+0x130>
    7314:	f000 fc8e 	bl	7c34 <__clzsi2>
    7318:	3020      	adds	r0, #32
    731a:	e673      	b.n	7004 <__aeabi_dmul+0x10c>
    731c:	2401      	movs	r4, #1
    731e:	1aa6      	subs	r6, r4, r2
    7320:	2e38      	cmp	r6, #56	; 0x38
    7322:	dd07      	ble.n	7334 <__aeabi_dmul+0x43c>
    7324:	2200      	movs	r2, #0
    7326:	400c      	ands	r4, r1
    7328:	2300      	movs	r3, #0
    732a:	2500      	movs	r5, #0
    732c:	4690      	mov	r8, r2
    732e:	e649      	b.n	6fc4 <__aeabi_dmul+0xcc>
    7330:	9e02      	ldr	r6, [sp, #8]
    7332:	e7a3      	b.n	727c <__aeabi_dmul+0x384>
    7334:	2e1f      	cmp	r6, #31
    7336:	dc20      	bgt.n	737a <__aeabi_dmul+0x482>
    7338:	2220      	movs	r2, #32
    733a:	002c      	movs	r4, r5
    733c:	0018      	movs	r0, r3
    733e:	1b92      	subs	r2, r2, r6
    7340:	40f0      	lsrs	r0, r6
    7342:	4094      	lsls	r4, r2
    7344:	4093      	lsls	r3, r2
    7346:	4304      	orrs	r4, r0
    7348:	1e58      	subs	r0, r3, #1
    734a:	4183      	sbcs	r3, r0
    734c:	431c      	orrs	r4, r3
    734e:	40f5      	lsrs	r5, r6
    7350:	0763      	lsls	r3, r4, #29
    7352:	d009      	beq.n	7368 <__aeabi_dmul+0x470>
    7354:	230f      	movs	r3, #15
    7356:	4023      	ands	r3, r4
    7358:	2b04      	cmp	r3, #4
    735a:	d005      	beq.n	7368 <__aeabi_dmul+0x470>
    735c:	0023      	movs	r3, r4
    735e:	1d1c      	adds	r4, r3, #4
    7360:	429c      	cmp	r4, r3
    7362:	4192      	sbcs	r2, r2
    7364:	4252      	negs	r2, r2
    7366:	18ad      	adds	r5, r5, r2
    7368:	022b      	lsls	r3, r5, #8
    736a:	d51f      	bpl.n	73ac <__aeabi_dmul+0x4b4>
    736c:	2401      	movs	r4, #1
    736e:	2200      	movs	r2, #0
    7370:	400c      	ands	r4, r1
    7372:	2301      	movs	r3, #1
    7374:	2500      	movs	r5, #0
    7376:	4690      	mov	r8, r2
    7378:	e624      	b.n	6fc4 <__aeabi_dmul+0xcc>
    737a:	201f      	movs	r0, #31
    737c:	002c      	movs	r4, r5
    737e:	4240      	negs	r0, r0
    7380:	1a82      	subs	r2, r0, r2
    7382:	40d4      	lsrs	r4, r2
    7384:	2e20      	cmp	r6, #32
    7386:	d01c      	beq.n	73c2 <__aeabi_dmul+0x4ca>
    7388:	2240      	movs	r2, #64	; 0x40
    738a:	1b96      	subs	r6, r2, r6
    738c:	40b5      	lsls	r5, r6
    738e:	432b      	orrs	r3, r5
    7390:	1e58      	subs	r0, r3, #1
    7392:	4183      	sbcs	r3, r0
    7394:	2007      	movs	r0, #7
    7396:	4323      	orrs	r3, r4
    7398:	4018      	ands	r0, r3
    739a:	2500      	movs	r5, #0
    739c:	2800      	cmp	r0, #0
    739e:	d009      	beq.n	73b4 <__aeabi_dmul+0x4bc>
    73a0:	220f      	movs	r2, #15
    73a2:	2500      	movs	r5, #0
    73a4:	401a      	ands	r2, r3
    73a6:	001c      	movs	r4, r3
    73a8:	2a04      	cmp	r2, #4
    73aa:	d1d8      	bne.n	735e <__aeabi_dmul+0x466>
    73ac:	0023      	movs	r3, r4
    73ae:	0768      	lsls	r0, r5, #29
    73b0:	026d      	lsls	r5, r5, #9
    73b2:	0b2d      	lsrs	r5, r5, #12
    73b4:	2401      	movs	r4, #1
    73b6:	08db      	lsrs	r3, r3, #3
    73b8:	4303      	orrs	r3, r0
    73ba:	4698      	mov	r8, r3
    73bc:	400c      	ands	r4, r1
    73be:	2300      	movs	r3, #0
    73c0:	e600      	b.n	6fc4 <__aeabi_dmul+0xcc>
    73c2:	2500      	movs	r5, #0
    73c4:	e7e3      	b.n	738e <__aeabi_dmul+0x496>
    73c6:	2280      	movs	r2, #128	; 0x80
    73c8:	2401      	movs	r4, #1
    73ca:	0312      	lsls	r2, r2, #12
    73cc:	4315      	orrs	r5, r2
    73ce:	032d      	lsls	r5, r5, #12
    73d0:	4698      	mov	r8, r3
    73d2:	0b2d      	lsrs	r5, r5, #12
    73d4:	400c      	ands	r4, r1
    73d6:	4b04      	ldr	r3, [pc, #16]	; (73e8 <__aeabi_dmul+0x4f0>)
    73d8:	e5f4      	b.n	6fc4 <__aeabi_dmul+0xcc>
    73da:	46c0      	nop			; (mov r8, r8)
    73dc:	000003ff 	.word	0x000003ff
    73e0:	feffffff 	.word	0xfeffffff
    73e4:	000007fe 	.word	0x000007fe
    73e8:	000007ff 	.word	0x000007ff

000073ec <__aeabi_dsub>:
    73ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    73ee:	4657      	mov	r7, sl
    73f0:	464e      	mov	r6, r9
    73f2:	4645      	mov	r5, r8
    73f4:	b4e0      	push	{r5, r6, r7}
    73f6:	000e      	movs	r6, r1
    73f8:	0011      	movs	r1, r2
    73fa:	0ff2      	lsrs	r2, r6, #31
    73fc:	4692      	mov	sl, r2
    73fe:	00c5      	lsls	r5, r0, #3
    7400:	0f42      	lsrs	r2, r0, #29
    7402:	0318      	lsls	r0, r3, #12
    7404:	0337      	lsls	r7, r6, #12
    7406:	0074      	lsls	r4, r6, #1
    7408:	0a40      	lsrs	r0, r0, #9
    740a:	0f4e      	lsrs	r6, r1, #29
    740c:	0a7f      	lsrs	r7, r7, #9
    740e:	4330      	orrs	r0, r6
    7410:	4ecf      	ldr	r6, [pc, #828]	; (7750 <__aeabi_dsub+0x364>)
    7412:	4317      	orrs	r7, r2
    7414:	005a      	lsls	r2, r3, #1
    7416:	0d64      	lsrs	r4, r4, #21
    7418:	0d52      	lsrs	r2, r2, #21
    741a:	0fdb      	lsrs	r3, r3, #31
    741c:	00c9      	lsls	r1, r1, #3
    741e:	42b2      	cmp	r2, r6
    7420:	d100      	bne.n	7424 <__aeabi_dsub+0x38>
    7422:	e0e5      	b.n	75f0 <__aeabi_dsub+0x204>
    7424:	2601      	movs	r6, #1
    7426:	4073      	eors	r3, r6
    7428:	1aa6      	subs	r6, r4, r2
    742a:	46b4      	mov	ip, r6
    742c:	4553      	cmp	r3, sl
    742e:	d100      	bne.n	7432 <__aeabi_dsub+0x46>
    7430:	e0af      	b.n	7592 <__aeabi_dsub+0x1a6>
    7432:	2e00      	cmp	r6, #0
    7434:	dc00      	bgt.n	7438 <__aeabi_dsub+0x4c>
    7436:	e10d      	b.n	7654 <__aeabi_dsub+0x268>
    7438:	2a00      	cmp	r2, #0
    743a:	d13a      	bne.n	74b2 <__aeabi_dsub+0xc6>
    743c:	0003      	movs	r3, r0
    743e:	430b      	orrs	r3, r1
    7440:	d000      	beq.n	7444 <__aeabi_dsub+0x58>
    7442:	e0e4      	b.n	760e <__aeabi_dsub+0x222>
    7444:	076b      	lsls	r3, r5, #29
    7446:	d009      	beq.n	745c <__aeabi_dsub+0x70>
    7448:	230f      	movs	r3, #15
    744a:	402b      	ands	r3, r5
    744c:	2b04      	cmp	r3, #4
    744e:	d005      	beq.n	745c <__aeabi_dsub+0x70>
    7450:	1d2b      	adds	r3, r5, #4
    7452:	42ab      	cmp	r3, r5
    7454:	41ad      	sbcs	r5, r5
    7456:	426d      	negs	r5, r5
    7458:	197f      	adds	r7, r7, r5
    745a:	001d      	movs	r5, r3
    745c:	023b      	lsls	r3, r7, #8
    745e:	d400      	bmi.n	7462 <__aeabi_dsub+0x76>
    7460:	e088      	b.n	7574 <__aeabi_dsub+0x188>
    7462:	4bbb      	ldr	r3, [pc, #748]	; (7750 <__aeabi_dsub+0x364>)
    7464:	3401      	adds	r4, #1
    7466:	429c      	cmp	r4, r3
    7468:	d100      	bne.n	746c <__aeabi_dsub+0x80>
    746a:	e110      	b.n	768e <__aeabi_dsub+0x2a2>
    746c:	003a      	movs	r2, r7
    746e:	4bb9      	ldr	r3, [pc, #740]	; (7754 <__aeabi_dsub+0x368>)
    7470:	4651      	mov	r1, sl
    7472:	401a      	ands	r2, r3
    7474:	2301      	movs	r3, #1
    7476:	0750      	lsls	r0, r2, #29
    7478:	08ed      	lsrs	r5, r5, #3
    747a:	0252      	lsls	r2, r2, #9
    747c:	0564      	lsls	r4, r4, #21
    747e:	4305      	orrs	r5, r0
    7480:	0b12      	lsrs	r2, r2, #12
    7482:	0d64      	lsrs	r4, r4, #21
    7484:	400b      	ands	r3, r1
    7486:	2100      	movs	r1, #0
    7488:	0028      	movs	r0, r5
    748a:	0312      	lsls	r2, r2, #12
    748c:	0d0d      	lsrs	r5, r1, #20
    748e:	0b12      	lsrs	r2, r2, #12
    7490:	0564      	lsls	r4, r4, #21
    7492:	052d      	lsls	r5, r5, #20
    7494:	4315      	orrs	r5, r2
    7496:	0862      	lsrs	r2, r4, #1
    7498:	4caf      	ldr	r4, [pc, #700]	; (7758 <__aeabi_dsub+0x36c>)
    749a:	07db      	lsls	r3, r3, #31
    749c:	402c      	ands	r4, r5
    749e:	4314      	orrs	r4, r2
    74a0:	0064      	lsls	r4, r4, #1
    74a2:	0864      	lsrs	r4, r4, #1
    74a4:	431c      	orrs	r4, r3
    74a6:	0021      	movs	r1, r4
    74a8:	bc1c      	pop	{r2, r3, r4}
    74aa:	4690      	mov	r8, r2
    74ac:	4699      	mov	r9, r3
    74ae:	46a2      	mov	sl, r4
    74b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74b2:	4ba7      	ldr	r3, [pc, #668]	; (7750 <__aeabi_dsub+0x364>)
    74b4:	429c      	cmp	r4, r3
    74b6:	d0c5      	beq.n	7444 <__aeabi_dsub+0x58>
    74b8:	2380      	movs	r3, #128	; 0x80
    74ba:	041b      	lsls	r3, r3, #16
    74bc:	4318      	orrs	r0, r3
    74be:	4663      	mov	r3, ip
    74c0:	2b38      	cmp	r3, #56	; 0x38
    74c2:	dd00      	ble.n	74c6 <__aeabi_dsub+0xda>
    74c4:	e0fd      	b.n	76c2 <__aeabi_dsub+0x2d6>
    74c6:	2b1f      	cmp	r3, #31
    74c8:	dd00      	ble.n	74cc <__aeabi_dsub+0xe0>
    74ca:	e130      	b.n	772e <__aeabi_dsub+0x342>
    74cc:	4662      	mov	r2, ip
    74ce:	2320      	movs	r3, #32
    74d0:	1a9b      	subs	r3, r3, r2
    74d2:	0002      	movs	r2, r0
    74d4:	409a      	lsls	r2, r3
    74d6:	4666      	mov	r6, ip
    74d8:	4690      	mov	r8, r2
    74da:	000a      	movs	r2, r1
    74dc:	4099      	lsls	r1, r3
    74de:	40f2      	lsrs	r2, r6
    74e0:	4646      	mov	r6, r8
    74e2:	1e4b      	subs	r3, r1, #1
    74e4:	4199      	sbcs	r1, r3
    74e6:	4332      	orrs	r2, r6
    74e8:	4311      	orrs	r1, r2
    74ea:	4663      	mov	r3, ip
    74ec:	0002      	movs	r2, r0
    74ee:	40da      	lsrs	r2, r3
    74f0:	1a69      	subs	r1, r5, r1
    74f2:	428d      	cmp	r5, r1
    74f4:	419b      	sbcs	r3, r3
    74f6:	000d      	movs	r5, r1
    74f8:	1aba      	subs	r2, r7, r2
    74fa:	425b      	negs	r3, r3
    74fc:	1ad7      	subs	r7, r2, r3
    74fe:	023b      	lsls	r3, r7, #8
    7500:	d535      	bpl.n	756e <__aeabi_dsub+0x182>
    7502:	027a      	lsls	r2, r7, #9
    7504:	0a53      	lsrs	r3, r2, #9
    7506:	4698      	mov	r8, r3
    7508:	4643      	mov	r3, r8
    750a:	2b00      	cmp	r3, #0
    750c:	d100      	bne.n	7510 <__aeabi_dsub+0x124>
    750e:	e0c4      	b.n	769a <__aeabi_dsub+0x2ae>
    7510:	4640      	mov	r0, r8
    7512:	f000 fb8f 	bl	7c34 <__clzsi2>
    7516:	0003      	movs	r3, r0
    7518:	3b08      	subs	r3, #8
    751a:	2b1f      	cmp	r3, #31
    751c:	dd00      	ble.n	7520 <__aeabi_dsub+0x134>
    751e:	e0c5      	b.n	76ac <__aeabi_dsub+0x2c0>
    7520:	2220      	movs	r2, #32
    7522:	0029      	movs	r1, r5
    7524:	1ad2      	subs	r2, r2, r3
    7526:	4647      	mov	r7, r8
    7528:	40d1      	lsrs	r1, r2
    752a:	409f      	lsls	r7, r3
    752c:	000a      	movs	r2, r1
    752e:	409d      	lsls	r5, r3
    7530:	433a      	orrs	r2, r7
    7532:	429c      	cmp	r4, r3
    7534:	dd00      	ble.n	7538 <__aeabi_dsub+0x14c>
    7536:	e0c0      	b.n	76ba <__aeabi_dsub+0x2ce>
    7538:	1b1c      	subs	r4, r3, r4
    753a:	1c63      	adds	r3, r4, #1
    753c:	2b1f      	cmp	r3, #31
    753e:	dd00      	ble.n	7542 <__aeabi_dsub+0x156>
    7540:	e0e4      	b.n	770c <__aeabi_dsub+0x320>
    7542:	2120      	movs	r1, #32
    7544:	0014      	movs	r4, r2
    7546:	0028      	movs	r0, r5
    7548:	1ac9      	subs	r1, r1, r3
    754a:	40d8      	lsrs	r0, r3
    754c:	408c      	lsls	r4, r1
    754e:	408d      	lsls	r5, r1
    7550:	4304      	orrs	r4, r0
    7552:	40da      	lsrs	r2, r3
    7554:	1e68      	subs	r0, r5, #1
    7556:	4185      	sbcs	r5, r0
    7558:	0017      	movs	r7, r2
    755a:	4325      	orrs	r5, r4
    755c:	2400      	movs	r4, #0
    755e:	e771      	b.n	7444 <__aeabi_dsub+0x58>
    7560:	4642      	mov	r2, r8
    7562:	4663      	mov	r3, ip
    7564:	431a      	orrs	r2, r3
    7566:	d100      	bne.n	756a <__aeabi_dsub+0x17e>
    7568:	e24c      	b.n	7a04 <__aeabi_dsub+0x618>
    756a:	4667      	mov	r7, ip
    756c:	4645      	mov	r5, r8
    756e:	076b      	lsls	r3, r5, #29
    7570:	d000      	beq.n	7574 <__aeabi_dsub+0x188>
    7572:	e769      	b.n	7448 <__aeabi_dsub+0x5c>
    7574:	2301      	movs	r3, #1
    7576:	4651      	mov	r1, sl
    7578:	0778      	lsls	r0, r7, #29
    757a:	08ed      	lsrs	r5, r5, #3
    757c:	08fa      	lsrs	r2, r7, #3
    757e:	400b      	ands	r3, r1
    7580:	4305      	orrs	r5, r0
    7582:	4973      	ldr	r1, [pc, #460]	; (7750 <__aeabi_dsub+0x364>)
    7584:	428c      	cmp	r4, r1
    7586:	d038      	beq.n	75fa <__aeabi_dsub+0x20e>
    7588:	0312      	lsls	r2, r2, #12
    758a:	0564      	lsls	r4, r4, #21
    758c:	0b12      	lsrs	r2, r2, #12
    758e:	0d64      	lsrs	r4, r4, #21
    7590:	e779      	b.n	7486 <__aeabi_dsub+0x9a>
    7592:	2e00      	cmp	r6, #0
    7594:	dc00      	bgt.n	7598 <__aeabi_dsub+0x1ac>
    7596:	e09a      	b.n	76ce <__aeabi_dsub+0x2e2>
    7598:	2a00      	cmp	r2, #0
    759a:	d047      	beq.n	762c <__aeabi_dsub+0x240>
    759c:	4a6c      	ldr	r2, [pc, #432]	; (7750 <__aeabi_dsub+0x364>)
    759e:	4294      	cmp	r4, r2
    75a0:	d100      	bne.n	75a4 <__aeabi_dsub+0x1b8>
    75a2:	e74f      	b.n	7444 <__aeabi_dsub+0x58>
    75a4:	2280      	movs	r2, #128	; 0x80
    75a6:	0412      	lsls	r2, r2, #16
    75a8:	4310      	orrs	r0, r2
    75aa:	4662      	mov	r2, ip
    75ac:	2a38      	cmp	r2, #56	; 0x38
    75ae:	dc00      	bgt.n	75b2 <__aeabi_dsub+0x1c6>
    75b0:	e108      	b.n	77c4 <__aeabi_dsub+0x3d8>
    75b2:	4301      	orrs	r1, r0
    75b4:	1e48      	subs	r0, r1, #1
    75b6:	4181      	sbcs	r1, r0
    75b8:	2200      	movs	r2, #0
    75ba:	b2c9      	uxtb	r1, r1
    75bc:	1949      	adds	r1, r1, r5
    75be:	19d2      	adds	r2, r2, r7
    75c0:	42a9      	cmp	r1, r5
    75c2:	41bf      	sbcs	r7, r7
    75c4:	000d      	movs	r5, r1
    75c6:	427f      	negs	r7, r7
    75c8:	18bf      	adds	r7, r7, r2
    75ca:	023a      	lsls	r2, r7, #8
    75cc:	d400      	bmi.n	75d0 <__aeabi_dsub+0x1e4>
    75ce:	e142      	b.n	7856 <__aeabi_dsub+0x46a>
    75d0:	4a5f      	ldr	r2, [pc, #380]	; (7750 <__aeabi_dsub+0x364>)
    75d2:	3401      	adds	r4, #1
    75d4:	4294      	cmp	r4, r2
    75d6:	d100      	bne.n	75da <__aeabi_dsub+0x1ee>
    75d8:	e14e      	b.n	7878 <__aeabi_dsub+0x48c>
    75da:	2001      	movs	r0, #1
    75dc:	4a5d      	ldr	r2, [pc, #372]	; (7754 <__aeabi_dsub+0x368>)
    75de:	0869      	lsrs	r1, r5, #1
    75e0:	403a      	ands	r2, r7
    75e2:	4028      	ands	r0, r5
    75e4:	4308      	orrs	r0, r1
    75e6:	07d5      	lsls	r5, r2, #31
    75e8:	4305      	orrs	r5, r0
    75ea:	0857      	lsrs	r7, r2, #1
    75ec:	469a      	mov	sl, r3
    75ee:	e729      	b.n	7444 <__aeabi_dsub+0x58>
    75f0:	0006      	movs	r6, r0
    75f2:	430e      	orrs	r6, r1
    75f4:	d000      	beq.n	75f8 <__aeabi_dsub+0x20c>
    75f6:	e717      	b.n	7428 <__aeabi_dsub+0x3c>
    75f8:	e714      	b.n	7424 <__aeabi_dsub+0x38>
    75fa:	0029      	movs	r1, r5
    75fc:	4311      	orrs	r1, r2
    75fe:	d100      	bne.n	7602 <__aeabi_dsub+0x216>
    7600:	e1f9      	b.n	79f6 <__aeabi_dsub+0x60a>
    7602:	2180      	movs	r1, #128	; 0x80
    7604:	0309      	lsls	r1, r1, #12
    7606:	430a      	orrs	r2, r1
    7608:	0312      	lsls	r2, r2, #12
    760a:	0b12      	lsrs	r2, r2, #12
    760c:	e73b      	b.n	7486 <__aeabi_dsub+0x9a>
    760e:	2301      	movs	r3, #1
    7610:	425b      	negs	r3, r3
    7612:	4698      	mov	r8, r3
    7614:	44c4      	add	ip, r8
    7616:	4663      	mov	r3, ip
    7618:	2b00      	cmp	r3, #0
    761a:	d172      	bne.n	7702 <__aeabi_dsub+0x316>
    761c:	1a69      	subs	r1, r5, r1
    761e:	428d      	cmp	r5, r1
    7620:	419b      	sbcs	r3, r3
    7622:	1a3f      	subs	r7, r7, r0
    7624:	425b      	negs	r3, r3
    7626:	1aff      	subs	r7, r7, r3
    7628:	000d      	movs	r5, r1
    762a:	e768      	b.n	74fe <__aeabi_dsub+0x112>
    762c:	0002      	movs	r2, r0
    762e:	430a      	orrs	r2, r1
    7630:	d100      	bne.n	7634 <__aeabi_dsub+0x248>
    7632:	e707      	b.n	7444 <__aeabi_dsub+0x58>
    7634:	2201      	movs	r2, #1
    7636:	4252      	negs	r2, r2
    7638:	4690      	mov	r8, r2
    763a:	44c4      	add	ip, r8
    763c:	4662      	mov	r2, ip
    763e:	2a00      	cmp	r2, #0
    7640:	d000      	beq.n	7644 <__aeabi_dsub+0x258>
    7642:	e0e6      	b.n	7812 <__aeabi_dsub+0x426>
    7644:	1869      	adds	r1, r5, r1
    7646:	42a9      	cmp	r1, r5
    7648:	41b6      	sbcs	r6, r6
    764a:	183f      	adds	r7, r7, r0
    764c:	4276      	negs	r6, r6
    764e:	19f7      	adds	r7, r6, r7
    7650:	000d      	movs	r5, r1
    7652:	e7ba      	b.n	75ca <__aeabi_dsub+0x1de>
    7654:	2e00      	cmp	r6, #0
    7656:	d000      	beq.n	765a <__aeabi_dsub+0x26e>
    7658:	e080      	b.n	775c <__aeabi_dsub+0x370>
    765a:	1c62      	adds	r2, r4, #1
    765c:	0552      	lsls	r2, r2, #21
    765e:	0d52      	lsrs	r2, r2, #21
    7660:	2a01      	cmp	r2, #1
    7662:	dc00      	bgt.n	7666 <__aeabi_dsub+0x27a>
    7664:	e0f9      	b.n	785a <__aeabi_dsub+0x46e>
    7666:	1a6a      	subs	r2, r5, r1
    7668:	4691      	mov	r9, r2
    766a:	454d      	cmp	r5, r9
    766c:	41b6      	sbcs	r6, r6
    766e:	1a3a      	subs	r2, r7, r0
    7670:	4276      	negs	r6, r6
    7672:	1b92      	subs	r2, r2, r6
    7674:	4690      	mov	r8, r2
    7676:	0212      	lsls	r2, r2, #8
    7678:	d400      	bmi.n	767c <__aeabi_dsub+0x290>
    767a:	e099      	b.n	77b0 <__aeabi_dsub+0x3c4>
    767c:	1b4d      	subs	r5, r1, r5
    767e:	42a9      	cmp	r1, r5
    7680:	4189      	sbcs	r1, r1
    7682:	1bc7      	subs	r7, r0, r7
    7684:	4249      	negs	r1, r1
    7686:	1a7a      	subs	r2, r7, r1
    7688:	4690      	mov	r8, r2
    768a:	469a      	mov	sl, r3
    768c:	e73c      	b.n	7508 <__aeabi_dsub+0x11c>
    768e:	4652      	mov	r2, sl
    7690:	2301      	movs	r3, #1
    7692:	2500      	movs	r5, #0
    7694:	4013      	ands	r3, r2
    7696:	2200      	movs	r2, #0
    7698:	e6f5      	b.n	7486 <__aeabi_dsub+0x9a>
    769a:	0028      	movs	r0, r5
    769c:	f000 faca 	bl	7c34 <__clzsi2>
    76a0:	3020      	adds	r0, #32
    76a2:	0003      	movs	r3, r0
    76a4:	3b08      	subs	r3, #8
    76a6:	2b1f      	cmp	r3, #31
    76a8:	dc00      	bgt.n	76ac <__aeabi_dsub+0x2c0>
    76aa:	e739      	b.n	7520 <__aeabi_dsub+0x134>
    76ac:	002a      	movs	r2, r5
    76ae:	3828      	subs	r0, #40	; 0x28
    76b0:	4082      	lsls	r2, r0
    76b2:	2500      	movs	r5, #0
    76b4:	429c      	cmp	r4, r3
    76b6:	dc00      	bgt.n	76ba <__aeabi_dsub+0x2ce>
    76b8:	e73e      	b.n	7538 <__aeabi_dsub+0x14c>
    76ba:	4f26      	ldr	r7, [pc, #152]	; (7754 <__aeabi_dsub+0x368>)
    76bc:	1ae4      	subs	r4, r4, r3
    76be:	4017      	ands	r7, r2
    76c0:	e6c0      	b.n	7444 <__aeabi_dsub+0x58>
    76c2:	4301      	orrs	r1, r0
    76c4:	1e48      	subs	r0, r1, #1
    76c6:	4181      	sbcs	r1, r0
    76c8:	2200      	movs	r2, #0
    76ca:	b2c9      	uxtb	r1, r1
    76cc:	e710      	b.n	74f0 <__aeabi_dsub+0x104>
    76ce:	2e00      	cmp	r6, #0
    76d0:	d000      	beq.n	76d4 <__aeabi_dsub+0x2e8>
    76d2:	e0f1      	b.n	78b8 <__aeabi_dsub+0x4cc>
    76d4:	1c62      	adds	r2, r4, #1
    76d6:	4694      	mov	ip, r2
    76d8:	0552      	lsls	r2, r2, #21
    76da:	0d52      	lsrs	r2, r2, #21
    76dc:	2a01      	cmp	r2, #1
    76de:	dc00      	bgt.n	76e2 <__aeabi_dsub+0x2f6>
    76e0:	e0a0      	b.n	7824 <__aeabi_dsub+0x438>
    76e2:	4a1b      	ldr	r2, [pc, #108]	; (7750 <__aeabi_dsub+0x364>)
    76e4:	4594      	cmp	ip, r2
    76e6:	d100      	bne.n	76ea <__aeabi_dsub+0x2fe>
    76e8:	e0c5      	b.n	7876 <__aeabi_dsub+0x48a>
    76ea:	1869      	adds	r1, r5, r1
    76ec:	42a9      	cmp	r1, r5
    76ee:	4192      	sbcs	r2, r2
    76f0:	183f      	adds	r7, r7, r0
    76f2:	4252      	negs	r2, r2
    76f4:	19d2      	adds	r2, r2, r7
    76f6:	0849      	lsrs	r1, r1, #1
    76f8:	07d5      	lsls	r5, r2, #31
    76fa:	430d      	orrs	r5, r1
    76fc:	0857      	lsrs	r7, r2, #1
    76fe:	4664      	mov	r4, ip
    7700:	e6a0      	b.n	7444 <__aeabi_dsub+0x58>
    7702:	4b13      	ldr	r3, [pc, #76]	; (7750 <__aeabi_dsub+0x364>)
    7704:	429c      	cmp	r4, r3
    7706:	d000      	beq.n	770a <__aeabi_dsub+0x31e>
    7708:	e6d9      	b.n	74be <__aeabi_dsub+0xd2>
    770a:	e69b      	b.n	7444 <__aeabi_dsub+0x58>
    770c:	0011      	movs	r1, r2
    770e:	3c1f      	subs	r4, #31
    7710:	40e1      	lsrs	r1, r4
    7712:	000c      	movs	r4, r1
    7714:	2b20      	cmp	r3, #32
    7716:	d100      	bne.n	771a <__aeabi_dsub+0x32e>
    7718:	e080      	b.n	781c <__aeabi_dsub+0x430>
    771a:	2140      	movs	r1, #64	; 0x40
    771c:	1acb      	subs	r3, r1, r3
    771e:	409a      	lsls	r2, r3
    7720:	4315      	orrs	r5, r2
    7722:	1e6a      	subs	r2, r5, #1
    7724:	4195      	sbcs	r5, r2
    7726:	2700      	movs	r7, #0
    7728:	4325      	orrs	r5, r4
    772a:	2400      	movs	r4, #0
    772c:	e71f      	b.n	756e <__aeabi_dsub+0x182>
    772e:	4663      	mov	r3, ip
    7730:	0002      	movs	r2, r0
    7732:	3b20      	subs	r3, #32
    7734:	40da      	lsrs	r2, r3
    7736:	4663      	mov	r3, ip
    7738:	2b20      	cmp	r3, #32
    773a:	d071      	beq.n	7820 <__aeabi_dsub+0x434>
    773c:	2340      	movs	r3, #64	; 0x40
    773e:	4666      	mov	r6, ip
    7740:	1b9b      	subs	r3, r3, r6
    7742:	4098      	lsls	r0, r3
    7744:	4301      	orrs	r1, r0
    7746:	1e48      	subs	r0, r1, #1
    7748:	4181      	sbcs	r1, r0
    774a:	4311      	orrs	r1, r2
    774c:	2200      	movs	r2, #0
    774e:	e6cf      	b.n	74f0 <__aeabi_dsub+0x104>
    7750:	000007ff 	.word	0x000007ff
    7754:	ff7fffff 	.word	0xff7fffff
    7758:	800fffff 	.word	0x800fffff
    775c:	2c00      	cmp	r4, #0
    775e:	d048      	beq.n	77f2 <__aeabi_dsub+0x406>
    7760:	4cca      	ldr	r4, [pc, #808]	; (7a8c <__aeabi_dsub+0x6a0>)
    7762:	42a2      	cmp	r2, r4
    7764:	d100      	bne.n	7768 <__aeabi_dsub+0x37c>
    7766:	e0a2      	b.n	78ae <__aeabi_dsub+0x4c2>
    7768:	4274      	negs	r4, r6
    776a:	46a1      	mov	r9, r4
    776c:	2480      	movs	r4, #128	; 0x80
    776e:	0424      	lsls	r4, r4, #16
    7770:	4327      	orrs	r7, r4
    7772:	464c      	mov	r4, r9
    7774:	2c38      	cmp	r4, #56	; 0x38
    7776:	dd00      	ble.n	777a <__aeabi_dsub+0x38e>
    7778:	e0db      	b.n	7932 <__aeabi_dsub+0x546>
    777a:	2c1f      	cmp	r4, #31
    777c:	dd00      	ble.n	7780 <__aeabi_dsub+0x394>
    777e:	e144      	b.n	7a0a <__aeabi_dsub+0x61e>
    7780:	464e      	mov	r6, r9
    7782:	2420      	movs	r4, #32
    7784:	1ba4      	subs	r4, r4, r6
    7786:	003e      	movs	r6, r7
    7788:	40a6      	lsls	r6, r4
    778a:	46a2      	mov	sl, r4
    778c:	46b0      	mov	r8, r6
    778e:	464c      	mov	r4, r9
    7790:	002e      	movs	r6, r5
    7792:	40e6      	lsrs	r6, r4
    7794:	46b4      	mov	ip, r6
    7796:	4646      	mov	r6, r8
    7798:	4664      	mov	r4, ip
    779a:	4326      	orrs	r6, r4
    779c:	4654      	mov	r4, sl
    779e:	40a5      	lsls	r5, r4
    77a0:	1e6c      	subs	r4, r5, #1
    77a2:	41a5      	sbcs	r5, r4
    77a4:	0034      	movs	r4, r6
    77a6:	432c      	orrs	r4, r5
    77a8:	464d      	mov	r5, r9
    77aa:	40ef      	lsrs	r7, r5
    77ac:	1b0d      	subs	r5, r1, r4
    77ae:	e028      	b.n	7802 <__aeabi_dsub+0x416>
    77b0:	464a      	mov	r2, r9
    77b2:	4643      	mov	r3, r8
    77b4:	464d      	mov	r5, r9
    77b6:	431a      	orrs	r2, r3
    77b8:	d000      	beq.n	77bc <__aeabi_dsub+0x3d0>
    77ba:	e6a5      	b.n	7508 <__aeabi_dsub+0x11c>
    77bc:	2300      	movs	r3, #0
    77be:	2400      	movs	r4, #0
    77c0:	2500      	movs	r5, #0
    77c2:	e6de      	b.n	7582 <__aeabi_dsub+0x196>
    77c4:	2a1f      	cmp	r2, #31
    77c6:	dc5a      	bgt.n	787e <__aeabi_dsub+0x492>
    77c8:	4666      	mov	r6, ip
    77ca:	2220      	movs	r2, #32
    77cc:	1b92      	subs	r2, r2, r6
    77ce:	0006      	movs	r6, r0
    77d0:	4096      	lsls	r6, r2
    77d2:	4691      	mov	r9, r2
    77d4:	46b0      	mov	r8, r6
    77d6:	4662      	mov	r2, ip
    77d8:	000e      	movs	r6, r1
    77da:	40d6      	lsrs	r6, r2
    77dc:	4642      	mov	r2, r8
    77de:	4316      	orrs	r6, r2
    77e0:	464a      	mov	r2, r9
    77e2:	4091      	lsls	r1, r2
    77e4:	1e4a      	subs	r2, r1, #1
    77e6:	4191      	sbcs	r1, r2
    77e8:	0002      	movs	r2, r0
    77ea:	4660      	mov	r0, ip
    77ec:	4331      	orrs	r1, r6
    77ee:	40c2      	lsrs	r2, r0
    77f0:	e6e4      	b.n	75bc <__aeabi_dsub+0x1d0>
    77f2:	003c      	movs	r4, r7
    77f4:	432c      	orrs	r4, r5
    77f6:	d05a      	beq.n	78ae <__aeabi_dsub+0x4c2>
    77f8:	43f4      	mvns	r4, r6
    77fa:	46a1      	mov	r9, r4
    77fc:	2c00      	cmp	r4, #0
    77fe:	d152      	bne.n	78a6 <__aeabi_dsub+0x4ba>
    7800:	1b4d      	subs	r5, r1, r5
    7802:	42a9      	cmp	r1, r5
    7804:	4189      	sbcs	r1, r1
    7806:	1bc7      	subs	r7, r0, r7
    7808:	4249      	negs	r1, r1
    780a:	1a7f      	subs	r7, r7, r1
    780c:	0014      	movs	r4, r2
    780e:	469a      	mov	sl, r3
    7810:	e675      	b.n	74fe <__aeabi_dsub+0x112>
    7812:	4a9e      	ldr	r2, [pc, #632]	; (7a8c <__aeabi_dsub+0x6a0>)
    7814:	4294      	cmp	r4, r2
    7816:	d000      	beq.n	781a <__aeabi_dsub+0x42e>
    7818:	e6c7      	b.n	75aa <__aeabi_dsub+0x1be>
    781a:	e613      	b.n	7444 <__aeabi_dsub+0x58>
    781c:	2200      	movs	r2, #0
    781e:	e77f      	b.n	7720 <__aeabi_dsub+0x334>
    7820:	2000      	movs	r0, #0
    7822:	e78f      	b.n	7744 <__aeabi_dsub+0x358>
    7824:	2c00      	cmp	r4, #0
    7826:	d000      	beq.n	782a <__aeabi_dsub+0x43e>
    7828:	e0c8      	b.n	79bc <__aeabi_dsub+0x5d0>
    782a:	003b      	movs	r3, r7
    782c:	432b      	orrs	r3, r5
    782e:	d100      	bne.n	7832 <__aeabi_dsub+0x446>
    7830:	e10f      	b.n	7a52 <__aeabi_dsub+0x666>
    7832:	0003      	movs	r3, r0
    7834:	430b      	orrs	r3, r1
    7836:	d100      	bne.n	783a <__aeabi_dsub+0x44e>
    7838:	e604      	b.n	7444 <__aeabi_dsub+0x58>
    783a:	1869      	adds	r1, r5, r1
    783c:	42a9      	cmp	r1, r5
    783e:	419b      	sbcs	r3, r3
    7840:	183f      	adds	r7, r7, r0
    7842:	425b      	negs	r3, r3
    7844:	19df      	adds	r7, r3, r7
    7846:	023b      	lsls	r3, r7, #8
    7848:	d400      	bmi.n	784c <__aeabi_dsub+0x460>
    784a:	e11a      	b.n	7a82 <__aeabi_dsub+0x696>
    784c:	4b90      	ldr	r3, [pc, #576]	; (7a90 <__aeabi_dsub+0x6a4>)
    784e:	000d      	movs	r5, r1
    7850:	401f      	ands	r7, r3
    7852:	4664      	mov	r4, ip
    7854:	e5f6      	b.n	7444 <__aeabi_dsub+0x58>
    7856:	469a      	mov	sl, r3
    7858:	e689      	b.n	756e <__aeabi_dsub+0x182>
    785a:	003a      	movs	r2, r7
    785c:	432a      	orrs	r2, r5
    785e:	2c00      	cmp	r4, #0
    7860:	d15c      	bne.n	791c <__aeabi_dsub+0x530>
    7862:	2a00      	cmp	r2, #0
    7864:	d175      	bne.n	7952 <__aeabi_dsub+0x566>
    7866:	0002      	movs	r2, r0
    7868:	430a      	orrs	r2, r1
    786a:	d100      	bne.n	786e <__aeabi_dsub+0x482>
    786c:	e0ca      	b.n	7a04 <__aeabi_dsub+0x618>
    786e:	0007      	movs	r7, r0
    7870:	000d      	movs	r5, r1
    7872:	469a      	mov	sl, r3
    7874:	e5e6      	b.n	7444 <__aeabi_dsub+0x58>
    7876:	4664      	mov	r4, ip
    7878:	2200      	movs	r2, #0
    787a:	2500      	movs	r5, #0
    787c:	e681      	b.n	7582 <__aeabi_dsub+0x196>
    787e:	4662      	mov	r2, ip
    7880:	0006      	movs	r6, r0
    7882:	3a20      	subs	r2, #32
    7884:	40d6      	lsrs	r6, r2
    7886:	4662      	mov	r2, ip
    7888:	46b0      	mov	r8, r6
    788a:	2a20      	cmp	r2, #32
    788c:	d100      	bne.n	7890 <__aeabi_dsub+0x4a4>
    788e:	e0b7      	b.n	7a00 <__aeabi_dsub+0x614>
    7890:	2240      	movs	r2, #64	; 0x40
    7892:	4666      	mov	r6, ip
    7894:	1b92      	subs	r2, r2, r6
    7896:	4090      	lsls	r0, r2
    7898:	4301      	orrs	r1, r0
    789a:	4642      	mov	r2, r8
    789c:	1e48      	subs	r0, r1, #1
    789e:	4181      	sbcs	r1, r0
    78a0:	4311      	orrs	r1, r2
    78a2:	2200      	movs	r2, #0
    78a4:	e68a      	b.n	75bc <__aeabi_dsub+0x1d0>
    78a6:	4c79      	ldr	r4, [pc, #484]	; (7a8c <__aeabi_dsub+0x6a0>)
    78a8:	42a2      	cmp	r2, r4
    78aa:	d000      	beq.n	78ae <__aeabi_dsub+0x4c2>
    78ac:	e761      	b.n	7772 <__aeabi_dsub+0x386>
    78ae:	0007      	movs	r7, r0
    78b0:	000d      	movs	r5, r1
    78b2:	0014      	movs	r4, r2
    78b4:	469a      	mov	sl, r3
    78b6:	e5c5      	b.n	7444 <__aeabi_dsub+0x58>
    78b8:	2c00      	cmp	r4, #0
    78ba:	d141      	bne.n	7940 <__aeabi_dsub+0x554>
    78bc:	003c      	movs	r4, r7
    78be:	432c      	orrs	r4, r5
    78c0:	d078      	beq.n	79b4 <__aeabi_dsub+0x5c8>
    78c2:	43f4      	mvns	r4, r6
    78c4:	46a1      	mov	r9, r4
    78c6:	2c00      	cmp	r4, #0
    78c8:	d020      	beq.n	790c <__aeabi_dsub+0x520>
    78ca:	4c70      	ldr	r4, [pc, #448]	; (7a8c <__aeabi_dsub+0x6a0>)
    78cc:	42a2      	cmp	r2, r4
    78ce:	d071      	beq.n	79b4 <__aeabi_dsub+0x5c8>
    78d0:	464c      	mov	r4, r9
    78d2:	2c38      	cmp	r4, #56	; 0x38
    78d4:	dd00      	ble.n	78d8 <__aeabi_dsub+0x4ec>
    78d6:	e0b2      	b.n	7a3e <__aeabi_dsub+0x652>
    78d8:	2c1f      	cmp	r4, #31
    78da:	dd00      	ble.n	78de <__aeabi_dsub+0x4f2>
    78dc:	e0bc      	b.n	7a58 <__aeabi_dsub+0x66c>
    78de:	2620      	movs	r6, #32
    78e0:	1b34      	subs	r4, r6, r4
    78e2:	46a2      	mov	sl, r4
    78e4:	003c      	movs	r4, r7
    78e6:	4656      	mov	r6, sl
    78e8:	40b4      	lsls	r4, r6
    78ea:	464e      	mov	r6, r9
    78ec:	46a0      	mov	r8, r4
    78ee:	002c      	movs	r4, r5
    78f0:	40f4      	lsrs	r4, r6
    78f2:	46a4      	mov	ip, r4
    78f4:	4644      	mov	r4, r8
    78f6:	4666      	mov	r6, ip
    78f8:	4334      	orrs	r4, r6
    78fa:	46a4      	mov	ip, r4
    78fc:	4654      	mov	r4, sl
    78fe:	40a5      	lsls	r5, r4
    7900:	4664      	mov	r4, ip
    7902:	1e6e      	subs	r6, r5, #1
    7904:	41b5      	sbcs	r5, r6
    7906:	4325      	orrs	r5, r4
    7908:	464c      	mov	r4, r9
    790a:	40e7      	lsrs	r7, r4
    790c:	186d      	adds	r5, r5, r1
    790e:	428d      	cmp	r5, r1
    7910:	4189      	sbcs	r1, r1
    7912:	183f      	adds	r7, r7, r0
    7914:	4249      	negs	r1, r1
    7916:	19cf      	adds	r7, r1, r7
    7918:	0014      	movs	r4, r2
    791a:	e656      	b.n	75ca <__aeabi_dsub+0x1de>
    791c:	2a00      	cmp	r2, #0
    791e:	d12f      	bne.n	7980 <__aeabi_dsub+0x594>
    7920:	0002      	movs	r2, r0
    7922:	430a      	orrs	r2, r1
    7924:	d100      	bne.n	7928 <__aeabi_dsub+0x53c>
    7926:	e084      	b.n	7a32 <__aeabi_dsub+0x646>
    7928:	0007      	movs	r7, r0
    792a:	000d      	movs	r5, r1
    792c:	469a      	mov	sl, r3
    792e:	4c57      	ldr	r4, [pc, #348]	; (7a8c <__aeabi_dsub+0x6a0>)
    7930:	e588      	b.n	7444 <__aeabi_dsub+0x58>
    7932:	433d      	orrs	r5, r7
    7934:	1e6f      	subs	r7, r5, #1
    7936:	41bd      	sbcs	r5, r7
    7938:	b2ec      	uxtb	r4, r5
    793a:	2700      	movs	r7, #0
    793c:	1b0d      	subs	r5, r1, r4
    793e:	e760      	b.n	7802 <__aeabi_dsub+0x416>
    7940:	4c52      	ldr	r4, [pc, #328]	; (7a8c <__aeabi_dsub+0x6a0>)
    7942:	42a2      	cmp	r2, r4
    7944:	d036      	beq.n	79b4 <__aeabi_dsub+0x5c8>
    7946:	4274      	negs	r4, r6
    7948:	2680      	movs	r6, #128	; 0x80
    794a:	0436      	lsls	r6, r6, #16
    794c:	46a1      	mov	r9, r4
    794e:	4337      	orrs	r7, r6
    7950:	e7be      	b.n	78d0 <__aeabi_dsub+0x4e4>
    7952:	0002      	movs	r2, r0
    7954:	430a      	orrs	r2, r1
    7956:	d100      	bne.n	795a <__aeabi_dsub+0x56e>
    7958:	e574      	b.n	7444 <__aeabi_dsub+0x58>
    795a:	1a6a      	subs	r2, r5, r1
    795c:	4690      	mov	r8, r2
    795e:	4545      	cmp	r5, r8
    7960:	41b6      	sbcs	r6, r6
    7962:	1a3a      	subs	r2, r7, r0
    7964:	4276      	negs	r6, r6
    7966:	1b92      	subs	r2, r2, r6
    7968:	4694      	mov	ip, r2
    796a:	0212      	lsls	r2, r2, #8
    796c:	d400      	bmi.n	7970 <__aeabi_dsub+0x584>
    796e:	e5f7      	b.n	7560 <__aeabi_dsub+0x174>
    7970:	1b4d      	subs	r5, r1, r5
    7972:	42a9      	cmp	r1, r5
    7974:	4189      	sbcs	r1, r1
    7976:	1bc7      	subs	r7, r0, r7
    7978:	4249      	negs	r1, r1
    797a:	1a7f      	subs	r7, r7, r1
    797c:	469a      	mov	sl, r3
    797e:	e561      	b.n	7444 <__aeabi_dsub+0x58>
    7980:	0002      	movs	r2, r0
    7982:	430a      	orrs	r2, r1
    7984:	d03a      	beq.n	79fc <__aeabi_dsub+0x610>
    7986:	08ed      	lsrs	r5, r5, #3
    7988:	077c      	lsls	r4, r7, #29
    798a:	432c      	orrs	r4, r5
    798c:	2580      	movs	r5, #128	; 0x80
    798e:	08fa      	lsrs	r2, r7, #3
    7990:	032d      	lsls	r5, r5, #12
    7992:	422a      	tst	r2, r5
    7994:	d008      	beq.n	79a8 <__aeabi_dsub+0x5bc>
    7996:	08c7      	lsrs	r7, r0, #3
    7998:	422f      	tst	r7, r5
    799a:	d105      	bne.n	79a8 <__aeabi_dsub+0x5bc>
    799c:	0745      	lsls	r5, r0, #29
    799e:	002c      	movs	r4, r5
    79a0:	003a      	movs	r2, r7
    79a2:	469a      	mov	sl, r3
    79a4:	08c9      	lsrs	r1, r1, #3
    79a6:	430c      	orrs	r4, r1
    79a8:	0f67      	lsrs	r7, r4, #29
    79aa:	00d2      	lsls	r2, r2, #3
    79ac:	00e5      	lsls	r5, r4, #3
    79ae:	4317      	orrs	r7, r2
    79b0:	4c36      	ldr	r4, [pc, #216]	; (7a8c <__aeabi_dsub+0x6a0>)
    79b2:	e547      	b.n	7444 <__aeabi_dsub+0x58>
    79b4:	0007      	movs	r7, r0
    79b6:	000d      	movs	r5, r1
    79b8:	0014      	movs	r4, r2
    79ba:	e543      	b.n	7444 <__aeabi_dsub+0x58>
    79bc:	003a      	movs	r2, r7
    79be:	432a      	orrs	r2, r5
    79c0:	d043      	beq.n	7a4a <__aeabi_dsub+0x65e>
    79c2:	0002      	movs	r2, r0
    79c4:	430a      	orrs	r2, r1
    79c6:	d019      	beq.n	79fc <__aeabi_dsub+0x610>
    79c8:	08ed      	lsrs	r5, r5, #3
    79ca:	077c      	lsls	r4, r7, #29
    79cc:	432c      	orrs	r4, r5
    79ce:	2580      	movs	r5, #128	; 0x80
    79d0:	08fa      	lsrs	r2, r7, #3
    79d2:	032d      	lsls	r5, r5, #12
    79d4:	422a      	tst	r2, r5
    79d6:	d007      	beq.n	79e8 <__aeabi_dsub+0x5fc>
    79d8:	08c6      	lsrs	r6, r0, #3
    79da:	422e      	tst	r6, r5
    79dc:	d104      	bne.n	79e8 <__aeabi_dsub+0x5fc>
    79de:	0747      	lsls	r7, r0, #29
    79e0:	003c      	movs	r4, r7
    79e2:	0032      	movs	r2, r6
    79e4:	08c9      	lsrs	r1, r1, #3
    79e6:	430c      	orrs	r4, r1
    79e8:	00d7      	lsls	r7, r2, #3
    79ea:	0f62      	lsrs	r2, r4, #29
    79ec:	00e5      	lsls	r5, r4, #3
    79ee:	4317      	orrs	r7, r2
    79f0:	469a      	mov	sl, r3
    79f2:	4c26      	ldr	r4, [pc, #152]	; (7a8c <__aeabi_dsub+0x6a0>)
    79f4:	e526      	b.n	7444 <__aeabi_dsub+0x58>
    79f6:	2200      	movs	r2, #0
    79f8:	2500      	movs	r5, #0
    79fa:	e544      	b.n	7486 <__aeabi_dsub+0x9a>
    79fc:	4c23      	ldr	r4, [pc, #140]	; (7a8c <__aeabi_dsub+0x6a0>)
    79fe:	e521      	b.n	7444 <__aeabi_dsub+0x58>
    7a00:	2000      	movs	r0, #0
    7a02:	e749      	b.n	7898 <__aeabi_dsub+0x4ac>
    7a04:	2300      	movs	r3, #0
    7a06:	2500      	movs	r5, #0
    7a08:	e5bb      	b.n	7582 <__aeabi_dsub+0x196>
    7a0a:	464c      	mov	r4, r9
    7a0c:	003e      	movs	r6, r7
    7a0e:	3c20      	subs	r4, #32
    7a10:	40e6      	lsrs	r6, r4
    7a12:	464c      	mov	r4, r9
    7a14:	46b4      	mov	ip, r6
    7a16:	2c20      	cmp	r4, #32
    7a18:	d031      	beq.n	7a7e <__aeabi_dsub+0x692>
    7a1a:	2440      	movs	r4, #64	; 0x40
    7a1c:	464e      	mov	r6, r9
    7a1e:	1ba6      	subs	r6, r4, r6
    7a20:	40b7      	lsls	r7, r6
    7a22:	433d      	orrs	r5, r7
    7a24:	1e6c      	subs	r4, r5, #1
    7a26:	41a5      	sbcs	r5, r4
    7a28:	4664      	mov	r4, ip
    7a2a:	432c      	orrs	r4, r5
    7a2c:	2700      	movs	r7, #0
    7a2e:	1b0d      	subs	r5, r1, r4
    7a30:	e6e7      	b.n	7802 <__aeabi_dsub+0x416>
    7a32:	2280      	movs	r2, #128	; 0x80
    7a34:	2300      	movs	r3, #0
    7a36:	0312      	lsls	r2, r2, #12
    7a38:	4c14      	ldr	r4, [pc, #80]	; (7a8c <__aeabi_dsub+0x6a0>)
    7a3a:	2500      	movs	r5, #0
    7a3c:	e5a1      	b.n	7582 <__aeabi_dsub+0x196>
    7a3e:	433d      	orrs	r5, r7
    7a40:	1e6f      	subs	r7, r5, #1
    7a42:	41bd      	sbcs	r5, r7
    7a44:	2700      	movs	r7, #0
    7a46:	b2ed      	uxtb	r5, r5
    7a48:	e760      	b.n	790c <__aeabi_dsub+0x520>
    7a4a:	0007      	movs	r7, r0
    7a4c:	000d      	movs	r5, r1
    7a4e:	4c0f      	ldr	r4, [pc, #60]	; (7a8c <__aeabi_dsub+0x6a0>)
    7a50:	e4f8      	b.n	7444 <__aeabi_dsub+0x58>
    7a52:	0007      	movs	r7, r0
    7a54:	000d      	movs	r5, r1
    7a56:	e4f5      	b.n	7444 <__aeabi_dsub+0x58>
    7a58:	464e      	mov	r6, r9
    7a5a:	003c      	movs	r4, r7
    7a5c:	3e20      	subs	r6, #32
    7a5e:	40f4      	lsrs	r4, r6
    7a60:	46a0      	mov	r8, r4
    7a62:	464c      	mov	r4, r9
    7a64:	2c20      	cmp	r4, #32
    7a66:	d00e      	beq.n	7a86 <__aeabi_dsub+0x69a>
    7a68:	2440      	movs	r4, #64	; 0x40
    7a6a:	464e      	mov	r6, r9
    7a6c:	1ba4      	subs	r4, r4, r6
    7a6e:	40a7      	lsls	r7, r4
    7a70:	433d      	orrs	r5, r7
    7a72:	1e6f      	subs	r7, r5, #1
    7a74:	41bd      	sbcs	r5, r7
    7a76:	4644      	mov	r4, r8
    7a78:	2700      	movs	r7, #0
    7a7a:	4325      	orrs	r5, r4
    7a7c:	e746      	b.n	790c <__aeabi_dsub+0x520>
    7a7e:	2700      	movs	r7, #0
    7a80:	e7cf      	b.n	7a22 <__aeabi_dsub+0x636>
    7a82:	000d      	movs	r5, r1
    7a84:	e573      	b.n	756e <__aeabi_dsub+0x182>
    7a86:	2700      	movs	r7, #0
    7a88:	e7f2      	b.n	7a70 <__aeabi_dsub+0x684>
    7a8a:	46c0      	nop			; (mov r8, r8)
    7a8c:	000007ff 	.word	0x000007ff
    7a90:	ff7fffff 	.word	0xff7fffff

00007a94 <__aeabi_dcmpun>:
    7a94:	b570      	push	{r4, r5, r6, lr}
    7a96:	4e0e      	ldr	r6, [pc, #56]	; (7ad0 <__aeabi_dcmpun+0x3c>)
    7a98:	030c      	lsls	r4, r1, #12
    7a9a:	031d      	lsls	r5, r3, #12
    7a9c:	0049      	lsls	r1, r1, #1
    7a9e:	005b      	lsls	r3, r3, #1
    7aa0:	0b24      	lsrs	r4, r4, #12
    7aa2:	0d49      	lsrs	r1, r1, #21
    7aa4:	0b2d      	lsrs	r5, r5, #12
    7aa6:	0d5b      	lsrs	r3, r3, #21
    7aa8:	42b1      	cmp	r1, r6
    7aaa:	d004      	beq.n	7ab6 <__aeabi_dcmpun+0x22>
    7aac:	4908      	ldr	r1, [pc, #32]	; (7ad0 <__aeabi_dcmpun+0x3c>)
    7aae:	2000      	movs	r0, #0
    7ab0:	428b      	cmp	r3, r1
    7ab2:	d008      	beq.n	7ac6 <__aeabi_dcmpun+0x32>
    7ab4:	bd70      	pop	{r4, r5, r6, pc}
    7ab6:	4304      	orrs	r4, r0
    7ab8:	2001      	movs	r0, #1
    7aba:	2c00      	cmp	r4, #0
    7abc:	d1fa      	bne.n	7ab4 <__aeabi_dcmpun+0x20>
    7abe:	4904      	ldr	r1, [pc, #16]	; (7ad0 <__aeabi_dcmpun+0x3c>)
    7ac0:	2000      	movs	r0, #0
    7ac2:	428b      	cmp	r3, r1
    7ac4:	d1f6      	bne.n	7ab4 <__aeabi_dcmpun+0x20>
    7ac6:	4315      	orrs	r5, r2
    7ac8:	0028      	movs	r0, r5
    7aca:	1e45      	subs	r5, r0, #1
    7acc:	41a8      	sbcs	r0, r5
    7ace:	e7f1      	b.n	7ab4 <__aeabi_dcmpun+0x20>
    7ad0:	000007ff 	.word	0x000007ff

00007ad4 <__aeabi_d2iz>:
    7ad4:	030b      	lsls	r3, r1, #12
    7ad6:	b530      	push	{r4, r5, lr}
    7ad8:	4d13      	ldr	r5, [pc, #76]	; (7b28 <__aeabi_d2iz+0x54>)
    7ada:	0b1a      	lsrs	r2, r3, #12
    7adc:	004b      	lsls	r3, r1, #1
    7ade:	0d5b      	lsrs	r3, r3, #21
    7ae0:	0fc9      	lsrs	r1, r1, #31
    7ae2:	2400      	movs	r4, #0
    7ae4:	42ab      	cmp	r3, r5
    7ae6:	dd11      	ble.n	7b0c <__aeabi_d2iz+0x38>
    7ae8:	4c10      	ldr	r4, [pc, #64]	; (7b2c <__aeabi_d2iz+0x58>)
    7aea:	42a3      	cmp	r3, r4
    7aec:	dc10      	bgt.n	7b10 <__aeabi_d2iz+0x3c>
    7aee:	2480      	movs	r4, #128	; 0x80
    7af0:	0364      	lsls	r4, r4, #13
    7af2:	4322      	orrs	r2, r4
    7af4:	4c0e      	ldr	r4, [pc, #56]	; (7b30 <__aeabi_d2iz+0x5c>)
    7af6:	1ae4      	subs	r4, r4, r3
    7af8:	2c1f      	cmp	r4, #31
    7afa:	dd0c      	ble.n	7b16 <__aeabi_d2iz+0x42>
    7afc:	480d      	ldr	r0, [pc, #52]	; (7b34 <__aeabi_d2iz+0x60>)
    7afe:	1ac3      	subs	r3, r0, r3
    7b00:	40da      	lsrs	r2, r3
    7b02:	0013      	movs	r3, r2
    7b04:	425c      	negs	r4, r3
    7b06:	2900      	cmp	r1, #0
    7b08:	d100      	bne.n	7b0c <__aeabi_d2iz+0x38>
    7b0a:	001c      	movs	r4, r3
    7b0c:	0020      	movs	r0, r4
    7b0e:	bd30      	pop	{r4, r5, pc}
    7b10:	4b09      	ldr	r3, [pc, #36]	; (7b38 <__aeabi_d2iz+0x64>)
    7b12:	18cc      	adds	r4, r1, r3
    7b14:	e7fa      	b.n	7b0c <__aeabi_d2iz+0x38>
    7b16:	40e0      	lsrs	r0, r4
    7b18:	4c08      	ldr	r4, [pc, #32]	; (7b3c <__aeabi_d2iz+0x68>)
    7b1a:	46a4      	mov	ip, r4
    7b1c:	4463      	add	r3, ip
    7b1e:	409a      	lsls	r2, r3
    7b20:	0013      	movs	r3, r2
    7b22:	4303      	orrs	r3, r0
    7b24:	e7ee      	b.n	7b04 <__aeabi_d2iz+0x30>
    7b26:	46c0      	nop			; (mov r8, r8)
    7b28:	000003fe 	.word	0x000003fe
    7b2c:	0000041d 	.word	0x0000041d
    7b30:	00000433 	.word	0x00000433
    7b34:	00000413 	.word	0x00000413
    7b38:	7fffffff 	.word	0x7fffffff
    7b3c:	fffffbed 	.word	0xfffffbed

00007b40 <__aeabi_i2d>:
    7b40:	b570      	push	{r4, r5, r6, lr}
    7b42:	2800      	cmp	r0, #0
    7b44:	d030      	beq.n	7ba8 <__aeabi_i2d+0x68>
    7b46:	17c3      	asrs	r3, r0, #31
    7b48:	18c4      	adds	r4, r0, r3
    7b4a:	405c      	eors	r4, r3
    7b4c:	0fc5      	lsrs	r5, r0, #31
    7b4e:	0020      	movs	r0, r4
    7b50:	f000 f870 	bl	7c34 <__clzsi2>
    7b54:	4b17      	ldr	r3, [pc, #92]	; (7bb4 <__aeabi_i2d+0x74>)
    7b56:	4a18      	ldr	r2, [pc, #96]	; (7bb8 <__aeabi_i2d+0x78>)
    7b58:	1a1b      	subs	r3, r3, r0
    7b5a:	1ad2      	subs	r2, r2, r3
    7b5c:	2a1f      	cmp	r2, #31
    7b5e:	dd18      	ble.n	7b92 <__aeabi_i2d+0x52>
    7b60:	4a16      	ldr	r2, [pc, #88]	; (7bbc <__aeabi_i2d+0x7c>)
    7b62:	1ad2      	subs	r2, r2, r3
    7b64:	4094      	lsls	r4, r2
    7b66:	2200      	movs	r2, #0
    7b68:	0324      	lsls	r4, r4, #12
    7b6a:	055b      	lsls	r3, r3, #21
    7b6c:	0b24      	lsrs	r4, r4, #12
    7b6e:	0d5b      	lsrs	r3, r3, #21
    7b70:	2100      	movs	r1, #0
    7b72:	0010      	movs	r0, r2
    7b74:	0324      	lsls	r4, r4, #12
    7b76:	0d0a      	lsrs	r2, r1, #20
    7b78:	0512      	lsls	r2, r2, #20
    7b7a:	0b24      	lsrs	r4, r4, #12
    7b7c:	4314      	orrs	r4, r2
    7b7e:	4a10      	ldr	r2, [pc, #64]	; (7bc0 <__aeabi_i2d+0x80>)
    7b80:	051b      	lsls	r3, r3, #20
    7b82:	4014      	ands	r4, r2
    7b84:	431c      	orrs	r4, r3
    7b86:	0064      	lsls	r4, r4, #1
    7b88:	07ed      	lsls	r5, r5, #31
    7b8a:	0864      	lsrs	r4, r4, #1
    7b8c:	432c      	orrs	r4, r5
    7b8e:	0021      	movs	r1, r4
    7b90:	bd70      	pop	{r4, r5, r6, pc}
    7b92:	0021      	movs	r1, r4
    7b94:	4091      	lsls	r1, r2
    7b96:	000a      	movs	r2, r1
    7b98:	210b      	movs	r1, #11
    7b9a:	1a08      	subs	r0, r1, r0
    7b9c:	40c4      	lsrs	r4, r0
    7b9e:	055b      	lsls	r3, r3, #21
    7ba0:	0324      	lsls	r4, r4, #12
    7ba2:	0b24      	lsrs	r4, r4, #12
    7ba4:	0d5b      	lsrs	r3, r3, #21
    7ba6:	e7e3      	b.n	7b70 <__aeabi_i2d+0x30>
    7ba8:	2500      	movs	r5, #0
    7baa:	2300      	movs	r3, #0
    7bac:	2400      	movs	r4, #0
    7bae:	2200      	movs	r2, #0
    7bb0:	e7de      	b.n	7b70 <__aeabi_i2d+0x30>
    7bb2:	46c0      	nop			; (mov r8, r8)
    7bb4:	0000041e 	.word	0x0000041e
    7bb8:	00000433 	.word	0x00000433
    7bbc:	00000413 	.word	0x00000413
    7bc0:	800fffff 	.word	0x800fffff

00007bc4 <__aeabi_ui2d>:
    7bc4:	b570      	push	{r4, r5, r6, lr}
    7bc6:	1e05      	subs	r5, r0, #0
    7bc8:	d028      	beq.n	7c1c <__aeabi_ui2d+0x58>
    7bca:	f000 f833 	bl	7c34 <__clzsi2>
    7bce:	4b15      	ldr	r3, [pc, #84]	; (7c24 <__aeabi_ui2d+0x60>)
    7bd0:	4a15      	ldr	r2, [pc, #84]	; (7c28 <__aeabi_ui2d+0x64>)
    7bd2:	1a1b      	subs	r3, r3, r0
    7bd4:	1ad2      	subs	r2, r2, r3
    7bd6:	2a1f      	cmp	r2, #31
    7bd8:	dd16      	ble.n	7c08 <__aeabi_ui2d+0x44>
    7bda:	002c      	movs	r4, r5
    7bdc:	4a13      	ldr	r2, [pc, #76]	; (7c2c <__aeabi_ui2d+0x68>)
    7bde:	2500      	movs	r5, #0
    7be0:	1ad2      	subs	r2, r2, r3
    7be2:	4094      	lsls	r4, r2
    7be4:	055a      	lsls	r2, r3, #21
    7be6:	0324      	lsls	r4, r4, #12
    7be8:	0b24      	lsrs	r4, r4, #12
    7bea:	0d52      	lsrs	r2, r2, #21
    7bec:	2100      	movs	r1, #0
    7bee:	0324      	lsls	r4, r4, #12
    7bf0:	0d0b      	lsrs	r3, r1, #20
    7bf2:	0b24      	lsrs	r4, r4, #12
    7bf4:	051b      	lsls	r3, r3, #20
    7bf6:	4323      	orrs	r3, r4
    7bf8:	4c0d      	ldr	r4, [pc, #52]	; (7c30 <__aeabi_ui2d+0x6c>)
    7bfa:	0512      	lsls	r2, r2, #20
    7bfc:	4023      	ands	r3, r4
    7bfe:	4313      	orrs	r3, r2
    7c00:	005b      	lsls	r3, r3, #1
    7c02:	0028      	movs	r0, r5
    7c04:	0859      	lsrs	r1, r3, #1
    7c06:	bd70      	pop	{r4, r5, r6, pc}
    7c08:	210b      	movs	r1, #11
    7c0a:	002c      	movs	r4, r5
    7c0c:	1a08      	subs	r0, r1, r0
    7c0e:	40c4      	lsrs	r4, r0
    7c10:	4095      	lsls	r5, r2
    7c12:	0324      	lsls	r4, r4, #12
    7c14:	055a      	lsls	r2, r3, #21
    7c16:	0b24      	lsrs	r4, r4, #12
    7c18:	0d52      	lsrs	r2, r2, #21
    7c1a:	e7e7      	b.n	7bec <__aeabi_ui2d+0x28>
    7c1c:	2200      	movs	r2, #0
    7c1e:	2400      	movs	r4, #0
    7c20:	e7e4      	b.n	7bec <__aeabi_ui2d+0x28>
    7c22:	46c0      	nop			; (mov r8, r8)
    7c24:	0000041e 	.word	0x0000041e
    7c28:	00000433 	.word	0x00000433
    7c2c:	00000413 	.word	0x00000413
    7c30:	800fffff 	.word	0x800fffff

00007c34 <__clzsi2>:
    7c34:	211c      	movs	r1, #28
    7c36:	2301      	movs	r3, #1
    7c38:	041b      	lsls	r3, r3, #16
    7c3a:	4298      	cmp	r0, r3
    7c3c:	d301      	bcc.n	7c42 <__clzsi2+0xe>
    7c3e:	0c00      	lsrs	r0, r0, #16
    7c40:	3910      	subs	r1, #16
    7c42:	0a1b      	lsrs	r3, r3, #8
    7c44:	4298      	cmp	r0, r3
    7c46:	d301      	bcc.n	7c4c <__clzsi2+0x18>
    7c48:	0a00      	lsrs	r0, r0, #8
    7c4a:	3908      	subs	r1, #8
    7c4c:	091b      	lsrs	r3, r3, #4
    7c4e:	4298      	cmp	r0, r3
    7c50:	d301      	bcc.n	7c56 <__clzsi2+0x22>
    7c52:	0900      	lsrs	r0, r0, #4
    7c54:	3904      	subs	r1, #4
    7c56:	a202      	add	r2, pc, #8	; (adr r2, 7c60 <__clzsi2+0x2c>)
    7c58:	5c10      	ldrb	r0, [r2, r0]
    7c5a:	1840      	adds	r0, r0, r1
    7c5c:	4770      	bx	lr
    7c5e:	46c0      	nop			; (mov r8, r8)
    7c60:	02020304 	.word	0x02020304
    7c64:	01010101 	.word	0x01010101
	...

00007c70 <__cxa_atexit>:
    7c70:	b570      	push	{r4, r5, r6, lr}
    7c72:	4c05      	ldr	r4, [pc, #20]	; (7c88 <__cxa_atexit+0x18>)
    7c74:	0005      	movs	r5, r0
    7c76:	0013      	movs	r3, r2
    7c78:	1e20      	subs	r0, r4, #0
    7c7a:	d004      	beq.n	7c86 <__cxa_atexit+0x16>
    7c7c:	000a      	movs	r2, r1
    7c7e:	2002      	movs	r0, #2
    7c80:	0029      	movs	r1, r5
    7c82:	e000      	b.n	7c86 <__cxa_atexit+0x16>
    7c84:	bf00      	nop
    7c86:	bd70      	pop	{r4, r5, r6, pc}
    7c88:	00000000 	.word	0x00000000

00007c8c <__errno>:
    7c8c:	4b01      	ldr	r3, [pc, #4]	; (7c94 <__errno+0x8>)
    7c8e:	6818      	ldr	r0, [r3, #0]
    7c90:	4770      	bx	lr
    7c92:	46c0      	nop			; (mov r8, r8)
    7c94:	200000f8 	.word	0x200000f8

00007c98 <__libc_init_array>:
    7c98:	4b0e      	ldr	r3, [pc, #56]	; (7cd4 <__libc_init_array+0x3c>)
    7c9a:	b570      	push	{r4, r5, r6, lr}
    7c9c:	2500      	movs	r5, #0
    7c9e:	001e      	movs	r6, r3
    7ca0:	4c0d      	ldr	r4, [pc, #52]	; (7cd8 <__libc_init_array+0x40>)
    7ca2:	1ae4      	subs	r4, r4, r3
    7ca4:	10a4      	asrs	r4, r4, #2
    7ca6:	42a5      	cmp	r5, r4
    7ca8:	d004      	beq.n	7cb4 <__libc_init_array+0x1c>
    7caa:	00ab      	lsls	r3, r5, #2
    7cac:	58f3      	ldr	r3, [r6, r3]
    7cae:	4798      	blx	r3
    7cb0:	3501      	adds	r5, #1
    7cb2:	e7f8      	b.n	7ca6 <__libc_init_array+0xe>
    7cb4:	f000 f900 	bl	7eb8 <_init>
    7cb8:	4b08      	ldr	r3, [pc, #32]	; (7cdc <__libc_init_array+0x44>)
    7cba:	2500      	movs	r5, #0
    7cbc:	001e      	movs	r6, r3
    7cbe:	4c08      	ldr	r4, [pc, #32]	; (7ce0 <__libc_init_array+0x48>)
    7cc0:	1ae4      	subs	r4, r4, r3
    7cc2:	10a4      	asrs	r4, r4, #2
    7cc4:	42a5      	cmp	r5, r4
    7cc6:	d004      	beq.n	7cd2 <__libc_init_array+0x3a>
    7cc8:	00ab      	lsls	r3, r5, #2
    7cca:	58f3      	ldr	r3, [r6, r3]
    7ccc:	4798      	blx	r3
    7cce:	3501      	adds	r5, #1
    7cd0:	e7f8      	b.n	7cc4 <__libc_init_array+0x2c>
    7cd2:	bd70      	pop	{r4, r5, r6, pc}
    7cd4:	200000fc 	.word	0x200000fc
    7cd8:	200000fc 	.word	0x200000fc
    7cdc:	200000fc 	.word	0x200000fc
    7ce0:	20000114 	.word	0x20000114

00007ce4 <malloc>:
    7ce4:	b510      	push	{r4, lr}
    7ce6:	4b03      	ldr	r3, [pc, #12]	; (7cf4 <malloc+0x10>)
    7ce8:	0001      	movs	r1, r0
    7cea:	6818      	ldr	r0, [r3, #0]
    7cec:	f000 f866 	bl	7dbc <_malloc_r>
    7cf0:	bd10      	pop	{r4, pc}
    7cf2:	46c0      	nop			; (mov r8, r8)
    7cf4:	200000f8 	.word	0x200000f8

00007cf8 <free>:
    7cf8:	b510      	push	{r4, lr}
    7cfa:	4b03      	ldr	r3, [pc, #12]	; (7d08 <free+0x10>)
    7cfc:	0001      	movs	r1, r0
    7cfe:	6818      	ldr	r0, [r3, #0]
    7d00:	f000 f816 	bl	7d30 <_free_r>
    7d04:	bd10      	pop	{r4, pc}
    7d06:	46c0      	nop			; (mov r8, r8)
    7d08:	200000f8 	.word	0x200000f8

00007d0c <memcpy>:
    7d0c:	2300      	movs	r3, #0
    7d0e:	b510      	push	{r4, lr}
    7d10:	429a      	cmp	r2, r3
    7d12:	d003      	beq.n	7d1c <memcpy+0x10>
    7d14:	5ccc      	ldrb	r4, [r1, r3]
    7d16:	54c4      	strb	r4, [r0, r3]
    7d18:	3301      	adds	r3, #1
    7d1a:	e7f9      	b.n	7d10 <memcpy+0x4>
    7d1c:	bd10      	pop	{r4, pc}

00007d1e <memset>:
    7d1e:	0003      	movs	r3, r0
    7d20:	1882      	adds	r2, r0, r2
    7d22:	4293      	cmp	r3, r2
    7d24:	d002      	beq.n	7d2c <memset+0xe>
    7d26:	7019      	strb	r1, [r3, #0]
    7d28:	3301      	adds	r3, #1
    7d2a:	e7fa      	b.n	7d22 <memset+0x4>
    7d2c:	4770      	bx	lr
	...

00007d30 <_free_r>:
    7d30:	b530      	push	{r4, r5, lr}
    7d32:	2900      	cmp	r1, #0
    7d34:	d03e      	beq.n	7db4 <_free_r+0x84>
    7d36:	3904      	subs	r1, #4
    7d38:	680b      	ldr	r3, [r1, #0]
    7d3a:	2b00      	cmp	r3, #0
    7d3c:	da00      	bge.n	7d40 <_free_r+0x10>
    7d3e:	18c9      	adds	r1, r1, r3
    7d40:	4a1d      	ldr	r2, [pc, #116]	; (7db8 <_free_r+0x88>)
    7d42:	6813      	ldr	r3, [r2, #0]
    7d44:	0014      	movs	r4, r2
    7d46:	2b00      	cmp	r3, #0
    7d48:	d102      	bne.n	7d50 <_free_r+0x20>
    7d4a:	604b      	str	r3, [r1, #4]
    7d4c:	6011      	str	r1, [r2, #0]
    7d4e:	e031      	b.n	7db4 <_free_r+0x84>
    7d50:	428b      	cmp	r3, r1
    7d52:	d90d      	bls.n	7d70 <_free_r+0x40>
    7d54:	680a      	ldr	r2, [r1, #0]
    7d56:	1888      	adds	r0, r1, r2
    7d58:	4283      	cmp	r3, r0
    7d5a:	d103      	bne.n	7d64 <_free_r+0x34>
    7d5c:	6818      	ldr	r0, [r3, #0]
    7d5e:	685b      	ldr	r3, [r3, #4]
    7d60:	1882      	adds	r2, r0, r2
    7d62:	600a      	str	r2, [r1, #0]
    7d64:	604b      	str	r3, [r1, #4]
    7d66:	6021      	str	r1, [r4, #0]
    7d68:	e024      	b.n	7db4 <_free_r+0x84>
    7d6a:	428a      	cmp	r2, r1
    7d6c:	d803      	bhi.n	7d76 <_free_r+0x46>
    7d6e:	0013      	movs	r3, r2
    7d70:	685a      	ldr	r2, [r3, #4]
    7d72:	2a00      	cmp	r2, #0
    7d74:	d1f9      	bne.n	7d6a <_free_r+0x3a>
    7d76:	681d      	ldr	r5, [r3, #0]
    7d78:	195c      	adds	r4, r3, r5
    7d7a:	428c      	cmp	r4, r1
    7d7c:	d10b      	bne.n	7d96 <_free_r+0x66>
    7d7e:	6809      	ldr	r1, [r1, #0]
    7d80:	1869      	adds	r1, r5, r1
    7d82:	1858      	adds	r0, r3, r1
    7d84:	6019      	str	r1, [r3, #0]
    7d86:	4282      	cmp	r2, r0
    7d88:	d114      	bne.n	7db4 <_free_r+0x84>
    7d8a:	6810      	ldr	r0, [r2, #0]
    7d8c:	6852      	ldr	r2, [r2, #4]
    7d8e:	1841      	adds	r1, r0, r1
    7d90:	6019      	str	r1, [r3, #0]
    7d92:	605a      	str	r2, [r3, #4]
    7d94:	e00e      	b.n	7db4 <_free_r+0x84>
    7d96:	428c      	cmp	r4, r1
    7d98:	d902      	bls.n	7da0 <_free_r+0x70>
    7d9a:	230c      	movs	r3, #12
    7d9c:	6003      	str	r3, [r0, #0]
    7d9e:	e009      	b.n	7db4 <_free_r+0x84>
    7da0:	6808      	ldr	r0, [r1, #0]
    7da2:	180c      	adds	r4, r1, r0
    7da4:	42a2      	cmp	r2, r4
    7da6:	d103      	bne.n	7db0 <_free_r+0x80>
    7da8:	6814      	ldr	r4, [r2, #0]
    7daa:	6852      	ldr	r2, [r2, #4]
    7dac:	1820      	adds	r0, r4, r0
    7dae:	6008      	str	r0, [r1, #0]
    7db0:	604a      	str	r2, [r1, #4]
    7db2:	6059      	str	r1, [r3, #4]
    7db4:	bd30      	pop	{r4, r5, pc}
    7db6:	46c0      	nop			; (mov r8, r8)
    7db8:	20000da8 	.word	0x20000da8

00007dbc <_malloc_r>:
    7dbc:	2303      	movs	r3, #3
    7dbe:	b570      	push	{r4, r5, r6, lr}
    7dc0:	1ccd      	adds	r5, r1, #3
    7dc2:	439d      	bics	r5, r3
    7dc4:	3508      	adds	r5, #8
    7dc6:	0006      	movs	r6, r0
    7dc8:	2d0c      	cmp	r5, #12
    7dca:	d201      	bcs.n	7dd0 <_malloc_r+0x14>
    7dcc:	250c      	movs	r5, #12
    7dce:	e005      	b.n	7ddc <_malloc_r+0x20>
    7dd0:	2d00      	cmp	r5, #0
    7dd2:	da03      	bge.n	7ddc <_malloc_r+0x20>
    7dd4:	230c      	movs	r3, #12
    7dd6:	2000      	movs	r0, #0
    7dd8:	6033      	str	r3, [r6, #0]
    7dda:	e040      	b.n	7e5e <_malloc_r+0xa2>
    7ddc:	42a9      	cmp	r1, r5
    7dde:	d8f9      	bhi.n	7dd4 <_malloc_r+0x18>
    7de0:	4b1f      	ldr	r3, [pc, #124]	; (7e60 <_malloc_r+0xa4>)
    7de2:	681c      	ldr	r4, [r3, #0]
    7de4:	001a      	movs	r2, r3
    7de6:	0021      	movs	r1, r4
    7de8:	2900      	cmp	r1, #0
    7dea:	d013      	beq.n	7e14 <_malloc_r+0x58>
    7dec:	680b      	ldr	r3, [r1, #0]
    7dee:	1b5b      	subs	r3, r3, r5
    7df0:	d40d      	bmi.n	7e0e <_malloc_r+0x52>
    7df2:	2b0b      	cmp	r3, #11
    7df4:	d902      	bls.n	7dfc <_malloc_r+0x40>
    7df6:	600b      	str	r3, [r1, #0]
    7df8:	18cc      	adds	r4, r1, r3
    7dfa:	e01e      	b.n	7e3a <_malloc_r+0x7e>
    7dfc:	428c      	cmp	r4, r1
    7dfe:	d102      	bne.n	7e06 <_malloc_r+0x4a>
    7e00:	6863      	ldr	r3, [r4, #4]
    7e02:	6013      	str	r3, [r2, #0]
    7e04:	e01a      	b.n	7e3c <_malloc_r+0x80>
    7e06:	684b      	ldr	r3, [r1, #4]
    7e08:	6063      	str	r3, [r4, #4]
    7e0a:	000c      	movs	r4, r1
    7e0c:	e016      	b.n	7e3c <_malloc_r+0x80>
    7e0e:	000c      	movs	r4, r1
    7e10:	6849      	ldr	r1, [r1, #4]
    7e12:	e7e9      	b.n	7de8 <_malloc_r+0x2c>
    7e14:	4c13      	ldr	r4, [pc, #76]	; (7e64 <_malloc_r+0xa8>)
    7e16:	6823      	ldr	r3, [r4, #0]
    7e18:	2b00      	cmp	r3, #0
    7e1a:	d103      	bne.n	7e24 <_malloc_r+0x68>
    7e1c:	0030      	movs	r0, r6
    7e1e:	f000 f823 	bl	7e68 <_sbrk_r>
    7e22:	6020      	str	r0, [r4, #0]
    7e24:	0029      	movs	r1, r5
    7e26:	0030      	movs	r0, r6
    7e28:	f000 f81e 	bl	7e68 <_sbrk_r>
    7e2c:	1c43      	adds	r3, r0, #1
    7e2e:	d0d1      	beq.n	7dd4 <_malloc_r+0x18>
    7e30:	2303      	movs	r3, #3
    7e32:	1cc4      	adds	r4, r0, #3
    7e34:	439c      	bics	r4, r3
    7e36:	42a0      	cmp	r0, r4
    7e38:	d10a      	bne.n	7e50 <_malloc_r+0x94>
    7e3a:	6025      	str	r5, [r4, #0]
    7e3c:	0020      	movs	r0, r4
    7e3e:	2207      	movs	r2, #7
    7e40:	300b      	adds	r0, #11
    7e42:	1d23      	adds	r3, r4, #4
    7e44:	4390      	bics	r0, r2
    7e46:	1ac3      	subs	r3, r0, r3
    7e48:	d009      	beq.n	7e5e <_malloc_r+0xa2>
    7e4a:	425a      	negs	r2, r3
    7e4c:	50e2      	str	r2, [r4, r3]
    7e4e:	e006      	b.n	7e5e <_malloc_r+0xa2>
    7e50:	1a21      	subs	r1, r4, r0
    7e52:	0030      	movs	r0, r6
    7e54:	f000 f808 	bl	7e68 <_sbrk_r>
    7e58:	1c43      	adds	r3, r0, #1
    7e5a:	d1ee      	bne.n	7e3a <_malloc_r+0x7e>
    7e5c:	e7ba      	b.n	7dd4 <_malloc_r+0x18>
    7e5e:	bd70      	pop	{r4, r5, r6, pc}
    7e60:	20000da8 	.word	0x20000da8
    7e64:	20000da4 	.word	0x20000da4

00007e68 <_sbrk_r>:
    7e68:	2300      	movs	r3, #0
    7e6a:	b570      	push	{r4, r5, r6, lr}
    7e6c:	4c06      	ldr	r4, [pc, #24]	; (7e88 <_sbrk_r+0x20>)
    7e6e:	0005      	movs	r5, r0
    7e70:	0008      	movs	r0, r1
    7e72:	6023      	str	r3, [r4, #0]
    7e74:	f000 f812 	bl	7e9c <_sbrk>
    7e78:	1c43      	adds	r3, r0, #1
    7e7a:	d103      	bne.n	7e84 <_sbrk_r+0x1c>
    7e7c:	6823      	ldr	r3, [r4, #0]
    7e7e:	2b00      	cmp	r3, #0
    7e80:	d000      	beq.n	7e84 <_sbrk_r+0x1c>
    7e82:	602b      	str	r3, [r5, #0]
    7e84:	bd70      	pop	{r4, r5, r6, pc}
    7e86:	46c0      	nop			; (mov r8, r8)
    7e88:	20000db0 	.word	0x20000db0

00007e8c <strlen>:
    7e8c:	2300      	movs	r3, #0
    7e8e:	5cc2      	ldrb	r2, [r0, r3]
    7e90:	3301      	adds	r3, #1
    7e92:	2a00      	cmp	r2, #0
    7e94:	d1fb      	bne.n	7e8e <strlen+0x2>
    7e96:	1e58      	subs	r0, r3, #1
    7e98:	4770      	bx	lr
	...

00007e9c <_sbrk>:
    7e9c:	4a04      	ldr	r2, [pc, #16]	; (7eb0 <_sbrk+0x14>)
    7e9e:	6813      	ldr	r3, [r2, #0]
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	d003      	beq.n	7eac <_sbrk+0x10>
    7ea4:	1818      	adds	r0, r3, r0
    7ea6:	6010      	str	r0, [r2, #0]
    7ea8:	0018      	movs	r0, r3
    7eaa:	4770      	bx	lr
    7eac:	4b01      	ldr	r3, [pc, #4]	; (7eb4 <_sbrk+0x18>)
    7eae:	e7f9      	b.n	7ea4 <_sbrk+0x8>
    7eb0:	20000dac 	.word	0x20000dac
    7eb4:	20000db4 	.word	0x20000db4

00007eb8 <_init>:
    7eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7eba:	46c0      	nop			; (mov r8, r8)
    7ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7ebe:	bc08      	pop	{r3}
    7ec0:	469e      	mov	lr, r3
    7ec2:	4770      	bx	lr

00007ec4 <_fini>:
    7ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ec6:	46c0      	nop			; (mov r8, r8)
    7ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7eca:	bc08      	pop	{r3}
    7ecc:	469e      	mov	lr, r3
    7ece:	4770      	bx	lr

00007ed0 <_ZTV14CLEDController>:
	...
    7ed8:	1265 0000 1265 0000 1265 0000 02bd 0000     e...e...e.......
    7ee8:	0115 0000 0119 0000                         ........

00007ef0 <_ZTV16APA102ControllerILh6ELh9EL6EOrder136ELh4EE>:
	...
    7ef8:	0521 0000 0401 0000 0215 0000 02bd 0000     !...............
    7f08:	0115 0000 0119 0000 0ca5 0000 7265 6f72     ............erro
    7f18:	0072 0000 6d64 2061 7473 7261 0074 0000     r...dma start...
    7f28:	6420 616d 6420 6e6f 2065 0000 4820 007a      dma done .. Hz.
    7f38:	0a0d 0000 616e 006e 766f 0066 002e 0000     ....nan.ovf.....
    7f48:	6e69 0066                                   inf.

00007f4c <_ZTV7Serial_>:
	...
    7f54:	19b5 0000 1975 0000 195d 0000 1991 0000     ....u...].......
    7f64:	19f1 0000 1969 0000 1959 0000 2b62 0000     ....i...Y...b+..
    7f74:	2b96 0000 2c5e 0000 2ba4 0000 2c5e 0000     .+..^,...+..^,..
    7f84:	2bb6 0000 2bfa 0000 2c02 0000 2c06 0000     .+...+...,...,..
    7f94:	2c2a 0000 2c5a 0000 2b4c 0000               *,..Z,..L+..

00007fa0 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    7fa8:	1c51 0000 1ae9 0000 1d4d 0000               Q.......M...

00007fb4 <_ZL14STRING_PRODUCT>:
    7fb4:	6546 7461 6568 2072 304d 0000               Feather M0..

00007fc0 <_ZL15STRING_LANGUAGE>:
    7fc0:	0304 0409                                   ....

00007fc4 <_ZL21USB_DeviceDescriptorB>:
    7fc4:	0112 0200 02ef 4001 239a 800b 0100 0201     .......@.#......
    7fd4:	0103 0000                                   ....

00007fd8 <_ZL19STRING_MANUFACTURER>:
    7fd8:	6441 6661 7572 7469 0000 0000 31a6 0000     Adafruit.....1..
    7fe8:	318e 0000 3176 0000 3162 0000 314a 0000     .1..v1..b1..J1..
    7ff8:	318e 0000 3400 0000 3406 0000 3406 0000     .1...4...4...4..
    8008:	3406 0000 3406 0000 3406 0000 3406 0000     .4...4...4...4..
    8018:	3406 0000 3406 0000 33e8 0000 33e8 0000     .4...4...3...3..
    8028:	33e8 0000 33e8 0000 3a60 0000 3a0c 0000     .3...3..`:...:..
    8038:	39e6 0000 395e 0000 3918 0000 3864 0000     .9..^9...9..d8..
    8048:	3a32 0000                                   2:..

0000804c <g_APinDescription>:
    804c:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    805c:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    806c:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    807c:	0000 0000 000e 0000 0008 0000 0004 0000     ................
    808c:	00ff ffff ffff 000e 0000 0000 0009 0000     ................
    809c:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    80ac:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    80bc:	00ff 0000 0000 0010 0000 0000 000f 0000     ................
    80cc:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    80dc:	0000 0000 0014 0000 0005 0000 002c 0000     ............,...
    80ec:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    80fc:	0008 0000 0004 0000 00ff ffff ffff 0005     ................
    810c:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    811c:	0006 0100 0100 0006 0000 0000 0007 0000     ................
    812c:	0004 0000 001c 0000 0007 0101 0101 0007     ................
    813c:	0000 0000 0012 0000 0004 0000 001c 0000     ................
    814c:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    815c:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    816c:	0000 0000 0013 0000 0005 0000 002c 0000     ............,...
    817c:	00ff 0003 0003 0003 0000 0000 0011 0000     ................
    818c:	0004 0000 001c 0000 00ff 0201 0201 0001     ................
    819c:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    81ac:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    81bc:	0001 0000 0018 0000 0002 0400 0400 0008     ................
    81cc:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    81dc:	0003 0401 0401 0009 0000 0000 0004 0000     ................
    81ec:	0001 0000 0000 0000 0004 ffff ffff 0004     ................
    81fc:	0000 0000 0005 0000 0001 0000 0000 0000     ................
    820c:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    821c:	0001 0000 0000 0000 000a ffff ffff 0002     ................
    822c:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    823c:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    824c:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    825c:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    826c:	00ff ffff ffff 000c 0001 0000 000a 0000     ................
    827c:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    828c:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    829c:	00ff ffff ffff 000b 0001 0000 0003 0000     ................
    82ac:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    82bc:	0000 0000 001b 0000 000b 0000 0004 0000     ................
    82cc:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    82dc:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    82ec:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    82fc:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    830c:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    831c:	0001 0000 0016 0000 0003 0000 0000 0000     ................
    832c:	00ff ffff ffff 00ff 0001 0000 0017 0000     ................
    833c:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    834c:	0000 0000 0016 0000 0002 0000 0000 0000     ................
    835c:	00ff ffff ffff 00ff 0000 0000 0017 0000     ................
    836c:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    837c:	0000 0000 0013 0000 0002 0000 0000 0000     ................
    838c:	00ff ffff ffff 00ff 0000 0000 0010 0000     ................
    839c:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    83ac:	0000 0000 0012 0000 0002 0000 0000 0000     ................
    83bc:	00ff ffff ffff 00ff 0000 0000 0011 0000     ................
    83cc:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    83dc:	0000 0000 000d 0000 0004 0000 000c 0000     ................
    83ec:	00ff 0001 ffff 000d 0000 0000 0015 0000     ................
    83fc:	0005 0000 000c 0000 00ff 0003 ffff 00ff     ................
    840c:	0000 0000 0006 0000 0004 0000 000c 0000     ................
    841c:	00ff 0100 ffff 00ff 0000 0000 0007 0000     ................
    842c:	0004 0000 000c 0000 00ff 0101 ffff 00ff     ................
    843c:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    844c:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    845c:	0001 0000 0002 0000 0014 ffff ffff 0002     ................
    846c:	0000 0000 0006 0000 0001 0000 0002 0000     ................
    847c:	0006 0100 0100 0006 0000 0000 0007 0000     ................
    848c:	0001 0000 0002 0000 0007 0101 0101 0007     ................

0000849c <_ZTV4Uart>:
	...
    84a4:	4471 0000 13f5 0000 444d 0000 4465 0000     qD......MD..eD..
    84b4:	4459 0000 4441 0000 3ff9 0000 401d 0000     YD..AD...?...@..
    84c4:	447d 0000 4371 0000 442d 0000 436d 0000     }D..qC..-D..mC..
    84d4:	7173 7472 0000 0000                         sqrt....

000084dc <npio2_hw>:
    84dc:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
    84ec:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
    84fc:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
    850c:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
    851c:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
    852c:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
    853c:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
    854c:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

0000855c <two_over_pi>:
    855c:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
    856c:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
    857c:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
    858c:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
    859c:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
    85ac:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
    85bc:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
    85cc:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
    85dc:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
    85ec:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
    85fc:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
    860c:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
    861c:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
    862c:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
    863c:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
    864c:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
    865c:	e27b 0060 8c6b 00c0                         {.`.k...

00008664 <init_jk>:
    8664:	0002 0000 0003 0000 0004 0000 0006 0000     ................
    8674:	0000 0000                                   ....

00008678 <PIo2>:
    8678:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
    8688:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
    8698:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
    86a8:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5
    86b8:	68a0 0000 676e 0000 6874 0000 6764 0000     .h..ng..th..dg..
    86c8:	6874 0000 687e 0000 6874 0000 6764 0000     th..~h..th..dg..
    86d8:	676e 0000 676e 0000 687e 0000 6764 0000     ng..ng..~h..dg..
    86e8:	675a 0000 675a 0000 675a 0000 6ad0 0000     Zg..Zg..Zg...j..
    86f8:	70e8 0000 6fa8 0000 6fa8 0000 6fa6 0000     .p...o...o...o..
    8708:	70c0 0000 70c0 0000 70b2 0000 6fa6 0000     .p...p...p...o..
    8718:	70c0 0000 70b2 0000 70c0 0000 6fa6 0000     .p...p...p...o..
    8728:	70c8 0000 70c8 0000 70c8 0000 72c8 0000     .p...p...p...r..
    8738:	0043 0000                                   C...

0000873c <__EH_FRAME_BEGIN__>:
    873c:	0000 0000                                   ....
