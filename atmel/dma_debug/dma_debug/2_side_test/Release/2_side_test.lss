
2_side_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003374  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  20000000  00003374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c7c  20000120  000034a0  00020120  2**4
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
  5 .debug_info   0004b935  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00006a38  00000000  00000000  0006bad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000ec92  00000000  00000000  0007250e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000cc8  00000000  00000000  000811a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001fe0  00000000  00000000  00081e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001e3fd  00000000  00000000  00083e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001470e  00000000  00000000  000a2245  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008fe4d  00000000  00000000  000b6953  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000023dc  00000000  00000000  001467a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__text_start__>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	20008000 	.word	0x20008000
  return malloc(size);
       4:	000008a1 	.word	0x000008a1
       8:	00000889 	.word	0x00000889
       c:	000001a1 	.word	0x000001a1
	...
      2c:	00000889 	.word	0x00000889
	...
      38:	00000889 	.word	0x00000889
      3c:	000008f5 	.word	0x000008f5
      40:	00000889 	.word	0x00000889
      44:	00000889 	.word	0x00000889
      48:	00000889 	.word	0x00000889
      4c:	00000889 	.word	0x00000889
      50:	00000889 	.word	0x00000889
      54:	00000889 	.word	0x00000889
      58:	000001bd 	.word	0x000001bd
      5c:	0000088d 	.word	0x0000088d
      60:	00000889 	.word	0x00000889
      64:	000022ed 	.word	0x000022ed
      68:	00000889 	.word	0x00000889
      6c:	00000889 	.word	0x00000889
      70:	00000889 	.word	0x00000889
      74:	00000889 	.word	0x00000889
      78:	000022fd 	.word	0x000022fd
      7c:	00000889 	.word	0x00000889
      80:	00000889 	.word	0x00000889
      84:	00000889 	.word	0x00000889
      88:	00000889 	.word	0x00000889
      8c:	00000889 	.word	0x00000889
      90:	00000000 	.word	0x00000000
      94:	00000889 	.word	0x00000889
      98:	00000889 	.word	0x00000889
      9c:	00000889 	.word	0x00000889
      a0:	00000889 	.word	0x00000889
      a4:	00000889 	.word	0x00000889
      a8:	00000889 	.word	0x00000889
      ac:	00000889 	.word	0x00000889
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000120 	.word	0x20000120
      d4:	00000000 	.word	0x00000000
      d8:	00003370 	.word	0x00003370

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000124 	.word	0x20000124
     108:	00003370 	.word	0x00003370
     10c:	20000114 	.word	0x20000114
     110:	00000000 	.word	0x00000000

00000114 <_ZN14CLEDController4sizeEv>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     114:	6940      	ldr	r0, [r0, #20]
     116:	4770      	bx	lr

00000118 <_ZN14CLEDController9clearLedsEi>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     118:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     11a:	2400      	movs	r4, #0
     11c:	466b      	mov	r3, sp
     11e:	701c      	strb	r4, [r3, #0]
     120:	705c      	strb	r4, [r3, #1]
     122:	709c      	strb	r4, [r3, #2]
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     124:	6803      	ldr	r3, [r0, #0]

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     126:	000a      	movs	r2, r1
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     128:	681d      	ldr	r5, [r3, #0]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     12a:	ab01      	add	r3, sp, #4
     12c:	701c      	strb	r4, [r3, #0]
     12e:	705c      	strb	r4, [r3, #1]
     130:	709c      	strb	r4, [r3, #2]
     132:	4669      	mov	r1, sp
     134:	47a8      	blx	r5

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     136:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00000138 <_ZNK14CLEDController17getMaxRefreshRateEv>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     138:	2000      	movs	r0, #0
     13a:	4770      	bx	lr

0000013c <HardFault_HandlerC>:
  volatile unsigned long _DFSR ;
  volatile unsigned long _AFSR ;
  volatile unsigned long _BFAR ;
  volatile unsigned long _MMAR ;
 
  stacked_r0 = ((unsigned long)hardfault_args[0]) ;
     13c:	6803      	ldr	r3, [r0, #0]
static uint32_t chnl = 0;  // DMA channel
volatile uint32_t dmadone;

// seen on: https://www.freertos.org/Debugging-Hard-Faults-On-Cortex-M-Microcontrollers.html
extern "C" {
void HardFault_HandlerC(unsigned long *hardfault_args){
     13e:	b08e      	sub	sp, #56	; 0x38
  volatile unsigned long _DFSR ;
  volatile unsigned long _AFSR ;
  volatile unsigned long _BFAR ;
  volatile unsigned long _MMAR ;
 
  stacked_r0 = ((unsigned long)hardfault_args[0]) ;
     140:	9300      	str	r3, [sp, #0]
  stacked_r1 = ((unsigned long)hardfault_args[1]) ;
     142:	6843      	ldr	r3, [r0, #4]
     144:	9301      	str	r3, [sp, #4]
  stacked_r2 = ((unsigned long)hardfault_args[2]) ;
     146:	6883      	ldr	r3, [r0, #8]
     148:	9302      	str	r3, [sp, #8]
  stacked_r3 = ((unsigned long)hardfault_args[3]) ;
     14a:	68c3      	ldr	r3, [r0, #12]
     14c:	9303      	str	r3, [sp, #12]
  stacked_r12 = ((unsigned long)hardfault_args[4]) ;
     14e:	6903      	ldr	r3, [r0, #16]
     150:	9304      	str	r3, [sp, #16]
  stacked_lr = ((unsigned long)hardfault_args[5]) ;
     152:	6943      	ldr	r3, [r0, #20]
     154:	9305      	str	r3, [sp, #20]
  stacked_pc = ((unsigned long)hardfault_args[6]) ;
     156:	6983      	ldr	r3, [r0, #24]
     158:	9306      	str	r3, [sp, #24]
  stacked_psr = ((unsigned long)hardfault_args[7]) ;
     15a:	69c3      	ldr	r3, [r0, #28]
     15c:	9307      	str	r3, [sp, #28]
 
  // Configurable Fault Status Register
  // Consists of MMSR, BFSR and UFSR
  _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
     15e:	4b0a      	ldr	r3, [pc, #40]	; (188 <HardFault_HandlerC+0x4c>)
     160:	681b      	ldr	r3, [r3, #0]
     162:	9308      	str	r3, [sp, #32]
 
  // Hard Fault Status Register
  _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
     164:	4b09      	ldr	r3, [pc, #36]	; (18c <HardFault_HandlerC+0x50>)
     166:	681b      	ldr	r3, [r3, #0]
     168:	9309      	str	r3, [sp, #36]	; 0x24
 
  // Debug Fault Status Register
  _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
     16a:	4b09      	ldr	r3, [pc, #36]	; (190 <HardFault_HandlerC+0x54>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	930a      	str	r3, [sp, #40]	; 0x28
 
  // Auxiliary Fault Status Register
  _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <HardFault_HandlerC+0x58>)
     172:	681b      	ldr	r3, [r3, #0]
     174:	930b      	str	r3, [sp, #44]	; 0x2c
 
  // Read the Fault Address Registers. These may not contain valid values.
  // Check BFARVALID/MMARVALID to see if they are valid values
  // MemManage Fault Address Register
  _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
     176:	4b08      	ldr	r3, [pc, #32]	; (198 <HardFault_HandlerC+0x5c>)
     178:	681b      	ldr	r3, [r3, #0]
     17a:	930d      	str	r3, [sp, #52]	; 0x34
  // Bus Fault Address Register
  _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
     17c:	4b07      	ldr	r3, [pc, #28]	; (19c <HardFault_HandlerC+0x60>)
     17e:	681b      	ldr	r3, [r3, #0]
     180:	930c      	str	r3, [sp, #48]	; 0x30
 
  __asm("BKPT #0\n") ; // Break into the debugger
     182:	be00      	bkpt	0x0000
}
     184:	b00e      	add	sp, #56	; 0x38
     186:	4770      	bx	lr
     188:	e000ed28 	.word	0xe000ed28
     18c:	e000ed2c 	.word	0xe000ed2c
     190:	e000ed30 	.word	0xe000ed30
     194:	e000ed3c 	.word	0xe000ed3c
     198:	e000ed34 	.word	0xe000ed34
     19c:	e000ed38 	.word	0xe000ed38

000001a0 <HardFault_Handler>:
    " mrs r0, msp      \n"
  "_HALT:              \n"
    " ldr r1,[r0,#20]  \n"
    " b HardFault_HandlerC \n"
    " bkpt #0          \n"
  );
     1a0:	2004      	movs	r0, #4
     1a2:	4671      	mov	r1, lr
     1a4:	4208      	tst	r0, r1
     1a6:	d002      	beq.n	1ae <_MSP>
     1a8:	f3ef 8009 	mrs	r0, PSP
     1ac:	e001      	b.n	1b2 <_HALT>

000001ae <_MSP>:
     1ae:	f3ef 8008 	mrs	r0, MSP

000001b2 <_HALT>:
     1b2:	6941      	ldr	r1, [r0, #20]
     1b4:	e7c2      	b.n	13c <HardFault_HandlerC>
     1b6:	be00      	bkpt	0x0000
}
     1b8:	4770      	bx	lr
	...

000001bc <DMAC_Handler>:

void DMAC_Handler() {
     1bc:	b510      	push	{r4, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     1be:	b672      	cpsid	i
  // interrupts DMAC_CHINTENCLR_TERR DMAC_CHINTENCLR_TCMPL DMAC_CHINTENCLR_SUSP
  uint8_t active_channel;
  // disable irqs ?
  __disable_irq();
  active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk; // get channel number
     1c0:	4b0c      	ldr	r3, [pc, #48]	; (1f4 <DMAC_Handler+0x38>)
  DMAC->CHID.reg = DMAC_CHID_ID(active_channel);
  dmadone = DMAC->CHINTFLAG.reg;
     1c2:	4c0d      	ldr	r4, [pc, #52]	; (1f8 <DMAC_Handler+0x3c>)
void DMAC_Handler() {
  // interrupts DMAC_CHINTENCLR_TERR DMAC_CHINTENCLR_TCMPL DMAC_CHINTENCLR_SUSP
  uint8_t active_channel;
  // disable irqs ?
  __disable_irq();
  active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk; // get channel number
     1c4:	8c1a      	ldrh	r2, [r3, #32]
  DMAC->CHID.reg = DMAC_CHID_ID(active_channel);
     1c6:	230f      	movs	r3, #15
     1c8:	4013      	ands	r3, r2
     1ca:	4a0c      	ldr	r2, [pc, #48]	; (1fc <DMAC_Handler+0x40>)
     1cc:	7013      	strb	r3, [r2, #0]
  dmadone = DMAC->CHINTFLAG.reg;
     1ce:	7823      	ldrb	r3, [r4, #0]
     1d0:	4a0b      	ldr	r2, [pc, #44]	; (200 <DMAC_Handler+0x44>)
     1d2:	b2db      	uxtb	r3, r3
     1d4:	6013      	str	r3, [r2, #0]
  if(dmadone == 1)
     1d6:	6813      	ldr	r3, [r2, #0]
     1d8:	2b01      	cmp	r3, #1
     1da:	d103      	bne.n	1e4 <DMAC_Handler+0x28>
  {
	// error 
	Serial.println("error");
     1dc:	4909      	ldr	r1, [pc, #36]	; (204 <DMAC_Handler+0x48>)
     1de:	480a      	ldr	r0, [pc, #40]	; (208 <DMAC_Handler+0x4c>)
     1e0:	f000 fbfc 	bl	9dc <_ZN5Print7printlnEPKc>
  }
  DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL; // clear
     1e4:	2302      	movs	r3, #2
     1e6:	7023      	strb	r3, [r4, #0]
  DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     1e8:	3b01      	subs	r3, #1
     1ea:	7023      	strb	r3, [r4, #0]
  DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     1ec:	3303      	adds	r3, #3
     1ee:	7023      	strb	r3, [r4, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1f0:	b662      	cpsie	i
  __enable_irq();
}
     1f2:	bd10      	pop	{r4, pc}
     1f4:	41004800 	.word	0x41004800
     1f8:	4100484e 	.word	0x4100484e
     1fc:	4100483f 	.word	0x4100483f
     200:	20000310 	.word	0x20000310
     204:	00002e68 	.word	0x00002e68
     208:	200005e8 	.word	0x200005e8

0000020c <_Z8dma_initv>:


void dma_init() {
  // probably on by default
  PM->AHBMASK.reg |= PM_AHBMASK_DMAC ;
     20c:	2120      	movs	r1, #32
     20e:	4b09      	ldr	r3, [pc, #36]	; (234 <_Z8dma_initv+0x28>)
     210:	695a      	ldr	r2, [r3, #20]
     212:	430a      	orrs	r2, r1
     214:	615a      	str	r2, [r3, #20]
  PM->APBBMASK.reg |= PM_APBBMASK_DMAC ;
     216:	69da      	ldr	r2, [r3, #28]
     218:	3910      	subs	r1, #16
     21a:	430a      	orrs	r2, r1
     21c:	61da      	str	r2, [r3, #28]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     21e:	2240      	movs	r2, #64	; 0x40
     220:	4b05      	ldr	r3, [pc, #20]	; (238 <_Z8dma_initv+0x2c>)
     222:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ( DMAC_IRQn ) ;

  DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     224:	4b05      	ldr	r3, [pc, #20]	; (23c <_Z8dma_initv+0x30>)
     226:	4a06      	ldr	r2, [pc, #24]	; (240 <_Z8dma_initv+0x34>)
     228:	635a      	str	r2, [r3, #52]	; 0x34
  DMAC->WRBADDR.reg = (uint32_t)wrb;
     22a:	4a06      	ldr	r2, [pc, #24]	; (244 <_Z8dma_initv+0x38>)
     22c:	639a      	str	r2, [r3, #56]	; 0x38
  DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     22e:	4a06      	ldr	r2, [pc, #24]	; (248 <_Z8dma_initv+0x3c>)
     230:	801a      	strh	r2, [r3, #0]
}
     232:	4770      	bx	lr
     234:	40000400 	.word	0x40000400
     238:	e000e100 	.word	0xe000e100
     23c:	41004800 	.word	0x41004800
     240:	20000180 	.word	0x20000180
     244:	20000250 	.word	0x20000250
     248:	00000f02 	.word	0x00000f02

0000024c <_Z7adc_dmaPvj>:

void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     24c:	4b17      	ldr	r3, [pc, #92]	; (2ac <_Z7adc_dmaPvj+0x60>)
  DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
  DMAC->WRBADDR.reg = (uint32_t)wrb;
  DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
}

void adc_dma(void *rxdata,  size_t hwords) {
     24e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     250:	001f      	movs	r7, r3
     252:	2500      	movs	r5, #0
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     254:	001c      	movs	r4, r3
     256:	2602      	movs	r6, #2
}

void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     258:	373f      	adds	r7, #63	; 0x3f
  DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
  DMAC->WRBADDR.reg = (uint32_t)wrb;
  DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
}

void adc_dma(void *rxdata,  size_t hwords) {
     25a:	9001      	str	r0, [sp, #4]
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     25c:	3440      	adds	r4, #64	; 0x40
}

void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     25e:	703d      	strb	r5, [r7, #0]
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     260:	7822      	ldrb	r2, [r4, #0]
     262:	43b2      	bics	r2, r6
     264:	7022      	strb	r2, [r4, #0]
  DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     266:	2201      	movs	r2, #1
     268:	4694      	mov	ip, r2
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
     26a:	4660      	mov	r0, ip
void adc_dma(void *rxdata,  size_t hwords) {
  uint32_t temp_CHCTRLB_reg;

  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
  DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
  DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     26c:	7022      	strb	r2, [r4, #0]
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
     26e:	691a      	ldr	r2, [r3, #16]
     270:	4382      	bics	r2, r0
     272:	611a      	str	r2, [r3, #16]
  temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(0) |
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     274:	4a0e      	ldr	r2, [pc, #56]	; (2b0 <_Z7adc_dmaPvj+0x64>)
     276:	645a      	str	r2, [r3, #68]	; 0x44
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
     278:	2207      	movs	r2, #7
     27a:	334d      	adds	r3, #77	; 0x4d
     27c:	701a      	strb	r2, [r3, #0]
  dmadone = 0;
     27e:	4b0d      	ldr	r3, [pc, #52]	; (2b4 <_Z7adc_dmaPvj+0x68>)
  descriptor.descaddr = 0;
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
     280:	4a0d      	ldr	r2, [pc, #52]	; (2b8 <_Z7adc_dmaPvj+0x6c>)
  DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << chnl));
  temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(0) |
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
  dmadone = 0;
     282:	601d      	str	r5, [r3, #0]
  descriptor.descaddr = 0;
     284:	4b0d      	ldr	r3, [pc, #52]	; (2bc <_Z7adc_dmaPvj+0x70>)
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
  descriptor.btcnt =  hwords;
     286:	8059      	strh	r1, [r3, #2]
  descriptor.dstaddr = (uint32_t)rxdata + hwords * 2; // end address
     288:	4081      	lsls	r1, r0
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
  dmadone = 0;
  descriptor.descaddr = 0;
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
     28a:	605a      	str	r2, [r3, #4]
  descriptor.btcnt =  hwords;
  descriptor.dstaddr = (uint32_t)rxdata + hwords * 2; // end address
     28c:	9a01      	ldr	r2, [sp, #4]
  temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(0) |
                     DMAC_CHCTRLB_TRIGSRC(ADC_DMAC_ID_RESRDY) | DMAC_CHCTRLB_TRIGACT_BEAT;
  DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
  dmadone = 0;
  descriptor.descaddr = 0;
     28e:	60dd      	str	r5, [r3, #12]
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
  descriptor.btcnt =  hwords;
  descriptor.dstaddr = (uint32_t)rxdata + hwords * 2; // end address
     290:	1850      	adds	r0, r2, r1
  descriptor.btctrl =  DMAC_BTCTRL_BEATSIZE_HWORD | DMAC_BTCTRL_DSTINC | DMAC_BTCTRL_VALID;
     292:	4a0b      	ldr	r2, [pc, #44]	; (2c0 <_Z7adc_dmaPvj+0x74>)
  DMAC->CHINTENSET.reg = DMAC_CHINTENSET_MASK ; // enable all 3 interrupts
  dmadone = 0;
  descriptor.descaddr = 0;
  descriptor.srcaddr = (uint32_t) &ADC->RESULT.reg;
  descriptor.btcnt =  hwords;
  descriptor.dstaddr = (uint32_t)rxdata + hwords * 2; // end address
     294:	6098      	str	r0, [r3, #8]
  descriptor.btctrl =  DMAC_BTCTRL_BEATSIZE_HWORD | DMAC_BTCTRL_DSTINC | DMAC_BTCTRL_VALID;
     296:	801a      	strh	r2, [r3, #0]
  memcpy(&descriptor_section[chnl], &descriptor, sizeof(dmacdescriptor));
     298:	0019      	movs	r1, r3
     29a:	2210      	movs	r2, #16
     29c:	4809      	ldr	r0, [pc, #36]	; (2c4 <_Z7adc_dmaPvj+0x78>)
     29e:	f002 fcef 	bl	2c80 <memcpy>

  // start channel
  DMAC->CHID.reg = DMAC_CHID_ID(chnl);
     2a2:	703d      	strb	r5, [r7, #0]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     2a4:	7823      	ldrb	r3, [r4, #0]
     2a6:	431e      	orrs	r6, r3
     2a8:	7026      	strb	r6, [r4, #0]
}
     2aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2ac:	41004800 	.word	0x41004800
     2b0:	00802700 	.word	0x00802700
     2b4:	20000310 	.word	0x20000310
     2b8:	4200401a 	.word	0x4200401a
     2bc:	200003d0 	.word	0x200003d0
     2c0:	00000901 	.word	0x00000901
     2c4:	20000180 	.word	0x20000180

000002c8 <_Z8adc_initv>:
__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
}

void adc_init() {
     2c8:	b510      	push	{r4, lr}
  analogRead(ADCPIN);  // do some pin init  pinPeripheral()
     2ca:	200e      	movs	r0, #14
     2cc:	f001 fd9a 	bl	1e04 <analogRead>
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
     2d0:	2102      	movs	r1, #2
     2d2:	4b1c      	ldr	r3, [pc, #112]	; (344 <_Z8adc_initv+0x7c>)
     2d4:	781a      	ldrb	r2, [r3, #0]
     2d6:	438a      	bics	r2, r1
     2d8:	701a      	strb	r2, [r3, #0]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     2da:	7e5a      	ldrb	r2, [r3, #25]
     2dc:	4919      	ldr	r1, [pc, #100]	; (344 <_Z8adc_initv+0x7c>)
     2de:	09d2      	lsrs	r2, r2, #7
     2e0:	d1fb      	bne.n	2da <_Z8adc_initv+0x12>
  analogRead(ADCPIN);  // do some pin init  pinPeripheral()
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
  ADCsync();
  //ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; //  2.2297 V Supply VDDANA
  //ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain select as 1X
  ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;  // default
     2e2:	20f0      	movs	r0, #240	; 0xf0
     2e4:	690a      	ldr	r2, [r1, #16]
     2e6:	0500      	lsls	r0, r0, #20
     2e8:	4302      	orrs	r2, r0
  ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 0 Pegel bei 3.3V / 2 -> 1.65 V
     2ea:	200f      	movs	r0, #15
  analogRead(ADCPIN);  // do some pin init  pinPeripheral()
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
  ADCsync();
  //ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; //  2.2297 V Supply VDDANA
  //ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain select as 1X
  ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;  // default
     2ec:	610a      	str	r2, [r1, #16]
  ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 0 Pegel bei 3.3V / 2 -> 1.65 V
     2ee:	784a      	ldrb	r2, [r1, #1]
     2f0:	4382      	bics	r2, r0
     2f2:	380d      	subs	r0, #13
     2f4:	4302      	orrs	r2, r0
     2f6:	704a      	strb	r2, [r1, #1]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     2f8:	7e5a      	ldrb	r2, [r3, #25]
     2fa:	4812      	ldr	r0, [pc, #72]	; (344 <_Z8adc_initv+0x7c>)
     2fc:	09d2      	lsrs	r2, r2, #7
     2fe:	d1fb      	bne.n	2f8 <_Z8adc_initv+0x30>
  //ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; //  2.2297 V Supply VDDANA
  //ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain select as 1X
  ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;  // default
  ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 0 Pegel bei 3.3V / 2 -> 1.65 V
  ADCsync();    //  ref 31.6.16
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[ADCPIN].ulADCChannelNumber;
     300:	241f      	movs	r4, #31
     302:	3261      	adds	r2, #97	; 0x61
     304:	4910      	ldr	r1, [pc, #64]	; (348 <_Z8adc_initv+0x80>)
     306:	32ff      	adds	r2, #255	; 0xff
     308:	5c89      	ldrb	r1, [r1, r2]
     30a:	6902      	ldr	r2, [r0, #16]
     30c:	4021      	ands	r1, r4
     30e:	43a2      	bics	r2, r4
     310:	430a      	orrs	r2, r1
     312:	6102      	str	r2, [r0, #16]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     314:	7e5a      	ldrb	r2, [r3, #25]
     316:	490b      	ldr	r1, [pc, #44]	; (344 <_Z8adc_initv+0x7c>)
     318:	09d2      	lsrs	r2, r2, #7
     31a:	d1fb      	bne.n	314 <_Z8adc_initv+0x4c>
  ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;  // default
  ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 0 Pegel bei 3.3V / 2 -> 1.65 V
  ADCsync();    //  ref 31.6.16
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[ADCPIN].ulADCChannelNumber;
  ADCsync();
  ADC->AVGCTRL.reg = 0;       // no averaging
     31c:	708a      	strb	r2, [r1, #2]
  ADC->SAMPCTRL.reg = 0x00;  ; //sample length in 1/2 CLK_ADC cycles
     31e:	70ca      	strb	r2, [r1, #3]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     320:	7e5a      	ldrb	r2, [r3, #25]
     322:	09d2      	lsrs	r2, r2, #7
     324:	d1fc      	bne.n	320 <_Z8adc_initv+0x58>
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[ADCPIN].ulADCChannelNumber;
  ADCsync();
  ADC->AVGCTRL.reg = 0;       // no averaging
  ADC->SAMPCTRL.reg = 0x00;  ; //sample length in 1/2 CLK_ADC cycles
  ADCsync();
  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256 | ADC_CTRLB_FREERUN | ADC_CTRLB_RESSEL_10BIT; // 48Mhz / 64 = 750kHz, 1samples = 6clocks => 750kHz / 6 = 125Khz. Mit Averaging -> 125kHz / 8 = 15.625kHz
     326:	4909      	ldr	r1, [pc, #36]	; (34c <_Z8adc_initv+0x84>)
     328:	4a06      	ldr	r2, [pc, #24]	; (344 <_Z8adc_initv+0x7c>)
     32a:	8091      	strh	r1, [r2, #4]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     32c:	7e5a      	ldrb	r2, [r3, #25]
     32e:	4905      	ldr	r1, [pc, #20]	; (344 <_Z8adc_initv+0x7c>)
     330:	09d2      	lsrs	r2, r2, #7
     332:	d1fb      	bne.n	32c <_Z8adc_initv+0x64>
  ADC->AVGCTRL.reg = 0;       // no averaging
  ADC->SAMPCTRL.reg = 0x00;  ; //sample length in 1/2 CLK_ADC cycles
  ADCsync();
  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256 | ADC_CTRLB_FREERUN | ADC_CTRLB_RESSEL_10BIT; // 48Mhz / 64 = 750kHz, 1samples = 6clocks => 750kHz / 6 = 125Khz. Mit Averaging -> 125kHz / 8 = 15.625kHz
  ADCsync();
  ADC->CTRLA.bit.ENABLE = 0x01;
     334:	2002      	movs	r0, #2
     336:	780a      	ldrb	r2, [r1, #0]
     338:	4302      	orrs	r2, r0
     33a:	700a      	strb	r2, [r1, #0]
  DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
}

__inline__ void ADCsync() __attribute__((always_inline, unused));
void   ADCsync() {
  while (ADC->STATUS.bit.SYNCBUSY == 1); //Just wait till the ADC is free
     33c:	7e5a      	ldrb	r2, [r3, #25]
     33e:	09d2      	lsrs	r2, r2, #7
     340:	d1fc      	bne.n	33c <_Z8adc_initv+0x74>
  ADCsync();
  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256 | ADC_CTRLB_FREERUN | ADC_CTRLB_RESSEL_10BIT; // 48Mhz / 64 = 750kHz, 1samples = 6clocks => 750kHz / 6 = 125Khz. Mit Averaging -> 125kHz / 8 = 15.625kHz
  ADCsync();
  ADC->CTRLA.bit.ENABLE = 0x01;
  ADCsync();
}
     342:	bd10      	pop	{r4, pc}
     344:	42004000 	.word	0x42004000
     348:	00002ee4 	.word	0x00002ee4
     34c:	00000624 	.word	0x00000624

00000350 <setup>:

// uint32_t ff_buffer[7000];

void setup() {
     350:	b513      	push	{r0, r1, r4, lr}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     352:	2101      	movs	r1, #1
     354:	4a2a      	ldr	r2, [pc, #168]	; (400 <setup+0xb0>)
     356:	482b      	ldr	r0, [pc, #172]	; (404 <setup+0xb4>)
     358:	6813      	ldr	r3, [r2, #0]
     35a:	0014      	movs	r4, r2
     35c:	400b      	ands	r3, r1
     35e:	d11b      	bne.n	398 <setup+0x48>
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     360:	22ff      	movs	r2, #255	; 0xff
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     362:	6043      	str	r3, [r0, #4]
     364:	6143      	str	r3, [r0, #20]
        m_pNext = NULL;
     366:	6083      	str	r3, [r0, #8]
        if(m_pHead==NULL) { m_pHead = this; }
     368:	4b27      	ldr	r3, [pc, #156]	; (408 <setup+0xb8>)
     36a:	7302      	strb	r2, [r0, #12]
     36c:	7342      	strb	r2, [r0, #13]
     36e:	7382      	strb	r2, [r0, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     370:	73c2      	strb	r2, [r0, #15]
     372:	7402      	strb	r2, [r0, #16]
     374:	7442      	strb	r2, [r0, #17]
     376:	681a      	ldr	r2, [r3, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     378:	7481      	strb	r1, [r0, #18]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     37a:	2a00      	cmp	r2, #0
     37c:	d100      	bne.n	380 <setup+0x30>
     37e:	6018      	str	r0, [r3, #0]
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     380:	4b22      	ldr	r3, [pc, #136]	; (40c <setup+0xbc>)
     382:	681a      	ldr	r2, [r3, #0]
     384:	2a00      	cmp	r2, #0
     386:	d000      	beq.n	38a <setup+0x3a>
     388:	6090      	str	r0, [r2, #8]
        m_pTail = this;
     38a:	6018      	str	r0, [r3, #0]
	inline void writeLed(uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((always_inline)) {
		mSPI.writeByte(0xFF); mSPI.writeByte(b0); mSPI.writeByte(b1); mSPI.writeByte(b2);
	}

public:
	APA102Controller() {}
     38c:	4b20      	ldr	r3, [pc, #128]	; (410 <setup+0xc0>)
     38e:	6003      	str	r3, [r0, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
     390:	2300      	movs	r3, #0
     392:	6183      	str	r3, [r0, #24]
     394:	3301      	adds	r3, #1
     396:	6023      	str	r3, [r4, #0]
     398:	4c1e      	ldr	r4, [pc, #120]	; (414 <setup+0xc4>)
     39a:	2300      	movs	r3, #0
     39c:	0021      	movs	r1, r4
     39e:	223c      	movs	r2, #60	; 0x3c
     3a0:	f001 fe80 	bl	20a4 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
     3a4:	22b0      	movs	r2, #176	; 0xb0
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     3a6:	23ff      	movs	r3, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
     3a8:	7342      	strb	r2, [r0, #13]
        b = (colorcode >>  0) & 0xFF;
     3aa:	3240      	adds	r2, #64	; 0x40
     3ac:	7382      	strb	r2, [r0, #14]
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     3ae:	491a      	ldr	r1, [pc, #104]	; (418 <setup+0xc8>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     3b0:	4a1a      	ldr	r2, [pc, #104]	; (41c <setup+0xcc>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     3b2:	7303      	strb	r3, [r0, #12]
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     3b4:	60d1      	str	r1, [r2, #12]
     3b6:	491a      	ldr	r1, [pc, #104]	; (420 <setup+0xd0>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     3b8:	7013      	strb	r3, [r2, #0]
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     3ba:	6091      	str	r1, [r2, #8]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     3bc:	4669      	mov	r1, sp
     3be:	2200      	movs	r2, #0
     3c0:	704b      	strb	r3, [r1, #1]
     3c2:	700a      	strb	r2, [r1, #0]
     3c4:	708a      	strb	r2, [r1, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     3c6:	4668      	mov	r0, sp
     3c8:	a901      	add	r1, sp, #4
     3ca:	f001 fe9d 	bl	2108 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>
  // keine ahnung obs auswirkung hat, meine PowerBank hat 2.1A darum hab ich mal 2A max eingestellt. Sollte die Helligkeit automatisch regeln wenn zuviele Leds zu hell eingestellt sind
  FastLED.setMaxPowerInVoltsAndMilliamps(5, 2000);

  // alle leds gleiche farbe
  CHSV color(0, 255, 0) ; // rot
  fill_solid(leds.data(), leds.size(), color);
     3ce:	aa01      	add	r2, sp, #4
     3d0:	0020      	movs	r0, r4
     3d2:	213c      	movs	r1, #60	; 0x3c
     3d4:	f001 fe58 	bl	2088 <_Z10fill_solidP4CRGBiRKS_>

  Serial.begin(9600);
     3d8:	2196      	movs	r1, #150	; 0x96
     3da:	4812      	ldr	r0, [pc, #72]	; (424 <setup+0xd4>)
     3dc:	0189      	lsls	r1, r1, #6
     3de:	f000 fc9d 	bl	d1c <_ZN7Serial_5beginEm>
  analogWriteResolution(10);
     3e2:	200a      	movs	r0, #10
     3e4:	f001 fcd8 	bl	1d98 <analogWriteResolution>
  // analogWrite(A0, 64);  // test with DAC
  adc_init();
     3e8:	f7ff ff6e 	bl	2c8 <_Z8adc_initv>
  dma_init();
     3ec:	f7ff ff0e 	bl	20c <_Z8dma_initv>
  fft = arduinoFFT();
     3f0:	a801      	add	r0, sp, #4
     3f2:	f001 fe47 	bl	2084 <_ZN10arduinoFFTC1Ev>
     3f6:	a801      	add	r0, sp, #4
     3f8:	f001 fe45 	bl	2086 <_ZN10arduinoFFTD1Ev>
  for (int i = 0; i < 7000; i++)
  {
	*ff_buffer = 0xff;
  }
  */
}
     3fc:	bd13      	pop	{r0, r1, r4, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	20000158 	.word	0x20000158
     404:	2000015c 	.word	0x2000015c
     408:	20000bd4 	.word	0x20000bd4
     40c:	20000bd8 	.word	0x20000bd8
     410:	00002e4c 	.word	0x00002e4c
     414:	20000314 	.word	0x20000314
     418:	00002285 	.word	0x00002285
     41c:	20000bc4 	.word	0x20000bc4
     420:	00002710 	.word	0x00002710
     424:	200005e8 	.word	0x200005e8

00000428 <loop>:

void loop() {
  
  // uint32_t t_dma = micros();
  // Serial.print("dma start");
  adc_dma(adcbuf, HWORDS);
     428:	2180      	movs	r1, #128	; 0x80
}


uint8_t h = 0;

void loop() {
     42a:	b510      	push	{r4, lr}
  
  // uint32_t t_dma = micros();
  // Serial.print("dma start");
  adc_dma(adcbuf, HWORDS);
     42c:	0049      	lsls	r1, r1, #1
     42e:	4804      	ldr	r0, [pc, #16]	; (440 <loop+0x18>)
     430:	f7ff ff0c 	bl	24c <_Z7adc_dmaPvj>
  while (!dmadone) // await DMA done isr
     434:	4a03      	ldr	r2, [pc, #12]	; (444 <loop+0x1c>)
     436:	6813      	ldr	r3, [r2, #0]
     438:	2b00      	cmp	r3, #0
     43a:	d0fc      	beq.n	436 <loop+0xe>
      //leds[59-i] = color;
  }
  FastLED.show();
  h += 1;
  */
}
     43c:	bd10      	pop	{r4, pc}
     43e:	46c0      	nop			; (mov r8, r8)
     440:	200003e0 	.word	0x200003e0
     444:	20000310 	.word	0x20000310

00000448 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE7releaseEv>:
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     448:	6800      	ldr	r0, [r0, #0]
     44a:	b510      	push	{r4, lr}
     44c:	2800      	cmp	r0, #0
     44e:	d002      	beq.n	456 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE7releaseEv+0xe>
     450:	6803      	ldr	r3, [r0, #0]
     452:	685b      	ldr	r3, [r3, #4]
     454:	4798      	blx	r3
     456:	bd10      	pop	{r4, pc}

00000458 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv>:

	virtual void init() {
     458:	b570      	push	{r4, r5, r6, lr}
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
     45a:	2401      	movs	r4, #1
     45c:	4e1a      	ldr	r6, [pc, #104]	; (4c8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x70>)
     45e:	0022      	movs	r2, r4
     460:	0033      	movs	r3, r6
     462:	3394      	adds	r3, #148	; 0x94
     464:	681b      	ldr	r3, [r3, #0]
     466:	0005      	movs	r5, r0
     468:	409a      	lsls	r2, r3
     46a:	4b18      	ldr	r3, [pc, #96]	; (4cc <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x74>)
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     46c:	2006      	movs	r0, #6
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
     46e:	601a      	str	r2, [r3, #0]
		sPort = portOutputRegister(digitalPinToPort(PIN));
     470:	0033      	movs	r3, r6
     472:	3390      	adds	r3, #144	; 0x90
     474:	781b      	ldrb	r3, [r3, #0]
     476:	4a16      	ldr	r2, [pc, #88]	; (4d0 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x78>)
     478:	b25b      	sxtb	r3, r3
     47a:	01db      	lsls	r3, r3, #7
     47c:	1899      	adds	r1, r3, r2
     47e:	4a15      	ldr	r2, [pc, #84]	; (4d4 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x7c>)
     480:	6011      	str	r1, [r2, #0]
		sInPort = portInputRegister(digitalPinToPort(PIN));
     482:	4a15      	ldr	r2, [pc, #84]	; (4d8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x80>)
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     484:	0021      	movs	r1, r4
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
		sPort = portOutputRegister(digitalPinToPort(PIN));
		sInPort = portInputRegister(digitalPinToPort(PIN));
     486:	189b      	adds	r3, r3, r2
     488:	4a14      	ldr	r2, [pc, #80]	; (4dc <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x84>)
     48a:	6013      	str	r3, [r2, #0]
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     48c:	f001 fd2e 	bl	1eec <pinMode>
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
     490:	0033      	movs	r3, r6
     492:	0022      	movs	r2, r4
     494:	33dc      	adds	r3, #220	; 0xdc
     496:	681b      	ldr	r3, [r3, #0]
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     498:	2009      	movs	r0, #9
	static RwReg sPinMask;
	static volatile RwReg *sPort;
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
     49a:	409a      	lsls	r2, r3
     49c:	4b10      	ldr	r3, [pc, #64]	; (4e0 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x88>)
     49e:	601a      	str	r2, [r3, #0]
		sPort = portOutputRegister(digitalPinToPort(PIN));
     4a0:	23d8      	movs	r3, #216	; 0xd8
     4a2:	56f3      	ldrsb	r3, [r6, r3]
     4a4:	4a0a      	ldr	r2, [pc, #40]	; (4d0 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x78>)
     4a6:	01db      	lsls	r3, r3, #7
     4a8:	1899      	adds	r1, r3, r2
     4aa:	4a0e      	ldr	r2, [pc, #56]	; (4e4 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x8c>)
     4ac:	6011      	str	r1, [r2, #0]
		sInPort = portInputRegister(digitalPinToPort(PIN));
     4ae:	4a0a      	ldr	r2, [pc, #40]	; (4d8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x80>)
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     4b0:	0021      	movs	r1, r4
	static volatile RoReg *sInPort;
	static void _init() {
#if !defined(FASTLED_NO_PINMAP)
		sPinMask = digitalPinToBitMask(PIN);
		sPort = portOutputRegister(digitalPinToPort(PIN));
		sInPort = portInputRegister(digitalPinToPort(PIN));
     4b2:	189b      	adds	r3, r3, r2
     4b4:	4a0c      	ldr	r2, [pc, #48]	; (4e8 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE4initEv+0x90>)
     4b6:	6013      	str	r3, [r2, #0]
	}
public:
	typedef volatile RwReg * port_ptr_t;
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
     4b8:	f001 fd18 	bl	1eec <pinMode>
		mSPI.init();
     4bc:	0028      	movs	r0, r5
     4be:	3018      	adds	r0, #24
	void init() {
		// set the pins to output and make sure the select is released (which apparently means hi?  This is a bit
		// confusing to me)
		FastPin<DATA_PIN>::setOutput();
		FastPin<CLOCK_PIN>::setOutput();
		release();
     4c0:	f7ff ffc2 	bl	448 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE7releaseEv>
	}
     4c4:	bd70      	pop	{r4, r5, r6, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00002ee4 	.word	0x00002ee4
     4cc:	20000154 	.word	0x20000154
     4d0:	41004410 	.word	0x41004410
     4d4:	20000150 	.word	0x20000150
     4d8:	41004420 	.word	0x41004420
     4dc:	2000014c 	.word	0x2000014c
     4e0:	20000148 	.word	0x20000148
     4e4:	20000144 	.word	0x20000144
     4e8:	20000140 	.word	0x20000140

000004ec <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE11initOffsetsEi>:
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     4ec:	2300      	movs	r3, #0
     4ee:	6183      	str	r3, [r0, #24]
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
          }
        }
     4f0:	4770      	bx	lr
	...

000004f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
     4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f6:	494f      	ldr	r1, [pc, #316]	; (634 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x140>)
     4f8:	4c4f      	ldr	r4, [pc, #316]	; (638 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x144>)
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     4fa:	b245      	sxtb	r5, r0
     4fc:	4b4f      	ldr	r3, [pc, #316]	; (63c <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x148>)
     4fe:	4a50      	ldr	r2, [pc, #320]	; (640 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x14c>)
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     500:	6827      	ldr	r7, [r4, #0]
     502:	680e      	ldr	r6, [r1, #0]
     504:	2d00      	cmp	r5, #0
     506:	da02      	bge.n	50e <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x1a>
     508:	6835      	ldr	r5, [r6, #0]
     50a:	433d      	orrs	r5, r7
     50c:	e001      	b.n	512 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x1e>
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     50e:	6835      	ldr	r5, [r6, #0]
     510:	43bd      	bics	r5, r7
     512:	6035      	str	r5, [r6, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     514:	6815      	ldr	r5, [r2, #0]
     516:	681f      	ldr	r7, [r3, #0]
     518:	682e      	ldr	r6, [r5, #0]
     51a:	433e      	orrs	r6, r7
     51c:	602e      	str	r6, [r5, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     51e:	681f      	ldr	r7, [r3, #0]
     520:	682e      	ldr	r6, [r5, #0]
     522:	43be      	bics	r6, r7
     524:	602e      	str	r6, [r5, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     526:	6827      	ldr	r7, [r4, #0]
     528:	680e      	ldr	r6, [r1, #0]
     52a:	0645      	lsls	r5, r0, #25
     52c:	d502      	bpl.n	534 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x40>
     52e:	6835      	ldr	r5, [r6, #0]
     530:	433d      	orrs	r5, r7
     532:	e001      	b.n	538 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x44>
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     534:	6835      	ldr	r5, [r6, #0]
     536:	43bd      	bics	r5, r7
     538:	6035      	str	r5, [r6, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     53a:	6815      	ldr	r5, [r2, #0]
     53c:	681f      	ldr	r7, [r3, #0]
     53e:	682e      	ldr	r6, [r5, #0]
     540:	433e      	orrs	r6, r7
     542:	602e      	str	r6, [r5, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     544:	681f      	ldr	r7, [r3, #0]
     546:	682e      	ldr	r6, [r5, #0]
     548:	43be      	bics	r6, r7
     54a:	602e      	str	r6, [r5, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     54c:	6827      	ldr	r7, [r4, #0]
     54e:	680e      	ldr	r6, [r1, #0]
     550:	0685      	lsls	r5, r0, #26
     552:	d502      	bpl.n	55a <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x66>
     554:	6835      	ldr	r5, [r6, #0]
     556:	433d      	orrs	r5, r7
     558:	e001      	b.n	55e <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x6a>
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     55a:	6835      	ldr	r5, [r6, #0]
     55c:	43bd      	bics	r5, r7
     55e:	6035      	str	r5, [r6, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     560:	6815      	ldr	r5, [r2, #0]
     562:	681f      	ldr	r7, [r3, #0]
     564:	682e      	ldr	r6, [r5, #0]
     566:	433e      	orrs	r6, r7
     568:	602e      	str	r6, [r5, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     56a:	681f      	ldr	r7, [r3, #0]
     56c:	682e      	ldr	r6, [r5, #0]
     56e:	43be      	bics	r6, r7
     570:	602e      	str	r6, [r5, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     572:	6827      	ldr	r7, [r4, #0]
     574:	680e      	ldr	r6, [r1, #0]
     576:	06c5      	lsls	r5, r0, #27
     578:	d502      	bpl.n	580 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x8c>
     57a:	6835      	ldr	r5, [r6, #0]
     57c:	433d      	orrs	r5, r7
     57e:	e001      	b.n	584 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x90>
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     580:	6835      	ldr	r5, [r6, #0]
     582:	43bd      	bics	r5, r7
     584:	6035      	str	r5, [r6, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     586:	6815      	ldr	r5, [r2, #0]
     588:	681f      	ldr	r7, [r3, #0]
     58a:	682e      	ldr	r6, [r5, #0]
     58c:	433e      	orrs	r6, r7
     58e:	602e      	str	r6, [r5, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     590:	681f      	ldr	r7, [r3, #0]
     592:	682e      	ldr	r6, [r5, #0]
     594:	43be      	bics	r6, r7
     596:	602e      	str	r6, [r5, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     598:	6827      	ldr	r7, [r4, #0]
     59a:	680e      	ldr	r6, [r1, #0]
     59c:	0705      	lsls	r5, r0, #28
     59e:	d502      	bpl.n	5a6 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xb2>
     5a0:	6835      	ldr	r5, [r6, #0]
     5a2:	433d      	orrs	r5, r7
     5a4:	e001      	b.n	5aa <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xb6>
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     5a6:	6835      	ldr	r5, [r6, #0]
     5a8:	43bd      	bics	r5, r7
     5aa:	6035      	str	r5, [r6, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     5ac:	6815      	ldr	r5, [r2, #0]
     5ae:	681f      	ldr	r7, [r3, #0]
     5b0:	682e      	ldr	r6, [r5, #0]
     5b2:	433e      	orrs	r6, r7
     5b4:	602e      	str	r6, [r5, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     5b6:	681f      	ldr	r7, [r3, #0]
     5b8:	682e      	ldr	r6, [r5, #0]
     5ba:	43be      	bics	r6, r7
     5bc:	602e      	str	r6, [r5, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     5be:	6827      	ldr	r7, [r4, #0]
     5c0:	680e      	ldr	r6, [r1, #0]
     5c2:	0745      	lsls	r5, r0, #29
     5c4:	d502      	bpl.n	5cc <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xd8>
     5c6:	6835      	ldr	r5, [r6, #0]
     5c8:	433d      	orrs	r5, r7
     5ca:	e001      	b.n	5d0 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xdc>
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     5cc:	6835      	ldr	r5, [r6, #0]
     5ce:	43bd      	bics	r5, r7
     5d0:	6035      	str	r5, [r6, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     5d2:	6815      	ldr	r5, [r2, #0]
     5d4:	681f      	ldr	r7, [r3, #0]
     5d6:	682e      	ldr	r6, [r5, #0]
     5d8:	433e      	orrs	r6, r7
     5da:	602e      	str	r6, [r5, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     5dc:	681f      	ldr	r7, [r3, #0]
     5de:	682e      	ldr	r6, [r5, #0]
     5e0:	43be      	bics	r6, r7
     5e2:	602e      	str	r6, [r5, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     5e4:	6827      	ldr	r7, [r4, #0]
     5e6:	680e      	ldr	r6, [r1, #0]
     5e8:	0785      	lsls	r5, r0, #30
     5ea:	d502      	bpl.n	5f2 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0xfe>
     5ec:	6835      	ldr	r5, [r6, #0]
     5ee:	433d      	orrs	r5, r7
     5f0:	e001      	b.n	5f6 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x102>
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     5f2:	6835      	ldr	r5, [r6, #0]
     5f4:	43bd      	bics	r5, r7
     5f6:	6035      	str	r5, [r6, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     5f8:	6815      	ldr	r5, [r2, #0]
     5fa:	681f      	ldr	r7, [r3, #0]
     5fc:	682e      	ldr	r6, [r5, #0]
     5fe:	433e      	orrs	r6, r7
     600:	602e      	str	r6, [r5, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     602:	681f      	ldr	r7, [r3, #0]
     604:	682e      	ldr	r6, [r5, #0]
     606:	43be      	bics	r6, r7
     608:	602e      	str	r6, [r5, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     60a:	6824      	ldr	r4, [r4, #0]
     60c:	07c0      	lsls	r0, r0, #31
     60e:	d503      	bpl.n	618 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x124>
     610:	6808      	ldr	r0, [r1, #0]
     612:	6801      	ldr	r1, [r0, #0]
     614:	4321      	orrs	r1, r4
     616:	e002      	b.n	61e <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh+0x12a>
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     618:	6808      	ldr	r0, [r1, #0]
     61a:	6801      	ldr	r1, [r0, #0]
     61c:	43a1      	bics	r1, r4
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     61e:	6812      	ldr	r2, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     620:	6001      	str	r1, [r0, #0]
	typedef RwReg port_t;

	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }

	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }
     622:	6818      	ldr	r0, [r3, #0]
     624:	6811      	ldr	r1, [r2, #0]
     626:	4301      	orrs	r1, r0
     628:	6011      	str	r1, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }
     62a:	6819      	ldr	r1, [r3, #0]
     62c:	6813      	ldr	r3, [r2, #0]
     62e:	438b      	bics	r3, r1
     630:	6013      	str	r3, [r2, #0]
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
     632:	bdf0      	pop	{r4, r5, r6, r7, pc}
     634:	20000150 	.word	0x20000150
     638:	20000154 	.word	0x20000154
     63c:	20000148 	.word	0x20000148
     640:	20000144 	.word	0x20000144

00000644 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE>:

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     644:	b570      	push	{r4, r5, r6, lr}
		mSPI.select();
     646:	0006      	movs	r6, r0
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     648:	6980      	ldr	r0, [r0, #24]
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     64a:	000c      	movs	r4, r1
		mSPI.select();
     64c:	3618      	adds	r6, #24
     64e:	2800      	cmp	r0, #0
     650:	d002      	beq.n	658 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x14>
     652:	6803      	ldr	r3, [r0, #0]
     654:	681b      	ldr	r3, [r3, #0]
     656:	4798      	blx	r3
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     658:	2000      	movs	r0, #0
     65a:	f7ff ff4b 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     65e:	2000      	movs	r0, #0
     660:	f7ff ff48 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     664:	2000      	movs	r0, #0
     666:	f7ff ff45 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     66a:	2000      	movs	r0, #0
     66c:	f7ff ff42 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>

		startBoundary();
		while(pixels.has(1)) {
     670:	68a3      	ldr	r3, [r4, #8]
     672:	2b00      	cmp	r3, #0
     674:	dd53      	ble.n	71e <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0xda>
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     676:	6823      	ldr	r3, [r4, #0]
     678:	789b      	ldrb	r3, [r3, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     67a:	2b00      	cmp	r3, #0
     67c:	d006      	beq.n	68c <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x48>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     67e:	7ba2      	ldrb	r2, [r4, #14]
     680:	18d3      	adds	r3, r2, r3
    if( t > 255) t = 255;
     682:	22ff      	movs	r2, #255	; 0xff
     684:	4293      	cmp	r3, r2
     686:	dc00      	bgt.n	68a <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x46>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     688:	001a      	movs	r2, r3
    if( t > 255) t = 255;
    return t;
     68a:	b2d3      	uxtb	r3, r2
			mSPI.writeByte(0xFF);
			mSPI.writeByte(pixels.loadAndScale0());
			mSPI.writeByte(pixels.loadAndScale1());
			mSPI.writeByte(pixels.loadAndScale2());
#else
			uint16_t b = 0xFF00 | (uint16_t)pixels.loadAndScale0();
     68c:	7d25      	ldrb	r5, [r4, #20]
     68e:	20ff      	movs	r0, #255	; 0xff
     690:	3501      	adds	r5, #1
     692:	436b      	muls	r3, r5
     694:	4d2e      	ldr	r5, [pc, #184]	; (750 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x10c>)
     696:	121b      	asrs	r3, r3, #8
     698:	431d      	orrs	r5, r3
     69a:	b2ad      	uxth	r5, r5
     69c:	f7ff ff2a 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     6a0:	b2e8      	uxtb	r0, r5
     6a2:	f7ff ff27 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     6a6:	6822      	ldr	r2, [r4, #0]
     6a8:	7853      	ldrb	r3, [r2, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     6aa:	2b00      	cmp	r3, #0
     6ac:	d006      	beq.n	6bc <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x78>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     6ae:	7b65      	ldrb	r5, [r4, #13]
     6b0:	18eb      	adds	r3, r5, r3
    if( t > 255) t = 255;
     6b2:	25ff      	movs	r5, #255	; 0xff
     6b4:	42ab      	cmp	r3, r5
     6b6:	dc00      	bgt.n	6ba <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x76>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     6b8:	001d      	movs	r5, r3
    if( t > 255) t = 255;
    return t;
     6ba:	b2eb      	uxtb	r3, r5
			mSPI.writeWord(b);
			uint16_t w = pixels.loadAndScale1() << 8;
     6bc:	7ce5      	ldrb	r5, [r4, #19]
     6be:	3501      	adds	r5, #1
     6c0:	436b      	muls	r3, r5
     6c2:	25ff      	movs	r5, #255	; 0xff
     6c4:	022d      	lsls	r5, r5, #8
     6c6:	401d      	ands	r5, r3
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     6c8:	7813      	ldrb	r3, [r2, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     6ca:	2b00      	cmp	r3, #0
     6cc:	d006      	beq.n	6dc <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x98>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     6ce:	7b22      	ldrb	r2, [r4, #12]
     6d0:	18d3      	adds	r3, r2, r3
    if( t > 255) t = 255;
     6d2:	22ff      	movs	r2, #255	; 0xff
     6d4:	4293      	cmp	r3, r2
     6d6:	dc00      	bgt.n	6da <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x96>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
     6d8:	001a      	movs	r2, r3
    if( t > 255) t = 255;
    return t;
     6da:	b2d3      	uxtb	r3, r2
			w |= pixels.loadAndScale2();
     6dc:	7ca0      	ldrb	r0, [r4, #18]
     6de:	3001      	adds	r0, #1
     6e0:	4343      	muls	r3, r0
     6e2:	121b      	asrs	r3, r3, #8
     6e4:	431d      	orrs	r5, r3
     6e6:	b2ad      	uxth	r5, r5
     6e8:	0a28      	lsrs	r0, r5, #8
     6ea:	f7ff ff03 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     6ee:	b2e8      	uxtb	r0, r5
     6f0:	f7ff ff00 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     6f4:	7b22      	ldrb	r2, [r4, #12]
     6f6:	7be3      	ldrb	r3, [r4, #15]
     6f8:	1a9b      	subs	r3, r3, r2
     6fa:	7323      	strb	r3, [r4, #12]
                d[1] = e[1] - d[1];
     6fc:	7b62      	ldrb	r2, [r4, #13]
     6fe:	7c23      	ldrb	r3, [r4, #16]
     700:	1a9b      	subs	r3, r3, r2
     702:	7363      	strb	r3, [r4, #13]
                d[2] = e[2] - d[2];
     704:	7ba2      	ldrb	r2, [r4, #14]
     706:	7c63      	ldrb	r3, [r4, #17]
     708:	1a9b      	subs	r3, r3, r2
     70a:	73a3      	strb	r3, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     70c:	2315      	movs	r3, #21
     70e:	6822      	ldr	r2, [r4, #0]
     710:	56e3      	ldrsb	r3, [r4, r3]
     712:	18d3      	adds	r3, r2, r3
     714:	6023      	str	r3, [r4, #0]
     716:	68a3      	ldr	r3, [r4, #8]
     718:	3b01      	subs	r3, #1
     71a:	60a3      	str	r3, [r4, #8]
     71c:	e7a8      	b.n	670 <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0x2c>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     71e:	221f      	movs	r2, #31
     720:	6863      	ldr	r3, [r4, #4]
     722:	17dc      	asrs	r4, r3, #31
     724:	4014      	ands	r4, r2
     726:	18e4      	adds	r4, r4, r3
     728:	1164      	asrs	r4, r4, #5
     72a:	20ff      	movs	r0, #255	; 0xff
     72c:	f7ff fee2 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     730:	2000      	movs	r0, #0
     732:	f7ff fedf 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     736:	2000      	movs	r0, #0
     738:	f7ff fedc 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     73c:	2000      	movs	r0, #0
     73e:	f7ff fed9 	bl	4f4 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE9writeByteEh>
     742:	3c01      	subs	r4, #1
     744:	d2f1      	bcs.n	72a <_ZN16APA102ControllerILh6ELh9EL6EOrder136ELh4EE10showPixelsER15PixelControllerILS0_136ELi1ELm4294967295EE+0xe6>
			pixels.stepDithering();
			pixels.advanceData();
		}
		endBoundary(pixels.size());
		mSPI.waitFully();
		mSPI.release();
     746:	0030      	movs	r0, r6
     748:	f7ff fe7e 	bl	448 <_ZN20AVRSoftwareSPIOutputILh6ELh9ELh4EE7releaseEv>
	}
     74c:	bd70      	pop	{r4, r5, r6, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	ffffff00 	.word	0xffffff00

00000754 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv>:
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     754:	2307      	movs	r3, #7
            enable_dithering(dither);
            mAdvance = 0;
            initOffsets(len);
        }

        void init_binary_dithering() {
     756:	b570      	push	{r4, r5, r6, lr}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static byte R = 0;
            R++;
     758:	4918      	ldr	r1, [pc, #96]	; (7bc <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x68>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     75a:	780a      	ldrb	r2, [r1, #0]
     75c:	3201      	adds	r2, #1
     75e:	401a      	ands	r2, r3
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     760:	3b06      	subs	r3, #6
     762:	4013      	ands	r3, r2
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     764:	700a      	strb	r2, [r1, #0]
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     766:	01db      	lsls	r3, r3, #7
                if(R & 0x02) { Q |= 0x40; }
     768:	0791      	lsls	r1, r2, #30
     76a:	d501      	bpl.n	770 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x1c>
     76c:	2140      	movs	r1, #64	; 0x40
     76e:	430b      	orrs	r3, r1
                if(R & 0x04) { Q |= 0x20; }
     770:	2104      	movs	r1, #4
     772:	420a      	tst	r2, r1
     774:	d001      	beq.n	77a <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x26>
     776:	2220      	movs	r2, #32
     778:	4313      	orrs	r3, r2
     77a:	0005      	movs	r5, r0
     77c:	300f      	adds	r0, #15
     77e:	0006      	movs	r6, r0
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     780:	3310      	adds	r3, #16
     782:	b2dc      	uxtb	r4, r3
     784:	350c      	adds	r5, #12
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     786:	2300      	movs	r3, #0
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
     788:	79a9      	ldrb	r1, [r5, #6]
                    e[i] = s ? (256/s) + 1 : 0;
     78a:	4299      	cmp	r1, r3
     78c:	d005      	beq.n	79a <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x46>
     78e:	2080      	movs	r0, #128	; 0x80
     790:	0040      	lsls	r0, r0, #1
     792:	f002 f941 	bl	2a18 <__aeabi_idiv>
     796:	3001      	adds	r0, #1
     798:	b2c3      	uxtb	r3, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     79a:	1c5a      	adds	r2, r3, #1
     79c:	4362      	muls	r2, r4
     79e:	1212      	asrs	r2, r2, #8
     7a0:	70eb      	strb	r3, [r5, #3]
     7a2:	b2d1      	uxtb	r1, r2
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     7a4:	2a00      	cmp	r2, #0
     7a6:	d000      	beq.n	7aa <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x56>
     7a8:	3901      	subs	r1, #1
     7aa:	7029      	strb	r1, [r5, #0]
#endif
                    if(e[i]) e[i]--;
     7ac:	2b00      	cmp	r3, #0
     7ae:	d001      	beq.n	7b4 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x60>
     7b0:	3b01      	subs	r3, #1
     7b2:	70eb      	strb	r3, [r5, #3]
     7b4:	3501      	adds	r5, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7b6:	42ae      	cmp	r6, r5
     7b8:	d1e5      	bne.n	786 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv+0x32>
                    if(d[i]) (d[i]--);
#endif
                    if(e[i]) e[i]--;
            }
#endif
        }
     7ba:	bd70      	pop	{r4, r5, r6, pc}
     7bc:	2000013c 	.word	0x2000013c

000007c0 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	0016      	movs	r6, r2
     7c4:	b088      	sub	sp, #32
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     7c6:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7c8:	7819      	ldrb	r1, [r3, #0]
     7ca:	ac01      	add	r4, sp, #4
     7cc:	6066      	str	r6, [r4, #4]
     7ce:	60a6      	str	r6, [r4, #8]
     7d0:	74a1      	strb	r1, [r4, #18]
        g = rhs.g;
     7d2:	7859      	ldrb	r1, [r3, #1]
     7d4:	7c82      	ldrb	r2, [r0, #18]
     7d6:	74e1      	strb	r1, [r4, #19]
        b = rhs.b;
     7d8:	789b      	ldrb	r3, [r3, #2]

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     7da:	0005      	movs	r5, r0
     7dc:	7523      	strb	r3, [r4, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7de:	2a01      	cmp	r2, #1
     7e0:	d103      	bne.n	7ea <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x2a>
                case BINARY_DITHER: init_binary_dithering(); break;
     7e2:	0020      	movs	r0, r4
     7e4:	f7ff ffb6 	bl	754 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv>
     7e8:	e006      	b.n	7f8 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x38>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     7ea:	2300      	movs	r3, #0
     7ec:	7463      	strb	r3, [r4, #17]
     7ee:	7423      	strb	r3, [r4, #16]
     7f0:	73e3      	strb	r3, [r4, #15]
     7f2:	73a3      	strb	r3, [r4, #14]
     7f4:	7363      	strb	r3, [r4, #13]
     7f6:	7323      	strb	r3, [r4, #12]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     7f8:	2300      	movs	r3, #0
            initOffsets(len);
     7fa:	0031      	movs	r1, r6
     7fc:	0020      	movs	r0, r4
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     7fe:	7563      	strb	r3, [r4, #21]
            initOffsets(len);
     800:	f7ff fe74 	bl	4ec <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE11initOffsetsEi>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     804:	682b      	ldr	r3, [r5, #0]
     806:	0021      	movs	r1, r4
     808:	699b      	ldr	r3, [r3, #24]
     80a:	0028      	movs	r0, r5
     80c:	4798      	blx	r3
  }
     80e:	b008      	add	sp, #32
     810:	bd70      	pop	{r4, r5, r6, pc}

00000812 <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     812:	b570      	push	{r4, r5, r6, lr}
     814:	0016      	movs	r6, r2
     816:	b088      	sub	sp, #32
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     818:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     81a:	7819      	ldrb	r1, [r3, #0]
     81c:	ac01      	add	r4, sp, #4
     81e:	6066      	str	r6, [r4, #4]
     820:	60a6      	str	r6, [r4, #8]
     822:	74a1      	strb	r1, [r4, #18]
        g = rhs.g;
     824:	7859      	ldrb	r1, [r3, #1]
     826:	7c82      	ldrb	r2, [r0, #18]
     828:	74e1      	strb	r1, [r4, #19]
        b = rhs.b;
     82a:	789b      	ldrb	r3, [r3, #2]

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     82c:	0005      	movs	r5, r0
     82e:	7523      	strb	r3, [r4, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     830:	2a01      	cmp	r2, #1
     832:	d103      	bne.n	83c <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x2a>
                case BINARY_DITHER: init_binary_dithering(); break;
     834:	0020      	movs	r0, r4
     836:	f7ff ff8d 	bl	754 <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE21init_binary_ditheringEv>
     83a:	e006      	b.n	84a <_ZN19CPixelLEDControllerIL6EOrder136ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x38>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     83c:	2300      	movs	r3, #0
     83e:	7463      	strb	r3, [r4, #17]
     840:	7423      	strb	r3, [r4, #16]
     842:	73e3      	strb	r3, [r4, #15]
     844:	73a3      	strb	r3, [r4, #14]
     846:	7363      	strb	r3, [r4, #13]
     848:	7323      	strb	r3, [r4, #12]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     84a:	2303      	movs	r3, #3
            initOffsets(len);
     84c:	0031      	movs	r1, r6
     84e:	0020      	movs	r0, r4
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     850:	7563      	strb	r3, [r4, #21]
            initOffsets(len);
     852:	f7ff fe4b 	bl	4ec <_ZN15PixelControllerIL6EOrder136ELi1ELm4294967295EE11initOffsetsEi>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     856:	682b      	ldr	r3, [r5, #0]
     858:	0021      	movs	r1, r4
     85a:	699b      	ldr	r3, [r3, #24]
     85c:	0028      	movs	r0, r5
     85e:	4798      	blx	r3
  }
     860:	b008      	add	sp, #32
     862:	bd70      	pop	{r4, r5, r6, pc}

00000864 <_GLOBAL__sub_I_fft>:
     864:	b510      	push	{r4, lr}
void adc_dma(void* rxdata, size_t hwords);
void ADCsync();
void adc_init();
//End of Auto generated function prototypes by Atmel Studio

arduinoFFT fft;
     866:	4c05      	ldr	r4, [pc, #20]	; (87c <_GLOBAL__sub_I_fft+0x18>)
     868:	0020      	movs	r0, r4
     86a:	f001 fc0b 	bl	2084 <_ZN10arduinoFFTC1Ev>
     86e:	4a04      	ldr	r2, [pc, #16]	; (880 <_GLOBAL__sub_I_fft+0x1c>)
     870:	4904      	ldr	r1, [pc, #16]	; (884 <_GLOBAL__sub_I_fft+0x20>)
     872:	0020      	movs	r0, r4
     874:	f002 f834 	bl	28e0 <__aeabi_atexit>
      //leds[59-i] = color;
  }
  FastLED.show();
  h += 1;
  */
}
     878:	bd10      	pop	{r4, pc}
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	20000240 	.word	0x20000240
     880:	20000000 	.word	0x20000000
     884:	00002087 	.word	0x00002087

00000888 <Dummy_Handler>:
extern void pendSVHook(void);
extern int sysTickHook(void);

/* Default empty handler */
void Dummy_Handler(void)
{
     888:	e7fe      	b.n	888 <Dummy_Handler>
	...

0000088c <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     88c:	4b03      	ldr	r3, [pc, #12]	; (89c <USB_Handler+0x10>)
}

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
     88e:	b510      	push	{r4, lr}
  if (usb_isr)
     890:	681b      	ldr	r3, [r3, #0]
     892:	2b00      	cmp	r3, #0
     894:	d000      	beq.n	898 <USB_Handler+0xc>
    usb_isr();
     896:	4798      	blx	r3
}
     898:	bd10      	pop	{r4, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	200005e0 	.word	0x200005e0

000008a0 <Reset_Handler>:

extern int main(void);

/* This is called on processor reset to initialize the device and call main() */
void Reset_Handler(void)
{
     8a0:	b570      	push	{r4, r5, r6, lr}
     8a2:	490f      	ldr	r1, [pc, #60]	; (8e0 <Reset_Handler+0x40>)
     8a4:	4c0f      	ldr	r4, [pc, #60]	; (8e4 <Reset_Handler+0x44>)

  /* Initialize the initialized data section */
  pSrc = &__etext;
  pDest = &__data_start__;

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     8a6:	42a1      	cmp	r1, r4
     8a8:	d104      	bne.n	8b4 <Reset_Handler+0x14>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
      *pDest = 0;
  }

  SystemInit();
     8aa:	f000 f8eb 	bl	a84 <SystemInit>

  main();
     8ae:	f000 f84b 	bl	948 <main>
     8b2:	e00b      	b.n	8cc <Reset_Handler+0x2c>

  /* Initialize the initialized data section */
  pSrc = &__etext;
  pDest = &__data_start__;

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     8b4:	4d0c      	ldr	r5, [pc, #48]	; (8e8 <Reset_Handler+0x48>)
     8b6:	2300      	movs	r3, #0
     8b8:	428d      	cmp	r5, r1
     8ba:	d0f6      	beq.n	8aa <Reset_Handler+0xa>
     8bc:	18ca      	adds	r2, r1, r3
     8be:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     8c0:	42a2      	cmp	r2, r4
     8c2:	d204      	bcs.n	8ce <Reset_Handler+0x2e>
      *pDest = *pSrc;
     8c4:	6800      	ldr	r0, [r0, #0]
     8c6:	3304      	adds	r3, #4
     8c8:	6010      	str	r0, [r2, #0]
     8ca:	e7f7      	b.n	8bc <Reset_Handler+0x1c>
     8cc:	e7fe      	b.n	8cc <Reset_Handler+0x2c>
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     8ce:	4290      	cmp	r0, r2
     8d0:	d0eb      	beq.n	8aa <Reset_Handler+0xa>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
      *pDest = 0;
     8d2:	2200      	movs	r2, #0
     8d4:	4b05      	ldr	r3, [pc, #20]	; (8ec <Reset_Handler+0x4c>)
      *pDest = *pSrc;
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     8d6:	4906      	ldr	r1, [pc, #24]	; (8f0 <Reset_Handler+0x50>)
     8d8:	428b      	cmp	r3, r1
     8da:	d2e6      	bcs.n	8aa <Reset_Handler+0xa>
      *pDest = 0;
     8dc:	c304      	stmia	r3!, {r2}
     8de:	e7fb      	b.n	8d8 <Reset_Handler+0x38>
     8e0:	20000000 	.word	0x20000000
     8e4:	20000120 	.word	0x20000120
     8e8:	00003374 	.word	0x00003374
     8ec:	20000120 	.word	0x20000120
     8f0:	20000d9c 	.word	0x20000d9c

000008f4 <SysTick_Handler>:

/* Default Arduino systick handler */
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
     8f4:	b510      	push	{r4, lr}
  if (sysTickHook())
     8f6:	f000 f824 	bl	942 <sysTickHook>
     8fa:	2800      	cmp	r0, #0
     8fc:	d101      	bne.n	902 <SysTick_Handler+0xe>
    return;
  SysTick_DefaultHandler();
     8fe:	f000 f815 	bl	92c <SysTick_DefaultHandler>
}
     902:	bd10      	pop	{r4, pc}

00000904 <USB_SetHandler>:
    usb_isr();
}

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     904:	4b01      	ldr	r3, [pc, #4]	; (90c <USB_SetHandler+0x8>)
     906:	6018      	str	r0, [r3, #0]
}
     908:	4770      	bx	lr
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	200005e0 	.word	0x200005e0

00000910 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( uint32_t ms )
{
     910:	b570      	push	{r4, r5, r6, lr}
     912:	1e05      	subs	r5, r0, #0
  if ( ms == 0 )
     914:	d007      	beq.n	926 <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     916:	4c04      	ldr	r4, [pc, #16]	; (928 <delay+0x18>)
     918:	6826      	ldr	r6, [r4, #0]

  do
  {
    yield() ;
     91a:	f000 f811 	bl	940 <yield>
  } while ( _ulTickCount - start < ms ) ;
     91e:	6823      	ldr	r3, [r4, #0]
     920:	1b9b      	subs	r3, r3, r6
     922:	429d      	cmp	r5, r3
     924:	d8f9      	bhi.n	91a <delay+0xa>
}
     926:	bd70      	pop	{r4, r5, r6, pc}
     928:	200005e4 	.word	0x200005e4

0000092c <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     92c:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     92e:	4a03      	ldr	r2, [pc, #12]	; (93c <SysTick_DefaultHandler+0x10>)
     930:	6813      	ldr	r3, [r2, #0]
     932:	3301      	adds	r3, #1
     934:	6013      	str	r3, [r2, #0]
  tickReset();
     936:	f000 f869 	bl	a0c <tickReset>
}
     93a:	bd10      	pop	{r4, pc}
     93c:	200005e4 	.word	0x200005e4

00000940 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     940:	4770      	bx	lr

00000942 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     942:	2000      	movs	r0, #0
     944:	4770      	bx	lr

00000946 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     946:	4770      	bx	lr

00000948 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     948:	b510      	push	{r4, lr}
  init();
     94a:	f001 f99d 	bl	1c88 <init>

  __libc_init_array();
     94e:	f002 f95d 	bl	2c0c <__libc_init_array>

  initVariant();
     952:	f7ff fff8 	bl	946 <_Z11initVariantv>

  delay(1);
     956:	2001      	movs	r0, #1
     958:	f7ff ffda 	bl	910 <delay>
#if defined(USBCON)
  USBDevice.init();
     95c:	4c08      	ldr	r4, [pc, #32]	; (980 <main+0x38>)
     95e:	0020      	movs	r0, r4
     960:	f000 fc1a 	bl	1198 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     964:	0020      	movs	r0, r4
     966:	f000 fc8f 	bl	1288 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     96a:	f7ff fcf1 	bl	350 <setup>

  for (;;)
  {
    loop();
     96e:	f7ff fd5b 	bl	428 <loop>
    if (serialEventRun) serialEventRun();
     972:	4b04      	ldr	r3, [pc, #16]	; (984 <main+0x3c>)
     974:	2b00      	cmp	r3, #0
     976:	d0fa      	beq.n	96e <main+0x26>
     978:	e000      	b.n	97c <main+0x34>
     97a:	bf00      	nop
     97c:	e7f7      	b.n	96e <main+0x26>
     97e:	46c0      	nop			; (mov r8, r8)
     980:	20000ab3 	.word	0x20000ab3
     984:	00000000 	.word	0x00000000

00000988 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     98a:	0006      	movs	r6, r0
     98c:	000d      	movs	r5, r1
     98e:	000c      	movs	r4, r1
     990:	188b      	adds	r3, r1, r2
     992:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
     994:	9b01      	ldr	r3, [sp, #4]
     996:	1b67      	subs	r7, r4, r5
     998:	429c      	cmp	r4, r3
     99a:	d007      	beq.n	9ac <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
     99c:	6833      	ldr	r3, [r6, #0]
     99e:	7821      	ldrb	r1, [r4, #0]
     9a0:	681b      	ldr	r3, [r3, #0]
     9a2:	0030      	movs	r0, r6
     9a4:	4798      	blx	r3
     9a6:	3401      	adds	r4, #1
     9a8:	2800      	cmp	r0, #0
     9aa:	d1f3      	bne.n	994 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     9ac:	0038      	movs	r0, r7
     9ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000009b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     9b0:	b570      	push	{r4, r5, r6, lr}
     9b2:	0005      	movs	r5, r0
     9b4:	000c      	movs	r4, r1
      if (str == NULL) return 0;
     9b6:	1e08      	subs	r0, r1, #0
     9b8:	d007      	beq.n	9ca <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
     9ba:	f002 fa21 	bl	2e00 <strlen>
     9be:	682b      	ldr	r3, [r5, #0]
     9c0:	0002      	movs	r2, r0
     9c2:	685b      	ldr	r3, [r3, #4]
     9c4:	0021      	movs	r1, r4
     9c6:	0028      	movs	r0, r5
     9c8:	4798      	blx	r3
    }
     9ca:	bd70      	pop	{r4, r5, r6, pc}

000009cc <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     9cc:	b510      	push	{r4, lr}
  return write("\r\n");
     9ce:	4902      	ldr	r1, [pc, #8]	; (9d8 <_ZN5Print7printlnEv+0xc>)
     9d0:	f7ff ffee 	bl	9b0 <_ZN5Print5writeEPKc>
}
     9d4:	bd10      	pop	{r4, pc}
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	00002e6e 	.word	0x00002e6e

000009dc <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     9dc:	b570      	push	{r4, r5, r6, lr}
     9de:	0005      	movs	r5, r0
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     9e0:	f7ff ffe6 	bl	9b0 <_ZN5Print5writeEPKc>
     9e4:	0004      	movs	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     9e6:	0028      	movs	r0, r5
     9e8:	f7ff fff0 	bl	9cc <_ZN5Print7printlnEv>
  return n;
     9ec:	1900      	adds	r0, r0, r4
}
     9ee:	bd70      	pop	{r4, r5, r6, pc}

000009f0 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
     9f0:	4b01      	ldr	r3, [pc, #4]	; (9f8 <initiateReset+0x8>)
     9f2:	6018      	str	r0, [r3, #0]
}
     9f4:	4770      	bx	lr
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	20000004 	.word	0x20000004

000009fc <cancelReset>:

void cancelReset() {
	ticks = -1;
     9fc:	2201      	movs	r2, #1
     9fe:	4b02      	ldr	r3, [pc, #8]	; (a08 <cancelReset+0xc>)
     a00:	4252      	negs	r2, r2
     a02:	601a      	str	r2, [r3, #0]
}
     a04:	4770      	bx	lr
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	20000004 	.word	0x20000004

00000a0c <tickReset>:

void tickReset() {
	if (ticks == -1)
     a0c:	4a16      	ldr	r2, [pc, #88]	; (a68 <tickReset+0x5c>)

void cancelReset() {
	ticks = -1;
}

void tickReset() {
     a0e:	b510      	push	{r4, lr}
	if (ticks == -1)
     a10:	6813      	ldr	r3, [r2, #0]
     a12:	1c59      	adds	r1, r3, #1
     a14:	d027      	beq.n	a66 <tickReset+0x5a>
		return;
	ticks--;
     a16:	3b01      	subs	r3, #1
     a18:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     a1a:	2b00      	cmp	r3, #0
     a1c:	d123      	bne.n	a66 <tickReset+0x5a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     a1e:	b672      	cpsid	i
	__disable_irq();

	// Avoid erasing the application if APP_START is < than the minimum bootloader size
	// This could happen if without_bootloader linker script was chosen
	// Minimum bootloader size in SAMD21 family is 512bytes (RM section 22.6.5)
	if (APP_START < (0x200 + 4)) {
     a20:	4b12      	ldr	r3, [pc, #72]	; (a6c <tickReset+0x60>)
     a22:	4a13      	ldr	r2, [pc, #76]	; (a70 <tickReset+0x64>)
     a24:	3304      	adds	r3, #4
     a26:	4293      	cmp	r3, r2
     a28:	d807      	bhi.n	a3a <tickReset+0x2e>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     a2a:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 SCB_AIRCR_SYSRESETREQ_Msk);
     a2e:	4a11      	ldr	r2, [pc, #68]	; (a74 <tickReset+0x68>)
     a30:	4b11      	ldr	r3, [pc, #68]	; (a78 <tickReset+0x6c>)
     a32:	60da      	str	r2, [r3, #12]
     a34:	f3bf 8f4f 	dsb	sy
     a38:	e014      	b.n	a64 <tickReset+0x58>
		goto reset;
	}

	// Erase application
	while (!nvmReady())
     a3a:	2101      	movs	r1, #1
#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     a3c:	4c0f      	ldr	r4, [pc, #60]	; (a7c <tickReset+0x70>)
     a3e:	7d20      	ldrb	r0, [r4, #20]
     a40:	4a0e      	ldr	r2, [pc, #56]	; (a7c <tickReset+0x70>)
	if (APP_START < (0x200 + 4)) {
		goto reset;
	}

	// Erase application
	while (!nvmReady())
     a42:	4208      	tst	r0, r1
     a44:	d0fb      	beq.n	a3e <tickReset+0x32>
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     a46:	2020      	movs	r0, #32
     a48:	8b11      	ldrh	r1, [r2, #24]
     a4a:	30ff      	adds	r0, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     a4c:	089b      	lsrs	r3, r3, #2
     a4e:	005b      	lsls	r3, r3, #1
	}

	// Erase application
	while (!nvmReady())
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     a50:	4301      	orrs	r1, r0
     a52:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     a54:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     a56:	4b0a      	ldr	r3, [pc, #40]	; (a80 <tickReset+0x74>)
     a58:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     a5a:	2301      	movs	r3, #1
#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     a5c:	7d11      	ldrb	r1, [r2, #20]
	while (!nvmReady())
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
	while (!nvmReady())
     a5e:	4219      	tst	r1, r3
     a60:	d0fc      	beq.n	a5c <tickReset+0x50>
     a62:	e7e2      	b.n	a2a <tickReset+0x1e>
     a64:	e7fe      	b.n	a64 <tickReset+0x58>
	if (ticks == -1)
		return;
	ticks--;
	if (ticks == 0)
		banzai();
}
     a66:	bd10      	pop	{r4, pc}
     a68:	20000004 	.word	0x20000004
     a6c:	00000000 	.word	0x00000000
     a70:	00000203 	.word	0x00000203
     a74:	05fa0004 	.word	0x05fa0004
     a78:	e000ed00 	.word	0xe000ed00
     a7c:	41004000 	.word	0x41004000
     a80:	ffffa502 	.word	0xffffa502

00000a84 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     a84:	221e      	movs	r2, #30
#define GENERIC_CLOCK_GENERATOR_OSC8M     (3u)
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
     a86:	b570      	push	{r4, r5, r6, lr}
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     a88:	2408      	movs	r4, #8
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     a8a:	484a      	ldr	r0, [pc, #296]	; (bb4 <SystemInit+0x130>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     a8c:	494a      	ldr	r1, [pc, #296]	; (bb8 <SystemInit+0x134>)
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     a8e:	6843      	ldr	r3, [r0, #4]
     a90:	4393      	bics	r3, r2
     a92:	3a1c      	subs	r2, #28
     a94:	4313      	orrs	r3, r2
     a96:	6043      	str	r3, [r0, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     a98:	698b      	ldr	r3, [r1, #24]
     a9a:	4323      	orrs	r3, r4
     a9c:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     a9e:	4c47      	ldr	r4, [pc, #284]	; (bbc <SystemInit+0x138>)
     aa0:	4b47      	ldr	r3, [pc, #284]	; (bc0 <SystemInit+0x13c>)
     aa2:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     aa4:	8a9c      	ldrh	r4, [r3, #20]
     aa6:	4314      	orrs	r4, r2
     aa8:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     aaa:	68dc      	ldr	r4, [r3, #12]
     aac:	4214      	tst	r4, r2
     aae:	d0fc      	beq.n	aaa <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     ab0:	4a44      	ldr	r2, [pc, #272]	; (bc4 <SystemInit+0x140>)
     ab2:	2401      	movs	r4, #1

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     ab4:	0016      	movs	r6, r2

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     ab6:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     ab8:	7815      	ldrb	r5, [r2, #0]
     aba:	4225      	tst	r5, r4
     abc:	d003      	beq.n	ac6 <SystemInit+0x42>
     abe:	7875      	ldrb	r5, [r6, #1]
     ac0:	b26d      	sxtb	r5, r5
     ac2:	2d00      	cmp	r5, #0
     ac4:	dbf8      	blt.n	ab8 <SystemInit+0x34>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     ac6:	2401      	movs	r4, #1
     ac8:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     aca:	7854      	ldrb	r4, [r2, #1]
     acc:	b264      	sxtb	r4, r4
     ace:	2c00      	cmp	r4, #0
     ad0:	dbfb      	blt.n	aca <SystemInit+0x46>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     ad2:	4d3d      	ldr	r5, [pc, #244]	; (bc8 <SystemInit+0x144>)
     ad4:	4c3b      	ldr	r4, [pc, #236]	; (bc4 <SystemInit+0x140>)
     ad6:	6065      	str	r5, [r4, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     ad8:	7854      	ldrb	r4, [r2, #1]
     ada:	b264      	sxtb	r4, r4
     adc:	2c00      	cmp	r4, #0
     ade:	dbfb      	blt.n	ad8 <SystemInit+0x54>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     ae0:	2582      	movs	r5, #130	; 0x82
     ae2:	4c38      	ldr	r4, [pc, #224]	; (bc4 <SystemInit+0x140>)
     ae4:	01ed      	lsls	r5, r5, #7
     ae6:	8065      	strh	r5, [r4, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     ae8:	7854      	ldrb	r4, [r2, #1]
     aea:	b264      	sxtb	r4, r4
     aec:	2c00      	cmp	r4, #0
     aee:	dbfb      	blt.n	ae8 <SystemInit+0x64>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     af0:	2402      	movs	r4, #2
     af2:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     af4:	340e      	adds	r4, #14
     af6:	68dd      	ldr	r5, [r3, #12]
     af8:	4225      	tst	r5, r4
     afa:	d0fc      	beq.n	af6 <SystemInit+0x72>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     afc:	4c30      	ldr	r4, [pc, #192]	; (bc0 <SystemInit+0x13c>)
     afe:	4d33      	ldr	r5, [pc, #204]	; (bcc <SystemInit+0x148>)
     b00:	62e5      	str	r5, [r4, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b02:	2410      	movs	r4, #16
     b04:	68de      	ldr	r6, [r3, #12]
     b06:	4d2e      	ldr	r5, [pc, #184]	; (bc0 <SystemInit+0x13c>)
     b08:	4226      	tst	r6, r4
     b0a:	d0fb      	beq.n	b04 <SystemInit+0x80>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     b0c:	8cac      	ldrh	r4, [r5, #36]	; 0x24
     b0e:	4e30      	ldr	r6, [pc, #192]	; (bd0 <SystemInit+0x14c>)
     b10:	4334      	orrs	r4, r6
     b12:	84ac      	strh	r4, [r5, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b14:	2410      	movs	r4, #16
     b16:	68de      	ldr	r6, [r3, #12]
     b18:	4d29      	ldr	r5, [pc, #164]	; (bc0 <SystemInit+0x13c>)
     b1a:	4226      	tst	r6, r4
     b1c:	d0fb      	beq.n	b16 <SystemInit+0x92>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     b1e:	2602      	movs	r6, #2
     b20:	8cac      	ldrh	r4, [r5, #36]	; 0x24
     b22:	4334      	orrs	r4, r6
     b24:	84ac      	strh	r4, [r5, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     b26:	2440      	movs	r4, #64	; 0x40
     b28:	367e      	adds	r6, #126	; 0x7e
     b2a:	68dd      	ldr	r5, [r3, #12]
     b2c:	4235      	tst	r5, r6
     b2e:	d0fc      	beq.n	b2a <SystemInit+0xa6>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     b30:	4d23      	ldr	r5, [pc, #140]	; (bc0 <SystemInit+0x13c>)
     b32:	68ed      	ldr	r5, [r5, #12]
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     b34:	4225      	tst	r5, r4
     b36:	d0f8      	beq.n	b2a <SystemInit+0xa6>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b38:	2410      	movs	r4, #16
     b3a:	68dd      	ldr	r5, [r3, #12]
     b3c:	4225      	tst	r5, r4
     b3e:	d0fc      	beq.n	b3a <SystemInit+0xb6>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     b40:	2400      	movs	r4, #0
     b42:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     b44:	7854      	ldrb	r4, [r2, #1]
     b46:	b264      	sxtb	r4, r4
     b48:	2c00      	cmp	r4, #0
     b4a:	dbfb      	blt.n	b44 <SystemInit+0xc0>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     b4c:	4d21      	ldr	r5, [pc, #132]	; (bd4 <SystemInit+0x150>)
     b4e:	4c1d      	ldr	r4, [pc, #116]	; (bc4 <SystemInit+0x140>)
     b50:	6065      	str	r5, [r4, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     b52:	7854      	ldrb	r4, [r2, #1]
     b54:	4d1b      	ldr	r5, [pc, #108]	; (bc4 <SystemInit+0x140>)
     b56:	b264      	sxtb	r4, r4
     b58:	2c00      	cmp	r4, #0
     b5a:	dbfa      	blt.n	b52 <SystemInit+0xce>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     b5c:	6a1e      	ldr	r6, [r3, #32]
     b5e:	4c1e      	ldr	r4, [pc, #120]	; (bd8 <SystemInit+0x154>)
     b60:	4034      	ands	r4, r6
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     b62:	2680      	movs	r6, #128	; 0x80
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     b64:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     b66:	6a1c      	ldr	r4, [r3, #32]
     b68:	43b4      	bics	r4, r6
     b6a:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     b6c:	2303      	movs	r3, #3
     b6e:	60ab      	str	r3, [r5, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     b70:	4b1a      	ldr	r3, [pc, #104]	; (bdc <SystemInit+0x158>)
     b72:	606b      	str	r3, [r5, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     b74:	7853      	ldrb	r3, [r2, #1]
     b76:	b25b      	sxtb	r3, r3
     b78:	2b00      	cmp	r3, #0
     b7a:	dbfb      	blt.n	b74 <SystemInit+0xf0>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     b7c:	2300      	movs	r3, #0
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;

  SystemCoreClock=VARIANT_MCK ;
     b7e:	4a18      	ldr	r2, [pc, #96]	; (be0 <SystemInit+0x15c>)

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     b80:	720b      	strb	r3, [r1, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     b82:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     b84:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     b86:	72cb      	strb	r3, [r1, #11]

  SystemCoreClock=VARIANT_MCK ;
     b88:	4b16      	ldr	r3, [pc, #88]	; (be4 <SystemInit+0x160>)
     b8a:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     b8c:	4b16      	ldr	r3, [pc, #88]	; (be8 <SystemInit+0x164>)
     b8e:	681c      	ldr	r4, [r3, #0]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     b90:	4b16      	ldr	r3, [pc, #88]	; (bec <SystemInit+0x168>)

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     b92:	06a1      	lsls	r1, r4, #26

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     b94:	681b      	ldr	r3, [r3, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     b96:	0164      	lsls	r4, r4, #5

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     b98:	0eda      	lsrs	r2, r3, #27

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     b9a:	23ff      	movs	r3, #255	; 0xff
     b9c:	0f49      	lsrs	r1, r1, #29
     b9e:	4023      	ands	r3, r4
     ba0:	0209      	lsls	r1, r1, #8
     ba2:	4313      	orrs	r3, r2
     ba4:	4a12      	ldr	r2, [pc, #72]	; (bf0 <SystemInit+0x16c>)
     ba6:	430b      	orrs	r3, r1
     ba8:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     baa:	2280      	movs	r2, #128	; 0x80
     bac:	6843      	ldr	r3, [r0, #4]
     bae:	4313      	orrs	r3, r2
     bb0:	6043      	str	r3, [r0, #4]
}
     bb2:	bd70      	pop	{r4, r5, r6, pc}
     bb4:	41004000 	.word	0x41004000
     bb8:	40000400 	.word	0x40000400
     bbc:	0000060c 	.word	0x0000060c
     bc0:	40000800 	.word	0x40000800
     bc4:	40000c00 	.word	0x40000c00
     bc8:	00010501 	.word	0x00010501
     bcc:	7dff05b8 	.word	0x7dff05b8
     bd0:	00000a04 	.word	0x00000a04
     bd4:	00030700 	.word	0x00030700
     bd8:	fffffcff 	.word	0xfffffcff
     bdc:	00010603 	.word	0x00010603
     be0:	02dc6c00 	.word	0x02dc6c00
     be4:	20000084 	.word	0x20000084
     be8:	00806024 	.word	0x00806024
     bec:	00806020 	.word	0x00806020
     bf0:	42004000 	.word	0x42004000

00000bf4 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
     bf4:	203f      	movs	r0, #63	; 0x3f
     bf6:	4770      	bx	lr

00000bf8 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     bf8:	b513      	push	{r0, r1, r4, lr}
     bfa:	466b      	mov	r3, sp
	return write(&c, 1);
     bfc:	6802      	ldr	r2, [r0, #0]
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     bfe:	71d9      	strb	r1, [r3, #7]
     c00:	3307      	adds	r3, #7
	return write(&c, 1);
     c02:	6854      	ldr	r4, [r2, #4]
     c04:	0019      	movs	r1, r3
     c06:	2201      	movs	r2, #1
     c08:	47a0      	blx	r4
}
     c0a:	bd16      	pop	{r1, r2, r4, pc}

00000c0c <_ZN7Serial_9availableEv>:
void Serial_::end(void)
{
}

int Serial_::available(void)
{
     c0c:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
     c0e:	2102      	movs	r1, #2
     c10:	6900      	ldr	r0, [r0, #16]
     c12:	f000 fc39 	bl	1488 <_ZN14USBDeviceClass9availableEm>
}
     c16:	bd10      	pop	{r4, pc}

00000c18 <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
     c18:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
     c1a:	2103      	movs	r1, #3
     c1c:	6900      	ldr	r0, [r0, #16]
     c1e:	f000 fc49 	bl	14b4 <_ZN14USBDeviceClass5flushEm>
}
     c22:	bd10      	pop	{r4, pc}

00000c24 <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
     c24:	b510      	push	{r4, lr}
     c26:	0013      	movs	r3, r2
     c28:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     c2a:	000a      	movs	r2, r1
     c2c:	6900      	ldr	r0, [r0, #16]
     c2e:	2103      	movs	r1, #3
     c30:	f000 fd3c 	bl	16ac <_ZN14USBDeviceClass4sendEmPKvm>

	if (r > 0) {
     c34:	2800      	cmp	r0, #0
     c36:	d101      	bne.n	c3c <_ZN7Serial_5writeEPKhj+0x18>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     c38:	2301      	movs	r3, #1
     c3a:	6063      	str	r3, [r4, #4]
		return r;
	} else {
		setWriteError();
		return 0;
	}
}
     c3c:	bd10      	pop	{r4, pc}
	...

00000c40 <_ZN7Serial_4readEv>:
	return _serialPeek;
}

int Serial_::read(void)
{
	if (_serialPeek != -1) {
     c40:	4b07      	ldr	r3, [pc, #28]	; (c60 <_ZN7Serial_4readEv+0x20>)
	_serialPeek = read();
	return _serialPeek;
}

int Serial_::read(void)
{
     c42:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
     c44:	6818      	ldr	r0, [r3, #0]
	_serialPeek = read();
	return _serialPeek;
}

int Serial_::read(void)
{
     c46:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
     c48:	1c41      	adds	r1, r0, #1
     c4a:	d003      	beq.n	c54 <_ZN7Serial_4readEv+0x14>
		int res = _serialPeek;
		_serialPeek = -1;
     c4c:	2201      	movs	r2, #1
     c4e:	4252      	negs	r2, r2
     c50:	601a      	str	r2, [r3, #0]
		return res;
     c52:	e003      	b.n	c5c <_ZN7Serial_4readEv+0x1c>
	}
	return usb.recv(CDC_ENDPOINT_OUT);
     c54:	2102      	movs	r1, #2
     c56:	6910      	ldr	r0, [r2, #16]
     c58:	f000 fd1a 	bl	1690 <_ZN14USBDeviceClass4recvEm>
}
     c5c:	bd10      	pop	{r4, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	20000058 	.word	0x20000058

00000c64 <_ZN7Serial_4peekEv>:
}

int _serialPeek = -1;

int Serial_::peek(void)
{
     c64:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
     c66:	4c05      	ldr	r4, [pc, #20]	; (c7c <_ZN7Serial_4peekEv+0x18>)
     c68:	6823      	ldr	r3, [r4, #0]
     c6a:	1c5a      	adds	r2, r3, #1
     c6c:	d104      	bne.n	c78 <_ZN7Serial_4peekEv+0x14>
		return _serialPeek;
	_serialPeek = read();
     c6e:	6803      	ldr	r3, [r0, #0]
     c70:	68db      	ldr	r3, [r3, #12]
     c72:	4798      	blx	r3
     c74:	0003      	movs	r3, r0
     c76:	6020      	str	r0, [r4, #0]
	return _serialPeek;
}
     c78:	0018      	movs	r0, r3
     c7a:	bd10      	pop	{r4, pc}
     c7c:	20000058 	.word	0x20000058

00000c80 <_Z16CDC_GetInterfacePh>:
{
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
     c80:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
     c82:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
     c84:	2242      	movs	r2, #66	; 0x42
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
     c86:	3302      	adds	r3, #2
     c88:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
     c8a:	4902      	ldr	r1, [pc, #8]	; (c94 <_Z16CDC_GetInterfacePh+0x14>)
     c8c:	4802      	ldr	r0, [pc, #8]	; (c98 <_Z16CDC_GetInterfacePh+0x18>)
     c8e:	f000 fdbf 	bl	1810 <_ZN14USBDeviceClass11sendControlEPKvm>
}
     c92:	bd10      	pop	{r4, pc}
     c94:	20000014 	.word	0x20000014
     c98:	20000ab3 	.word	0x20000ab3

00000c9c <_Z9CDC_SetupR8USBSetup>:

bool CDC_Setup(USBSetup& setup)
{
     c9c:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
     c9e:	7801      	ldrb	r1, [r0, #0]
	interfaceNum[0] += 2;	// uses 2
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
}

bool CDC_Setup(USBSetup& setup)
{
     ca0:	0003      	movs	r3, r0
	uint8_t requestType = setup.bmRequestType;
	uint8_t r = setup.bRequest;
     ca2:	7842      	ldrb	r2, [r0, #1]
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
			return false;
		}
	}
	return false;
     ca4:	2000      	movs	r0, #0
bool CDC_Setup(USBSetup& setup)
{
	uint8_t requestType = setup.bmRequestType;
	uint8_t r = setup.bRequest;

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
     ca6:	29a1      	cmp	r1, #161	; 0xa1
     ca8:	d108      	bne.n	cbc <_Z9CDC_SetupR8USBSetup+0x20>
	{
		if (r == CDC_GET_LINE_CODING)
     caa:	2a21      	cmp	r2, #33	; 0x21
     cac:	d12e      	bne.n	d0c <_Z9CDC_SetupR8USBSetup+0x70>
		{
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
     cae:	3a1a      	subs	r2, #26
     cb0:	4917      	ldr	r1, [pc, #92]	; (d10 <_Z9CDC_SetupR8USBSetup+0x74>)
     cb2:	4818      	ldr	r0, [pc, #96]	; (d14 <_Z9CDC_SetupR8USBSetup+0x78>)
     cb4:	f000 fdac 	bl	1810 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
     cb8:	2001      	movs	r0, #1
     cba:	e027      	b.n	d0c <_Z9CDC_SetupR8USBSetup+0x70>
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
     cbc:	2921      	cmp	r1, #33	; 0x21
     cbe:	d125      	bne.n	d0c <_Z9CDC_SetupR8USBSetup+0x70>
	{
		if (r == CDC_SET_LINE_CODING)
     cc0:	2a20      	cmp	r2, #32
     cc2:	d105      	bne.n	cd0 <_Z9CDC_SetupR8USBSetup+0x34>
		{
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
     cc4:	3a19      	subs	r2, #25
     cc6:	4912      	ldr	r1, [pc, #72]	; (d10 <_Z9CDC_SetupR8USBSetup+0x74>)
     cc8:	4812      	ldr	r0, [pc, #72]	; (d14 <_Z9CDC_SetupR8USBSetup+0x78>)
     cca:	f000 fc39 	bl	1540 <_ZN14USBDeviceClass11recvControlEPvm>
     cce:	e004      	b.n	cda <_Z9CDC_SetupR8USBSetup+0x3e>
		}

		if (r == CDC_SET_CONTROL_LINE_STATE)
     cd0:	2a22      	cmp	r2, #34	; 0x22
     cd2:	d112      	bne.n	cfa <_Z9CDC_SetupR8USBSetup+0x5e>
		{
			_usbLineInfo.lineState = setup.wValueL;
     cd4:	789a      	ldrb	r2, [r3, #2]
     cd6:	4b0e      	ldr	r3, [pc, #56]	; (d10 <_Z9CDC_SetupR8USBSetup+0x74>)
     cd8:	71da      	strb	r2, [r3, #7]
		if (r == CDC_SET_LINE_CODING || r == CDC_SET_CONTROL_LINE_STATE)
		{
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed. We check DTR state to determine if host 
			// port is open (bit 0 of lineState).
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
     cda:	2296      	movs	r2, #150	; 0x96
     cdc:	4b0c      	ldr	r3, [pc, #48]	; (d10 <_Z9CDC_SetupR8USBSetup+0x74>)
     cde:	00d2      	lsls	r2, r2, #3
     ce0:	6819      	ldr	r1, [r3, #0]
     ce2:	4291      	cmp	r1, r2
     ce4:	d10f      	bne.n	d06 <_Z9CDC_SetupR8USBSetup+0x6a>
     ce6:	79d8      	ldrb	r0, [r3, #7]
     ce8:	2301      	movs	r3, #1
     cea:	4018      	ands	r0, r3
     cec:	1e04      	subs	r4, r0, #0
     cee:	d10a      	bne.n	d06 <_Z9CDC_SetupR8USBSetup+0x6a>
			{
				initiateReset(250);
     cf0:	20fa      	movs	r0, #250	; 0xfa
     cf2:	f7ff fe7d 	bl	9f0 <initiateReset>
			}
			else
			{
				cancelReset();
			}
			return false;
     cf6:	0020      	movs	r0, r4
     cf8:	e008      	b.n	d0c <_Z9CDC_SetupR8USBSetup+0x70>
		}

		if (CDC_SEND_BREAK == r)
     cfa:	2a23      	cmp	r2, #35	; 0x23
     cfc:	d106      	bne.n	d0c <_Z9CDC_SetupR8USBSetup+0x70>
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     cfe:	885a      	ldrh	r2, [r3, #2]
     d00:	4b05      	ldr	r3, [pc, #20]	; (d18 <_Z9CDC_SetupR8USBSetup+0x7c>)
     d02:	601a      	str	r2, [r3, #0]
			return false;
     d04:	e002      	b.n	d0c <_Z9CDC_SetupR8USBSetup+0x70>
			{
				initiateReset(250);
			}
			else
			{
				cancelReset();
     d06:	f7ff fe79 	bl	9fc <cancelReset>
			}
			return false;
     d0a:	2000      	movs	r0, #0
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
			return false;
		}
	}
	return false;
}
     d0c:	bd10      	pop	{r4, pc}
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	20000008 	.word	0x20000008
     d14:	20000ab3 	.word	0x20000ab3
     d18:	20000010 	.word	0x20000010

00000d1c <_ZN7Serial_5beginEm>:

void Serial_::begin(uint32_t /* baud_count */)
{
	// uart config is ignored in USB-CDC
}
     d1c:	4770      	bx	lr
	...

00000d20 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     d20:	22fa      	movs	r2, #250	; 0xfa
  public:
    Print() : write_error(0) {}
     d22:	2100      	movs	r1, #0
     d24:	4b05      	ldr	r3, [pc, #20]	; (d3c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
     d26:	0092      	lsls	r2, r2, #2
     d28:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
     d2a:	4a05      	ldr	r2, [pc, #20]	; (d40 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
     d2c:	6059      	str	r1, [r3, #4]
     d2e:	3208      	adds	r2, #8
     d30:	601a      	str	r2, [r3, #0]
     d32:	4a04      	ldr	r2, [pc, #16]	; (d44 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
     d34:	7619      	strb	r1, [r3, #24]
     d36:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ Serial(USBDevice);
     d38:	4770      	bx	lr
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	200005e8 	.word	0x200005e8
     d40:	00002e80 	.word	0x00002e80
     d44:	20000ab3 	.word	0x20000ab3

00000d48 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     d48:	b570      	push	{r4, r5, r6, lr}
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     d4a:	24c0      	movs	r4, #192	; 0xc0
     d4c:	4e19      	ldr	r6, [pc, #100]	; (db4 <_ZN14USBDeviceClass6initEPEmm.part.5+0x6c>)
     d4e:	b2c3      	uxtb	r3, r0
     d50:	015a      	lsls	r2, r3, #5
     d52:	18b2      	adds	r2, r6, r2
     d54:	6895      	ldr	r5, [r2, #8]
     d56:	4918      	ldr	r1, [pc, #96]	; (db8 <_ZN14USBDeviceClass6initEPEmm.part.5+0x70>)
     d58:	05a4      	lsls	r4, r4, #22
     d5a:	400d      	ands	r5, r1
     d5c:	4325      	orrs	r5, r4
     d5e:	6095      	str	r5, [r2, #8]
	}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
	{
		// Setup Control OUT
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     d60:	4d16      	ldr	r5, [pc, #88]	; (dbc <_ZN14USBDeviceClass6initEPEmm.part.5+0x74>)
     d62:	0180      	lsls	r0, r0, #6
     d64:	1828      	adds	r0, r5, r0
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     d66:	6050      	str	r0, [r2, #4]

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     d68:	6830      	ldr	r0, [r6, #0]
     d6a:	2607      	movs	r6, #7
     d6c:	3308      	adds	r3, #8
     d6e:	015b      	lsls	r3, r3, #5
     d70:	5c1d      	ldrb	r5, [r3, r0]
     d72:	43b5      	bics	r5, r6
     d74:	3e06      	subs	r6, #6
     d76:	4335      	orrs	r5, r6
     d78:	541d      	strb	r5, [r3, r0]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     d7a:	6996      	ldr	r6, [r2, #24]
     d7c:	4031      	ands	r1, r6
     d7e:	4321      	orrs	r1, r4
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     d80:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     d82:	6191      	str	r1, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     d84:	490e      	ldr	r1, [pc, #56]	; (dc0 <_ZN14USBDeviceClass6initEPEmm.part.5+0x78>)
     d86:	6151      	str	r1, [r2, #20]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     d88:	5c19      	ldrb	r1, [r3, r0]
     d8a:	43a1      	bics	r1, r4
     d8c:	3c60      	subs	r4, #96	; 0x60
     d8e:	4321      	orrs	r1, r4
     d90:	5419      	strb	r1, [r3, r0]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     d92:	6894      	ldr	r4, [r2, #8]
     d94:	490b      	ldr	r1, [pc, #44]	; (dc4 <_ZN14USBDeviceClass6initEPEmm.part.5+0x7c>)
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     d96:	18c3      	adds	r3, r0, r3
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     d98:	4021      	ands	r1, r4
     d9a:	2480      	movs	r4, #128	; 0x80
     d9c:	0364      	lsls	r4, r4, #13
     d9e:	4321      	orrs	r1, r4
     da0:	6091      	str	r1, [r2, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     da2:	6891      	ldr	r1, [r2, #8]
     da4:	0b89      	lsrs	r1, r1, #14
     da6:	0389      	lsls	r1, r1, #14
     da8:	6091      	str	r1, [r2, #8]
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     daa:	2140      	movs	r1, #64	; 0x40
     dac:	795a      	ldrb	r2, [r3, #5]
     dae:	430a      	orrs	r2, r1
     db0:	715a      	strb	r2, [r3, #5]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
     db2:	bd70      	pop	{r4, r5, r6, pc}
     db4:	20000abc 	.word	0x20000abc
     db8:	8fffffff 	.word	0x8fffffff
     dbc:	200008d4 	.word	0x200008d4
     dc0:	20000710 	.word	0x20000710
     dc4:	f0003fff 	.word	0xf0003fff

00000dc8 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
     dc8:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
     dca:	0004      	movs	r4, r0
     dcc:	2101      	movs	r1, #1
     dce:	cc04      	ldmia	r4!, {r2}

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
     dd0:	0005      	movs	r5, r0
	usb.CTRLA.bit.SWRST = 1;
     dd2:	7813      	ldrb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
     dd4:	0020      	movs	r0, r4
	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
	usb.CTRLA.bit.SWRST = 1;
     dd6:	430b      	orrs	r3, r1
     dd8:	7013      	strb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
     dda:	2280      	movs	r2, #128	; 0x80
     ddc:	2100      	movs	r1, #0
     dde:	0052      	lsls	r2, r2, #1
     de0:	f001 ff57 	bl	2c92 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
     de4:	682b      	ldr	r3, [r5, #0]
     de6:	789a      	ldrb	r2, [r3, #2]
     de8:	07d2      	lsls	r2, r2, #31
     dea:	d4fc      	bmi.n	de6 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1e>
	usb.DESCADD.reg = (uint32_t)(&EP);
     dec:	625c      	str	r4, [r3, #36]	; 0x24
}
     dee:	bd70      	pop	{r4, r5, r6, pc}

00000df0 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     df0:	221f      	movs	r2, #31
     df2:	4b14      	ldr	r3, [pc, #80]	; (e44 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
	memset(EP, 0, sizeof(EP));
	while (usb.SYNCBUSY.bit.SWRST) {}
	usb.DESCADD.reg = (uint32_t)(&EP);
}

void USBDevice_SAMD21G18x::calibrate() {
     df4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     df6:	681b      	ldr	r3, [r3, #0]
     df8:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     dfa:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     dfc:	019b      	lsls	r3, r3, #6
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     dfe:	4011      	ands	r1, r2
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     e00:	0f5b      	lsrs	r3, r3, #29
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     e02:	4022      	ands	r2, r4
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;

	if (pad_transn == 0x1F)  // maximum value (31)
     e04:	291f      	cmp	r1, #31
     e06:	d100      	bne.n	e0a <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
     e08:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
     e0a:	2a1f      	cmp	r2, #31
     e0c:	d100      	bne.n	e10 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
     e0e:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
     e10:	2b07      	cmp	r3, #7
     e12:	d100      	bne.n	e16 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
     e14:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
     e16:	251f      	movs	r5, #31
     e18:	6806      	ldr	r6, [r0, #0]
     e1a:	018c      	lsls	r4, r1, #6
     e1c:	8d37      	ldrh	r7, [r6, #40]	; 0x28
     e1e:	490a      	ldr	r1, [pc, #40]	; (e48 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
     e20:	402a      	ands	r2, r5
	if (pad_transp == 0x1F)  // maximum value (31)
		pad_transp = 29;
	if (pad_trim == 0x7)     // maximum value (7)
		pad_trim = 3;

	usb.PADCAL.bit.TRANSN = pad_transn;
     e22:	4039      	ands	r1, r7
     e24:	4321      	orrs	r1, r4
     e26:	8531      	strh	r1, [r6, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
     e28:	6804      	ldr	r4, [r0, #0]
     e2a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
     e2c:	43a9      	bics	r1, r5
     e2e:	430a      	orrs	r2, r1
     e30:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
     e32:	6801      	ldr	r1, [r0, #0]
     e34:	031a      	lsls	r2, r3, #12
     e36:	8d08      	ldrh	r0, [r1, #40]	; 0x28
     e38:	4b04      	ldr	r3, [pc, #16]	; (e4c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
     e3a:	4003      	ands	r3, r0
     e3c:	4313      	orrs	r3, r2
     e3e:	850b      	strh	r3, [r1, #40]	; 0x28
}
     e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	00806024 	.word	0x00806024
     e48:	fffff83f 	.word	0xfffff83f
     e4c:	ffff8fff 	.word	0xffff8fff

00000e50 <_ZN7__GuardC1Ev>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     e50:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     e54:	6003      	str	r3, [r0, #0]
     e56:	2301      	movs	r3, #1
     e58:	6043      	str	r3, [r0, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     e5a:	b672      	cpsid	i
		__disable_irq();
	}
     e5c:	4770      	bx	lr

00000e5e <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
     e5e:	6803      	ldr	r3, [r0, #0]
     e60:	2b00      	cmp	r3, #0
     e62:	d102      	bne.n	e6a <_ZN7__GuardD1Ev+0xc>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     e64:	b662      	cpsie	i
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
     e66:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
     e6a:	4770      	bx	lr

00000e6c <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
     e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
     e6e:	6905      	ldr	r5, [r0, #16]
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
     e70:	0004      	movs	r4, r0
		if (current == 0) {
			bool ready = false;
			synchronized {
     e72:	4668      	mov	r0, sp
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
     e74:	2d00      	cmp	r5, #0
     e76:	d113      	bne.n	ea0 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x34>
			bool ready = false;
			synchronized {
     e78:	f7ff ffea 	bl	e50 <_ZN7__GuardC1Ev>
     e7c:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
     e7e:	1d62      	adds	r2, r4, #5

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
			bool ready = false;
			synchronized {
     e80:	3b01      	subs	r3, #1
     e82:	d302      	bcc.n	e8a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
     e84:	7fd5      	ldrb	r5, [r2, #31]
     e86:	b2ed      	uxtb	r5, r5
     e88:	e7fa      	b.n	e80 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
			bool ready = false;
			synchronized {
     e8a:	4668      	mov	r0, sp
     e8c:	9301      	str	r3, [sp, #4]
     e8e:	f7ff ffe6 	bl	e5e <_ZN7__GuardD1Ev>
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
     e92:	2d00      	cmp	r5, #0
     e94:	d101      	bne.n	e9a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
     e96:	2000      	movs	r0, #0
     e98:	e016      	b.n	ec8 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x5c>
     e9a:	6a23      	ldr	r3, [r4, #32]
     e9c:	69e0      	ldr	r0, [r4, #28]
     e9e:	e012      	b.n	ec6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x5a>
		} else {
			bool ready = false;
     ea0:	2500      	movs	r5, #0
			synchronized {
     ea2:	f7ff ffd5 	bl	e50 <_ZN7__GuardC1Ev>
     ea6:	9b01      	ldr	r3, [sp, #4]
     ea8:	3b01      	subs	r3, #1
     eaa:	d304      	bcc.n	eb6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4a>
				ready = ready1;
     eac:	0022      	movs	r2, r4
     eae:	3234      	adds	r2, #52	; 0x34
     eb0:	7815      	ldrb	r5, [r2, #0]
     eb2:	b2ed      	uxtb	r5, r5
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
		} else {
			bool ready = false;
			synchronized {
     eb4:	e7f8      	b.n	ea8 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x3c>
     eb6:	4668      	mov	r0, sp
     eb8:	9301      	str	r3, [sp, #4]
     eba:	f7ff ffd0 	bl	e5e <_ZN7__GuardD1Ev>
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
     ebe:	2d00      	cmp	r5, #0
     ec0:	d0e9      	beq.n	e96 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
     ec2:	6b23      	ldr	r3, [r4, #48]	; 0x30
     ec4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     ec6:	1a18      	subs	r0, r3, r0
		}
	}
     ec8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00000ecc <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     ecc:	6843      	ldr	r3, [r0, #4]
			}
			return ready ? (last1 - first1) : 0;
		}
	}

	void release() {
     ece:	b530      	push	{r4, r5, lr}
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     ed0:	6819      	ldr	r1, [r3, #0]
     ed2:	23ff      	movs	r3, #255	; 0xff
     ed4:	2401      	movs	r4, #1
     ed6:	6882      	ldr	r2, [r0, #8]
     ed8:	401a      	ands	r2, r3
     eda:	0152      	lsls	r2, r2, #5
     edc:	188a      	adds	r2, r1, r2
     ede:	18d2      	adds	r2, r2, r3
     ee0:	7a91      	ldrb	r1, [r2, #10]
     ee2:	4321      	orrs	r1, r4
     ee4:	7291      	strb	r1, [r2, #10]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     ee6:	6882      	ldr	r2, [r0, #8]
     ee8:	6841      	ldr	r1, [r0, #4]
     eea:	401a      	ands	r2, r3
     eec:	0152      	lsls	r2, r2, #5
     eee:	188a      	adds	r2, r1, r2
     ef0:	68c1      	ldr	r1, [r0, #12]
     ef2:	6895      	ldr	r5, [r2, #8]
     ef4:	048c      	lsls	r4, r1, #18
     ef6:	490d      	ldr	r1, [pc, #52]	; (f2c <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x60>)
     ef8:	0924      	lsrs	r4, r4, #4
     efa:	4029      	ands	r1, r5
     efc:	4321      	orrs	r1, r4
     efe:	6091      	str	r1, [r2, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     f00:	6882      	ldr	r2, [r0, #8]
     f02:	6841      	ldr	r1, [r0, #4]
     f04:	401a      	ands	r2, r3
     f06:	0152      	lsls	r2, r2, #5
     f08:	188a      	adds	r2, r1, r2
     f0a:	6891      	ldr	r1, [r2, #8]
     f0c:	0b89      	lsrs	r1, r1, #14
     f0e:	0389      	lsls	r1, r1, #14
     f10:	6091      	str	r1, [r2, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     f12:	6881      	ldr	r1, [r0, #8]
     f14:	6842      	ldr	r2, [r0, #4]
     f16:	400b      	ands	r3, r1
     f18:	2140      	movs	r1, #64	; 0x40
     f1a:	6812      	ldr	r2, [r2, #0]
     f1c:	3308      	adds	r3, #8
     f1e:	015b      	lsls	r3, r3, #5
     f20:	18d3      	adds	r3, r2, r3
     f22:	791a      	ldrb	r2, [r3, #4]
     f24:	430a      	orrs	r2, r1
     f26:	711a      	strb	r2, [r3, #4]
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
		usbd.epBank0SetMultiPacketSize(ep, size);
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
     f28:	bd30      	pop	{r4, r5, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	f0003fff 	.word	0xf0003fff

00000f30 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
			}
			return i;
		}
	}

	virtual void handleEndpoint()
     f30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     f32:	6843      	ldr	r3, [r0, #4]
			}
			return i;
		}
	}

	virtual void handleEndpoint()
     f34:	0004      	movs	r4, r0
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     f36:	6818      	ldr	r0, [r3, #0]
     f38:	23ff      	movs	r3, #255	; 0xff
     f3a:	68a1      	ldr	r1, [r4, #8]
     f3c:	4019      	ands	r1, r3
     f3e:	000a      	movs	r2, r1
     f40:	3208      	adds	r2, #8
     f42:	0152      	lsls	r2, r2, #5
     f44:	1882      	adds	r2, r0, r2
     f46:	79d1      	ldrb	r1, [r2, #7]

	virtual void handleEndpoint()
	{
		// R/W : incoming, ready0/1
		//   W : last0/1, notify
		if (usbd.epBank0IsTransferComplete(ep))
     f48:	07c9      	lsls	r1, r1, #31
     f4a:	d552      	bpl.n	ff2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xc2>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     f4c:	2501      	movs	r5, #1
     f4e:	71d5      	strb	r5, [r2, #7]
     f50:	68a2      	ldr	r2, [r4, #8]
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
     f52:	6960      	ldr	r0, [r4, #20]
     f54:	6861      	ldr	r1, [r4, #4]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     f56:	4013      	ands	r3, r2
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
     f58:	2800      	cmp	r0, #0
     f5a:	d11d      	bne.n	f98 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     f5c:	015a      	lsls	r2, r3, #5
     f5e:	188b      	adds	r3, r1, r2
     f60:	689a      	ldr	r2, [r3, #8]
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
     f62:	6165      	str	r5, [r4, #20]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     f64:	0492      	lsls	r2, r2, #18
     f66:	0c92      	lsrs	r2, r2, #18
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
     f68:	6222      	str	r2, [r4, #32]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     f6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
				synchronized {
     f6c:	4668      	mov	r0, sp
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     f6e:	605a      	str	r2, [r3, #4]
			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
     f70:	1d63      	adds	r3, r4, #5
     f72:	77dd      	strb	r5, [r3, #31]
				synchronized {
     f74:	f7ff ff6c 	bl	e50 <_ZN7__GuardC1Ev>
     f78:	0021      	movs	r1, r4
     f7a:	9b01      	ldr	r3, [sp, #4]
     f7c:	3135      	adds	r1, #53	; 0x35
     f7e:	3b01      	subs	r3, #1
     f80:	1c5a      	adds	r2, r3, #1
     f82:	d02f      	beq.n	fe4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb4>
					if (ready1) {
     f84:	0022      	movs	r2, r4
     f86:	3234      	adds	r2, #52	; 0x34
     f88:	7812      	ldrb	r2, [r2, #0]
     f8a:	1e58      	subs	r0, r3, #1
     f8c:	b2d2      	uxtb	r2, r2
     f8e:	2a00      	cmp	r2, #0
     f90:	d11e      	bne.n	fd0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa0>
						notify = true;
						return;
					}
					notify = false;
     f92:	700a      	strb	r2, [r1, #0]
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
				synchronized {
     f94:	0003      	movs	r3, r0
     f96:	e7f3      	b.n	f80 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x50>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     f98:	015b      	lsls	r3, r3, #5
     f9a:	18cb      	adds	r3, r1, r3
     f9c:	689a      	ldr	r2, [r3, #8]
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
     f9e:	4668      	mov	r0, sp
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     fa0:	0492      	lsls	r2, r2, #18
     fa2:	0c92      	lsrs	r2, r2, #18
						return;
					}
					notify = false;
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
     fa4:	6322      	str	r2, [r4, #48]	; 0x30
				incoming = 0;
     fa6:	2200      	movs	r2, #0
     fa8:	6162      	str	r2, [r4, #20]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     faa:	69a2      	ldr	r2, [r4, #24]
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
					ready1 = true;
					if (ready0) {
     fac:	1d66      	adds	r6, r4, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     fae:	605a      	str	r2, [r3, #4]
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
     fb0:	f7ff ff4e 	bl	e50 <_ZN7__GuardC1Ev>
     fb4:	0021      	movs	r1, r4
     fb6:	9b01      	ldr	r3, [sp, #4]
     fb8:	3135      	adds	r1, #53	; 0x35
     fba:	3b01      	subs	r3, #1
     fbc:	1c5a      	adds	r2, r3, #1
     fbe:	d011      	beq.n	fe4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb4>
					ready1 = true;
     fc0:	0022      	movs	r2, r4
     fc2:	3234      	adds	r2, #52	; 0x34
     fc4:	7015      	strb	r5, [r2, #0]
					if (ready0) {
     fc6:	7ff2      	ldrb	r2, [r6, #31]
     fc8:	1e58      	subs	r0, r3, #1
     fca:	b2d2      	uxtb	r2, r2
     fcc:	2a00      	cmp	r2, #0
     fce:	d006      	beq.n	fde <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
     fd0:	9301      	str	r3, [sp, #4]
						notify = true;
     fd2:	2301      	movs	r3, #1
						return;
     fd4:	4668      	mov	r0, sp
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
					ready1 = true;
					if (ready0) {
						notify = true;
     fd6:	700b      	strb	r3, [r1, #0]
						return;
     fd8:	f7ff ff41 	bl	e5e <_ZN7__GuardD1Ev>
     fdc:	e009      	b.n	ff2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xc2>
					}
					notify = false;
     fde:	700a      	strb	r2, [r1, #0]
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
     fe0:	0003      	movs	r3, r0
     fe2:	e7eb      	b.n	fbc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
     fe4:	4668      	mov	r0, sp
     fe6:	9301      	str	r3, [sp, #4]
     fe8:	f7ff ff39 	bl	e5e <_ZN7__GuardD1Ev>
						return;
					}
					notify = false;
				}
			}
			release();
     fec:	0020      	movs	r0, r4
     fee:	f7ff ff6d 	bl	ecc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
		}
	}
     ff2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00000ff4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual uint32_t recv(void *_data, uint32_t len)
     ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
     ff6:	6905      	ldr	r5, [r0, #16]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual uint32_t recv(void *_data, uint32_t len)
     ff8:	0004      	movs	r4, r0
     ffa:	000f      	movs	r7, r1
     ffc:	0016      	movs	r6, r2
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
     ffe:	4668      	mov	r0, sp
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    1000:	2d00      	cmp	r5, #0
    1002:	d119      	bne.n	1038 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x44>
			synchronized {
    1004:	f7ff ff24 	bl	e50 <_ZN7__GuardC1Ev>
    1008:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    100a:	1d60      	adds	r0, r4, #5
    100c:	3b01      	subs	r3, #1
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
    100e:	1c5a      	adds	r2, r3, #1
    1010:	d005      	beq.n	101e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x2a>
				if (!ready0) {
    1012:	7fc2      	ldrb	r2, [r0, #31]
    1014:	1e59      	subs	r1, r3, #1
    1016:	2a00      	cmp	r2, #0
    1018:	d040      	beq.n	109c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa8>
    101a:	000b      	movs	r3, r1
    101c:	e7f7      	b.n	100e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
    101e:	4668      	mov	r0, sp
    1020:	9301      	str	r3, [sp, #4]
    1022:	f7ff ff1c 	bl	e5e <_ZN7__GuardD1Ev>
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    1026:	2200      	movs	r2, #0
    1028:	69e3      	ldr	r3, [r4, #28]
    102a:	4296      	cmp	r6, r2
    102c:	d043      	beq.n	10b6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc2>
    102e:	6a21      	ldr	r1, [r4, #32]
    1030:	428b      	cmp	r3, r1
    1032:	d338      	bcc.n	10a6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb2>
    1034:	0016      	movs	r6, r2
    1036:	e03e      	b.n	10b6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc2>
					}
				}
			}
			return i;
		} else {
			synchronized {
    1038:	f7ff ff0a 	bl	e50 <_ZN7__GuardC1Ev>
    103c:	9b01      	ldr	r3, [sp, #4]
    103e:	3b01      	subs	r3, #1
    1040:	1c5a      	adds	r2, r3, #1
    1042:	d008      	beq.n	1056 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
				if (!ready1) {
    1044:	0022      	movs	r2, r4
    1046:	3234      	adds	r2, #52	; 0x34
    1048:	7815      	ldrb	r5, [r2, #0]
    104a:	1e5a      	subs	r2, r3, #1
    104c:	b2ed      	uxtb	r5, r5
    104e:	2d00      	cmp	r5, #0
    1050:	d024      	beq.n	109c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa8>
    1052:	0013      	movs	r3, r2
    1054:	e7f4      	b.n	1040 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4c>
					}
				}
			}
			return i;
		} else {
			synchronized {
    1056:	4668      	mov	r0, sp
    1058:	9301      	str	r3, [sp, #4]
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    105a:	2500      	movs	r5, #0
					}
				}
			}
			return i;
		} else {
			synchronized {
    105c:	f7ff feff 	bl	e5e <_ZN7__GuardD1Ev>
    1060:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    1062:	42b5      	cmp	r5, r6
    1064:	d00a      	beq.n	107c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
    1066:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1068:	4293      	cmp	r3, r2
    106a:	d207      	bcs.n	107c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
				data[i] = data1[first1++];
    106c:	1c5a      	adds	r2, r3, #1
    106e:	62e2      	str	r2, [r4, #44]	; 0x2c
    1070:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1072:	18d3      	adds	r3, r2, r3
    1074:	781b      	ldrb	r3, [r3, #0]
    1076:	557b      	strb	r3, [r7, r5]
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    1078:	3501      	adds	r5, #1
    107a:	e7f1      	b.n	1060 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6c>
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
    107c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    107e:	4293      	cmp	r3, r2
    1080:	d14f      	bne.n	1122 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12e>
				first1 = 0;
    1082:	2300      	movs	r3, #0
				current = 0;
				synchronized {
    1084:	4668      	mov	r0, sp
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
				first1 = 0;
    1086:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    1088:	6123      	str	r3, [r4, #16]
				synchronized {
    108a:	f7ff fee1 	bl	e50 <_ZN7__GuardC1Ev>
					ready1 = false;
					if (notify) {
    108e:	0022      	movs	r2, r4
			}
			if (first1 == last1) {
				first1 = 0;
				current = 0;
				synchronized {
					ready1 = false;
    1090:	2600      	movs	r6, #0
    1092:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    1094:	3235      	adds	r2, #53	; 0x35
    1096:	3b01      	subs	r3, #1
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
				first1 = 0;
				current = 0;
				synchronized {
    1098:	1c59      	adds	r1, r3, #1
    109a:	d132      	bne.n	1102 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
    109c:	4668      	mov	r0, sp
    109e:	9301      	str	r3, [sp, #4]
    10a0:	f7ff fedd 	bl	e5e <_ZN7__GuardD1Ev>
    10a4:	e03d      	b.n	1122 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12e>
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
    10a6:	1c59      	adds	r1, r3, #1
    10a8:	61e1      	str	r1, [r4, #28]
    10aa:	69a1      	ldr	r1, [r4, #24]
    10ac:	18cb      	adds	r3, r1, r3
    10ae:	781b      	ldrb	r3, [r3, #0]
    10b0:	54bb      	strb	r3, [r7, r2]
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    10b2:	3201      	adds	r2, #1
    10b4:	e7b8      	b.n	1028 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
    10b6:	6a22      	ldr	r2, [r4, #32]
    10b8:	4293      	cmp	r3, r2
    10ba:	d120      	bne.n	10fe <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10a>
				first0 = 0;
    10bc:	2300      	movs	r3, #0
    10be:	61e3      	str	r3, [r4, #28]
				current = 1;
    10c0:	3301      	adds	r3, #1
    10c2:	6123      	str	r3, [r4, #16]
				synchronized {
    10c4:	4668      	mov	r0, sp
    10c6:	f7ff fec3 	bl	e50 <_ZN7__GuardC1Ev>
					ready0 = false;
					if (notify) {
    10ca:	0022      	movs	r2, r4
			}
			if (first0 == last0) {
				first0 = 0;
				current = 1;
				synchronized {
					ready0 = false;
    10cc:	2700      	movs	r7, #0
    10ce:	9b01      	ldr	r3, [sp, #4]
    10d0:	1d65      	adds	r5, r4, #5
    10d2:	3b01      	subs	r3, #1
					if (notify) {
    10d4:	3235      	adds	r2, #53	; 0x35
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
				current = 1;
				synchronized {
    10d6:	1c59      	adds	r1, r3, #1
    10d8:	d00d      	beq.n	10f6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x102>
					ready0 = false;
    10da:	77ef      	strb	r7, [r5, #31]
					if (notify) {
    10dc:	7811      	ldrb	r1, [r2, #0]
    10de:	1e58      	subs	r0, r3, #1
    10e0:	2900      	cmp	r1, #0
    10e2:	d101      	bne.n	10e8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xf4>
    10e4:	0003      	movs	r3, r0
    10e6:	e7f6      	b.n	10d6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe2>
    10e8:	9301      	str	r3, [sp, #4]
						notify = false;
    10ea:	2300      	movs	r3, #0
						release();
    10ec:	0020      	movs	r0, r4
				first0 = 0;
				current = 1;
				synchronized {
					ready0 = false;
					if (notify) {
						notify = false;
    10ee:	7013      	strb	r3, [r2, #0]
						release();
    10f0:	f7ff feec 	bl	ecc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    10f4:	e7e9      	b.n	10ca <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
				current = 1;
				synchronized {
    10f6:	4668      	mov	r0, sp
    10f8:	9301      	str	r3, [sp, #4]
    10fa:	f7ff feb0 	bl	e5e <_ZN7__GuardD1Ev>
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
    10fe:	0035      	movs	r5, r6
    1100:	e00f      	b.n	1122 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12e>
			}
			if (first1 == last1) {
				first1 = 0;
				current = 0;
				synchronized {
					ready1 = false;
    1102:	0021      	movs	r1, r4
    1104:	3134      	adds	r1, #52	; 0x34
    1106:	700e      	strb	r6, [r1, #0]
					if (notify) {
    1108:	7811      	ldrb	r1, [r2, #0]
    110a:	1e58      	subs	r0, r3, #1
    110c:	2900      	cmp	r1, #0
    110e:	d101      	bne.n	1114 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x120>
    1110:	0003      	movs	r3, r0
    1112:	e7c1      	b.n	1098 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa4>
    1114:	9301      	str	r3, [sp, #4]
						notify = false;
    1116:	2300      	movs	r3, #0
						release();
    1118:	0020      	movs	r0, r4
				first1 = 0;
				current = 0;
				synchronized {
					ready1 = false;
					if (notify) {
						notify = false;
    111a:	7013      	strb	r3, [r2, #0]
						release();
    111c:	f7ff fed6 	bl	ecc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1120:	e7b5      	b.n	108e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x9a>
					}
				}
			}
			return i;
		}
	}
    1122:	0028      	movs	r0, r5
    1124:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001126 <_ZN14USBDeviceClass14SendInterfacesEPm>:
		sendControl(_pack_buffer, _pack_size);
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
    1126:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    1128:	466b      	mov	r3, sp
    112a:	1ddc      	adds	r4, r3, #7
    112c:	2300      	movs	r3, #0
		sendControl(_pack_buffer, _pack_size);
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
    112e:	000d      	movs	r5, r1
	uint8_t interfaces = 0;

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    1130:	0020      	movs	r0, r4
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
	uint8_t interfaces = 0;
    1132:	7023      	strb	r3, [r4, #0]

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    1134:	f7ff fda4 	bl	c80 <_Z16CDC_GetInterfacePh>
    1138:	682b      	ldr	r3, [r5, #0]
    113a:	1818      	adds	r0, r3, r0
    113c:	6028      	str	r0, [r5, #0]
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
    113e:	f001 fb6d 	bl	281c <_Z12PluggableUSBv>
    1142:	0021      	movs	r1, r4
    1144:	f001 fb26 	bl	2794 <_ZN13PluggableUSB_12getInterfaceEPh>
    1148:	682b      	ldr	r3, [r5, #0]
    114a:	1818      	adds	r0, r3, r0
    114c:	6028      	str	r0, [r5, #0]
#endif

	return interfaces;
    114e:	7820      	ldrb	r0, [r4, #0]
}
    1150:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00001154 <_ZN14USBDeviceClass14handleEndpointEh>:


void USBDeviceClass::handleEndpoint(uint8_t ep)
{
#if defined(CDC_ENABLED)
	if (ep == CDC_ENDPOINT_IN)
    1154:	2903      	cmp	r1, #3
    1156:	d10c      	bne.n	1172 <_ZN14USBDeviceClass14handleEndpointEh+0x1e>
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    1158:	2080      	movs	r0, #128	; 0x80
    115a:	4b0e      	ldr	r3, [pc, #56]	; (1194 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    115c:	3162      	adds	r1, #98	; 0x62
    115e:	681b      	ldr	r3, [r3, #0]
    1160:	31ff      	adds	r1, #255	; 0xff
    1162:	5c5a      	ldrb	r2, [r3, r1]
    1164:	4240      	negs	r0, r0
    1166:	4302      	orrs	r2, r0
    1168:	545a      	strb	r2, [r3, r1]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    116a:	3963      	subs	r1, #99	; 0x63
    116c:	39ff      	subs	r1, #255	; 0xff
    116e:	2268      	movs	r2, #104	; 0x68
    1170:	e00d      	b.n	118e <_ZN14USBDeviceClass14handleEndpointEh+0x3a>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_IN);
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_IN);
	}
	if (ep == CDC_ENDPOINT_ACM)
    1172:	2901      	cmp	r1, #1
    1174:	d10d      	bne.n	1192 <_ZN14USBDeviceClass14handleEndpointEh+0x3e>
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    1176:	2080      	movs	r0, #128	; 0x80
    1178:	4b06      	ldr	r3, [pc, #24]	; (1194 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    117a:	3124      	adds	r1, #36	; 0x24
    117c:	681b      	ldr	r3, [r3, #0]
    117e:	31ff      	adds	r1, #255	; 0xff
    1180:	5c5a      	ldrb	r2, [r3, r1]
    1182:	4240      	negs	r0, r0
    1184:	4302      	orrs	r2, r0
    1186:	545a      	strb	r2, [r3, r1]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1188:	2228      	movs	r2, #40	; 0x28
    118a:	3923      	subs	r1, #35	; 0x23
    118c:	39ff      	subs	r1, #255	; 0xff
    118e:	32ff      	adds	r2, #255	; 0xff
    1190:	5499      	strb	r1, [r3, r2]
#endif

#if defined(PLUGGABLE_USB_ENABLED)
	// Empty
#endif
}
    1192:	4770      	bx	lr
    1194:	20000abc 	.word	0x20000abc

00001198 <_ZN14USBDeviceClass4initEv>:

void USBDeviceClass::init()
{
    1198:	b570      	push	{r4, r5, r6, lr}
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    119a:	2500      	movs	r5, #0
    119c:	4b2f      	ldr	r3, [pc, #188]	; (125c <_ZN14USBDeviceClass4initEv+0xc4>)
	pinMode(PIN_LED_TXL, OUTPUT);
    119e:	2101      	movs	r1, #1
	// Empty
#endif
}

void USBDeviceClass::init()
{
    11a0:	0004      	movs	r4, r0
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
	pinMode(PIN_LED_TXL, OUTPUT);
    11a2:	201a      	movs	r0, #26
}

void USBDeviceClass::init()
{
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    11a4:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    11a6:	f000 fea1 	bl	1eec <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    11aa:	2101      	movs	r1, #1
    11ac:	201a      	movs	r0, #26
    11ae:	f000 fed9 	bl	1f64 <digitalWrite>
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    11b2:	4b2b      	ldr	r3, [pc, #172]	; (1260 <_ZN14USBDeviceClass4initEv+0xc8>)
	pinMode(PIN_LED_RXL, OUTPUT);
    11b4:	2101      	movs	r1, #1
    11b6:	2019      	movs	r0, #25
	pinMode(PIN_LED_TXL, OUTPUT);
	digitalWrite(PIN_LED_TXL, HIGH);
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    11b8:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    11ba:	f000 fe97 	bl	1eec <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    11be:	2101      	movs	r1, #1
    11c0:	2019      	movs	r0, #25
    11c2:	f000 fecf 	bl	1f64 <digitalWrite>
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    11c6:	2120      	movs	r1, #32
    11c8:	4a26      	ldr	r2, [pc, #152]	; (1264 <_ZN14USBDeviceClass4initEv+0xcc>)

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    11ca:	3501      	adds	r5, #1
	pinMode(PIN_LED_RXL, OUTPUT);
	digitalWrite(PIN_LED_RXL, HIGH);
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    11cc:	69d3      	ldr	r3, [r2, #28]
    11ce:	430b      	orrs	r3, r1
    11d0:	61d3      	str	r3, [r2, #28]

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    11d2:	4a25      	ldr	r2, [pc, #148]	; (1268 <_ZN14USBDeviceClass4initEv+0xd0>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    11d4:	391a      	subs	r1, #26

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    11d6:	7813      	ldrb	r3, [r2, #0]
    11d8:	432b      	orrs	r3, r5
    11da:	7013      	strb	r3, [r2, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    11dc:	220f      	movs	r2, #15
    11de:	4b23      	ldr	r3, [pc, #140]	; (126c <_ZN14USBDeviceClass4initEv+0xd4>)
    11e0:	7818      	ldrb	r0, [r3, #0]
    11e2:	4390      	bics	r0, r2
    11e4:	7018      	strb	r0, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    11e6:	7818      	ldrb	r0, [r3, #0]
    11e8:	4308      	orrs	r0, r1
    11ea:	7018      	strb	r0, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    11ec:	4820      	ldr	r0, [pc, #128]	; (1270 <_ZN14USBDeviceClass4initEv+0xd8>)
    11ee:	7801      	ldrb	r1, [r0, #0]
    11f0:	4329      	orrs	r1, r5
    11f2:	7001      	strb	r1, [r0, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    11f4:	7819      	ldrb	r1, [r3, #0]
    11f6:	400a      	ands	r2, r1
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    11f8:	2160      	movs	r1, #96	; 0x60
	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    11fa:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    11fc:	781a      	ldrb	r2, [r3, #0]
    11fe:	430a      	orrs	r2, r1
    1200:	701a      	strb	r2, [r3, #0]

	// Put Generic Clock Generator 0 as source for Generic Clock Multiplexer 6 (USB reference)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
	                    GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
	                    GCLK_CLKCTRL_CLKEN;
    1202:	4b1c      	ldr	r3, [pc, #112]	; (1274 <_ZN14USBDeviceClass4initEv+0xdc>)
    1204:	4a1c      	ldr	r2, [pc, #112]	; (1278 <_ZN14USBDeviceClass4initEv+0xe0>)
    1206:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    1208:	785a      	ldrb	r2, [r3, #1]
    120a:	09d2      	lsrs	r2, r2, #7
    120c:	d1fc      	bne.n	1208 <_ZN14USBDeviceClass4initEv+0x70>
		;

	USB_SetHandler(&UDD_Handler);
    120e:	481b      	ldr	r0, [pc, #108]	; (127c <_ZN14USBDeviceClass4initEv+0xe4>)
    1210:	f7ff fb78 	bl	904 <USB_SetHandler>

	// Reset USB Device
	usbd.reset();
    1214:	4d1a      	ldr	r5, [pc, #104]	; (1280 <_ZN14USBDeviceClass4initEv+0xe8>)
    1216:	0028      	movs	r0, r5
    1218:	f7ff fdd6 	bl	dc8 <_ZN20USBDevice_SAMD21G18x5resetEv>

	usbd.calibrate();
    121c:	0028      	movs	r0, r5
    121e:	f7ff fde7 	bl	df0 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    1222:	227f      	movs	r2, #127	; 0x7f
    1224:	682b      	ldr	r3, [r5, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1226:	20c1      	movs	r0, #193	; 0xc1
    1228:	7819      	ldrb	r1, [r3, #0]
    122a:	0080      	lsls	r0, r0, #2
    122c:	400a      	ands	r2, r1
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    122e:	2104      	movs	r1, #4
	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    1230:	701a      	strb	r2, [r3, #0]
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    1232:	781a      	ldrb	r2, [r3, #0]
    1234:	430a      	orrs	r2, r1
    1236:	701a      	strb	r2, [r3, #0]
	inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }
	inline void wakeupHost()     { usb.CTRLB.bit.UPRSM = 1; }

	// USB speed
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    1238:	891a      	ldrh	r2, [r3, #8]
    123a:	3108      	adds	r1, #8
    123c:	438a      	bics	r2, r1
    123e:	4911      	ldr	r1, [pc, #68]	; (1284 <_ZN14USBDeviceClass4initEv+0xec>)
    1240:	811a      	strh	r2, [r3, #8]
    1242:	580a      	ldr	r2, [r1, r0]
    1244:	0212      	lsls	r2, r2, #8
    1246:	0a12      	lsrs	r2, r2, #8
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1248:	500a      	str	r2, [r1, r0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    124a:	2280      	movs	r2, #128	; 0x80
    124c:	600a      	str	r2, [r1, #0]

	// Reset USB Device
	void reset();

	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    124e:	2102      	movs	r1, #2
    1250:	781a      	ldrb	r2, [r3, #0]
    1252:	430a      	orrs	r2, r1
    1254:	701a      	strb	r2, [r3, #0]
	NVIC_SetPriority((IRQn_Type) USB_IRQn, 0UL);
	NVIC_EnableIRQ((IRQn_Type) USB_IRQn);

	usbd.enable();

	initialized = true;
    1256:	2301      	movs	r3, #1
    1258:	7023      	strb	r3, [r4, #0]
}
    125a:	bd70      	pop	{r4, r5, r6, pc}
    125c:	200008d0 	.word	0x200008d0
    1260:	20000ab8 	.word	0x20000ab8
    1264:	40000400 	.word	0x40000400
    1268:	41004458 	.word	0x41004458
    126c:	4100443c 	.word	0x4100443c
    1270:	41004459 	.word	0x41004459
    1274:	40000c00 	.word	0x40000c00
    1278:	00004006 	.word	0x00004006
    127c:	00001c69 	.word	0x00001c69
    1280:	20000abc 	.word	0x20000abc
    1284:	e000e100 	.word	0xe000e100

00001288 <_ZN14USBDeviceClass6attachEv>:

bool USBDeviceClass::attach()
{
	if (!initialized)
    1288:	7800      	ldrb	r0, [r0, #0]
    128a:	2800      	cmp	r0, #0
    128c:	d010      	beq.n	12b0 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void setLowSpeed()        { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;   }
	inline void setHiSpeed()         { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HS_Val;   }
	inline void setHiSpeedTestMode() { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HSTM_Val; }

	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    128e:	2101      	movs	r1, #1
    1290:	4b08      	ldr	r3, [pc, #32]	; (12b4 <_ZN14USBDeviceClass6attachEv+0x2c>)
    1292:	681b      	ldr	r3, [r3, #0]
    1294:	891a      	ldrh	r2, [r3, #8]
    1296:	438a      	bics	r2, r1
    1298:	811a      	strh	r2, [r3, #8]
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    129a:	8b1a      	ldrh	r2, [r3, #24]
    129c:	3107      	adds	r1, #7
    129e:	430a      	orrs	r2, r1
    12a0:	831a      	strh	r2, [r3, #24]
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    12a2:	8b1a      	ldrh	r2, [r3, #24]
    12a4:	3904      	subs	r1, #4
    12a6:	430a      	orrs	r2, r1
    12a8:	831a      	strh	r2, [r3, #24]

	usbd.attach();
	usbd.enableEndOfResetInterrupt();
	usbd.enableStartOfFrameInterrupt();

	_usbConfiguration = 0;
    12aa:	2200      	movs	r2, #0
    12ac:	4b02      	ldr	r3, [pc, #8]	; (12b8 <_ZN14USBDeviceClass6attachEv+0x30>)
    12ae:	601a      	str	r2, [r3, #0]
	return true;
}
    12b0:	4770      	bx	lr
    12b2:	46c0      	nop			; (mov r8, r8)
    12b4:	20000abc 	.word	0x20000abc
    12b8:	20000bc0 	.word	0x20000bc0

000012bc <_ZN14USBDeviceClass10setAddressEm>:

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    12bc:	4a0e      	ldr	r2, [pc, #56]	; (12f8 <_ZN14USBDeviceClass10setAddressEm+0x3c>)

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    12be:	2080      	movs	r0, #128	; 0x80

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    12c0:	6993      	ldr	r3, [r2, #24]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    12c2:	4240      	negs	r0, r0

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    12c4:	0b9b      	lsrs	r3, r3, #14
    12c6:	039b      	lsls	r3, r3, #14
    12c8:	6193      	str	r3, [r2, #24]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    12ca:	6813      	ldr	r3, [r2, #0]
    12cc:	2202      	movs	r2, #2
    12ce:	33ff      	adds	r3, #255	; 0xff
    12d0:	721a      	strb	r2, [r3, #8]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    12d2:	799a      	ldrb	r2, [r3, #6]
    12d4:	4302      	orrs	r2, r0
    12d6:	719a      	strb	r2, [r3, #6]

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    12d8:	7a1a      	ldrb	r2, [r3, #8]

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(0);

	// Wait for transfer to complete
	while (!usbd.epBank1IsTransferComplete(0)) {}
    12da:	0792      	lsls	r2, r2, #30
    12dc:	d5fc      	bpl.n	12d8 <_ZN14USBDeviceClass10setAddressEm+0x1c>

	// Set USB address to addr
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    12de:	207f      	movs	r0, #127	; 0x7f
    12e0:	4b06      	ldr	r3, [pc, #24]	; (12fc <_ZN14USBDeviceClass10setAddressEm+0x40>)
    12e2:	4001      	ands	r1, r0
    12e4:	7a9a      	ldrb	r2, [r3, #10]
    12e6:	4382      	bics	r2, r0
    12e8:	4311      	orrs	r1, r2
    12ea:	7299      	strb	r1, [r3, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    12ec:	2180      	movs	r1, #128	; 0x80
    12ee:	7a9a      	ldrb	r2, [r3, #10]
    12f0:	4249      	negs	r1, r1
    12f2:	430a      	orrs	r2, r1
    12f4:	729a      	strb	r2, [r3, #10]
}
    12f6:	4770      	bx	lr
    12f8:	20000abc 	.word	0x20000abc
    12fc:	41005000 	.word	0x41005000

00001300 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
    1300:	b510      	push	{r4, lr}
	uint8_t i = setup.wIndex;

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
    1302:	790b      	ldrb	r3, [r1, #4]
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
    1304:	000c      	movs	r4, r1
	uint8_t i = setup.wIndex;

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
    1306:	2b00      	cmp	r3, #0
    1308:	d10b      	bne.n	1322 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x22>
	{
		if (CDC_Setup(setup) == false) {
    130a:	0008      	movs	r0, r1
    130c:	f7ff fcc6 	bl	c9c <_Z9CDC_SetupR8USBSetup>
    1310:	2800      	cmp	r0, #0
    1312:	d104      	bne.n	131e <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1e>

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1314:	4a09      	ldr	r2, [pc, #36]	; (133c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3c>)
    1316:	6993      	ldr	r3, [r2, #24]
    1318:	0b9b      	lsrs	r3, r3, #14
    131a:	039b      	lsls	r3, r3, #14
    131c:	6193      	str	r3, [r2, #24]
			sendZlp(0);
		}
		return true;
    131e:	2001      	movs	r0, #1
    1320:	e00b      	b.n	133a <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3a>
	}
	#endif

	#if defined(PLUGGABLE_USB_ENABLED)
	bool ret = PluggableUSB().setup(setup);
    1322:	f001 fa7b 	bl	281c <_Z12PluggableUSBv>
    1326:	0021      	movs	r1, r4
    1328:	f001 fa68 	bl	27fc <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    132c:	2800      	cmp	r0, #0
    132e:	d1f6      	bne.n	131e <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1e>
    1330:	4a02      	ldr	r2, [pc, #8]	; (133c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3c>)
    1332:	6993      	ldr	r3, [r2, #24]
    1334:	0b9b      	lsrs	r3, r3, #14
    1336:	039b      	lsls	r3, r3, #14
    1338:	6193      	str	r3, [r2, #24]
	}
	return ret;
	#endif

	return false;
}
    133a:	bd10      	pop	{r4, pc}
    133c:	20000abc 	.word	0x20000abc

00001340 <_ZN14USBDeviceClass6initEPEmm>:
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
{
    1340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1342:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    1344:	2a83      	cmp	r2, #131	; 0x83
    1346:	d116      	bne.n	1376 <_ZN14USBDeviceClass6initEPEmm+0x36>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1348:	4841      	ldr	r0, [pc, #260]	; (1450 <_ZN14USBDeviceClass6initEPEmm+0x110>)
    134a:	b2cb      	uxtb	r3, r1
    134c:	0159      	lsls	r1, r3, #5
    134e:	1841      	adds	r1, r0, r1
    1350:	698e      	ldr	r6, [r1, #24]
    1352:	4a40      	ldr	r2, [pc, #256]	; (1454 <_ZN14USBDeviceClass6initEPEmm+0x114>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    1354:	01ad      	lsls	r5, r5, #6
    1356:	4032      	ands	r2, r6
    1358:	26c0      	movs	r6, #192	; 0xc0
    135a:	05b6      	lsls	r6, r6, #22
    135c:	4332      	orrs	r2, r6
    135e:	618a      	str	r2, [r1, #24]
    1360:	4a3d      	ldr	r2, [pc, #244]	; (1458 <_ZN14USBDeviceClass6initEPEmm+0x118>)
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1362:	3308      	adds	r3, #8
    1364:	1955      	adds	r5, r2, r5
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1366:	614d      	str	r5, [r1, #20]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1368:	6801      	ldr	r1, [r0, #0]
    136a:	2070      	movs	r0, #112	; 0x70
    136c:	015b      	lsls	r3, r3, #5
    136e:	5c5a      	ldrb	r2, [r3, r1]
    1370:	4382      	bics	r2, r0
    1372:	3830      	subs	r0, #48	; 0x30
    1374:	e062      	b.n	143c <_ZN14USBDeviceClass6initEPEmm+0xfc>
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    1376:	2a02      	cmp	r2, #2
    1378:	d142      	bne.n	1400 <_ZN14USBDeviceClass6initEPEmm+0xc0>
	{
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    137a:	2038      	movs	r0, #56	; 0x38
    137c:	f001 f828 	bl	23d0 <_Znwj>
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    1380:	4b36      	ldr	r3, [pc, #216]	; (145c <_ZN14USBDeviceClass6initEPEmm+0x11c>)
    1382:	2780      	movs	r7, #128	; 0x80
    1384:	6003      	str	r3, [r0, #0]
    1386:	2300      	movs	r3, #0
    1388:	4e31      	ldr	r6, [pc, #196]	; (1450 <_ZN14USBDeviceClass6initEPEmm+0x110>)
    138a:	007f      	lsls	r7, r7, #1
    138c:	1d42      	adds	r2, r0, #5
    138e:	6203      	str	r3, [r0, #32]
    1390:	6103      	str	r3, [r0, #16]
    1392:	6143      	str	r3, [r0, #20]
    1394:	61c3      	str	r3, [r0, #28]
    1396:	6046      	str	r6, [r0, #4]
    1398:	6085      	str	r5, [r0, #8]
    139a:	60c7      	str	r7, [r0, #12]
    139c:	77d3      	strb	r3, [r2, #31]
    139e:	322f      	adds	r2, #47	; 0x2f
    13a0:	0004      	movs	r4, r0
    13a2:	62c3      	str	r3, [r0, #44]	; 0x2c
    13a4:	6303      	str	r3, [r0, #48]	; 0x30
    13a6:	7013      	strb	r3, [r2, #0]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    13a8:	0038      	movs	r0, r7
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    13aa:	7053      	strb	r3, [r2, #1]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    13ac:	f001 fc54 	bl	2c58 <malloc>
    13b0:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    13b2:	0038      	movs	r0, r7
    13b4:	f001 fc50 	bl	2c58 <malloc>
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    13b8:	23ff      	movs	r3, #255	; 0xff
    13ba:	002a      	movs	r2, r5
    13bc:	401a      	ands	r2, r3
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    13be:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    13c0:	0150      	lsls	r0, r2, #5
    13c2:	1830      	adds	r0, r6, r0
    13c4:	6887      	ldr	r7, [r0, #8]
    13c6:	4923      	ldr	r1, [pc, #140]	; (1454 <_ZN14USBDeviceClass6initEPEmm+0x114>)

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    13c8:	3208      	adds	r2, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    13ca:	4039      	ands	r1, r7
    13cc:	27c0      	movs	r7, #192	; 0xc0
    13ce:	05bf      	lsls	r7, r7, #22
    13d0:	4339      	orrs	r1, r7
    13d2:	6081      	str	r1, [r0, #8]

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    13d4:	6830      	ldr	r0, [r6, #0]
    13d6:	2607      	movs	r6, #7
    13d8:	0152      	lsls	r2, r2, #5
    13da:	5c11      	ldrb	r1, [r2, r0]
    13dc:	00ad      	lsls	r5, r5, #2
    13de:	43b1      	bics	r1, r6
    13e0:	3e04      	subs	r6, #4
    13e2:	4331      	orrs	r1, r6
    13e4:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    13e6:	68a2      	ldr	r2, [r4, #8]
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetType(ep, 3); // BULK OUT

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
    13e8:	0020      	movs	r0, r4
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    13ea:	4013      	ands	r3, r2
    13ec:	6862      	ldr	r2, [r4, #4]
    13ee:	015b      	lsls	r3, r3, #5
    13f0:	18d3      	adds	r3, r2, r3
    13f2:	69a2      	ldr	r2, [r4, #24]
    13f4:	605a      	str	r2, [r3, #4]
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetType(ep, 3); // BULK OUT

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
    13f6:	f7ff fd69 	bl	ecc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    13fa:	4b19      	ldr	r3, [pc, #100]	; (1460 <_ZN14USBDeviceClass6initEPEmm+0x120>)
    13fc:	50ec      	str	r4, [r5, r3]
    13fe:	e025      	b.n	144c <_ZN14USBDeviceClass6initEPEmm+0x10c>
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    1400:	2a82      	cmp	r2, #130	; 0x82
    1402:	d11e      	bne.n	1442 <_ZN14USBDeviceClass6initEPEmm+0x102>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1404:	4812      	ldr	r0, [pc, #72]	; (1450 <_ZN14USBDeviceClass6initEPEmm+0x110>)
    1406:	b2cb      	uxtb	r3, r1
    1408:	0159      	lsls	r1, r3, #5
    140a:	1841      	adds	r1, r0, r1
    140c:	698e      	ldr	r6, [r1, #24]
    140e:	4a11      	ldr	r2, [pc, #68]	; (1454 <_ZN14USBDeviceClass6initEPEmm+0x114>)
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    1410:	2480      	movs	r4, #128	; 0x80
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1412:	4032      	ands	r2, r6
    1414:	26c0      	movs	r6, #192	; 0xc0
    1416:	05b6      	lsls	r6, r6, #22
    1418:	4332      	orrs	r2, r6
    141a:	618a      	str	r2, [r1, #24]
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    141c:	4a0e      	ldr	r2, [pc, #56]	; (1458 <_ZN14USBDeviceClass6initEPEmm+0x118>)
    141e:	01ad      	lsls	r5, r5, #6
    1420:	1955      	adds	r5, r2, r5
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1422:	614d      	str	r5, [r1, #20]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    1424:	3308      	adds	r3, #8
    1426:	6801      	ldr	r1, [r0, #0]
    1428:	015b      	lsls	r3, r3, #5
    142a:	18c8      	adds	r0, r1, r3
    142c:	7902      	ldrb	r2, [r0, #4]
    142e:	4264      	negs	r4, r4
    1430:	4322      	orrs	r2, r4
    1432:	7102      	strb	r2, [r0, #4]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1434:	2070      	movs	r0, #112	; 0x70
    1436:	5c5a      	ldrb	r2, [r3, r1]
    1438:	4382      	bics	r2, r0
    143a:	3840      	subs	r0, #64	; 0x40
    143c:	4302      	orrs	r2, r0
    143e:	545a      	strb	r2, [r3, r1]
    1440:	e004      	b.n	144c <_ZN14USBDeviceClass6initEPEmm+0x10c>
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(ep);

		usbd.epBank1SetType(ep, 3); // BULK IN
	}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    1442:	2a00      	cmp	r2, #0
    1444:	d102      	bne.n	144c <_ZN14USBDeviceClass6initEPEmm+0x10c>
    1446:	0008      	movs	r0, r1
    1448:	f7ff fc7e 	bl	d48 <_ZN14USBDeviceClass6initEPEmm.part.5>
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	20000abc 	.word	0x20000abc
    1454:	8fffffff 	.word	0x8fffffff
    1458:	20000710 	.word	0x20000710
    145c:	00002eac 	.word	0x00002eac
    1460:	20000a94 	.word	0x20000a94

00001464 <_ZN14USBDeviceClass13initEndpointsEv>:
	0,
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
    1464:	b570      	push	{r4, r5, r6, lr}
    1466:	0005      	movs	r5, r0
    1468:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    146a:	4b06      	ldr	r3, [pc, #24]	; (1484 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    146c:	00a2      	lsls	r2, r4, #2
    146e:	58d2      	ldr	r2, [r2, r3]
    1470:	2a00      	cmp	r2, #0
    1472:	d005      	beq.n	1480 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    1474:	0021      	movs	r1, r4
    1476:	0028      	movs	r0, r5
    1478:	f7ff ff62 	bl	1340 <_ZN14USBDeviceClass6initEPEmm>
    147c:	3401      	adds	r4, #1
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    147e:	e7f4      	b.n	146a <_ZN14USBDeviceClass13initEndpointsEv+0x6>
		initEP(i, EndPoints[i]);
	}
}
    1480:	bd70      	pop	{r4, r5, r6, pc}
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	2000005c 	.word	0x2000005c

00001488 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    1488:	4b08      	ldr	r3, [pc, #32]	; (14ac <_ZN14USBDeviceClass9availableEm+0x24>)
    148a:	008a      	lsls	r2, r1, #2
    148c:	58d0      	ldr	r0, [r2, r3]
	return read;
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
    148e:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    1490:	2800      	cmp	r0, #0
    1492:	d003      	beq.n	149c <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    1494:	6803      	ldr	r3, [r0, #0]
    1496:	689b      	ldr	r3, [r3, #8]
    1498:	4798      	blx	r3
    149a:	e006      	b.n	14aa <_ZN14USBDeviceClass9availableEm+0x22>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    149c:	b2c9      	uxtb	r1, r1
    149e:	4b04      	ldr	r3, [pc, #16]	; (14b0 <_ZN14USBDeviceClass9availableEm+0x28>)
    14a0:	0149      	lsls	r1, r1, #5
    14a2:	1859      	adds	r1, r3, r1
    14a4:	6888      	ldr	r0, [r1, #8]
    14a6:	0480      	lsls	r0, r0, #18
    14a8:	0c80      	lsrs	r0, r0, #18
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    14aa:	bd10      	pop	{r4, pc}
    14ac:	20000a94 	.word	0x20000a94
    14b0:	20000abc 	.word	0x20000abc

000014b4 <_ZN14USBDeviceClass5flushEm>:
		usbd.epBank0SetReady(ep);
	}
}

void USBDeviceClass::flush(uint32_t ep)
{
    14b4:	b510      	push	{r4, lr}
    14b6:	000c      	movs	r4, r1
	if (available(ep)) {
    14b8:	f7ff ffe6 	bl	1488 <_ZN14USBDeviceClass9availableEm>
    14bc:	2800      	cmp	r0, #0
    14be:	d00c      	beq.n	14da <_ZN14USBDeviceClass5flushEm+0x26>

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    14c0:	2280      	movs	r2, #128	; 0x80
    14c2:	4b06      	ldr	r3, [pc, #24]	; (14dc <_ZN14USBDeviceClass5flushEm+0x28>)
    14c4:	b2e4      	uxtb	r4, r4
    14c6:	6819      	ldr	r1, [r3, #0]
    14c8:	3408      	adds	r4, #8
    14ca:	0164      	lsls	r4, r4, #5
    14cc:	1909      	adds	r1, r1, r4
    14ce:	794b      	ldrb	r3, [r1, #5]
    14d0:	4252      	negs	r2, r2
    14d2:	4313      	orrs	r3, r2
    14d4:	714b      	strb	r3, [r1, #5]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    14d6:	2302      	movs	r3, #2
    14d8:	71cb      	strb	r3, [r1, #7]
		usbd.epBank1SetReady(ep);

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
	}
}
    14da:	bd10      	pop	{r4, pc}
    14dc:	20000abc 	.word	0x20000abc

000014e0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    14e0:	4a14      	ldr	r2, [pc, #80]	; (1534 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    14e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    14e4:	b2cb      	uxtb	r3, r1
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    14e6:	0189      	lsls	r1, r1, #6
    14e8:	1851      	adds	r1, r2, r1
    14ea:	4a13      	ldr	r2, [pc, #76]	; (1538 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
    14ec:	015c      	lsls	r4, r3, #5
    14ee:	1910      	adds	r0, r2, r4
    14f0:	6041      	str	r1, [r0, #4]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    14f2:	6885      	ldr	r5, [r0, #8]
    14f4:	4911      	ldr	r1, [pc, #68]	; (153c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x5c>)
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    14f6:	2740      	movs	r7, #64	; 0x40
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    14f8:	4029      	ands	r1, r5
    14fa:	2580      	movs	r5, #128	; 0x80
    14fc:	02ad      	lsls	r5, r5, #10
    14fe:	4329      	orrs	r1, r5
    1500:	6081      	str	r1, [r0, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1502:	6881      	ldr	r1, [r0, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1504:	3308      	adds	r3, #8
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1506:	0b89      	lsrs	r1, r1, #14
    1508:	0389      	lsls	r1, r1, #14
    150a:	6081      	str	r1, [r0, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    150c:	6810      	ldr	r0, [r2, #0]
    150e:	0159      	lsls	r1, r3, #5
    1510:	1846      	adds	r6, r0, r1
    1512:	7935      	ldrb	r5, [r6, #4]
    1514:	433d      	orrs	r5, r7
    1516:	7135      	strb	r5, [r6, #4]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    1518:	1845      	adds	r5, r0, r1
    151a:	79ad      	ldrb	r5, [r5, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    151c:	066d      	lsls	r5, r5, #25
    151e:	d5fb      	bpl.n	1518 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1520:	015b      	lsls	r3, r3, #5
    1522:	18c1      	adds	r1, r0, r3
    1524:	79c9      	ldrb	r1, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    1526:	07c9      	lsls	r1, r1, #31
    1528:	d5fb      	bpl.n	1522 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    152a:	1914      	adds	r4, r2, r4
    152c:	68a0      	ldr	r0, [r4, #8]
	return usbd.epBank0ByteCount(ep);
    152e:	b2c0      	uxtb	r0, r0
}
    1530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	200008d4 	.word	0x200008d4
    1538:	20000abc 	.word	0x20000abc
    153c:	f0003fff 	.word	0xf0003fff

00001540 <_ZN14USBDeviceClass11recvControlEPvm>:
	return f != USB->DEVICE.FNUM.bit.FNUM;
}


uint32_t USBDeviceClass::recvControl(void *_data, uint32_t len)
{
    1540:	b570      	push	{r4, r5, r6, lr}
    1542:	000d      	movs	r5, r1
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1544:	2140      	movs	r1, #64	; 0x40
    1546:	4b0b      	ldr	r3, [pc, #44]	; (1574 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    1548:	0014      	movs	r4, r2
    154a:	681b      	ldr	r3, [r3, #0]
    154c:	33ff      	adds	r3, #255	; 0xff
    154e:	795a      	ldrb	r2, [r3, #5]
    1550:	430a      	orrs	r2, r1
    1552:	715a      	strb	r2, [r3, #5]

	// The RAM Buffer is empty: we can receive data
	usbd.epBank0ResetReady(0);

	//usbd.epBank0AckSetupReceived(0);
	uint32_t read = armRecvCtrlOUT(0);
    1554:	2100      	movs	r1, #0
    1556:	f7ff ffc3 	bl	14e0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    155a:	42a0      	cmp	r0, r4
    155c:	d900      	bls.n	1560 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    155e:	0020      	movs	r0, r4
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    1560:	2300      	movs	r3, #0
		data[i] = buffer[i];
    1562:	4905      	ldr	r1, [pc, #20]	; (1578 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    1564:	42a3      	cmp	r3, r4
    1566:	d003      	beq.n	1570 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    1568:	5c5a      	ldrb	r2, [r3, r1]
    156a:	54ea      	strb	r2, [r5, r3]
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    156c:	3301      	adds	r3, #1
    156e:	e7f9      	b.n	1564 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
		data[i] = buffer[i];
	}

	return read;
}
    1570:	bd70      	pop	{r4, r5, r6, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	20000abc 	.word	0x20000abc
    1578:	200008d4 	.word	0x200008d4

0000157c <_ZN14USBDeviceClass7armRecvEm>:
	while (!usbd.epBank0IsTransferComplete(ep)) {}
	return usbd.epBank0ByteCount(ep);
}

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    157c:	b530      	push	{r4, r5, lr}
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    157e:	b2c9      	uxtb	r1, r1
    1580:	4c0b      	ldr	r4, [pc, #44]	; (15b0 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    1582:	0149      	lsls	r1, r1, #5
    1584:	1860      	adds	r0, r4, r1
    1586:	6883      	ldr	r3, [r0, #8]
    1588:	049b      	lsls	r3, r3, #18
    158a:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    158c:	2b3f      	cmp	r3, #63	; 0x3f
    158e:	d907      	bls.n	15a0 <_ZN14USBDeviceClass7armRecvEm+0x24>
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1590:	3b40      	subs	r3, #64	; 0x40
    1592:	6885      	ldr	r5, [r0, #8]
    1594:	049b      	lsls	r3, r3, #18
    1596:	0c9a      	lsrs	r2, r3, #18
    1598:	0bab      	lsrs	r3, r5, #14
    159a:	039b      	lsls	r3, r3, #14
    159c:	4313      	orrs	r3, r2
    159e:	e002      	b.n	15a6 <_ZN14USBDeviceClass7armRecvEm+0x2a>
    15a0:	6883      	ldr	r3, [r0, #8]
    15a2:	0b9b      	lsrs	r3, r3, #14
    15a4:	039b      	lsls	r3, r3, #14
    15a6:	6083      	str	r3, [r0, #8]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    15a8:	1861      	adds	r1, r4, r1
    15aa:	6888      	ldr	r0, [r1, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    15ac:	b2c0      	uxtb	r0, r0
}
    15ae:	bd30      	pop	{r4, r5, pc}
    15b0:	20000abc 	.word	0x20000abc

000015b4 <_ZN14USBDeviceClass4recvEmPvm>:
}

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    15b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15b6:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    15b8:	4b30      	ldr	r3, [pc, #192]	; (167c <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
}

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    15ba:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    15bc:	681b      	ldr	r3, [r3, #0]
}

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    15be:	0006      	movs	r6, r0
    15c0:	000d      	movs	r5, r1
    15c2:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    15c4:	2b00      	cmp	r3, #0
    15c6:	d052      	beq.n	166e <_ZN14USBDeviceClass4recvEmPvm+0xba>
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    15c8:	4f2d      	ldr	r7, [pc, #180]	; (1680 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    15ca:	7839      	ldrb	r1, [r7, #0]
    15cc:	b2c9      	uxtb	r1, r1
    15ce:	2900      	cmp	r1, #0
    15d0:	d102      	bne.n	15d8 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    15d2:	2019      	movs	r0, #25
    15d4:	f000 fcc6 	bl	1f64 <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    15d8:	2364      	movs	r3, #100	; 0x64
    15da:	703b      	strb	r3, [r7, #0]
#endif

	if (epHandlers[ep]) {
    15dc:	4b29      	ldr	r3, [pc, #164]	; (1684 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    15de:	00aa      	lsls	r2, r5, #2
    15e0:	58d0      	ldr	r0, [r2, r3]
    15e2:	2800      	cmp	r0, #0
    15e4:	d005      	beq.n	15f2 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return epHandlers[ep]->recv(_data, len);
    15e6:	6803      	ldr	r3, [r0, #0]
    15e8:	0022      	movs	r2, r4
    15ea:	685b      	ldr	r3, [r3, #4]
    15ec:	9901      	ldr	r1, [sp, #4]
    15ee:	4798      	blx	r3
    15f0:	e041      	b.n	1676 <_ZN14USBDeviceClass4recvEmPvm+0xc2>
	}

	if (available(ep) < len)
    15f2:	0029      	movs	r1, r5
    15f4:	0030      	movs	r0, r6
    15f6:	f7ff ff47 	bl	1488 <_ZN14USBDeviceClass9availableEm>
    15fa:	4284      	cmp	r4, r0
    15fc:	d904      	bls.n	1608 <_ZN14USBDeviceClass4recvEmPvm+0x54>
		len = available(ep);
    15fe:	0029      	movs	r1, r5
    1600:	0030      	movs	r0, r6
    1602:	f7ff ff41 	bl	1488 <_ZN14USBDeviceClass9availableEm>
    1606:	0004      	movs	r4, r0

	armRecv(ep);
    1608:	0029      	movs	r1, r5
    160a:	0030      	movs	r0, r6
    160c:	f7ff ffb6 	bl	157c <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    1610:	2101      	movs	r1, #1
    1612:	b2eb      	uxtb	r3, r5
    1614:	4f1c      	ldr	r7, [pc, #112]	; (1688 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    1616:	9303      	str	r3, [sp, #12]
    1618:	015b      	lsls	r3, r3, #5
    161a:	9302      	str	r3, [sp, #8]
    161c:	9a02      	ldr	r2, [sp, #8]
    161e:	683b      	ldr	r3, [r7, #0]

	usbd.epBank0DisableTransferComplete(ep);

	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    1620:	9801      	ldr	r0, [sp, #4]
    1622:	189b      	adds	r3, r3, r2
    1624:	33ff      	adds	r3, #255	; 0xff
    1626:	7a5a      	ldrb	r2, [r3, #9]
    1628:	430a      	orrs	r2, r1
    162a:	4918      	ldr	r1, [pc, #96]	; (168c <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    162c:	725a      	strb	r2, [r3, #9]
    162e:	01ab      	lsls	r3, r5, #6
    1630:	18c9      	adds	r1, r1, r3
    1632:	0022      	movs	r2, r4
    1634:	f001 fb24 	bl	2c80 <memcpy>

	// release empty buffer
	if (len && !available(ep)) {
    1638:	2c00      	cmp	r4, #0
    163a:	d01b      	beq.n	1674 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
    163c:	0029      	movs	r1, r5
    163e:	0030      	movs	r0, r6
    1640:	f7ff ff22 	bl	1488 <_ZN14USBDeviceClass9availableEm>
    1644:	2800      	cmp	r0, #0
    1646:	d115      	bne.n	1674 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1648:	2040      	movs	r0, #64	; 0x40
    164a:	9b03      	ldr	r3, [sp, #12]
    164c:	6839      	ldr	r1, [r7, #0]
    164e:	3308      	adds	r3, #8
    1650:	015b      	lsls	r3, r3, #5
    1652:	18cb      	adds	r3, r1, r3
    1654:	791a      	ldrb	r2, [r3, #4]
    1656:	4302      	orrs	r2, r0
    1658:	711a      	strb	r2, [r3, #4]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    165a:	2201      	movs	r2, #1
    165c:	71da      	strb	r2, [r3, #7]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    165e:	9b02      	ldr	r3, [sp, #8]
    1660:	18cb      	adds	r3, r1, r3
    1662:	2101      	movs	r1, #1
    1664:	33ff      	adds	r3, #255	; 0xff
    1666:	7a9a      	ldrb	r2, [r3, #10]
    1668:	430a      	orrs	r2, r1
    166a:	729a      	strb	r2, [r3, #10]
    166c:	e002      	b.n	1674 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
	if (!_usbConfiguration)
		return -1;
    166e:	2001      	movs	r0, #1
    1670:	4240      	negs	r0, r0
    1672:	e000      	b.n	1676 <_ZN14USBDeviceClass4recvEmPvm+0xc2>
    1674:	0020      	movs	r0, r4
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
    1676:	b005      	add	sp, #20
    1678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	20000bc0 	.word	0x20000bc0
    1680:	20000ab8 	.word	0x20000ab8
    1684:	20000a94 	.word	0x20000a94
    1688:	20000abc 	.word	0x20000abc
    168c:	200008d4 	.word	0x200008d4

00001690 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    1690:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    1692:	466b      	mov	r3, sp
    1694:	1ddc      	adds	r4, r3, #7
    1696:	0022      	movs	r2, r4
    1698:	2301      	movs	r3, #1
    169a:	f7ff ff8b 	bl	15b4 <_ZN14USBDeviceClass4recvEmPvm>
    169e:	2801      	cmp	r0, #1
    16a0:	d101      	bne.n	16a6 <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
    16a2:	7820      	ldrb	r0, [r4, #0]
    16a4:	e001      	b.n	16aa <_ZN14USBDeviceClass4recvEm+0x1a>
// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
		return -1;
    16a6:	2001      	movs	r0, #1
    16a8:	4240      	negs	r0, r0
	} else {
		return c;
	}
}
    16aa:	bd16      	pop	{r1, r2, r4, pc}

000016ac <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    16ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ae:	001d      	movs	r5, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    16b0:	4b3d      	ldr	r3, [pc, #244]	; (17a8 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    16b2:	b085      	sub	sp, #20
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    16b4:	681b      	ldr	r3, [r3, #0]
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    16b6:	000e      	movs	r6, r1
    16b8:	9203      	str	r2, [sp, #12]
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    16ba:	2b00      	cmp	r3, #0
    16bc:	d06f      	beq.n	179e <_ZN14USBDeviceClass4sendEmPKvm+0xf2>
		return -1;
	if (len > 16384)
    16be:	2380      	movs	r3, #128	; 0x80
    16c0:	01db      	lsls	r3, r3, #7
    16c2:	429d      	cmp	r5, r3
    16c4:	d86b      	bhi.n	179e <_ZN14USBDeviceClass4sendEmPKvm+0xf2>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    16c6:	4c39      	ldr	r4, [pc, #228]	; (17ac <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    16c8:	7821      	ldrb	r1, [r4, #0]
    16ca:	b2c9      	uxtb	r1, r1
    16cc:	2900      	cmp	r1, #0
    16ce:	d102      	bne.n	16d6 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    16d0:	201a      	movs	r0, #26
    16d2:	f000 fc47 	bl	1f64 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    16d6:	2364      	movs	r3, #100	; 0x64
    16d8:	7023      	strb	r3, [r4, #0]
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
	uint32_t written = 0;
    16da:	2300      	movs	r3, #0
    16dc:	9301      	str	r3, [sp, #4]

	txLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	// Flash area
	while (len != 0)
    16de:	2d00      	cmp	r5, #0
    16e0:	d052      	beq.n	1788 <_ZN14USBDeviceClass4sendEmPKvm+0xdc>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    16e2:	4f33      	ldr	r7, [pc, #204]	; (17b0 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    16e4:	683b      	ldr	r3, [r7, #0]
    16e6:	9302      	str	r3, [sp, #8]
    16e8:	23ff      	movs	r3, #255	; 0xff
    16ea:	4033      	ands	r3, r6
    16ec:	001c      	movs	r4, r3
    16ee:	9300      	str	r3, [sp, #0]
    16f0:	3408      	adds	r4, #8
    16f2:	9b02      	ldr	r3, [sp, #8]
    16f4:	0164      	lsls	r4, r4, #5
    16f6:	191b      	adds	r3, r3, r4
    16f8:	799b      	ldrb	r3, [r3, #6]
    16fa:	09db      	lsrs	r3, r3, #7
	{
		if (usbd.epBank1IsReady(ep)) {
    16fc:	d015      	beq.n	172a <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
			// previous transfer is still not complete

			// convert the timeout from microseconds to a number of times through
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    16fe:	4b2d      	ldr	r3, [pc, #180]	; (17b4 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    1700:	492d      	ldr	r1, [pc, #180]	; (17b8 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    1702:	6818      	ldr	r0, [r3, #0]
    1704:	f001 f8fe 	bl	2904 <__aeabi_uidiv>
    1708:	4b2c      	ldr	r3, [pc, #176]	; (17bc <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    170a:	2117      	movs	r1, #23
    170c:	4358      	muls	r0, r3
    170e:	f001 f8f9 	bl	2904 <__aeabi_uidiv>

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1712:	4b2b      	ldr	r3, [pc, #172]	; (17c0 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1714:	9a02      	ldr	r2, [sp, #8]
    1716:	1912      	adds	r2, r2, r4
    1718:	79d2      	ldrb	r2, [r2, #7]
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
    171a:	0792      	lsls	r2, r2, #30
    171c:	d405      	bmi.n	172a <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    171e:	5d9a      	ldrb	r2, [r3, r6]
    1720:	2a00      	cmp	r2, #0
    1722:	d133      	bne.n	178c <_ZN14USBDeviceClass4sendEmPKvm+0xe0>
    1724:	3801      	subs	r0, #1
    1726:	d331      	bcc.n	178c <_ZN14USBDeviceClass4sendEmPKvm+0xe0>
    1728:	e7f4      	b.n	1714 <_ZN14USBDeviceClass4sendEmPKvm+0x68>
					return -1;
				}
			}
		}

		LastTransmitTimedOut[ep] = 0;
    172a:	2200      	movs	r2, #0
    172c:	4b24      	ldr	r3, [pc, #144]	; (17c0 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)
    172e:	1e2c      	subs	r4, r5, #0
    1730:	559a      	strb	r2, [r3, r6]
    1732:	2c3f      	cmp	r4, #63	; 0x3f
    1734:	d900      	bls.n	1738 <_ZN14USBDeviceClass4sendEmPKvm+0x8c>
    1736:	243f      	movs	r4, #63	; 0x3f
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1738:	4f22      	ldr	r7, [pc, #136]	; (17c4 <_ZN14USBDeviceClass4sendEmPKvm+0x118>)
    173a:	01b3      	lsls	r3, r6, #6
    173c:	18ff      	adds	r7, r7, r3
    173e:	0022      	movs	r2, r4
    1740:	9903      	ldr	r1, [sp, #12]
    1742:	0038      	movs	r0, r7
    1744:	f001 fa9c 	bl	2c80 <memcpy>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1748:	9b00      	ldr	r3, [sp, #0]
    174a:	4a19      	ldr	r2, [pc, #100]	; (17b0 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    174c:	015b      	lsls	r3, r3, #5
    174e:	18d3      	adds	r3, r2, r3
    1750:	615f      	str	r7, [r3, #20]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1752:	6998      	ldr	r0, [r3, #24]
    1754:	04a2      	lsls	r2, r4, #18
    1756:	0c91      	lsrs	r1, r2, #18
    1758:	0b82      	lsrs	r2, r0, #14
    175a:	0392      	lsls	r2, r2, #14
    175c:	430a      	orrs	r2, r1
    175e:	619a      	str	r2, [r3, #24]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1760:	9b00      	ldr	r3, [sp, #0]
    1762:	9a02      	ldr	r2, [sp, #8]
    1764:	3308      	adds	r3, #8
    1766:	015b      	lsls	r3, r3, #5
    1768:	18d3      	adds	r3, r2, r3
    176a:	2202      	movs	r2, #2

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    176c:	2180      	movs	r1, #128	; 0x80

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    176e:	71da      	strb	r2, [r3, #7]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1770:	795a      	ldrb	r2, [r3, #5]
    1772:	4249      	negs	r1, r1
    1774:	430a      	orrs	r2, r1
    1776:	715a      	strb	r2, [r3, #5]
		usbd.epBank1AckTransferComplete(ep);

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);

		written += length;
    1778:	9b01      	ldr	r3, [sp, #4]
		len -= length;
    177a:	1b2d      	subs	r5, r5, r4
		usbd.epBank1AckTransferComplete(ep);

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);

		written += length;
    177c:	191b      	adds	r3, r3, r4
    177e:	9301      	str	r3, [sp, #4]
		len -= length;
		data = (char *)data + length;
    1780:	9b03      	ldr	r3, [sp, #12]
    1782:	191b      	adds	r3, r3, r4
    1784:	9303      	str	r3, [sp, #12]

	txLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	// Flash area
	while (len != 0)
    1786:	e7aa      	b.n	16de <_ZN14USBDeviceClass4sendEmPKvm+0x32>
    1788:	9801      	ldr	r0, [sp, #4]
    178a:	e00a      	b.n	17a2 <_ZN14USBDeviceClass4sendEmPKvm+0xf6>

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
					LastTransmitTimedOut[ep] = 1;
    178c:	2201      	movs	r2, #1
    178e:	559a      	strb	r2, [r3, r6]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1790:	9b00      	ldr	r3, [sp, #0]
    1792:	015b      	lsls	r3, r3, #5
    1794:	18ff      	adds	r7, r7, r3
    1796:	69bb      	ldr	r3, [r7, #24]
    1798:	0b9b      	lsrs	r3, r3, #14
    179a:	039b      	lsls	r3, r3, #14
    179c:	61bb      	str	r3, [r7, #24]

					// set byte count to zero, so that ZLP is sent
					// instead of stale data
					usbd.epBank1SetByteCount(ep, 0);
					return -1;
    179e:	2001      	movs	r0, #1
    17a0:	4240      	negs	r0, r0
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    17a2:	b005      	add	sp, #20
    17a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	20000bc0 	.word	0x20000bc0
    17ac:	200008d0 	.word	0x200008d0
    17b0:	20000abc 	.word	0x20000abc
    17b4:	20000084 	.word	0x20000084
    17b8:	000f4240 	.word	0x000f4240
    17bc:	00011170 	.word	0x00011170
    17c0:	20000708 	.word	0x20000708
    17c4:	20000710 	.word	0x20000710

000017c8 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    17c8:	b570      	push	{r4, r5, r6, lr}
    17ca:	000c      	movs	r4, r1
    17cc:	001d      	movs	r5, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    17ce:	4e0d      	ldr	r6, [pc, #52]	; (1804 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    17d0:	01a3      	lsls	r3, r4, #6
    17d2:	18f6      	adds	r6, r6, r3
	}
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    17d4:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    17d6:	0030      	movs	r0, r6
    17d8:	002a      	movs	r2, r5
    17da:	f001 fa51 	bl	2c80 <memcpy>
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    17de:	b2e1      	uxtb	r1, r4
    17e0:	014c      	lsls	r4, r1, #5
    17e2:	4909      	ldr	r1, [pc, #36]	; (1808 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    17e4:	4b09      	ldr	r3, [pc, #36]	; (180c <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    17e6:	1909      	adds	r1, r1, r4
    17e8:	614e      	str	r6, [r1, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    17ea:	698a      	ldr	r2, [r1, #24]
    17ec:	4013      	ands	r3, r2
    17ee:	618b      	str	r3, [r1, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    17f0:	6988      	ldr	r0, [r1, #24]
    17f2:	04ab      	lsls	r3, r5, #18
    17f4:	0c9a      	lsrs	r2, r3, #18
    17f6:	0b83      	lsrs	r3, r0, #14
    17f8:	039b      	lsls	r3, r3, #14
    17fa:	4313      	orrs	r3, r2
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    17fc:	0028      	movs	r0, r5
    17fe:	618b      	str	r3, [r1, #24]
    1800:	bd70      	pop	{r4, r5, r6, pc}
    1802:	46c0      	nop			; (mov r8, r8)
    1804:	20000710 	.word	0x20000710
    1808:	20000abc 	.word	0x20000abc
    180c:	f0003fff 	.word	0xf0003fff

00001810 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1812:	4b11      	ldr	r3, [pc, #68]	; (1858 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)

	return len;
}

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1814:	9001      	str	r0, [sp, #4]
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1816:	781b      	ldrb	r3, [r3, #0]

	return len;
}

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1818:	000f      	movs	r7, r1
    181a:	0015      	movs	r5, r2
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    181c:	2b00      	cmp	r3, #0
    181e:	d118      	bne.n	1852 <_ZN14USBDeviceClass11sendControlEPKvm+0x42>
		return length;

	if (_pack_message == true) {
    1820:	4b0e      	ldr	r3, [pc, #56]	; (185c <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    1822:	0016      	movs	r6, r2
    1824:	781c      	ldrb	r4, [r3, #0]
    1826:	2c00      	cmp	r4, #0
    1828:	d008      	beq.n	183c <_ZN14USBDeviceClass11sendControlEPKvm+0x2c>
		memcpy(&_pack_buffer[_pack_size], data, len);
    182a:	4e0d      	ldr	r6, [pc, #52]	; (1860 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    182c:	480d      	ldr	r0, [pc, #52]	; (1864 <_ZN14USBDeviceClass11sendControlEPKvm+0x54>)
    182e:	8834      	ldrh	r4, [r6, #0]
    1830:	1900      	adds	r0, r0, r4
		_pack_size += len;
    1832:	1964      	adds	r4, r4, r5

	if (_dry_run == true)
		return length;

	if (_pack_message == true) {
		memcpy(&_pack_buffer[_pack_size], data, len);
    1834:	f001 fa24 	bl	2c80 <memcpy>
		_pack_size += len;
    1838:	8034      	strh	r4, [r6, #0]
    183a:	e00a      	b.n	1852 <_ZN14USBDeviceClass11sendControlEPKvm+0x42>
		return length;
	}

 	while (len > 0)
    183c:	2e00      	cmp	r6, #0
    183e:	d008      	beq.n	1852 <_ZN14USBDeviceClass11sendControlEPKvm+0x42>
 	{
		sent = armSend(EP0, data + pos, len);
    1840:	193a      	adds	r2, r7, r4
    1842:	0033      	movs	r3, r6
    1844:	2100      	movs	r1, #0
    1846:	9801      	ldr	r0, [sp, #4]
    1848:	f7ff ffbe 	bl	17c8 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    184c:	1824      	adds	r4, r4, r0
		len -= sent;
    184e:	1a36      	subs	r6, r6, r0
		memcpy(&_pack_buffer[_pack_size], data, len);
		_pack_size += len;
		return length;
	}

 	while (len > 0)
    1850:	e7f4      	b.n	183c <_ZN14USBDeviceClass11sendControlEPKvm+0x2c>
		pos += sent;
		len -= sent;
 	}

	return length;
}
    1852:	0028      	movs	r0, r5
    1854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1856:	46c0      	nop			; (mov r8, r8)
    1858:	20000ab2 	.word	0x20000ab2
    185c:	20000ab0 	.word	0x20000ab0
    1860:	20000706 	.word	0x20000706
    1864:	20000605 	.word	0x20000605

00001868 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    1868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (maxlen < 2)
		return false;
    186a:	2000      	movs	r0, #0

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    186c:	af00      	add	r7, sp, #0
    186e:	000e      	movs	r6, r1
    1870:	1e15      	subs	r5, r2, #0
	if (maxlen < 2)
    1872:	2d01      	cmp	r5, #1
    1874:	d927      	bls.n	18c6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5e>
		return false;

	uint8_t buffer[maxlen];
    1876:	1dd3      	adds	r3, r2, #7
    1878:	466a      	mov	r2, sp
    187a:	08db      	lsrs	r3, r3, #3
    187c:	00db      	lsls	r3, r3, #3
    187e:	1ad3      	subs	r3, r2, r3
    1880:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1882:	0008      	movs	r0, r1
    1884:	f001 fabc 	bl	2e00 <strlen>
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
	if (maxlen < 2)
		return false;

	uint8_t buffer[maxlen];
    1888:	466c      	mov	r4, sp
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;
    188a:	2303      	movs	r3, #3

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    188c:	2202      	movs	r2, #2
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
    188e:	2100      	movs	r1, #0
{
	if (maxlen < 2)
		return false;

	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1890:	3001      	adds	r0, #1
    1892:	0040      	lsls	r0, r0, #1
    1894:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    1896:	7063      	strb	r3, [r4, #1]

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    1898:	42aa      	cmp	r2, r5
    189a:	d20d      	bcs.n	18b8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x50>
    189c:	7830      	ldrb	r0, [r6, #0]
    189e:	2800      	cmp	r0, #0
    18a0:	d00a      	beq.n	18b8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x50>
		buffer[i++] = *string++;
    18a2:	1c53      	adds	r3, r2, #1
    18a4:	b2db      	uxtb	r3, r3
    18a6:	3601      	adds	r6, #1
    18a8:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    18aa:	429d      	cmp	r5, r3
    18ac:	d003      	beq.n	18b6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    18ae:	3202      	adds	r2, #2
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
    18b0:	54e1      	strb	r1, [r4, r3]
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    18b2:	b2d2      	uxtb	r2, r2
    18b4:	e7f0      	b.n	1898 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x30>
		buffer[i++] = *string++;
    18b6:	002a      	movs	r2, r5
		if (i == maxlen) break;
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
    18b8:	0021      	movs	r1, r4
    18ba:	4804      	ldr	r0, [pc, #16]	; (18cc <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x64>)
    18bc:	f7ff ffa8 	bl	1810 <_ZN14USBDeviceClass11sendControlEPKvm>
    18c0:	1e43      	subs	r3, r0, #1
    18c2:	4198      	sbcs	r0, r3
    18c4:	b2c0      	uxtb	r0, r0
}
    18c6:	46bd      	mov	sp, r7
    18c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	20000ab3 	.word	0x20000ab3

000018d0 <_ZN14USBDeviceClass17sendConfigurationEm>:
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    18d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    18d2:	2700      	movs	r7, #0
	// Count and measure interfaces
	_dry_run = true;
    18d4:	2601      	movs	r6, #1
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    18d6:	b087      	sub	sp, #28
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
    18d8:	4b1e      	ldr	r3, [pc, #120]	; (1954 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    18da:	9100      	str	r1, [sp, #0]
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);
    18dc:	a902      	add	r1, sp, #8
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
    18de:	701e      	strb	r6, [r3, #0]
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    18e0:	0005      	movs	r5, r0
	uint32_t total = 0;
    18e2:	9702      	str	r7, [sp, #8]
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);
    18e4:	f7ff fc1f 	bl	1126 <_ZN14USBDeviceClass14SendInterfacesEPm>

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    18e8:	ac03      	add	r4, sp, #12
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);
    18ea:	9001      	str	r0, [sp, #4]

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    18ec:	2209      	movs	r2, #9
    18ee:	0039      	movs	r1, r7
    18f0:	0020      	movs	r0, r4
    18f2:	f001 f9ce 	bl	2c92 <memset>
    18f6:	2309      	movs	r3, #9
    18f8:	7023      	strb	r3, [r4, #0]
    18fa:	2302      	movs	r3, #2
    18fc:	7063      	strb	r3, [r4, #1]
    18fe:	339e      	adds	r3, #158	; 0x9e
    1900:	71e3      	strb	r3, [r4, #7]
    1902:	335a      	adds	r3, #90	; 0x5a
    1904:	7223      	strb	r3, [r4, #8]
    1906:	9b02      	ldr	r3, [sp, #8]
    1908:	7166      	strb	r6, [r4, #5]
    190a:	3309      	adds	r3, #9
    190c:	8063      	strh	r3, [r4, #2]
    190e:	466b      	mov	r3, sp
    1910:	791b      	ldrb	r3, [r3, #4]
    1912:	7123      	strb	r3, [r4, #4]
	_Pragma("pack()")

	//	Now send them
	_dry_run = false;
    1914:	4b0f      	ldr	r3, [pc, #60]	; (1954 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    1916:	701f      	strb	r7, [r3, #0]

	if (maxlen == sizeof(ConfigDescriptor)) {
    1918:	9b00      	ldr	r3, [sp, #0]
    191a:	2b09      	cmp	r3, #9
    191c:	d102      	bne.n	1924 <_ZN14USBDeviceClass17sendConfigurationEm+0x54>
		sendControl(&config, sizeof(ConfigDescriptor));
    191e:	001a      	movs	r2, r3
    1920:	0021      	movs	r1, r4
    1922:	e011      	b.n	1948 <_ZN14USBDeviceClass17sendConfigurationEm+0x78>
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
    1924:	4b0c      	ldr	r3, [pc, #48]	; (1958 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	}

	total = 0;

	packMessages(true);
	sendControl(&config, sizeof(ConfigDescriptor));
    1926:	2209      	movs	r2, #9
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
    1928:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    192a:	4e0c      	ldr	r6, [pc, #48]	; (195c <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	}

	total = 0;

	packMessages(true);
	sendControl(&config, sizeof(ConfigDescriptor));
    192c:	0021      	movs	r1, r4
    192e:	0028      	movs	r0, r5
	if (maxlen == sizeof(ConfigDescriptor)) {
		sendControl(&config, sizeof(ConfigDescriptor));
		return true;
	}

	total = 0;
    1930:	9702      	str	r7, [sp, #8]

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
    1932:	8037      	strh	r7, [r6, #0]
	}

	total = 0;

	packMessages(true);
	sendControl(&config, sizeof(ConfigDescriptor));
    1934:	f7ff ff6c 	bl	1810 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    1938:	a902      	add	r1, sp, #8
    193a:	0028      	movs	r0, r5
    193c:	f7ff fbf3 	bl	1126 <_ZN14USBDeviceClass14SendInterfacesEPm>
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
	} else {
		_pack_message = false;
    1940:	4b05      	ldr	r3, [pc, #20]	; (1958 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    1942:	8832      	ldrh	r2, [r6, #0]
    1944:	4906      	ldr	r1, [pc, #24]	; (1960 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
	} else {
		_pack_message = false;
    1946:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    1948:	0028      	movs	r0, r5
    194a:	f7ff ff61 	bl	1810 <_ZN14USBDeviceClass11sendControlEPKvm>
	sendControl(&config, sizeof(ConfigDescriptor));
	SendInterfaces(&total);
	packMessages(false);

	return true;
}
    194e:	2001      	movs	r0, #1
    1950:	b007      	add	sp, #28
    1952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1954:	20000ab2 	.word	0x20000ab2
    1958:	20000ab0 	.word	0x20000ab0
    195c:	20000706 	.word	0x20000706
    1960:	20000605 	.word	0x20000605

00001964 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    1964:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    1966:	78ce      	ldrb	r6, [r1, #3]

	return true;
}

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    1968:	b08a      	sub	sp, #40	; 0x28
    196a:	0005      	movs	r5, r0
    196c:	000c      	movs	r4, r1
	uint8_t desc_length = 0;
	bool _cdcComposite;
	int ret;
	const uint8_t *desc_addr = 0;

	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    196e:	2e02      	cmp	r6, #2
    1970:	d107      	bne.n	1982 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e>
	{
		return USBDevice.sendConfiguration(setup.wLength);
    1972:	88c9      	ldrh	r1, [r1, #6]
    1974:	4821      	ldr	r0, [pc, #132]	; (19fc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x98>)
    1976:	f7ff ffab 	bl	18d0 <_ZN14USBDeviceClass17sendConfigurationEm>
    197a:	1e43      	subs	r3, r0, #1
    197c:	4198      	sbcs	r0, r3
    197e:	b2c0      	uxtb	r0, r0
    1980:	e03a      	b.n	19f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
	}

#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    1982:	f000 ff4b 	bl	281c <_Z12PluggableUSBv>
    1986:	0021      	movs	r1, r4
    1988:	f000 ff19 	bl	27be <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    198c:	2800      	cmp	r0, #0
    198e:	d003      	beq.n	1998 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x34>
		return (ret > 0 ? true : false);
    1990:	17c3      	asrs	r3, r0, #31
    1992:	1a18      	subs	r0, r3, r0
    1994:	0fc0      	lsrs	r0, r0, #31
    1996:	e02f      	b.n	19f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
	}
#endif

	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    1998:	2e01      	cmp	r6, #1
    199a:	d104      	bne.n	19a6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		if (setup.wLength == 8)
			_cdcComposite = 1;

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;

		if (*desc_addr > setup.wLength) {
    199c:	88e2      	ldrh	r2, [r4, #6]
    199e:	4918      	ldr	r1, [pc, #96]	; (1a00 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x9c>)
    19a0:	2a11      	cmp	r2, #17
    19a2:	d824      	bhi.n	19ee <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8a>
    19a4:	e020      	b.n	19e8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
			desc_length = setup.wLength;
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    19a6:	2e03      	cmp	r6, #3
    19a8:	d126      	bne.n	19f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
	{
		if (setup.wValueL == 0) {
    19aa:	78a3      	ldrb	r3, [r4, #2]
    19ac:	2b00      	cmp	r3, #0
    19ae:	d104      	bne.n	19ba <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x56>
#endif
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
    19b0:	88e2      	ldrh	r2, [r4, #6]
    19b2:	4914      	ldr	r1, [pc, #80]	; (1a04 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa0>)
    19b4:	2a03      	cmp	r2, #3
    19b6:	d917      	bls.n	19e8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
    19b8:	e019      	b.n	19ee <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8a>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
	{
		if (setup.wValueL == 0) {
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
		}
		else if (setup.wValueL == IPRODUCT) {
    19ba:	2b02      	cmp	r3, #2
    19bc:	d102      	bne.n	19c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x60>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    19be:	79a2      	ldrb	r2, [r4, #6]
    19c0:	4911      	ldr	r1, [pc, #68]	; (1a08 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa4>)
    19c2:	e003      	b.n	19cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		}
		else if (setup.wValueL == IMANUFACTURER) {
    19c4:	2b01      	cmp	r3, #1
    19c6:	d105      	bne.n	19d4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    19c8:	79a2      	ldrb	r2, [r4, #6]
    19ca:	4910      	ldr	r1, [pc, #64]	; (1a0c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa8>)
    19cc:	0028      	movs	r0, r5
    19ce:	f7ff ff4b 	bl	1868 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    19d2:	e011      	b.n	19f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
		}
		else if (setup.wValueL == ISERIAL) {
    19d4:	2b03      	cmp	r3, #3
    19d6:	d10f      	bne.n	19f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
#ifdef PLUGGABLE_USB_ENABLED
			char name[ISERIAL_MAX_LEN];
			PluggableUSB().getShortName(name);
    19d8:	f000 ff20 	bl	281c <_Z12PluggableUSBv>
    19dc:	a901      	add	r1, sp, #4
    19de:	f000 fefe 	bl	27de <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    19e2:	79a2      	ldrb	r2, [r4, #6]
    19e4:	a901      	add	r1, sp, #4
    19e6:	e7f1      	b.n	19cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
			desc_length = setup.wLength;
    19e8:	b2d2      	uxtb	r2, r2

	if (desc_addr == 0) {
		return false;
	}

	if (desc_length == 0) {
    19ea:	2a00      	cmp	r2, #0
    19ec:	d100      	bne.n	19f0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8c>
		desc_length = *desc_addr;
    19ee:	780a      	ldrb	r2, [r1, #0]
	}

	sendControl(desc_addr, desc_length);
    19f0:	0028      	movs	r0, r5
    19f2:	f7ff ff0d 	bl	1810 <_ZN14USBDeviceClass11sendControlEPKvm>

	return true;
    19f6:	2001      	movs	r0, #1
}
    19f8:	b00a      	add	sp, #40	; 0x28
    19fa:	bd70      	pop	{r4, r5, r6, pc}
    19fc:	20000ab3 	.word	0x20000ab3
    1a00:	00002ec6 	.word	0x00002ec6
    1a04:	00002ec2 	.word	0x00002ec2
    1a08:	00002ed8 	.word	0x00002ed8
    1a0c:	00002eb8 	.word	0x00002eb8

00001a10 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    1a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1a12:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    1a14:	7848      	ldrb	r0, [r1, #1]
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    1a16:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    1a18:	280b      	cmp	r0, #11
    1a1a:	d83d      	bhi.n	1a98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x88>
    1a1c:	f000 ff68 	bl	28f0 <__gnu_thumb1_case_uqi>
    1a20:	273c1606 	.word	0x273c1606
    1a24:	703e383c 	.word	0x703e383c
    1a28:	67644642 	.word	0x67644642
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    1a2c:	7809      	ldrb	r1, [r1, #0]
    1a2e:	aa01      	add	r2, sp, #4
    1a30:	2900      	cmp	r1, #0
    1a32:	d106      	bne.n	1a42 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    1a34:	2302      	movs	r3, #2
		if (setup.bmRequestType == 0)  // device
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
    1a36:	7011      	strb	r1, [r2, #0]
    1a38:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    1a3a:	0030      	movs	r0, r6
    1a3c:	f7ff fec4 	bl	17c8 <_ZN14USBDeviceClass7armSendEmPKvm>
    1a40:	e02a      	b.n	1a98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x88>
		// if( setup.bmRequestType == 2 ) // Endpoint:
		else
		{
			// Send the endpoint status
			// Check if the endpoint if currently halted
			uint8_t buff[] = { 0, 0 };
    1a42:	2300      	movs	r3, #0
    1a44:	7013      	strb	r3, [r2, #0]
    1a46:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    1a48:	4b2e      	ldr	r3, [pc, #184]	; (1b04 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    1a4a:	e007      	b.n	1a5c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x4c>
			return true;
		}

	case CLEAR_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1a4c:	788a      	ldrb	r2, [r1, #2]
    1a4e:	2300      	movs	r3, #0
    1a50:	2a01      	cmp	r2, #1
    1a52:	d109      	bne.n	1a68 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x58>
		{
			// Enable remote wake-up and send a ZLP
			uint8_t buff[] = { 0, 0 };
    1a54:	aa01      	add	r2, sp, #4
    1a56:	7013      	strb	r3, [r2, #0]
    1a58:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1a5a:	4b2b      	ldr	r3, [pc, #172]	; (1b08 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    1a5c:	781b      	ldrb	r3, [r3, #0]
    1a5e:	2b01      	cmp	r3, #1
    1a60:	d100      	bne.n	1a64 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x54>
				buff[0] = 1;
    1a62:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1a64:	2302      	movs	r3, #2
    1a66:	e01f      	b.n	1aa8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x98>
			return true;
		}
		else // if( setup.wValueL == 0) // ENDPOINTHALT
		{
			isEndpointHalt = 0;
    1a68:	4a26      	ldr	r2, [pc, #152]	; (1b04 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    1a6a:	7013      	strb	r3, [r2, #0]
    1a6c:	e042      	b.n	1af4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>
			return true;
		}

	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1a6e:	788c      	ldrb	r4, [r1, #2]
    1a70:	2c01      	cmp	r4, #1
    1a72:	d106      	bne.n	1a82 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x72>
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
			uint8_t buff[] = { 0 };
    1a74:	2100      	movs	r1, #0
	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    1a76:	4b24      	ldr	r3, [pc, #144]	; (1b08 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    1a78:	aa01      	add	r2, sp, #4
	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    1a7a:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1a7c:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1a7e:	0023      	movs	r3, r4
    1a80:	e7db      	b.n	1a3a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
			return true;
		}
		if (setup.wValueL == 0) // ENDPOINTHALT
    1a82:	2c00      	cmp	r4, #0
    1a84:	d104      	bne.n	1a90 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
		{
			// Halt endpoint
			isEndpointHalt = 1;
    1a86:	2001      	movs	r0, #1
    1a88:	4b1e      	ldr	r3, [pc, #120]	; (1b04 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    1a8a:	4a20      	ldr	r2, [pc, #128]	; (1b0c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1a8c:	7018      	strb	r0, [r3, #0]
    1a8e:	e026      	b.n	1ade <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xce>
			sendZlp(0);
			return true;
		}

	case SET_ADDRESS:
		setAddress(setup.wValueL);
    1a90:	78a9      	ldrb	r1, [r5, #2]
    1a92:	0030      	movs	r0, r6
    1a94:	f7ff fc12 	bl	12bc <_ZN14USBDeviceClass10setAddressEm>
		return true;
    1a98:	2001      	movs	r0, #1
    1a9a:	e032      	b.n	1b02 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf2>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);
    1a9c:	0030      	movs	r0, r6
    1a9e:	f7ff ff61 	bl	1964 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1aa2:	e02e      	b.n	1b02 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf2>

	case SET_DESCRIPTOR:
		return false;

	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
    1aa4:	2301      	movs	r3, #1
    1aa6:	4a1a      	ldr	r2, [pc, #104]	; (1b10 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    1aa8:	2100      	movs	r1, #0
    1aaa:	e7c6      	b.n	1a3a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		return true;

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1aac:	780b      	ldrb	r3, [r1, #0]
			#endif

			sendZlp(0);
			return true;
		} else {
			return false;
    1aae:	2000      	movs	r0, #0
	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
		return true;

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1ab0:	06db      	lsls	r3, r3, #27
    1ab2:	d126      	bne.n	1b02 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf2>

			initEndpoints();
    1ab4:	0030      	movs	r0, r6
    1ab6:	f7ff fcd5 	bl	1464 <_ZN14USBDeviceClass13initEndpointsEv>

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    1aba:	202a      	movs	r0, #42	; 0x2a
    1abc:	2402      	movs	r4, #2
			_usbConfiguration = setup.wValueL;
    1abe:	78aa      	ldrb	r2, [r5, #2]
    1ac0:	4b13      	ldr	r3, [pc, #76]	; (1b10 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    1ac2:	30ff      	adds	r0, #255	; 0xff
    1ac4:	601a      	str	r2, [r3, #0]
    1ac6:	4a11      	ldr	r2, [pc, #68]	; (1b0c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1ac8:	6813      	ldr	r3, [r2, #0]
    1aca:	5c19      	ldrb	r1, [r3, r0]
    1acc:	4321      	orrs	r1, r4
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1ace:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    1ad0:	5419      	strb	r1, [r3, r0]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1ad2:	34ff      	adds	r4, #255	; 0xff
    1ad4:	5d19      	ldrb	r1, [r3, r4]
    1ad6:	3829      	subs	r0, #41	; 0x29
    1ad8:	38ff      	subs	r0, #255	; 0xff
    1ada:	4301      	orrs	r1, r0
    1adc:	5519      	strb	r1, [r3, r4]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1ade:	6993      	ldr	r3, [r2, #24]
    1ae0:	0b9b      	lsrs	r3, r3, #14
    1ae2:	039b      	lsls	r3, r3, #14
    1ae4:	6193      	str	r3, [r2, #24]
			usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
			usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
			#endif

			sendZlp(0);
			return true;
    1ae6:	e00c      	b.n	1b02 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf2>
		} else {
			return false;
		}

	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
    1ae8:	2301      	movs	r3, #1
    1aea:	4a0a      	ldr	r2, [pc, #40]	; (1b14 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1aec:	e7dc      	b.n	1aa8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x98>
		return true;

	case SET_INTERFACE:
		_usbSetInterface = setup.wValueL;
    1aee:	788a      	ldrb	r2, [r1, #2]
    1af0:	4b08      	ldr	r3, [pc, #32]	; (1b14 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1af2:	601a      	str	r2, [r3, #0]
    1af4:	4a05      	ldr	r2, [pc, #20]	; (1b0c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1af6:	6993      	ldr	r3, [r2, #24]
    1af8:	0b9b      	lsrs	r3, r3, #14
    1afa:	039b      	lsls	r3, r3, #14
    1afc:	6193      	str	r3, [r2, #24]
    1afe:	e7cb      	b.n	1a98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x88>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);

	case SET_DESCRIPTOR:
		return false;
    1b00:	2000      	movs	r0, #0
		return true;

	default:
		return true;
	}
}
    1b02:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    1b04:	20000604 	.word	0x20000604
    1b08:	20000ab1 	.word	0x20000ab1
    1b0c:	20000abc 	.word	0x20000abc
    1b10:	20000bc0 	.word	0x20000bc0
    1b14:	20000ab4 	.word	0x20000ab4

00001b18 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    1b18:	4b4b      	ldr	r3, [pc, #300]	; (1c48 <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
		return true;
	}
}

void USBDeviceClass::ISRHandler()
{
    1b1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	if (_pack_message == true) {
    1b1c:	781d      	ldrb	r5, [r3, #0]
		return true;
	}
}

void USBDeviceClass::ISRHandler()
{
    1b1e:	0007      	movs	r7, r0

	if (_pack_message == true) {
    1b20:	2d00      	cmp	r5, #0
    1b22:	d000      	beq.n	1b26 <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    1b24:	e08f      	b.n	1c46 <_ZN14USBDeviceClass10ISRHandlerEv+0x12e>
	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    1b26:	4c49      	ldr	r4, [pc, #292]	; (1c4c <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    1b28:	6823      	ldr	r3, [r4, #0]
    1b2a:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    1b2c:	071b      	lsls	r3, r3, #28
    1b2e:	d50d      	bpl.n	1b4c <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
    1b30:	0028      	movs	r0, r5
    1b32:	f7ff f909 	bl	d48 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1b36:	6822      	ldr	r2, [r4, #0]
    1b38:	2010      	movs	r0, #16
    1b3a:	0011      	movs	r1, r2
    1b3c:	31ff      	adds	r1, #255	; 0xff
    1b3e:	7a8b      	ldrb	r3, [r1, #10]
    1b40:	4303      	orrs	r3, r0
    1b42:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    1b44:	4b42      	ldr	r3, [pc, #264]	; (1c50 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    1b46:	601d      	str	r5, [r3, #0]
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    1b48:	2308      	movs	r3, #8
    1b4a:	8393      	strh	r3, [r2, #28]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1b4c:	6823      	ldr	r3, [r4, #0]
    1b4e:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    1b50:	0752      	lsls	r2, r2, #29
    1b52:	d51f      	bpl.n	1b94 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    1b54:	2204      	movs	r2, #4
    1b56:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    1b58:	4a3e      	ldr	r2, [pc, #248]	; (1c54 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    1b5a:	7813      	ldrb	r3, [r2, #0]
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d00a      	beq.n	1b76 <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
			txLEDPulse--;
    1b60:	7813      	ldrb	r3, [r2, #0]
    1b62:	3b01      	subs	r3, #1
    1b64:	b2db      	uxtb	r3, r3
    1b66:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    1b68:	7813      	ldrb	r3, [r2, #0]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d103      	bne.n	1b76 <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
				digitalWrite(PIN_LED_TXL, HIGH);
    1b6e:	2101      	movs	r1, #1
    1b70:	201a      	movs	r0, #26
    1b72:	f000 f9f7 	bl	1f64 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1b76:	4a38      	ldr	r2, [pc, #224]	; (1c58 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    1b78:	7813      	ldrb	r3, [r2, #0]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d00a      	beq.n	1b94 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
			rxLEDPulse--;
    1b7e:	7813      	ldrb	r3, [r2, #0]
    1b80:	3b01      	subs	r3, #1
    1b82:	b2db      	uxtb	r3, r3
    1b84:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1b86:	7813      	ldrb	r3, [r2, #0]
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d103      	bne.n	1b94 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
				digitalWrite(PIN_LED_RXL, HIGH);
    1b8c:	2101      	movs	r1, #1
    1b8e:	2019      	movs	r0, #25
    1b90:	f000 f9e8 	bl	1f64 <digitalWrite>
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1b94:	6823      	ldr	r3, [r4, #0]
    1b96:	33ff      	adds	r3, #255	; 0xff
    1b98:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    1b9a:	06d2      	lsls	r2, r2, #27
    1b9c:	d526      	bpl.n	1bec <_ZN14USBDeviceClass10ISRHandlerEv+0xd4>
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    1b9e:	2210      	movs	r2, #16
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1ba0:	2140      	movs	r1, #64	; 0x40
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    1ba2:	721a      	strb	r2, [r3, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1ba4:	795a      	ldrb	r2, [r3, #5]
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
			// Standard Requests
			ok = handleStandardSetup(*setup);
    1ba6:	0038      	movs	r0, r7
    1ba8:	430a      	orrs	r2, r1
    1baa:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    1bac:	2360      	movs	r3, #96	; 0x60
    1bae:	492b      	ldr	r1, [pc, #172]	; (1c5c <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    1bb0:	780a      	ldrb	r2, [r1, #0]
    1bb2:	421a      	tst	r2, r3
    1bb4:	d102      	bne.n	1bbc <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
			// Standard Requests
			ok = handleStandardSetup(*setup);
    1bb6:	f7ff ff2b 	bl	1a10 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
    1bba:	e001      	b.n	1bc0 <_ZN14USBDeviceClass10ISRHandlerEv+0xa8>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
    1bbc:	f7ff fba0 	bl	1300 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
		}

		if (ok) {
    1bc0:	2800      	cmp	r0, #0
    1bc2:	d006      	beq.n	1bd2 <_ZN14USBDeviceClass10ISRHandlerEv+0xba>

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1bc4:	2180      	movs	r1, #128	; 0x80
    1bc6:	6823      	ldr	r3, [r4, #0]
    1bc8:	4249      	negs	r1, r1
    1bca:	33ff      	adds	r3, #255	; 0xff
    1bcc:	799a      	ldrb	r2, [r3, #6]
    1bce:	430a      	orrs	r2, r1
    1bd0:	e001      	b.n	1bd6 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
{
	// TODO: test
	// TODO: use .bit. notation

	// Stall endpoint
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1bd2:	2220      	movs	r2, #32
    1bd4:	4b22      	ldr	r3, [pc, #136]	; (1c60 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    1bd6:	719a      	strb	r2, [r3, #6]
	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    1bd8:	6823      	ldr	r3, [r4, #0]
    1bda:	33ff      	adds	r3, #255	; 0xff
    1bdc:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1bde:	0652      	lsls	r2, r2, #25
    1be0:	d504      	bpl.n	1bec <_ZN14USBDeviceClass10ISRHandlerEv+0xd4>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    1be2:	2140      	movs	r1, #64	; 0x40
    1be4:	7219      	strb	r1, [r3, #8]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1be6:	7a5a      	ldrb	r2, [r3, #9]
    1be8:	430a      	orrs	r2, r1
    1bea:	725a      	strb	r2, [r3, #9]
	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    1bec:	6823      	ldr	r3, [r4, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    1bee:	2600      	movs	r6, #0
    1bf0:	8c1d      	ldrh	r5, [r3, #32]
    1bf2:	2301      	movs	r3, #1
    1bf4:	439d      	bics	r5, r3
    1bf6:	b2ed      	uxtb	r5, r5
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    1bf8:	9301      	str	r3, [sp, #4]
    1bfa:	b2f1      	uxtb	r1, r6

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
	while (ept_int != 0)
    1bfc:	2d00      	cmp	r5, #0
    1bfe:	d022      	beq.n	1c46 <_ZN14USBDeviceClass10ISRHandlerEv+0x12e>
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    1c00:	002b      	movs	r3, r5
    1c02:	4133      	asrs	r3, r6
    1c04:	9a01      	ldr	r2, [sp, #4]
    1c06:	4213      	tst	r3, r2
    1c08:	d015      	beq.n	1c36 <_ZN14USBDeviceClass10ISRHandlerEv+0x11e>

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1c0a:	0033      	movs	r3, r6
    1c0c:	6822      	ldr	r2, [r4, #0]
    1c0e:	3308      	adds	r3, #8
    1c10:	015b      	lsls	r3, r3, #5
    1c12:	18d3      	adds	r3, r2, r3
    1c14:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    1c16:	07d2      	lsls	r2, r2, #31
    1c18:	d402      	bmi.n	1c20 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1c1a:	79db      	ldrb	r3, [r3, #7]
    1c1c:	079b      	lsls	r3, r3, #30
    1c1e:	d507      	bpl.n	1c30 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
    1c20:	4b10      	ldr	r3, [pc, #64]	; (1c64 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    1c22:	00b2      	lsls	r2, r6, #2
    1c24:	58d0      	ldr	r0, [r2, r3]
    1c26:	2800      	cmp	r0, #0
    1c28:	d009      	beq.n	1c3e <_ZN14USBDeviceClass10ISRHandlerEv+0x126>
					epHandlers[i]->handleEndpoint();
    1c2a:	6803      	ldr	r3, [r0, #0]
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	4798      	blx	r3
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    1c30:	9b01      	ldr	r3, [sp, #4]
    1c32:	40b3      	lsls	r3, r6
    1c34:	439d      	bics	r5, r3
    1c36:	3601      	adds	r6, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    1c38:	2e09      	cmp	r6, #9
    1c3a:	d1de      	bne.n	1bfa <_ZN14USBDeviceClass10ISRHandlerEv+0xe2>
    1c3c:	e003      	b.n	1c46 <_ZN14USBDeviceClass10ISRHandlerEv+0x12e>
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
    1c3e:	0038      	movs	r0, r7
    1c40:	f7ff fa88 	bl	1154 <_ZN14USBDeviceClass14handleEndpointEh>
    1c44:	e7f4      	b.n	1c30 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
		}
		i++;
		if (i > USB_EPT_NUM)
			break;  // fire exit
	}
}
    1c46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1c48:	20000ab0 	.word	0x20000ab0
    1c4c:	20000abc 	.word	0x20000abc
    1c50:	20000bc0 	.word	0x20000bc0
    1c54:	200008d0 	.word	0x200008d0
    1c58:	20000ab8 	.word	0x20000ab8
    1c5c:	200008d4 	.word	0x200008d4
    1c60:	410050ff 	.word	0x410050ff
    1c64:	20000a94 	.word	0x20000a94

00001c68 <UDD_Handler>:
static char isEndpointHalt = 0;

extern void (*gpf_isr)(void);

// USB_Handler ISR
extern "C" void UDD_Handler(void) {
    1c68:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1c6a:	4802      	ldr	r0, [pc, #8]	; (1c74 <UDD_Handler+0xc>)
    1c6c:	f7ff ff54 	bl	1b18 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1c70:	bd10      	pop	{r4, pc}
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	20000ab3 	.word	0x20000ab3

00001c78 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:

typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1c78:	4a01      	ldr	r2, [pc, #4]	; (1c80 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    1c7a:	4b02      	ldr	r3, [pc, #8]	; (1c84 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    1c7c:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1c7e:	4770      	bx	lr
    1c80:	41005000 	.word	0x41005000
    1c84:	20000abc 	.word	0x20000abc

00001c88 <init>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    1c88:	21fa      	movs	r1, #250	; 0xfa
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1c8a:	4b33      	ldr	r3, [pc, #204]	; (1d58 <init+0xd0>)
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz.
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    1c8c:	b510      	push	{r4, lr}
    1c8e:	6818      	ldr	r0, [r3, #0]
    1c90:	0089      	lsls	r1, r1, #2
    1c92:	f000 fe37 	bl	2904 <__aeabi_uidiv>
    1c96:	4b31      	ldr	r3, [pc, #196]	; (1d5c <init+0xd4>)
    1c98:	3801      	subs	r0, #1
    1c9a:	4298      	cmp	r0, r3
    1c9c:	d824      	bhi.n	1ce8 <init+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    1c9e:	4930      	ldr	r1, [pc, #192]	; (1d60 <init+0xd8>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1ca0:	4a30      	ldr	r2, [pc, #192]	; (1d64 <init+0xdc>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    1ca2:	6048      	str	r0, [r1, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1ca4:	20c0      	movs	r0, #192	; 0xc0
    1ca6:	6a13      	ldr	r3, [r2, #32]
    1ca8:	0600      	lsls	r0, r0, #24
    1caa:	021b      	lsls	r3, r3, #8
    1cac:	0a1b      	lsrs	r3, r3, #8
    1cae:	4303      	orrs	r3, r0
    1cb0:	6213      	str	r3, [r2, #32]
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1cb2:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1cb4:	2307      	movs	r3, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1cb6:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1cb8:	600b      	str	r3, [r1, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1cba:	2180      	movs	r1, #128	; 0x80
    1cbc:	6a13      	ldr	r3, [r2, #32]
    1cbe:	0609      	lsls	r1, r1, #24
    1cc0:	021b      	lsls	r3, r3, #8
    1cc2:	0a1b      	lsrs	r3, r3, #8
    1cc4:	430b      	orrs	r3, r1
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    1cc6:	21fc      	movs	r1, #252	; 0xfc
    1cc8:	6213      	str	r3, [r2, #32]
    1cca:	4b27      	ldr	r3, [pc, #156]	; (1d68 <init+0xe0>)
    1ccc:	6a1a      	ldr	r2, [r3, #32]
    1cce:	430a      	orrs	r2, r1

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1cd0:	21fc      	movs	r1, #252	; 0xfc
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    1cd2:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1cd4:	6a1a      	ldr	r2, [r3, #32]
    1cd6:	0189      	lsls	r1, r1, #6
    1cd8:	430a      	orrs	r2, r1

  // ATSAMR, for example, doesn't have a DAC
#ifdef PM_APBCMASK_DAC
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1cda:	21a0      	movs	r1, #160	; 0xa0

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1cdc:	621a      	str	r2, [r3, #32]

  // ATSAMR, for example, doesn't have a DAC
#ifdef PM_APBCMASK_DAC
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1cde:	6a1a      	ldr	r2, [r3, #32]
    1ce0:	02c9      	lsls	r1, r1, #11
    1ce2:	430a      	orrs	r2, r1
    1ce4:	621a      	str	r2, [r3, #32]
    1ce6:	e000      	b.n	1cea <init+0x62>
    1ce8:	e7fe      	b.n	1ce8 <init+0x60>
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    1cea:	0020      	movs	r0, r4
    1cec:	2100      	movs	r1, #0
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1cee:	3401      	adds	r4, #1
  {
    pinMode( ul, INPUT ) ;
    1cf0:	f000 f8fc 	bl	1eec <pinMode>
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1cf4:	2c14      	cmp	r4, #20
    1cf6:	d1f8      	bne.n	1cea <init+0x62>
    pinMode( ul, INPUT ) ;
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1cf8:	4a1c      	ldr	r2, [pc, #112]	; (1d6c <init+0xe4>)
    1cfa:	7853      	ldrb	r3, [r2, #1]
    1cfc:	4c1b      	ldr	r4, [pc, #108]	; (1d6c <init+0xe4>)
    1cfe:	b25b      	sxtb	r3, r3
    1d00:	2b00      	cmp	r3, #0
    1d02:	dbfa      	blt.n	1cfa <init+0x72>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1d04:	4b1a      	ldr	r3, [pc, #104]	; (1d70 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1d06:	491b      	ldr	r1, [pc, #108]	; (1d74 <init+0xec>)

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1d08:	8063      	strh	r3, [r4, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1d0a:	7e4b      	ldrb	r3, [r1, #25]
    1d0c:	4a19      	ldr	r2, [pc, #100]	; (1d74 <init+0xec>)
    1d0e:	09db      	lsrs	r3, r3, #7
    1d10:	2b01      	cmp	r3, #1
    1d12:	d0fa      	beq.n	1d0a <init+0x82>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    1d14:	23e4      	movs	r3, #228	; 0xe4
    1d16:	00db      	lsls	r3, r3, #3
    1d18:	8093      	strh	r3, [r2, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1d1a:	233f      	movs	r3, #63	; 0x3f
    1d1c:	70d3      	strb	r3, [r2, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1d1e:	7e53      	ldrb	r3, [r2, #25]
    1d20:	4914      	ldr	r1, [pc, #80]	; (1d74 <init+0xec>)
    1d22:	09db      	lsrs	r3, r3, #7
    1d24:	2b01      	cmp	r3, #1
    1d26:	d0fa      	beq.n	1d1e <init+0x96>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1d28:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1d2a:	2000      	movs	r0, #0

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1d2c:	015b      	lsls	r3, r3, #5
    1d2e:	610b      	str	r3, [r1, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1d30:	7088      	strb	r0, [r1, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1d32:	f000 f837 	bl	1da4 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    1d36:	7863      	ldrb	r3, [r4, #1]
    1d38:	b25b      	sxtb	r3, r3
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	dbfb      	blt.n	1d36 <init+0xae>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1d3e:	4a0e      	ldr	r2, [pc, #56]	; (1d78 <init+0xf0>)
    1d40:	4b0a      	ldr	r3, [pc, #40]	; (1d6c <init+0xe4>)
    1d42:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1d44:	4a0d      	ldr	r2, [pc, #52]	; (1d7c <init+0xf4>)
    1d46:	79d3      	ldrb	r3, [r2, #7]
    1d48:	09db      	lsrs	r3, r3, #7
    1d4a:	2b01      	cmp	r3, #1
    1d4c:	d0fb      	beq.n	1d46 <init+0xbe>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    1d4e:	2241      	movs	r2, #65	; 0x41
    1d50:	4b0a      	ldr	r3, [pc, #40]	; (1d7c <init+0xf4>)
    1d52:	705a      	strb	r2, [r3, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
#endif

}
    1d54:	bd10      	pop	{r4, pc}
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	20000084 	.word	0x20000084
    1d5c:	00ffffff 	.word	0x00ffffff
    1d60:	e000e010 	.word	0xe000e010
    1d64:	e000ed00 	.word	0xe000ed00
    1d68:	40000400 	.word	0x40000400
    1d6c:	40000c00 	.word	0x40000c00
    1d70:	0000401e 	.word	0x0000401e
    1d74:	42004000 	.word	0x42004000
    1d78:	00004021 	.word	0x00004021
    1d7c:	42004800 	.word	0x42004800

00001d80 <mapResolution>:
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    return value;
    1d80:	0003      	movs	r3, r0
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    1d82:	4291      	cmp	r1, r2
    1d84:	d006      	beq.n	1d94 <mapResolution+0x14>
    return value;
  }
  if (from > to) {
    1d86:	d902      	bls.n	1d8e <mapResolution+0xe>
    return value >> (from-to);
    1d88:	1a8a      	subs	r2, r1, r2
    1d8a:	40d3      	lsrs	r3, r2
    1d8c:	e002      	b.n	1d94 <mapResolution+0x14>
  }
  return value << (to-from);
    1d8e:	0003      	movs	r3, r0
    1d90:	1a52      	subs	r2, r2, r1
    1d92:	4093      	lsls	r3, r2
}
    1d94:	0018      	movs	r0, r3
    1d96:	4770      	bx	lr

00001d98 <analogWriteResolution>:
  syncADC();
}

void analogWriteResolution(int res)
{
  _writeResolution = res;
    1d98:	4b01      	ldr	r3, [pc, #4]	; (1da0 <analogWriteResolution+0x8>)
    1d9a:	6018      	str	r0, [r3, #0]
}
    1d9c:	4770      	bx	lr
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	2000008c 	.word	0x2000008c

00001da4 <analogReference>:
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    1da4:	b510      	push	{r4, lr}
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1da6:	4c15      	ldr	r4, [pc, #84]	; (1dfc <analogReference+0x58>)
    1da8:	4a14      	ldr	r2, [pc, #80]	; (1dfc <analogReference+0x58>)
    1daa:	7e61      	ldrb	r1, [r4, #25]
    1dac:	0013      	movs	r3, r2
    1dae:	09c9      	lsrs	r1, r1, #7
    1db0:	2901      	cmp	r1, #1
    1db2:	d0f9      	beq.n	1da8 <analogReference+0x4>
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
  syncADC();
  switch (mode)
    1db4:	3801      	subs	r0, #1
    1db6:	2804      	cmp	r0, #4
    1db8:	d813      	bhi.n	1de2 <analogReference+0x3e>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1dba:	6919      	ldr	r1, [r3, #16]
    1dbc:	4a10      	ldr	r2, [pc, #64]	; (1e00 <analogReference+0x5c>)
    1dbe:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1dc0:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1dc2:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1dc4:	785a      	ldrb	r2, [r3, #1]
    1dc6:	438a      	bics	r2, r1
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
  syncADC();
  switch (mode)
    1dc8:	f000 fd92 	bl	28f0 <__gnu_thumb1_case_uqi>
    1dcc:	07090503 	.word	0x07090503
    1dd0:	03          	.byte	0x03
    1dd1:	00          	.byte	0x00
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1dd2:	390e      	subs	r1, #14
    1dd4:	e002      	b.n	1ddc <analogReference+0x38>
      break;

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1dd6:	390c      	subs	r1, #12
    1dd8:	e000      	b.n	1ddc <analogReference+0x38>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1dda:	390d      	subs	r1, #13
    1ddc:	430a      	orrs	r2, r1
    1dde:	705a      	strb	r2, [r3, #1]
      break;
    1de0:	e00a      	b.n	1df8 <analogReference+0x54>

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1de2:	21f0      	movs	r1, #240	; 0xf0
    1de4:	6913      	ldr	r3, [r2, #16]
    1de6:	0509      	lsls	r1, r1, #20
    1de8:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1dea:	210f      	movs	r1, #15
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1dec:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1dee:	7853      	ldrb	r3, [r2, #1]
    1df0:	438b      	bics	r3, r1
    1df2:	390d      	subs	r1, #13
    1df4:	430b      	orrs	r3, r1
    1df6:	7053      	strb	r3, [r2, #1]
      break;
  }
}
    1df8:	bd10      	pop	{r4, pc}
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	42004000 	.word	0x42004000
    1e00:	f0ffffff 	.word	0xf0ffffff

00001e04 <analogRead>:

uint32_t analogRead(uint32_t pin)
{
    1e04:	b510      	push	{r4, lr}
    1e06:	1e04      	subs	r4, r0, #0
  uint32_t valueRead = 0;

#if defined(PIN_A6)
  if (pin == 6) {
    1e08:	2c06      	cmp	r4, #6
    1e0a:	d005      	beq.n	1e18 <analogRead+0x14>
    pin = PIN_A6;
  } else
#endif
#if defined(PIN_A7)
  if (pin == 7) {
    1e0c:	2807      	cmp	r0, #7
    1e0e:	d005      	beq.n	1e1c <analogRead+0x18>
    pin = PIN_A7;
  } else 
#endif
  if (pin <= 5) {
    1e10:	2805      	cmp	r0, #5
    1e12:	d804      	bhi.n	1e1e <analogRead+0x1a>
    pin += A0;
    1e14:	340e      	adds	r4, #14
    1e16:	e002      	b.n	1e1e <analogRead+0x1a>
{
  uint32_t valueRead = 0;

#if defined(PIN_A6)
  if (pin == 6) {
    pin = PIN_A6;
    1e18:	242c      	movs	r4, #44	; 0x2c
    1e1a:	e000      	b.n	1e1e <analogRead+0x1a>
  } else
#endif
#if defined(PIN_A7)
  if (pin == 7) {
    pin = PIN_A7;
    1e1c:	242d      	movs	r4, #45	; 0x2d
#endif
  if (pin <= 5) {
    pin += A0;
  }

  pinPeripheral(pin, PIO_ANALOG);
    1e1e:	2101      	movs	r1, #1
    1e20:	0020      	movs	r0, r4
    1e22:	f000 f8cd 	bl	1fc0 <pinPeripheral>

 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
  if (pin == A0) { // Disable DAC, if analogWrite(A0,dval) used previously the DAC is enabled
    1e26:	2c0e      	cmp	r4, #14
    1e28:	d10d      	bne.n	1e46 <analogRead+0x42>
 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
// Wait for synchronization of registers between the clock domains
static __inline__ void syncDAC() __attribute__((always_inline, unused));
static void syncDAC() {
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    1e2a:	492b      	ldr	r1, [pc, #172]	; (1ed8 <analogRead+0xd4>)
    1e2c:	79cb      	ldrb	r3, [r1, #7]
    1e2e:	4a2a      	ldr	r2, [pc, #168]	; (1ed8 <analogRead+0xd4>)
    1e30:	09db      	lsrs	r3, r3, #7
    1e32:	2b01      	cmp	r3, #1
    1e34:	d0fa      	beq.n	1e2c <analogRead+0x28>

 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
  if (pin == A0) { // Disable DAC, if analogWrite(A0,dval) used previously the DAC is enabled
    syncDAC();
    DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
    1e36:	2102      	movs	r1, #2
    1e38:	7813      	ldrb	r3, [r2, #0]
    1e3a:	438b      	bics	r3, r1
    1e3c:	7013      	strb	r3, [r2, #0]
 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
// Wait for synchronization of registers between the clock domains
static __inline__ void syncDAC() __attribute__((always_inline, unused));
static void syncDAC() {
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    1e3e:	79d3      	ldrb	r3, [r2, #7]
    1e40:	09db      	lsrs	r3, r3, #7
    1e42:	2b01      	cmp	r3, #1
    1e44:	d0fb      	beq.n	1e3e <analogRead+0x3a>
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1e46:	4925      	ldr	r1, [pc, #148]	; (1edc <analogRead+0xd8>)
    1e48:	7e4a      	ldrb	r2, [r1, #25]
    1e4a:	4b24      	ldr	r3, [pc, #144]	; (1edc <analogRead+0xd8>)
    1e4c:	09d2      	lsrs	r2, r2, #7
    1e4e:	2a01      	cmp	r2, #1
    1e50:	d0fa      	beq.n	1e48 <analogRead+0x44>
    syncDAC();
  }
#endif

  syncADC();
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[pin].ulADCChannelNumber; // Selection for the positive ADC input
    1e52:	2218      	movs	r2, #24
    1e54:	201f      	movs	r0, #31
    1e56:	4354      	muls	r4, r2
    1e58:	4a21      	ldr	r2, [pc, #132]	; (1ee0 <analogRead+0xdc>)
    1e5a:	1914      	adds	r4, r2, r4
    1e5c:	7c21      	ldrb	r1, [r4, #16]
    1e5e:	691a      	ldr	r2, [r3, #16]
    1e60:	4001      	ands	r1, r0
    1e62:	4382      	bics	r2, r0
    1e64:	430a      	orrs	r2, r1
    1e66:	611a      	str	r2, [r3, #16]
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1e68:	7e5a      	ldrb	r2, [r3, #25]
    1e6a:	491c      	ldr	r1, [pc, #112]	; (1edc <analogRead+0xd8>)
    1e6c:	09d2      	lsrs	r2, r2, #7
    1e6e:	2a01      	cmp	r2, #1
    1e70:	d0fa      	beq.n	1e68 <analogRead+0x64>
   *
   * Before enabling the ADC, the asynchronous clock source must be selected and enabled, and the ADC reference must be
   * configured. The first conversion after the reference is changed must not be used.
   */
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    1e72:	2002      	movs	r0, #2
    1e74:	780a      	ldrb	r2, [r1, #0]
    1e76:	4302      	orrs	r2, r0
    1e78:	700a      	strb	r2, [r1, #0]
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1e7a:	7e59      	ldrb	r1, [r3, #25]
    1e7c:	4a17      	ldr	r2, [pc, #92]	; (1edc <analogRead+0xd8>)
    1e7e:	09c9      	lsrs	r1, r1, #7
    1e80:	2901      	cmp	r1, #1
    1e82:	d0fa      	beq.n	1e7a <analogRead+0x76>
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC

  // Start conversion
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    1e84:	2002      	movs	r0, #2
    1e86:	7b11      	ldrb	r1, [r2, #12]
    1e88:	4301      	orrs	r1, r0
    1e8a:	7311      	strb	r1, [r2, #12]

  // Clear the Data Ready flag
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1e8c:	2101      	movs	r1, #1
    1e8e:	7611      	strb	r1, [r2, #24]
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1e90:	7e5a      	ldrb	r2, [r3, #25]
    1e92:	4912      	ldr	r1, [pc, #72]	; (1edc <analogRead+0xd8>)
    1e94:	09d2      	lsrs	r2, r2, #7
    1e96:	2a01      	cmp	r2, #1
    1e98:	d0fa      	beq.n	1e90 <analogRead+0x8c>
  // Clear the Data Ready flag
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;

  // Start conversion again, since The first conversion after the reference is changed must not be used.
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    1e9a:	2002      	movs	r0, #2
    1e9c:	7b0a      	ldrb	r2, [r1, #12]
    1e9e:	4302      	orrs	r2, r0
    1ea0:	730a      	strb	r2, [r1, #12]

  // Store the value
  while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    1ea2:	7e1a      	ldrb	r2, [r3, #24]
    1ea4:	07d2      	lsls	r2, r2, #31
    1ea6:	d5fc      	bpl.n	1ea2 <analogRead+0x9e>
  valueRead = ADC->RESULT.reg;
    1ea8:	4a0c      	ldr	r2, [pc, #48]	; (1edc <analogRead+0xd8>)
    1eaa:	8b50      	ldrh	r0, [r2, #26]
    1eac:	b280      	uxth	r0, r0
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1eae:	7e5a      	ldrb	r2, [r3, #25]
    1eb0:	490a      	ldr	r1, [pc, #40]	; (1edc <analogRead+0xd8>)
    1eb2:	09d2      	lsrs	r2, r2, #7
    1eb4:	2a01      	cmp	r2, #1
    1eb6:	d0fa      	beq.n	1eae <analogRead+0xaa>
  // Store the value
  while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
  valueRead = ADC->RESULT.reg;

  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    1eb8:	2402      	movs	r4, #2
    1eba:	780a      	ldrb	r2, [r1, #0]
    1ebc:	43a2      	bics	r2, r4
    1ebe:	700a      	strb	r2, [r1, #0]
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1ec0:	7e5a      	ldrb	r2, [r3, #25]
    1ec2:	09d2      	lsrs	r2, r2, #7
    1ec4:	2a01      	cmp	r2, #1
    1ec6:	d0fb      	beq.n	1ec0 <analogRead+0xbc>

  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
  syncADC();

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    1ec8:	4b06      	ldr	r3, [pc, #24]	; (1ee4 <analogRead+0xe0>)
    1eca:	681a      	ldr	r2, [r3, #0]
    1ecc:	4b06      	ldr	r3, [pc, #24]	; (1ee8 <analogRead+0xe4>)
    1ece:	6819      	ldr	r1, [r3, #0]
    1ed0:	f7ff ff56 	bl	1d80 <mapResolution>
}
    1ed4:	bd10      	pop	{r4, pc}
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	42004800 	.word	0x42004800
    1edc:	42004000 	.word	0x42004000
    1ee0:	00002ee4 	.word	0x00002ee4
    1ee4:	20000090 	.word	0x20000090
    1ee8:	20000088 	.word	0x20000088

00001eec <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1eec:	2218      	movs	r2, #24
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    1eee:	b570      	push	{r4, r5, r6, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1ef0:	0016      	movs	r6, r2
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    1ef2:	0005      	movs	r5, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1ef4:	4346      	muls	r6, r0
    1ef6:	2008      	movs	r0, #8
    1ef8:	4b18      	ldr	r3, [pc, #96]	; (1f5c <pinMode+0x70>)
    1efa:	199e      	adds	r6, r3, r6
    1efc:	5630      	ldrsb	r0, [r6, r0]
    1efe:	001c      	movs	r4, r3
    1f00:	1c43      	adds	r3, r0, #1
    1f02:	d029      	beq.n	1f58 <pinMode+0x6c>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    1f04:	2903      	cmp	r1, #3
    1f06:	d827      	bhi.n	1f58 <pinMode+0x6c>
    1f08:	0013      	movs	r3, r2
    1f0a:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1f0c:	436b      	muls	r3, r5
    1f0e:	56e2      	ldrsb	r2, [r4, r3]
    1f10:	18e3      	adds	r3, r4, r3
    1f12:	6859      	ldr	r1, [r3, #4]
    1f14:	01d3      	lsls	r3, r2, #7
    1f16:	4a12      	ldr	r2, [pc, #72]	; (1f60 <pinMode+0x74>)
    1f18:	189b      	adds	r3, r3, r2
    1f1a:	185a      	adds	r2, r3, r1
    1f1c:	3240      	adds	r2, #64	; 0x40
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    1f1e:	f000 fce7 	bl	28f0 <__gnu_thumb1_case_uqi>
    1f22:	1602      	.short	0x1602
    1f24:	0f08      	.short	0x0f08
  {
    case INPUT:
      // Set pin to input mode
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1f26:	2002      	movs	r0, #2
    1f28:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f2a:	2201      	movs	r2, #1
    1f2c:	408a      	lsls	r2, r1
    1f2e:	605a      	str	r2, [r3, #4]
    break ;
    1f30:	e012      	b.n	1f58 <pinMode+0x6c>

    case INPUT_PULLUP:
      // Set pin to input mode with pull-up resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1f32:	2006      	movs	r0, #6
    1f34:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f36:	2201      	movs	r2, #1
    1f38:	408a      	lsls	r2, r1
    1f3a:	605a      	str	r2, [r3, #4]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.7 Data Output Value Set')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f3c:	619a      	str	r2, [r3, #24]
    break ;
    1f3e:	e00b      	b.n	1f58 <pinMode+0x6c>

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1f40:	2006      	movs	r0, #6
    1f42:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f44:	2201      	movs	r2, #1
    1f46:	408a      	lsls	r2, r1
    1f48:	605a      	str	r2, [r3, #4]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.6 Data Output Value Clear')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f4a:	615a      	str	r2, [r3, #20]
    break ;
    1f4c:	e004      	b.n	1f58 <pinMode+0x6c>

    case OUTPUT:
      // enable input, to support reading back values, with pullups disabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1f4e:	2002      	movs	r0, #2
    1f50:	7010      	strb	r0, [r2, #0]

      // Set pin to output mode
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f52:	2201      	movs	r2, #1
    1f54:	408a      	lsls	r2, r1
    1f56:	609a      	str	r2, [r3, #8]

    default:
      // do nothing
    break ;
  }
}
    1f58:	bd70      	pop	{r4, r5, r6, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	00002ee4 	.word	0x00002ee4
    1f60:	41004400 	.word	0x41004400

00001f64 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1f64:	2318      	movs	r3, #24
    1f66:	2208      	movs	r2, #8
    1f68:	4358      	muls	r0, r3
    break ;
  }
}

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    1f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1f6c:	4e12      	ldr	r6, [pc, #72]	; (1fb8 <digitalWrite+0x54>)
    1f6e:	1833      	adds	r3, r6, r0
    1f70:	569a      	ldrsb	r2, [r3, r2]
    1f72:	3201      	adds	r2, #1
    1f74:	d01e      	beq.n	1fb4 <digitalWrite+0x50>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    1f76:	2201      	movs	r2, #1
    1f78:	0015      	movs	r5, r2
  {
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    1f7a:	685c      	ldr	r4, [r3, #4]
  uint32_t pinMask = (1ul << pin);

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1f7c:	5783      	ldrsb	r3, [r0, r6]
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    1f7e:	40a5      	lsls	r5, r4

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1f80:	480e      	ldr	r0, [pc, #56]	; (1fbc <digitalWrite+0x58>)
    1f82:	01db      	lsls	r3, r3, #7
    1f84:	181e      	adds	r6, r3, r0
    1f86:	68b0      	ldr	r0, [r6, #8]
    1f88:	4228      	tst	r0, r5
    1f8a:	d10c      	bne.n	1fa6 <digitalWrite+0x42>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    1f8c:	0008      	movs	r0, r1
    1f8e:	1e47      	subs	r7, r0, #1
    1f90:	41b8      	sbcs	r0, r7
    1f92:	4002      	ands	r2, r0
    1f94:	0090      	lsls	r0, r2, #2
    1f96:	2204      	movs	r2, #4
    1f98:	1934      	adds	r4, r6, r4
    1f9a:	3440      	adds	r4, #64	; 0x40
    1f9c:	7826      	ldrb	r6, [r4, #0]
    1f9e:	4396      	bics	r6, r2
    1fa0:	0032      	movs	r2, r6
    1fa2:	4302      	orrs	r2, r0
    1fa4:	7022      	strb	r2, [r4, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    1fa6:	4a05      	ldr	r2, [pc, #20]	; (1fbc <digitalWrite+0x58>)
    1fa8:	189b      	adds	r3, r3, r2
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
  }

  switch ( ulVal )
    1faa:	2900      	cmp	r1, #0
    1fac:	d101      	bne.n	1fb2 <digitalWrite+0x4e>
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    1fae:	615d      	str	r5, [r3, #20]
    break ;
    1fb0:	e000      	b.n	1fb4 <digitalWrite+0x50>

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    1fb2:	619d      	str	r5, [r3, #24]
    break ;
  }

  return ;
}
    1fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	00002ee4 	.word	0x00002ee4
    1fbc:	41004400 	.word	0x41004400

00001fc0 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    1fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1fc2:	2318      	movs	r3, #24

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    1fc4:	0002      	movs	r2, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1fc6:	4343      	muls	r3, r0
    1fc8:	2008      	movs	r0, #8
    1fca:	4c2c      	ldr	r4, [pc, #176]	; (207c <pinPeripheral+0xbc>)
    1fcc:	18e3      	adds	r3, r4, r3
    1fce:	5618      	ldrsb	r0, [r3, r0]
    1fd0:	0023      	movs	r3, r4
  {
    return -1 ;
    1fd2:	0004      	movs	r4, r0
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1fd4:	3001      	adds	r0, #1
    1fd6:	d04e      	beq.n	2076 <pinPeripheral+0xb6>
  {
    return -1 ;
  }

  switch ( ulPeripheral )
    1fd8:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    1fda:	2400      	movs	r4, #0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
  {
    return -1 ;
  }

  switch ( ulPeripheral )
    1fdc:	280c      	cmp	r0, #12
    1fde:	d84a      	bhi.n	2076 <pinPeripheral+0xb6>
    1fe0:	f000 fc86 	bl	28f0 <__gnu_thumb1_case_uqi>
    1fe4:	1a1a1a47 	.word	0x1a1a1a47
    1fe8:	1a1a1a1a 	.word	0x1a1a1a1a
    1fec:	0707071a 	.word	0x0707071a
    1ff0:	07          	.byte	0x07
    1ff1:	00          	.byte	0x00
    case PIO_OUTPUT:
      // Disable peripheral muxing, done in pinMode
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
    1ff2:	2909      	cmp	r1, #9
    1ff4:	d101      	bne.n	1ffa <pinPeripheral+0x3a>
      {
        pinMode( ulPin, INPUT ) ;
    1ff6:	2100      	movs	r1, #0
    1ff8:	e002      	b.n	2000 <pinPeripheral+0x40>
      }
      else
      {
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    1ffa:	290a      	cmp	r1, #10
    1ffc:	d104      	bne.n	2008 <pinPeripheral+0x48>
        {
          pinMode( ulPin, INPUT_PULLUP ) ;
    1ffe:	3908      	subs	r1, #8
    2000:	0010      	movs	r0, r2
    2002:	f7ff ff73 	bl	1eec <pinMode>
    2006:	e023      	b.n	2050 <pinPeripheral+0x90>
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    2008:	2400      	movs	r4, #0
        {
          pinMode( ulPin, INPUT_PULLUP ) ;
        }
        else
        {
          if ( ulPeripheral == PIO_OUTPUT )
    200a:	290b      	cmp	r1, #11
    200c:	d133      	bne.n	2076 <pinPeripheral+0xb6>
          {
            pinMode( ulPin, OUTPUT ) ;
    200e:	390a      	subs	r1, #10
    2010:	0010      	movs	r0, r2
    2012:	f7ff ff6b 	bl	1eec <pinMode>
    2016:	e02e      	b.n	2076 <pinPeripheral+0xb6>
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2018:	2018      	movs	r0, #24
    201a:	4342      	muls	r2, r0
    201c:	1898      	adds	r0, r3, r2
    201e:	6846      	ldr	r6, [r0, #4]
    2020:	2501      	movs	r5, #1
    2022:	0034      	movs	r4, r6
    2024:	569a      	ldrsb	r2, [r3, r2]
    2026:	402c      	ands	r4, r5
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2028:	01d3      	lsls	r3, r2, #7
    202a:	0870      	lsrs	r0, r6, #1
    202c:	4a14      	ldr	r2, [pc, #80]	; (2080 <pinPeripheral+0xc0>)
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    202e:	2c00      	cmp	r4, #0
    2030:	d010      	beq.n	2054 <pinPeripheral+0x94>
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2032:	189a      	adds	r2, r3, r2
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    2034:	230f      	movs	r3, #15
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2036:	1810      	adds	r0, r2, r0
    2038:	3030      	adds	r0, #48	; 0x30
    203a:	7804      	ldrb	r4, [r0, #0]
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    203c:	0109      	lsls	r1, r1, #4
    203e:	4023      	ands	r3, r4
    2040:	4319      	orrs	r1, r3
    2042:	b2c9      	uxtb	r1, r1
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    2044:	1993      	adds	r3, r2, r6
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    2046:	7001      	strb	r1, [r0, #0]
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    2048:	3340      	adds	r3, #64	; 0x40
    204a:	781a      	ldrb	r2, [r3, #0]
    204c:	4315      	orrs	r5, r2
    204e:	701d      	strb	r5, [r3, #0]
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    2050:	2400      	movs	r4, #0
    2052:	e010      	b.n	2076 <pinPeripheral+0xb6>
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    2054:	270f      	movs	r7, #15
      }
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    2056:	189b      	adds	r3, r3, r2
    2058:	1818      	adds	r0, r3, r0
    205a:	3030      	adds	r0, #48	; 0x30
    205c:	7802      	ldrb	r2, [r0, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    205e:	199b      	adds	r3, r3, r6
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    2060:	43ba      	bics	r2, r7
    2062:	4311      	orrs	r1, r2
    2064:	b2c9      	uxtb	r1, r1
    2066:	7001      	strb	r1, [r0, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    2068:	3340      	adds	r3, #64	; 0x40
    206a:	781a      	ldrb	r2, [r3, #0]
    206c:	4315      	orrs	r5, r2
    206e:	701d      	strb	r5, [r3, #0]
    2070:	e001      	b.n	2076 <pinPeripheral+0xb6>
      }
#endif
    break ;

    case PIO_NOT_A_PIN:
      return -1l ;
    2072:	2401      	movs	r4, #1
    2074:	4264      	negs	r4, r4
    break ;
  }

  return 0l ;
}
    2076:	0020      	movs	r0, r4
    2078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	00002ee4 	.word	0x00002ee4
    2080:	41004400 	.word	0x41004400

00002084 <_ZN10arduinoFFTC1Ev>:
#include "arduinoFFT.h"

arduinoFFT::arduinoFFT(void)
{
/* Constructor */
}
    2084:	4770      	bx	lr

00002086 <_ZN10arduinoFFTD1Ev>:

arduinoFFT::~arduinoFFT(void)
{
/* Destructor */
}
    2086:	4770      	bx	lr

00002088 <_Z10fill_solidP4CRGBiRKS_>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    2088:	2300      	movs	r3, #0



void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    208a:	b510      	push	{r4, lr}
    for( int i = 0; i < numToFill; i++) {
    208c:	428b      	cmp	r3, r1
    208e:	da08      	bge.n	20a2 <_Z10fill_solidP4CRGBiRKS_+0x1a>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2090:	7814      	ldrb	r4, [r2, #0]
    2092:	3301      	adds	r3, #1
    2094:	7004      	strb	r4, [r0, #0]
        g = rhs.g;
    2096:	7854      	ldrb	r4, [r2, #1]
    2098:	7044      	strb	r4, [r0, #1]
        b = rhs.b;
    209a:	7894      	ldrb	r4, [r2, #2]
    209c:	7084      	strb	r4, [r0, #2]
    209e:	3003      	adds	r0, #3
    20a0:	e7f4      	b.n	208c <_Z10fill_solidP4CRGBiRKS_+0x4>
        leds[i] = color;
    }
}
    20a2:	bd10      	pop	{r4, pc}

000020a4 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    20a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20a6:	0004      	movs	r4, r0
    20a8:	000e      	movs	r6, r1
    20aa:	0017      	movs	r7, r2
    20ac:	1e1d      	subs	r5, r3, #0
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    20ae:	dc01      	bgt.n	20b4 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x10>
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    20b0:	0015      	movs	r5, r2
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    20b2:	2700      	movs	r7, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    20b4:	6823      	ldr	r3, [r4, #0]
    20b6:	0020      	movs	r0, r4
    20b8:	689b      	ldr	r3, [r3, #8]
    20ba:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    20bc:	2103      	movs	r1, #3
    20be:	4379      	muls	r1, r7
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    20c0:	6823      	ldr	r3, [r4, #0]
    20c2:	1871      	adds	r1, r6, r1
    20c4:	6061      	str	r1, [r4, #4]
        m_nLeds = nLeds;
    20c6:	6165      	str	r5, [r4, #20]
    20c8:	695b      	ldr	r3, [r3, #20]
    20ca:	0020      	movs	r0, r4
    20cc:	4798      	blx	r3
    20ce:	1e01      	subs	r1, r0, #0

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    20d0:	d008      	beq.n	20e4 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x40>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    20d2:	4805      	ldr	r0, [pc, #20]	; (20e8 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x44>)
    20d4:	f000 fca0 	bl	2a18 <__aeabi_idiv>
    20d8:	4d04      	ldr	r5, [pc, #16]	; (20ec <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x48>)
    20da:	686b      	ldr	r3, [r5, #4]
    20dc:	4283      	cmp	r3, r0
    20de:	d200      	bcs.n	20e2 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x3e>
    20e0:	0003      	movs	r3, r0
    20e2:	606b      	str	r3, [r5, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    20e4:	0020      	movs	r0, r4
    20e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20e8:	000f4240 	.word	0x000f4240
    20ec:	20000bc4 	.word	0x20000bc4

000020f0 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    20f0:	22ff      	movs	r2, #255	; 0xff
    20f2:	4b04      	ldr	r3, [pc, #16]	; (2104 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
    20f4:	701a      	strb	r2, [r3, #0]
	m_nFPS = 0;
    20f6:	2200      	movs	r2, #0
    20f8:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    20fa:	60da      	str	r2, [r3, #12]
	m_nPowerData = 0xFFFFFFFF;
    20fc:	3a01      	subs	r2, #1
    20fe:	609a      	str	r2, [r3, #8]
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    2100:	4770      	bx	lr
    2102:	46c0      	nop			; (mov r8, r8)
    2104:	20000bc4 	.word	0x20000bc4

00002108 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB>:
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    2108:	2256      	movs	r2, #86	; 0x56
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    210a:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    210c:	7806      	ldrb	r6, [r0, #0]
    uint8_t sat = hsv.sat;
    210e:	7844      	ldrb	r4, [r0, #1]
    2110:	00f3      	lsls	r3, r6, #3
    2112:	b2db      	uxtb	r3, r3
    2114:	435a      	muls	r2, r3
    uint8_t val = hsv.val;
    2116:	7885      	ldrb	r5, [r0, #2]
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    2118:	b270      	sxtb	r0, r6
    211a:	0a12      	lsrs	r2, r2, #8
    211c:	2740      	movs	r7, #64	; 0x40
    211e:	2800      	cmp	r0, #0
    2120:	db23      	blt.n	216a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x62>
    2122:	2020      	movs	r0, #32
        // 0XX
        if( ! (hue & 0x40) ) {
    2124:	4037      	ands	r7, r6
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    2126:	4006      	ands	r6, r0
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    2128:	2f00      	cmp	r7, #0
    212a:	d10b      	bne.n	2144 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x3c>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    212c:	2e00      	cmp	r6, #0
    212e:	d104      	bne.n	213a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x32>
                // 000
                //case 0: // R -> O
                r = K255 - third;
    2130:	43d3      	mvns	r3, r2
    2132:	b2db      	uxtb	r3, r3
                g = third;
    2134:	0010      	movs	r0, r2
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    2136:	001a      	movs	r2, r3
    2138:	e010      	b.n	215c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x54>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    213a:	3255      	adds	r2, #85	; 0x55
    213c:	b2d0      	uxtb	r0, r2
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    213e:	22ab      	movs	r2, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    2140:	003b      	movs	r3, r7
    2142:	e033      	b.n	21ac <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xa4>
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    2144:	2e00      	cmp	r6, #0
    2146:	d10b      	bne.n	2160 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x58>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    2148:	27ab      	movs	r7, #171	; 0xab
    214a:	2055      	movs	r0, #85	; 0x55
    214c:	437b      	muls	r3, r7
    214e:	4240      	negs	r0, r0
    2150:	121b      	asrs	r3, r3, #8
    2152:	1ac7      	subs	r7, r0, r3
                    g = K170 + third;
    2154:	3a56      	subs	r2, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    2156:	b2ff      	uxtb	r7, r7
                    g = K170 + third;
    2158:	b2d0      	uxtb	r0, r2
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    215a:	003a      	movs	r2, r7
                    g = K170 + third;
                    b = 0;
    215c:	0033      	movs	r3, r6
    215e:	e025      	b.n	21ac <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xa4>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    2160:	2600      	movs	r6, #0
                g = K255 - third;
    2162:	43d0      	mvns	r0, r2
                b = third;
    2164:	0013      	movs	r3, r2
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
                g = K255 - third;
    2166:	b2c0      	uxtb	r0, r0
    2168:	e01f      	b.n	21aa <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xa2>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    216a:	0038      	movs	r0, r7
    216c:	2720      	movs	r7, #32
    216e:	4030      	ands	r0, r6
    2170:	d10c      	bne.n	218c <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x84>
            // 10X
            if( ! ( hue & 0x20) ) {
    2172:	403e      	ands	r6, r7
    2174:	d107      	bne.n	2186 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x7e>
    2176:	22ab      	movs	r2, #171	; 0xab
    2178:	4353      	muls	r3, r2
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    217a:	3855      	subs	r0, #85	; 0x55
    217c:	0a1b      	lsrs	r3, r3, #8
    217e:	1ac0      	subs	r0, r0, r3
    2180:	b2c0      	uxtb	r0, r0
                b = K85  + twothirds;
    2182:	3355      	adds	r3, #85	; 0x55
    2184:	e010      	b.n	21a8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xa0>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    2186:	43d3      	mvns	r3, r2
    2188:	b2db      	uxtb	r3, r3
    218a:	e00f      	b.n	21ac <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xa4>
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    218c:	0030      	movs	r0, r6
                // 110
                //case 6: // P -- K
                r = K85 + third;
    218e:	0016      	movs	r6, r2
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    2190:	4038      	ands	r0, r7
    2192:	d104      	bne.n	219e <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x96>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    2194:	3655      	adds	r6, #85	; 0x55
    2196:	b2f6      	uxtb	r6, r6
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    2198:	2355      	movs	r3, #85	; 0x55
    219a:	425b      	negs	r3, r3
    219c:	e003      	b.n	21a6 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x9e>
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    219e:	3e56      	subs	r6, #86	; 0x56
    21a0:	b2f6      	uxtb	r6, r6
                g = 0;
                FORCE_REFERENCE(g);
    21a2:	2000      	movs	r0, #0
                b = K85 - third;
    21a4:	2355      	movs	r3, #85	; 0x55
    21a6:	1a9b      	subs	r3, r3, r2
    21a8:	b2db      	uxtb	r3, r3
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    21aa:	0032      	movs	r2, r6
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    21ac:	2cff      	cmp	r4, #255	; 0xff
    21ae:	d023      	beq.n	21f8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xf0>
        if( sat == 0) {
    21b0:	2c00      	cmp	r4, #0
    21b2:	d01e      	beq.n	21f2 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xea>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    21b4:	2a00      	cmp	r2, #0
    21b6:	d003      	beq.n	21c0 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xb8>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    21b8:	1c66      	adds	r6, r4, #1
    21ba:	4372      	muls	r2, r6
    21bc:	1212      	asrs	r2, r2, #8
    21be:	b2d2      	uxtb	r2, r2
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    21c0:	2800      	cmp	r0, #0
    21c2:	d003      	beq.n	21cc <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xc4>
    21c4:	1c66      	adds	r6, r4, #1
    21c6:	4370      	muls	r0, r6
    21c8:	1200      	asrs	r0, r0, #8
    21ca:	b2c0      	uxtb	r0, r0
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    21cc:	2b00      	cmp	r3, #0
    21ce:	d003      	beq.n	21d8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xd0>
    21d0:	1c66      	adds	r6, r4, #1
    21d2:	4373      	muls	r3, r6
    21d4:	121b      	asrs	r3, r3, #8
    21d6:	b2db      	uxtb	r3, r3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    21d8:	43e4      	mvns	r4, r4
    21da:	b2e4      	uxtb	r4, r4
    21dc:	1c66      	adds	r6, r4, #1
    21de:	4374      	muls	r4, r6
    21e0:	1224      	asrs	r4, r4, #8
    21e2:	b2e4      	uxtb	r4, r4
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    21e4:	1912      	adds	r2, r2, r4
            g += brightness_floor;
    21e6:	1900      	adds	r0, r0, r4
            b += brightness_floor;
    21e8:	191b      	adds	r3, r3, r4
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    21ea:	b2d2      	uxtb	r2, r2
            g += brightness_floor;
    21ec:	b2c0      	uxtb	r0, r0
            b += brightness_floor;
    21ee:	b2db      	uxtb	r3, r3
    21f0:	e002      	b.n	21f8 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0xf0>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    21f2:	23ff      	movs	r3, #255	; 0xff
    21f4:	0018      	movs	r0, r3
    21f6:	001a      	movs	r2, r3
            b += brightness_floor;
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    21f8:	2dff      	cmp	r5, #255	; 0xff
    21fa:	d01e      	beq.n	223a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x132>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    21fc:	002c      	movs	r4, r5
    21fe:	1e66      	subs	r6, r4, #1
    2200:	41b4      	sbcs	r4, r6
    2202:	436d      	muls	r5, r5
    2204:	122d      	asrs	r5, r5, #8
    2206:	1964      	adds	r4, r4, r5
    2208:	b2e4      	uxtb	r4, r4
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    220a:	2c00      	cmp	r4, #0
    220c:	d012      	beq.n	2234 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x12c>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    220e:	2a00      	cmp	r2, #0
    2210:	d003      	beq.n	221a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x112>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    2212:	1c65      	adds	r5, r4, #1
    2214:	436a      	muls	r2, r5
    2216:	1212      	asrs	r2, r2, #8
    2218:	b2d2      	uxtb	r2, r2
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    221a:	2800      	cmp	r0, #0
    221c:	d003      	beq.n	2226 <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x11e>
    221e:	1c65      	adds	r5, r4, #1
    2220:	4368      	muls	r0, r5
    2222:	1200      	asrs	r0, r0, #8
    2224:	b2c0      	uxtb	r0, r0
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    2226:	2b00      	cmp	r3, #0
    2228:	d007      	beq.n	223a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x132>
    222a:	3401      	adds	r4, #1
    222c:	4363      	muls	r3, r4
    222e:	121b      	asrs	r3, r3, #8
    2230:	b2db      	uxtb	r3, r3
    2232:	e002      	b.n	223a <_Z15hsv2rgb_rainbowRK4CHSVR4CRGB+0x132>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    2234:	0023      	movs	r3, r4
    2236:	0020      	movs	r0, r4
    2238:	0022      	movs	r2, r4
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    223a:	700a      	strb	r2, [r1, #0]
    rgb.g = g;
    223c:	7048      	strb	r0, [r1, #1]
    rgb.b = b;
    223e:	708b      	strb	r3, [r1, #2]
}
    2240:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002242 <_Z27calculate_unscaled_power_mWPK4CRGBt>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    2242:	b570      	push	{r4, r5, r6, lr}
    uint32_t red32 = 0, green32 = 0, blue32 = 0;
    2244:	2400      	movs	r4, #0
    const CRGB* firstled = &(ledbuffer[0]);
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;
    2246:	000d      	movs	r5, r1
static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    uint32_t red32 = 0, green32 = 0, blue32 = 0;
    2248:	0026      	movs	r6, r4
    224a:	0023      	movs	r3, r4
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    224c:	2d00      	cmp	r5, #0
    224e:	d009      	beq.n	2264 <_Z27calculate_unscaled_power_mWPK4CRGBt+0x22>
        red32   += *p++;
    2250:	7802      	ldrb	r2, [r0, #0]
        green32 += *p++;
        blue32  += *p++;
        count--;
    2252:	3d01      	subs	r5, #1

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
        red32   += *p++;
    2254:	189b      	adds	r3, r3, r2
        green32 += *p++;
    2256:	7842      	ldrb	r2, [r0, #1]
        blue32  += *p++;
        count--;
    2258:	b2ad      	uxth	r5, r5
    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
        red32   += *p++;
        green32 += *p++;
    225a:	18b6      	adds	r6, r6, r2
        blue32  += *p++;
    225c:	7882      	ldrb	r2, [r0, #2]
    225e:	3003      	adds	r0, #3
    2260:	18a4      	adds	r4, r4, r2
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    2262:	e7f3      	b.n	224c <_Z27calculate_unscaled_power_mWPK4CRGBt+0xa>
        green32 += *p++;
        blue32  += *p++;
        count--;
    }

    red32   *= gRed_mW;
    2264:	2550      	movs	r5, #80	; 0x50
    green32 *= gGreen_mW;
    2266:	2237      	movs	r2, #55	; 0x37
        green32 += *p++;
        blue32  += *p++;
        count--;
    }

    red32   *= gRed_mW;
    2268:	436b      	muls	r3, r5
    green32 *= gGreen_mW;
    226a:	4372      	muls	r2, r6
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    226c:	0a1b      	lsrs	r3, r3, #8
    226e:	0a12      	lsrs	r2, r2, #8
    2270:	189b      	adds	r3, r3, r2
        count--;
    }

    red32   *= gRed_mW;
    green32 *= gGreen_mW;
    blue32  *= gBlue_mW;
    2272:	204b      	movs	r0, #75	; 0x4b
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    2274:	2205      	movs	r2, #5
        count--;
    }

    red32   *= gRed_mW;
    green32 *= gGreen_mW;
    blue32  *= gBlue_mW;
    2276:	4344      	muls	r4, r0
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    2278:	434a      	muls	r2, r1
    227a:	1898      	adds	r0, r3, r2
    227c:	0a22      	lsrs	r2, r4, #8
    227e:	1880      	adds	r0, r0, r2
}
    2280:	bd70      	pop	{r4, r5, r6, pc}
	...

00002284 <_Z37calculate_max_brightness_for_power_mWhm>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    2284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2286:	0004      	movs	r4, r0
    2288:	000f      	movs	r7, r1
    uint32_t total_mW = gMCU_mW;
    228a:	257d      	movs	r5, #125	; 0x7d
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    228c:	4b14      	ldr	r3, [pc, #80]	; (22e0 <_Z37calculate_max_brightness_for_power_mWhm+0x5c>)
    228e:	681e      	ldr	r6, [r3, #0]

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    2290:	2e00      	cmp	r6, #0
    2292:	d00c      	beq.n	22ae <_Z37calculate_max_brightness_for_power_mWhm+0x2a>
    2294:	6873      	ldr	r3, [r6, #4]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    2296:	0030      	movs	r0, r6
    2298:	9301      	str	r3, [sp, #4]
    229a:	6833      	ldr	r3, [r6, #0]
    229c:	691b      	ldr	r3, [r3, #16]
    229e:	4798      	blx	r3
    22a0:	b281      	uxth	r1, r0
    22a2:	9801      	ldr	r0, [sp, #4]
    22a4:	f7ff ffcd 	bl	2242 <_Z27calculate_unscaled_power_mWPK4CRGBt>
    22a8:	68b6      	ldr	r6, [r6, #8]
    22aa:	182d      	adds	r5, r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    22ac:	e7f0      	b.n	2290 <_Z37calculate_max_brightness_for_power_mWhm+0xc>
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    22ae:	0029      	movs	r1, r5
    22b0:	4361      	muls	r1, r4
    22b2:	4d0c      	ldr	r5, [pc, #48]	; (22e4 <_Z37calculate_max_brightness_for_power_mWhm+0x60>)
    22b4:	0a09      	lsrs	r1, r1, #8
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    22b6:	42b9      	cmp	r1, r7
    22b8:	d204      	bcs.n	22c4 <_Z37calculate_max_brightness_for_power_mWhm+0x40>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    22ba:	7828      	ldrb	r0, [r5, #0]
            digitalWrite(gMaxPowerIndicatorLEDPinNumber, LOW);   // turn the LED off
    22bc:	0031      	movs	r1, r6
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    22be:	2800      	cmp	r0, #0
    22c0:	d00c      	beq.n	22dc <_Z37calculate_max_brightness_for_power_mWhm+0x58>
    22c2:	e009      	b.n	22d8 <_Z37calculate_max_brightness_for_power_mWhm+0x54>
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    22c4:	0038      	movs	r0, r7
    22c6:	4360      	muls	r0, r4
    22c8:	f000 fb1c 	bl	2904 <__aeabi_uidiv>
    22cc:	0004      	movs	r4, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    22ce:	7828      	ldrb	r0, [r5, #0]
        digitalWrite( gMaxPowerIndicatorLEDPinNumber, HIGH);   // turn the LED on
    }
#endif

    return recommended_brightness;
    22d0:	b2e4      	uxtb	r4, r4

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    22d2:	2800      	cmp	r0, #0
    22d4:	d002      	beq.n	22dc <_Z37calculate_max_brightness_for_power_mWhm+0x58>
        digitalWrite( gMaxPowerIndicatorLEDPinNumber, HIGH);   // turn the LED on
    22d6:	2101      	movs	r1, #1
    22d8:	f7ff fe44 	bl	1f64 <digitalWrite>
    }
#endif

    return recommended_brightness;
}
    22dc:	0020      	movs	r0, r4
    22de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    22e0:	20000bd4 	.word	0x20000bd4
    22e4:	20000bdc 	.word	0x20000bdc

000022e8 <_ZN4UartD1Ev>:
#include "SERCOM.h"
#include "RingBuffer.h"

#include <cstddef>

class Uart : public HardwareSerial
    22e8:	4770      	bx	lr
	...

000022ec <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial5( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    22ec:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    22ee:	4802      	ldr	r0, [pc, #8]	; (22f8 <SERCOM0_Handler+0xc>)
    22f0:	f000 f9ca 	bl	2688 <_ZN4Uart10IrqHandlerEv>
}
    22f4:	bd10      	pop	{r4, pc}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	20000be0 	.word	0x20000be0

000022fc <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    22fc:	b510      	push	{r4, lr}
  Serial5.IrqHandler();
    22fe:	4802      	ldr	r0, [pc, #8]	; (2308 <SERCOM5_Handler+0xc>)
    2300:	f000 f9c2 	bl	2688 <_ZN4Uart10IrqHandlerEv>
}
    2304:	bd10      	pop	{r4, pc}
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	20000ca4 	.word	0x20000ca4

0000230c <_ZN4UartD0Ev>:
    230c:	b510      	push	{r4, lr}
    230e:	0004      	movs	r4, r0
    2310:	f000 f862 	bl	23d8 <_ZdlPv>
    2314:	0020      	movs	r0, r4
    2316:	bd10      	pop	{r4, pc}

00002318 <_GLOBAL__sub_I_g_APinDescription>:
    2318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
} ;

const void* g_apTCInstances[TCC_INST_NUM+TC_INST_NUM]={ TCC0, TCC1, TCC2, TC3, TC4, TC5 } ;

// Multi-serial objects instantiation
SERCOM sercom0( SERCOM0 ) ;
    231a:	4e1d      	ldr	r6, [pc, #116]	; (2390 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    231c:	491d      	ldr	r1, [pc, #116]	; (2394 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    231e:	0030      	movs	r0, r6
    2320:	f000 f85e 	bl	23e0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    2324:	491c      	ldr	r1, [pc, #112]	; (2398 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    2326:	481d      	ldr	r0, [pc, #116]	; (239c <_GLOBAL__sub_I_g_APinDescription+0x84>)
    2328:	f000 f85a 	bl	23e0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    232c:	491c      	ldr	r1, [pc, #112]	; (23a0 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    232e:	481d      	ldr	r0, [pc, #116]	; (23a4 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    2330:	f000 f856 	bl	23e0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    2334:	491c      	ldr	r1, [pc, #112]	; (23a8 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    2336:	481d      	ldr	r0, [pc, #116]	; (23ac <_GLOBAL__sub_I_g_APinDescription+0x94>)
    2338:	f000 f852 	bl	23e0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    233c:	491c      	ldr	r1, [pc, #112]	; (23b0 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    233e:	481d      	ldr	r0, [pc, #116]	; (23b4 <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    2340:	f000 f84e 	bl	23e0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    2344:	491c      	ldr	r1, [pc, #112]	; (23b8 <_GLOBAL__sub_I_g_APinDescription+0xa0>)
    2346:	481d      	ldr	r0, [pc, #116]	; (23bc <_GLOBAL__sub_I_g_APinDescription+0xa4>)
    2348:	f000 f84a 	bl	23e0 <_ZN6SERCOMC1EP6Sercom>

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    234c:	2401      	movs	r4, #1
    234e:	2303      	movs	r3, #3
    2350:	4d1b      	ldr	r5, [pc, #108]	; (23c0 <_GLOBAL__sub_I_g_APinDescription+0xa8>)
    2352:	9300      	str	r3, [sp, #0]
    2354:	0031      	movs	r1, r6
    2356:	0023      	movs	r3, r4
    2358:	9401      	str	r4, [sp, #4]
    235a:	2200      	movs	r2, #0
    235c:	0028      	movs	r0, r5
    235e:	f000 f96d 	bl	263c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    2362:	4f18      	ldr	r7, [pc, #96]	; (23c4 <_GLOBAL__sub_I_g_APinDescription+0xac>)
    2364:	4e18      	ldr	r6, [pc, #96]	; (23c8 <_GLOBAL__sub_I_g_APinDescription+0xb0>)
    2366:	003a      	movs	r2, r7
    2368:	0031      	movs	r1, r6
    236a:	0028      	movs	r0, r5
    236c:	f000 fab8 	bl	28e0 <__aeabi_atexit>
Uart Serial5( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    2370:	2303      	movs	r3, #3
    2372:	4d16      	ldr	r5, [pc, #88]	; (23cc <_GLOBAL__sub_I_g_APinDescription+0xb4>)
    2374:	9300      	str	r3, [sp, #0]
    2376:	0028      	movs	r0, r5
    2378:	331b      	adds	r3, #27
    237a:	9401      	str	r4, [sp, #4]
    237c:	221f      	movs	r2, #31
    237e:	490f      	ldr	r1, [pc, #60]	; (23bc <_GLOBAL__sub_I_g_APinDescription+0xa4>)
    2380:	f000 f95c 	bl	263c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    2384:	003a      	movs	r2, r7
    2386:	0031      	movs	r1, r6
    2388:	0028      	movs	r0, r5
    238a:	f000 faa9 	bl	28e0 <__aeabi_atexit>
}

void SERCOM5_Handler()
{
  Serial5.IrqHandler();
}
    238e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2390:	20000d68 	.word	0x20000d68
    2394:	42000800 	.word	0x42000800
    2398:	42000c00 	.word	0x42000c00
    239c:	20000d6c 	.word	0x20000d6c
    23a0:	42001000 	.word	0x42001000
    23a4:	20000d70 	.word	0x20000d70
    23a8:	42001400 	.word	0x42001400
    23ac:	20000d74 	.word	0x20000d74
    23b0:	42001800 	.word	0x42001800
    23b4:	20000d78 	.word	0x20000d78
    23b8:	42001c00 	.word	0x42001c00
    23bc:	20000d7c 	.word	0x20000d7c
    23c0:	20000be0 	.word	0x20000be0
    23c4:	20000000 	.word	0x20000000
    23c8:	000022e9 	.word	0x000022e9
    23cc:	20000ca4 	.word	0x20000ca4

000023d0 <_Znwj>:
    23d0:	b510      	push	{r4, lr}
    23d2:	f000 fc41 	bl	2c58 <malloc>
    23d6:	bd10      	pop	{r4, pc}

000023d8 <_ZdlPv>:
    23d8:	b510      	push	{r4, lr}
    23da:	f000 fc47 	bl	2c6c <free>
    23de:	bd10      	pop	{r4, pc}

000023e0 <_ZN6SERCOMC1EP6Sercom>:
#include "SERCOM.h"
#include "variant.h"

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    23e0:	6001      	str	r1, [r0, #0]
}
    23e2:	4770      	bx	lr

000023e4 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    23e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23e6:	0015      	movs	r5, r2
    23e8:	aa05      	add	r2, sp, #20
    23ea:	7814      	ldrb	r4, [r2, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    23ec:	6802      	ldr	r2, [r0, #0]
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    23ee:	1e9f      	subs	r7, r3, #2
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    23f0:	4694      	mov	ip, r2
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    23f2:	6816      	ldr	r6, [r2, #0]
    23f4:	1e7a      	subs	r2, r7, #1
    23f6:	4197      	sbcs	r7, r2
    23f8:	4662      	mov	r2, ip
    23fa:	07ad      	lsls	r5, r5, #30
    23fc:	4335      	orrs	r5, r6
    23fe:	063f      	lsls	r7, r7, #24
    2400:	433d      	orrs	r5, r7
    2402:	6015      	str	r5, [r2, #0]

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    2404:	2207      	movs	r2, #7
    2406:	4011      	ands	r1, r2
    2408:	000a      	movs	r2, r1
    240a:	6805      	ldr	r5, [r0, #0]
    240c:	01a0      	lsls	r0, r4, #6
    240e:	4302      	orrs	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    2410:	686e      	ldr	r6, [r5, #4]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    2412:	2000      	movs	r0, #0
    2414:	2b02      	cmp	r3, #2
    2416:	d000      	beq.n	241a <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x36>
    2418:	0358      	lsls	r0, r3, #13
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    241a:	0031      	movs	r1, r6
    241c:	4311      	orrs	r1, r2
    241e:	4301      	orrs	r1, r0
    2420:	6069      	str	r1, [r5, #4]
}
    2422:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002424 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    2424:	b530      	push	{r4, r5, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    2426:	25c0      	movs	r5, #192	; 0xc0
    2428:	0512      	lsls	r2, r2, #20
    242a:	03ad      	lsls	r5, r5, #14
    242c:	402a      	ands	r2, r5
    242e:	25c0      	movs	r5, #192	; 0xc0
}

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    2430:	6804      	ldr	r4, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    2432:	02ad      	lsls	r5, r5, #10
    2434:	6823      	ldr	r3, [r4, #0]
    2436:	0409      	lsls	r1, r1, #16
    2438:	431a      	orrs	r2, r3
    243a:	4029      	ands	r1, r5
    243c:	4311      	orrs	r1, r2
    243e:	6021      	str	r1, [r4, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    2440:	6802      	ldr	r2, [r0, #0]
    2442:	6853      	ldr	r3, [r2, #4]
    2444:	432b      	orrs	r3, r5
    2446:	6053      	str	r3, [r2, #4]
}
    2448:	bd30      	pop	{r4, r5, pc}

0000244a <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    244a:	2101      	movs	r1, #1
    244c:	6802      	ldr	r2, [r0, #0]
    244e:	6813      	ldr	r3, [r2, #0]
    2450:	430b      	orrs	r3, r1
    2452:	6013      	str	r3, [r2, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    2454:	6803      	ldr	r3, [r0, #0]
    2456:	681a      	ldr	r2, [r3, #0]
    2458:	07d2      	lsls	r2, r2, #31
    245a:	d4fc      	bmi.n	2456 <_ZN6SERCOM9resetUARTEv+0xc>
    245c:	69da      	ldr	r2, [r3, #28]
    245e:	07d2      	lsls	r2, r2, #31
    2460:	d4f9      	bmi.n	2456 <_ZN6SERCOM9resetUARTEv+0xc>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    2462:	4770      	bx	lr

00002464 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    2464:	2102      	movs	r1, #2
    2466:	6802      	ldr	r2, [r0, #0]
    2468:	6813      	ldr	r3, [r2, #0]
    246a:	430b      	orrs	r3, r1
    246c:	6013      	str	r3, [r2, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    246e:	6802      	ldr	r2, [r0, #0]
    2470:	69d3      	ldr	r3, [r2, #28]
    2472:	079b      	lsls	r3, r3, #30
    2474:	d4fc      	bmi.n	2470 <_ZN6SERCOM10enableUARTEv+0xc>
}
    2476:	4770      	bx	lr

00002478 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    2478:	6803      	ldr	r3, [r0, #0]
    247a:	7e1a      	ldrb	r2, [r3, #24]
}

void SERCOM::flushUART()
{
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    247c:	07d2      	lsls	r2, r2, #31
    247e:	d402      	bmi.n	2486 <_ZN6SERCOM9flushUARTEv+0xe>
    return;

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
    2480:	7e1a      	ldrb	r2, [r3, #24]
    2482:	0792      	lsls	r2, r2, #30
    2484:	d5fc      	bpl.n	2480 <_ZN6SERCOM9flushUARTEv+0x8>
}
    2486:	4770      	bx	lr

00002488 <_ZN6SERCOM15clearStatusUARTEv>:

void SERCOM::clearStatusUART()
{
  //Reset (with 0) the STATUS register
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    2488:	2200      	movs	r2, #0
    248a:	6803      	ldr	r3, [r0, #0]
    248c:	835a      	strh	r2, [r3, #26]
}
    248e:	4770      	bx	lr

00002490 <_ZN6SERCOM17availableDataUARTEv>:

bool SERCOM::availableDataUART()
{
  //RXC : Receive Complete
  return sercom->USART.INTFLAG.bit.RXC;
    2490:	6803      	ldr	r3, [r0, #0]
    2492:	7e18      	ldrb	r0, [r3, #24]
    2494:	0740      	lsls	r0, r0, #29
    2496:	0fc0      	lsrs	r0, r0, #31
}
    2498:	4770      	bx	lr

0000249a <_ZN6SERCOM11isUARTErrorEv>:

bool SERCOM::isUARTError()
{
  return sercom->USART.INTFLAG.bit.ERROR;
    249a:	6803      	ldr	r3, [r0, #0]
    249c:	7e18      	ldrb	r0, [r3, #24]
    249e:	09c0      	lsrs	r0, r0, #7
}
    24a0:	4770      	bx	lr

000024a2 <_ZN6SERCOM20acknowledgeUARTErrorEv>:

void SERCOM::acknowledgeUARTError()
{
  sercom->USART.INTFLAG.bit.ERROR = 1;
    24a2:	2180      	movs	r1, #128	; 0x80
    24a4:	6802      	ldr	r2, [r0, #0]
    24a6:	4249      	negs	r1, r1
    24a8:	7e13      	ldrb	r3, [r2, #24]
    24aa:	430b      	orrs	r3, r1
    24ac:	7613      	strb	r3, [r2, #24]
}
    24ae:	4770      	bx	lr

000024b0 <_ZN6SERCOM12readDataUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
}

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    24b0:	6803      	ldr	r3, [r0, #0]
    24b2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    24b4:	b2c0      	uxtb	r0, r0
}
    24b6:	4770      	bx	lr

000024b8 <_ZN6SERCOM13writeDataUARTEh>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    24b8:	6803      	ldr	r3, [r0, #0]
    24ba:	7e1a      	ldrb	r2, [r3, #24]
}

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    24bc:	07d2      	lsls	r2, r2, #31
    24be:	d5fc      	bpl.n	24ba <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    24c0:	b289      	uxth	r1, r1
  return 1;
}
    24c2:	2001      	movs	r0, #1
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    24c4:	8519      	strh	r1, [r3, #40]	; 0x28
  return 1;
}
    24c6:	4770      	bx	lr

000024c8 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    24c8:	6803      	ldr	r3, [r0, #0]
    24ca:	4a22      	ldr	r2, [pc, #136]	; (2554 <_ZN6SERCOM13initClockNVICEv+0x8c>)
  }
}


void SERCOM::initClockNVIC( void )
{
    24cc:	b530      	push	{r4, r5, lr}
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    24ce:	4293      	cmp	r3, r2
    24d0:	d011      	beq.n	24f6 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    24d2:	4a21      	ldr	r2, [pc, #132]	; (2558 <_ZN6SERCOM13initClockNVICEv+0x90>)
    24d4:	4293      	cmp	r3, r2
    24d6:	d011      	beq.n	24fc <_ZN6SERCOM13initClockNVICEv+0x34>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    24d8:	4a20      	ldr	r2, [pc, #128]	; (255c <_ZN6SERCOM13initClockNVICEv+0x94>)
    24da:	4293      	cmp	r3, r2
    24dc:	d011      	beq.n	2502 <_ZN6SERCOM13initClockNVICEv+0x3a>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    24de:	4a20      	ldr	r2, [pc, #128]	; (2560 <_ZN6SERCOM13initClockNVICEv+0x98>)
    24e0:	4293      	cmp	r3, r2
    24e2:	d011      	beq.n	2508 <_ZN6SERCOM13initClockNVICEv+0x40>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
#if defined(SERCOM4)
  else if(sercom == SERCOM4)
    24e4:	4a1f      	ldr	r2, [pc, #124]	; (2564 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    24e6:	4293      	cmp	r3, r2
    24e8:	d011      	beq.n	250e <_ZN6SERCOM13initClockNVICEv+0x46>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
#endif
#if defined(SERCOM5)
  else if(sercom == SERCOM5)
    24ea:	4a1f      	ldr	r2, [pc, #124]	; (2568 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    24ec:	4293      	cmp	r3, r2
    24ee:	d12f      	bne.n	2550 <_ZN6SERCOM13initClockNVICEv+0x88>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    24f0:	230e      	movs	r3, #14
  }
#endif
#if defined(SERCOM5)
  else if(sercom == SERCOM5)
  {
    clockId = GCM_SERCOM5_CORE;
    24f2:	2219      	movs	r2, #25
    24f4:	e00d      	b.n	2512 <_ZN6SERCOM13initClockNVICEv+0x4a>
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
    24f6:	2309      	movs	r3, #9
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
  {
    clockId = GCM_SERCOM0_CORE;
    24f8:	2214      	movs	r2, #20
    24fa:	e00a      	b.n	2512 <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
    24fc:	230a      	movs	r3, #10
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
  {
    clockId = GCM_SERCOM1_CORE;
    24fe:	2215      	movs	r2, #21
    2500:	e007      	b.n	2512 <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
    2502:	230b      	movs	r3, #11
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
  {
    clockId = GCM_SERCOM2_CORE;
    2504:	2216      	movs	r2, #22
    2506:	e004      	b.n	2512 <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
    2508:	230c      	movs	r3, #12
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
  {
    clockId = GCM_SERCOM3_CORE;
    250a:	2217      	movs	r2, #23
    250c:	e001      	b.n	2512 <_ZN6SERCOM13initClockNVICEv+0x4a>
  }
#if defined(SERCOM4)
  else if(sercom == SERCOM4)
  {
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
    250e:	230d      	movs	r3, #13
    IdNvic = SERCOM3_IRQn;
  }
#if defined(SERCOM4)
  else if(sercom == SERCOM4)
  {
    clockId = GCM_SERCOM4_CORE;
    2510:	2218      	movs	r2, #24

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2512:	2101      	movs	r1, #1
    2514:	b2d8      	uxtb	r0, r3
    2516:	4081      	lsls	r1, r0
    2518:	4c14      	ldr	r4, [pc, #80]	; (256c <_ZN6SERCOM13initClockNVICEv+0xa4>)
    251a:	089b      	lsrs	r3, r3, #2
    251c:	6021      	str	r1, [r4, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    251e:	2103      	movs	r1, #3
    2520:	4001      	ands	r1, r0
    2522:	20ff      	movs	r0, #255	; 0xff
    2524:	009b      	lsls	r3, r3, #2
    2526:	191b      	adds	r3, r3, r4
    2528:	24c0      	movs	r4, #192	; 0xc0
    252a:	00c9      	lsls	r1, r1, #3
    252c:	4088      	lsls	r0, r1
    252e:	00a4      	lsls	r4, r4, #2
    2530:	591d      	ldr	r5, [r3, r4]
    2532:	4385      	bics	r5, r0
    2534:	20c0      	movs	r0, #192	; 0xc0
    2536:	4088      	lsls	r0, r1
    2538:	0001      	movs	r1, r0
    253a:	4329      	orrs	r1, r5
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    253c:	5119      	str	r1, [r3, r4]
  NVIC_SetPriority (IdNvic, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;
    253e:	2380      	movs	r3, #128	; 0x80
    2540:	01db      	lsls	r3, r3, #7
    2542:	431a      	orrs	r2, r3
    2544:	4b0a      	ldr	r3, [pc, #40]	; (2570 <_ZN6SERCOM13initClockNVICEv+0xa8>)
    2546:	805a      	strh	r2, [r3, #2]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2548:	785a      	ldrb	r2, [r3, #1]
    254a:	b252      	sxtb	r2, r2
    254c:	2a00      	cmp	r2, #0
    254e:	dbfb      	blt.n	2548 <_ZN6SERCOM13initClockNVICEv+0x80>
  {
    /* Wait for synchronization */
  }
}
    2550:	bd30      	pop	{r4, r5, pc}
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	42000800 	.word	0x42000800
    2558:	42000c00 	.word	0x42000c00
    255c:	42001000 	.word	0x42001000
    2560:	42001400 	.word	0x42001400
    2564:	42001800 	.word	0x42001800
    2568:	42001c00 	.word	0x42001c00
    256c:	e000e100 	.word	0xe000e100
    2570:	40000c00 	.word	0x40000c00

00002574 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
/* 	=========================
 *	===== Sercom UART
 *	=========================
*/
void SERCOM::initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate)
{
    2574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2576:	0004      	movs	r4, r0
    2578:	000f      	movs	r7, r1
    257a:	0016      	movs	r6, r2
    257c:	001d      	movs	r5, r3
  initClockNVIC();
    257e:	f7ff ffa3 	bl	24c8 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    2582:	0020      	movs	r0, r4
    2584:	f7ff ff61 	bl	244a <_ZN6SERCOM9resetUARTEv>

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2588:	231c      	movs	r3, #28
    258a:	00ba      	lsls	r2, r7, #2
    258c:	4013      	ands	r3, r2
    258e:	0772      	lsls	r2, r6, #29
    2590:	6821      	ldr	r1, [r4, #0]
    2592:	0c12      	lsrs	r2, r2, #16
    2594:	4313      	orrs	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    2596:	600b      	str	r3, [r1, #0]

  //Setting the Interrupt register
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
                                SERCOM_USART_INTENSET_ERROR; //All others errors
    2598:	2384      	movs	r3, #132	; 0x84
    259a:	6822      	ldr	r2, [r4, #0]
    259c:	7593      	strb	r3, [r2, #22]

  if ( mode == UART_INT_CLOCK )
    259e:	2f01      	cmp	r7, #1
    25a0:	d11a      	bne.n	25d8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x64>
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
      sampleRateValue = 16;
    25a2:	2110      	movs	r1, #16

  if ( mode == UART_INT_CLOCK )
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    25a4:	2e01      	cmp	r6, #1
    25a6:	d000      	beq.n	25aa <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x36>
      sampleRateValue = 16;
    } else {
      sampleRateValue = 8;
    25a8:	3908      	subs	r1, #8
    }

    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    25aa:	4b0c      	ldr	r3, [pc, #48]	; (25dc <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x68>)
    25ac:	4369      	muls	r1, r5
    25ae:	6818      	ldr	r0, [r3, #0]
    25b0:	00c0      	lsls	r0, r0, #3
    25b2:	f000 f9a7 	bl	2904 <__aeabi_uidiv>

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    25b6:	2307      	movs	r3, #7
    25b8:	6821      	ldr	r1, [r4, #0]
    25ba:	4003      	ands	r3, r0
    25bc:	898d      	ldrh	r5, [r1, #12]
    25be:	035a      	lsls	r2, r3, #13
    25c0:	04eb      	lsls	r3, r5, #19
    25c2:	0cdb      	lsrs	r3, r3, #19
    25c4:	4313      	orrs	r3, r2
    25c6:	818b      	strh	r3, [r1, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    25c8:	6821      	ldr	r1, [r4, #0]
    25ca:	0400      	lsls	r0, r0, #16
    25cc:	898a      	ldrh	r2, [r1, #12]
    25ce:	0cc3      	lsrs	r3, r0, #19
    25d0:	0b50      	lsrs	r0, r2, #13
    25d2:	0340      	lsls	r0, r0, #13
    25d4:	4318      	orrs	r0, r3
    25d6:	8188      	strh	r0, [r1, #12]
  }
}
    25d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	20000084 	.word	0x20000084

000025e0 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    25e0:	2001      	movs	r0, #1
    25e2:	4770      	bx	lr

000025e4 <_ZN4Uart5beginEm>:
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
}

void Uart::begin(unsigned long baudrate)
{
    25e4:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    25e6:	6803      	ldr	r3, [r0, #0]
    25e8:	4a01      	ldr	r2, [pc, #4]	; (25f0 <_ZN4Uart5beginEm+0xc>)
    25ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    25ec:	4798      	blx	r3
}
    25ee:	bd10      	pop	{r4, pc}
    25f0:	00000413 	.word	0x00000413

000025f4 <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    25f4:	b510      	push	{r4, lr}
    25f6:	0004      	movs	r4, r0
  sercom->resetUART();
    25f8:	6900      	ldr	r0, [r0, #16]
    25fa:	f7ff ff26 	bl	244a <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    25fe:	0020      	movs	r0, r4
    2600:	3014      	adds	r0, #20
    2602:	f000 f93c 	bl	287e <_ZN10RingBuffer5clearEv>
}
    2606:	bd10      	pop	{r4, pc}

00002608 <_ZN4Uart5flushEv>:

void Uart::flush()
{
    2608:	b510      	push	{r4, lr}
  sercom->flushUART();
    260a:	6900      	ldr	r0, [r0, #16]
    260c:	f7ff ff34 	bl	2478 <_ZN6SERCOM9flushUARTEv>
}
    2610:	bd10      	pop	{r4, pc}

00002612 <_ZN4Uart9availableEv>:
    sercom->clearStatusUART();
  }
}

int Uart::available()
{
    2612:	b510      	push	{r4, lr}
  return rxBuffer.available();
    2614:	3014      	adds	r0, #20
    2616:	f000 f94d 	bl	28b4 <_ZN10RingBuffer9availableEv>
}
    261a:	bd10      	pop	{r4, pc}

0000261c <_ZN4Uart4peekEv>:
{
  return (sercom->isDataRegisterEmptyUART() ? 1 : 0);
}

int Uart::peek()
{
    261c:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    261e:	3014      	adds	r0, #20
    2620:	f000 f951 	bl	28c6 <_ZN10RingBuffer4peekEv>
}
    2624:	bd10      	pop	{r4, pc}

00002626 <_ZN4Uart4readEv>:

int Uart::read()
{
    2626:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    2628:	3014      	adds	r0, #20
    262a:	f000 f92f 	bl	288c <_ZN10RingBuffer9read_charEv>
}
    262e:	bd10      	pop	{r4, pc}

00002630 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    2630:	b510      	push	{r4, lr}
  sercom->writeDataUART(data);
    2632:	6900      	ldr	r0, [r0, #16]
    2634:	f7ff ff40 	bl	24b8 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
}
    2638:	2001      	movs	r0, #1
    263a:	bd10      	pop	{r4, pc}

0000263c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:

#include "Uart.h"
#include "Arduino.h"
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
    263c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    263e:	001d      	movs	r5, r3
    2640:	ab08      	add	r3, sp, #32
    2642:	781b      	ldrb	r3, [r3, #0]
    2644:	0004      	movs	r4, r0
    2646:	9300      	str	r3, [sp, #0]
    2648:	ab09      	add	r3, sp, #36	; 0x24
    264a:	781b      	ldrb	r3, [r3, #0]
    264c:	0016      	movs	r6, r2
    264e:	9301      	str	r3, [sp, #4]
    2650:	2300      	movs	r3, #0
    2652:	6043      	str	r3, [r0, #4]
    2654:	23fa      	movs	r3, #250	; 0xfa
    2656:	009b      	lsls	r3, r3, #2
    2658:	6083      	str	r3, [r0, #8]
    265a:	4b0a      	ldr	r3, [pc, #40]	; (2684 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x48>)
    265c:	000f      	movs	r7, r1
    265e:	3308      	adds	r3, #8
    2660:	6003      	str	r3, [r0, #0]
    2662:	3014      	adds	r0, #20
    2664:	f000 f8ec 	bl	2840 <_ZN10RingBufferC1Ev>
{
  sercom = _s;
  uc_pinRX = _pinRX;
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
    2668:	466a      	mov	r2, sp
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
  uc_pinRX = _pinRX;
    266a:	0023      	movs	r3, r4
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
    266c:	7812      	ldrb	r2, [r2, #0]
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
  uc_pinRX = _pinRX;
    266e:	33c0      	adds	r3, #192	; 0xc0
#include "Arduino.h"
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
    2670:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
    2672:	709a      	strb	r2, [r3, #2]
  uc_padTX=_padTX;
    2674:	466a      	mov	r2, sp
    2676:	7912      	ldrb	r2, [r2, #4]
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
  uc_pinRX = _pinRX;
    2678:	701e      	strb	r6, [r3, #0]
  uc_pinTX = _pinTX;
    267a:	705d      	strb	r5, [r3, #1]
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
}
    267c:	0020      	movs	r0, r4
{
  sercom = _s;
  uc_pinRX = _pinRX;
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
    267e:	70da      	strb	r2, [r3, #3]
}
    2680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2682:	46c0      	nop			; (mov r8, r8)
    2684:	00003334 	.word	0x00003334

00002688 <_ZN4Uart10IrqHandlerEv>:
{
  sercom->flushUART();
}

void Uart::IrqHandler()
{
    2688:	b510      	push	{r4, lr}
    268a:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    268c:	6900      	ldr	r0, [r0, #16]
    268e:	f7ff feff 	bl	2490 <_ZN6SERCOM17availableDataUARTEv>
    2692:	2800      	cmp	r0, #0
    2694:	d007      	beq.n	26a6 <_ZN4Uart10IrqHandlerEv+0x1e>
    rxBuffer.store_char(sercom->readDataUART());
    2696:	6920      	ldr	r0, [r4, #16]
    2698:	f7ff ff0a 	bl	24b0 <_ZN6SERCOM12readDataUARTEv>
    269c:	0001      	movs	r1, r0
    269e:	0020      	movs	r0, r4
    26a0:	3014      	adds	r0, #20
    26a2:	f000 f8da 	bl	285a <_ZN10RingBuffer10store_charEh>
  }

  if (sercom->isUARTError()) {
    26a6:	6920      	ldr	r0, [r4, #16]
    26a8:	f7ff fef7 	bl	249a <_ZN6SERCOM11isUARTErrorEv>
    26ac:	2800      	cmp	r0, #0
    26ae:	d005      	beq.n	26bc <_ZN4Uart10IrqHandlerEv+0x34>
    sercom->acknowledgeUARTError();
    26b0:	6920      	ldr	r0, [r4, #16]
    26b2:	f7ff fef6 	bl	24a2 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    // TODO: if (sercom->isBufferOverflowErrorUART()) ....
    // TODO: if (sercom->isFrameErrorUART()) ....
    // TODO: if (sercom->isParityErrorUART()) ....
    sercom->clearStatusUART();
    26b6:	6920      	ldr	r0, [r4, #16]
    26b8:	f7ff fee6 	bl	2488 <_ZN6SERCOM15clearStatusUARTEv>
  }
}
    26bc:	bd10      	pop	{r4, pc}

000026be <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    26be:	23f0      	movs	r3, #240	; 0xf0
    26c0:	4019      	ands	r1, r3
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    26c2:	3930      	subs	r1, #48	; 0x30
    26c4:	0008      	movs	r0, r1
    26c6:	4241      	negs	r1, r0
    26c8:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    26ca:	4770      	bx	lr

000026cc <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    26cc:	23f0      	movs	r3, #240	; 0xf0
    26ce:	011b      	lsls	r3, r3, #4
    26d0:	4019      	ands	r1, r3
    26d2:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    26d4:	2006      	movs	r0, #6
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    26d6:	009b      	lsls	r3, r3, #2
    26d8:	4299      	cmp	r1, r3
    26da:	d00a      	beq.n	26f2 <_ZN4Uart15extractCharSizeEt+0x26>
    26dc:	3301      	adds	r3, #1
    26de:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    26e0:	3001      	adds	r0, #1
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    26e2:	4299      	cmp	r1, r3
    26e4:	d005      	beq.n	26f2 <_ZN4Uart15extractCharSizeEt+0x26>
    26e6:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;
    26e8:	3802      	subs	r0, #2
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    26ea:	005b      	lsls	r3, r3, #1
    26ec:	4299      	cmp	r1, r3
    26ee:	d000      	beq.n	26f2 <_ZN4Uart15extractCharSizeEt+0x26>
    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    26f0:	2000      	movs	r0, #0

  }
}
    26f2:	4770      	bx	lr

000026f4 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    26f4:	230f      	movs	r3, #15
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    26f6:	2000      	movs	r0, #0
  }
}

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    26f8:	4019      	ands	r1, r3
    26fa:	2901      	cmp	r1, #1
    26fc:	d004      	beq.n	2708 <_ZN4Uart13extractParityEt+0x14>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    26fe:	3902      	subs	r1, #2
    2700:	424b      	negs	r3, r1
    2702:	414b      	adcs	r3, r1
    2704:	3002      	adds	r0, #2
    2706:	1ac0      	subs	r0, r0, r3
      return SERCOM_EVEN_PARITY;

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    2708:	4770      	bx	lr
	...

0000270c <_ZN4Uart5beginEmt>:
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    270c:	0003      	movs	r3, r0
{
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    270e:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2710:	2518      	movs	r5, #24
{
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    2712:	b085      	sub	sp, #20
    2714:	9103      	str	r1, [sp, #12]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2716:	33c0      	adds	r3, #192	; 0xc0
{
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    2718:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    271a:	7818      	ldrb	r0, [r3, #0]
    271c:	002b      	movs	r3, r5
    271e:	2108      	movs	r1, #8
    2720:	4343      	muls	r3, r0
    2722:	4f1b      	ldr	r7, [pc, #108]	; (2790 <_ZN4Uart5beginEmt+0x84>)
{
  begin(baudrate, SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    2724:	0016      	movs	r6, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2726:	18fb      	adds	r3, r7, r3
    2728:	5659      	ldrsb	r1, [r3, r1]
    272a:	f7ff fc49 	bl	1fc0 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    272e:	0023      	movs	r3, r4
    2730:	2108      	movs	r1, #8
    2732:	33c1      	adds	r3, #193	; 0xc1
    2734:	7818      	ldrb	r0, [r3, #0]
    2736:	4345      	muls	r5, r0
    2738:	197f      	adds	r7, r7, r5
    273a:	5679      	ldrsb	r1, [r7, r1]
    273c:	f7ff fc40 	bl	1fc0 <pinPeripheral>

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    2740:	2201      	movs	r2, #1
    2742:	9b03      	ldr	r3, [sp, #12]
    2744:	0011      	movs	r1, r2
    2746:	6920      	ldr	r0, [r4, #16]
    2748:	f7ff ff14 	bl	2574 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    274c:	0031      	movs	r1, r6
    274e:	0020      	movs	r0, r4
    2750:	f7ff ffbc 	bl	26cc <_ZN4Uart15extractCharSizeEt>
    2754:	0031      	movs	r1, r6
    2756:	0005      	movs	r5, r0
    2758:	0020      	movs	r0, r4
    275a:	f7ff ffcb 	bl	26f4 <_ZN4Uart13extractParityEt>
    275e:	0031      	movs	r1, r6
    2760:	0007      	movs	r7, r0
    2762:	0020      	movs	r0, r4
    2764:	f7ff ffab 	bl	26be <_ZN4Uart16extractNbStopBitEt>
    2768:	003b      	movs	r3, r7
    276a:	9000      	str	r0, [sp, #0]
    276c:	0029      	movs	r1, r5
    276e:	6920      	ldr	r0, [r4, #16]
    2770:	2201      	movs	r2, #1
    2772:	f7ff fe37 	bl	23e4 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    2776:	0023      	movs	r3, r4
    2778:	33c2      	adds	r3, #194	; 0xc2
    277a:	781a      	ldrb	r2, [r3, #0]
    277c:	7859      	ldrb	r1, [r3, #1]
    277e:	6920      	ldr	r0, [r4, #16]
    2780:	f7ff fe50 	bl	2424 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    2784:	6920      	ldr	r0, [r4, #16]
    2786:	f7ff fe6d 	bl	2464 <_ZN6SERCOM10enableUARTEv>
}
    278a:	b005      	add	sp, #20
    278c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	00002ee4 	.word	0x00002ee4

00002794 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    2794:	b570      	push	{r4, r5, r6, lr}
    2796:	000e      	movs	r6, r1
	int sent = 0;
    2798:	2400      	movs	r4, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    279a:	6845      	ldr	r5, [r0, #4]
    279c:	2d00      	cmp	r5, #0
    279e:	d009      	beq.n	27b4 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
		int res = node->getInterface(interfaceCount);
    27a0:	682b      	ldr	r3, [r5, #0]
    27a2:	0031      	movs	r1, r6
    27a4:	685b      	ldr	r3, [r3, #4]
    27a6:	0028      	movs	r0, r5
    27a8:	4798      	blx	r3
		if (res < 0)
    27aa:	2800      	cmp	r0, #0
    27ac:	db04      	blt.n	27b8 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
			return -1;
		sent += res;
    27ae:	1824      	adds	r4, r4, r0

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    27b0:	68ed      	ldr	r5, [r5, #12]
    27b2:	e7f3      	b.n	279c <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
    27b4:	0020      	movs	r0, r4
    27b6:	e001      	b.n	27bc <_ZN13PluggableUSB_12getInterfaceEPh+0x28>
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
    27b8:	2001      	movs	r0, #1
    27ba:	4240      	negs	r0, r0
		sent += res;
	}
	return sent;
}
    27bc:	bd70      	pop	{r4, r5, r6, pc}

000027be <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    27be:	b570      	push	{r4, r5, r6, lr}
    27c0:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    27c2:	6844      	ldr	r4, [r0, #4]
    27c4:	2c00      	cmp	r4, #0
    27c6:	d008      	beq.n	27da <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    27c8:	6823      	ldr	r3, [r4, #0]
    27ca:	0029      	movs	r1, r5
    27cc:	689b      	ldr	r3, [r3, #8]
    27ce:	0020      	movs	r0, r4
    27d0:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    27d2:	2800      	cmp	r0, #0
    27d4:	d102      	bne.n	27dc <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
}

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    27d6:	68e4      	ldr	r4, [r4, #12]
    27d8:	e7f4      	b.n	27c4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
		int ret = node->getDescriptor(setup);
		// ret!=0 -> request has been processed
		if (ret)
			return ret;
	}
	return 0;
    27da:	0020      	movs	r0, r4
}
    27dc:	bd70      	pop	{r4, r5, r6, pc}

000027de <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    27de:	b570      	push	{r4, r5, r6, lr}
    27e0:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    27e2:	6844      	ldr	r4, [r0, #4]
    27e4:	2c00      	cmp	r4, #0
    27e6:	d007      	beq.n	27f8 <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    27e8:	6823      	ldr	r3, [r4, #0]
    27ea:	0029      	movs	r1, r5
    27ec:	0020      	movs	r0, r4
    27ee:	68db      	ldr	r3, [r3, #12]
    27f0:	4798      	blx	r3
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    27f2:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    27f4:	182d      	adds	r5, r5, r0
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    27f6:	e7f5      	b.n	27e4 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
               iSerialNum += node->getShortName(iSerialNum);
       }
       *iSerialNum = 0;
    27f8:	702c      	strb	r4, [r5, #0]
}
    27fa:	bd70      	pop	{r4, r5, r6, pc}

000027fc <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    27fc:	b570      	push	{r4, r5, r6, lr}
    27fe:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    2800:	6844      	ldr	r4, [r0, #4]
    2802:	2c00      	cmp	r4, #0
    2804:	d008      	beq.n	2818 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    2806:	6823      	ldr	r3, [r4, #0]
    2808:	0029      	movs	r1, r5
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	0020      	movs	r0, r4
    280e:	4798      	blx	r3
    2810:	2800      	cmp	r0, #0
    2812:	d102      	bne.n	281a <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
}

bool PluggableUSB_::setup(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    2814:	68e4      	ldr	r4, [r4, #12]
    2816:	e7f4      	b.n	2802 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
		if (node->setup(setup)) {
			return true;
		}
	}
	return false;
    2818:	0020      	movs	r0, r4
}
    281a:	bd70      	pop	{r4, r5, r6, pc}

0000281c <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    281c:	2101      	movs	r1, #1
    281e:	4a06      	ldr	r2, [pc, #24]	; (2838 <_Z12PluggableUSBv+0x1c>)
	return true;
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
    2820:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    2822:	6813      	ldr	r3, [r2, #0]
    2824:	4805      	ldr	r0, [pc, #20]	; (283c <_Z12PluggableUSBv+0x20>)
    2826:	400b      	ands	r3, r1
    2828:	d105      	bne.n	2836 <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    282a:	2402      	movs	r4, #2
    282c:	7004      	strb	r4, [r0, #0]
    282e:	1924      	adds	r4, r4, r4
    2830:	7044      	strb	r4, [r0, #1]
    2832:	6043      	str	r3, [r0, #4]
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2834:	6011      	str	r1, [r2, #0]
	return obj;
}
    2836:	bd10      	pop	{r4, pc}
    2838:	20000d88 	.word	0x20000d88
    283c:	20000d80 	.word	0x20000d80

00002840 <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    2840:	b510      	push	{r4, lr}
    2842:	0004      	movs	r4, r0
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    2844:	22a4      	movs	r2, #164	; 0xa4
    2846:	2100      	movs	r1, #0
    2848:	f000 fa23 	bl	2c92 <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    284c:	0022      	movs	r2, r4
    284e:	2300      	movs	r3, #0
    2850:	32a4      	adds	r2, #164	; 0xa4

RingBuffer::RingBuffer( void )
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}
    2852:	0020      	movs	r0, r4
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    2854:	6013      	str	r3, [r2, #0]
	_iTail = 0;
    2856:	6053      	str	r3, [r2, #4]

RingBuffer::RingBuffer( void )
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}
    2858:	bd10      	pop	{r4, pc}

0000285a <_ZN10RingBuffer10store_charEh>:

void RingBuffer::store_char( uint8_t c )
{
    285a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i = nextIndex(_iHead);
    285c:	0005      	movs	r5, r0
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}

void RingBuffer::store_char( uint8_t c )
{
    285e:	0004      	movs	r4, r0
  int i = nextIndex(_iHead);
    2860:	35a4      	adds	r5, #164	; 0xa4
    2862:	682e      	ldr	r6, [r5, #0]
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}

void RingBuffer::store_char( uint8_t c )
{
    2864:	000f      	movs	r7, r1
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    2866:	1c70      	adds	r0, r6, #1
    2868:	21a4      	movs	r1, #164	; 0xa4
    286a:	f000 f8d1 	bl	2a10 <__aeabi_uidivmod>

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
    286e:	0023      	movs	r3, r4
    2870:	33a8      	adds	r3, #168	; 0xa8
    2872:	681b      	ldr	r3, [r3, #0]
    2874:	428b      	cmp	r3, r1
    2876:	d001      	beq.n	287c <_ZN10RingBuffer10store_charEh+0x22>
  {
    _aucBuffer[_iHead] = c ;
    2878:	55a7      	strb	r7, [r4, r6]
    _iHead = i ;
    287a:	6029      	str	r1, [r5, #0]
  }
}
    287c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000287e <_ZN10RingBuffer5clearEv>:

void RingBuffer::clear()
{
	_iHead = 0;
    287e:	0002      	movs	r2, r0
    2880:	2300      	movs	r3, #0
    2882:	32a4      	adds	r2, #164	; 0xa4
	_iTail = 0;
    2884:	30a8      	adds	r0, #168	; 0xa8
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    2886:	6013      	str	r3, [r2, #0]
	_iTail = 0;
    2888:	6003      	str	r3, [r0, #0]
}
    288a:	4770      	bx	lr

0000288c <_ZN10RingBuffer9read_charEv>:

int RingBuffer::read_char()
{
    288c:	b570      	push	{r4, r5, r6, lr}
	if(_iTail == _iHead)
    288e:	0002      	movs	r2, r0
    2890:	0005      	movs	r5, r0
    2892:	32a4      	adds	r2, #164	; 0xa4
    2894:	35a8      	adds	r5, #168	; 0xa8
    2896:	682b      	ldr	r3, [r5, #0]
    2898:	6812      	ldr	r2, [r2, #0]
    289a:	4293      	cmp	r3, r2
    289c:	d007      	beq.n	28ae <_ZN10RingBuffer9read_charEv+0x22>
		return -1;

	uint8_t value = _aucBuffer[_iTail];
    289e:	5cc4      	ldrb	r4, [r0, r3]
	_iTail = nextIndex(_iTail);
    28a0:	21a4      	movs	r1, #164	; 0xa4
    28a2:	1c58      	adds	r0, r3, #1
    28a4:	f000 f8b4 	bl	2a10 <__aeabi_uidivmod>

	return value;
    28a8:	0020      	movs	r0, r4
{
	if(_iTail == _iHead)
		return -1;

	uint8_t value = _aucBuffer[_iTail];
	_iTail = nextIndex(_iTail);
    28aa:	6029      	str	r1, [r5, #0]

	return value;
    28ac:	e001      	b.n	28b2 <_ZN10RingBuffer9read_charEv+0x26>
}

int RingBuffer::read_char()
{
	if(_iTail == _iHead)
		return -1;
    28ae:	2001      	movs	r0, #1
    28b0:	4240      	negs	r0, r0

	uint8_t value = _aucBuffer[_iTail];
	_iTail = nextIndex(_iTail);

	return value;
}
    28b2:	bd70      	pop	{r4, r5, r6, pc}

000028b4 <_ZN10RingBuffer9availableEv>:

int RingBuffer::available()
{
	int delta = _iHead - _iTail;
    28b4:	0003      	movs	r3, r0
    28b6:	30a8      	adds	r0, #168	; 0xa8
    28b8:	33a4      	adds	r3, #164	; 0xa4
    28ba:	681b      	ldr	r3, [r3, #0]
    28bc:	6800      	ldr	r0, [r0, #0]
    28be:	1a18      	subs	r0, r3, r0

	if(delta < 0)
    28c0:	d500      	bpl.n	28c4 <_ZN10RingBuffer9availableEv+0x10>
		return SERIAL_BUFFER_SIZE + delta;
    28c2:	30a4      	adds	r0, #164	; 0xa4
	else
		return delta;
}
    28c4:	4770      	bx	lr

000028c6 <_ZN10RingBuffer4peekEv>:

int RingBuffer::peek()
{
	if(_iTail == _iHead)
    28c6:	0003      	movs	r3, r0
    28c8:	0002      	movs	r2, r0
    28ca:	33a8      	adds	r3, #168	; 0xa8
    28cc:	32a4      	adds	r2, #164	; 0xa4
    28ce:	681b      	ldr	r3, [r3, #0]
    28d0:	6812      	ldr	r2, [r2, #0]
    28d2:	4293      	cmp	r3, r2
    28d4:	d001      	beq.n	28da <_ZN10RingBuffer4peekEv+0x14>
		return -1;

	return _aucBuffer[_iTail];
    28d6:	5cc0      	ldrb	r0, [r0, r3]
    28d8:	e001      	b.n	28de <_ZN10RingBuffer4peekEv+0x18>
}

int RingBuffer::peek()
{
	if(_iTail == _iHead)
		return -1;
    28da:	2001      	movs	r0, #1
    28dc:	4240      	negs	r0, r0

	return _aucBuffer[_iTail];
}
    28de:	4770      	bx	lr

000028e0 <__aeabi_atexit>:
    28e0:	000b      	movs	r3, r1
    28e2:	b510      	push	{r4, lr}
    28e4:	0001      	movs	r1, r0
    28e6:	0018      	movs	r0, r3
    28e8:	f000 f982 	bl	2bf0 <__cxa_atexit>
    28ec:	bd10      	pop	{r4, pc}
	...

000028f0 <__gnu_thumb1_case_uqi>:
    28f0:	b402      	push	{r1}
    28f2:	4671      	mov	r1, lr
    28f4:	0849      	lsrs	r1, r1, #1
    28f6:	0049      	lsls	r1, r1, #1
    28f8:	5c09      	ldrb	r1, [r1, r0]
    28fa:	0049      	lsls	r1, r1, #1
    28fc:	448e      	add	lr, r1
    28fe:	bc02      	pop	{r1}
    2900:	4770      	bx	lr
    2902:	46c0      	nop			; (mov r8, r8)

00002904 <__aeabi_uidiv>:
    2904:	2200      	movs	r2, #0
    2906:	0843      	lsrs	r3, r0, #1
    2908:	428b      	cmp	r3, r1
    290a:	d374      	bcc.n	29f6 <__aeabi_uidiv+0xf2>
    290c:	0903      	lsrs	r3, r0, #4
    290e:	428b      	cmp	r3, r1
    2910:	d35f      	bcc.n	29d2 <__aeabi_uidiv+0xce>
    2912:	0a03      	lsrs	r3, r0, #8
    2914:	428b      	cmp	r3, r1
    2916:	d344      	bcc.n	29a2 <__aeabi_uidiv+0x9e>
    2918:	0b03      	lsrs	r3, r0, #12
    291a:	428b      	cmp	r3, r1
    291c:	d328      	bcc.n	2970 <__aeabi_uidiv+0x6c>
    291e:	0c03      	lsrs	r3, r0, #16
    2920:	428b      	cmp	r3, r1
    2922:	d30d      	bcc.n	2940 <__aeabi_uidiv+0x3c>
    2924:	22ff      	movs	r2, #255	; 0xff
    2926:	0209      	lsls	r1, r1, #8
    2928:	ba12      	rev	r2, r2
    292a:	0c03      	lsrs	r3, r0, #16
    292c:	428b      	cmp	r3, r1
    292e:	d302      	bcc.n	2936 <__aeabi_uidiv+0x32>
    2930:	1212      	asrs	r2, r2, #8
    2932:	0209      	lsls	r1, r1, #8
    2934:	d065      	beq.n	2a02 <__aeabi_uidiv+0xfe>
    2936:	0b03      	lsrs	r3, r0, #12
    2938:	428b      	cmp	r3, r1
    293a:	d319      	bcc.n	2970 <__aeabi_uidiv+0x6c>
    293c:	e000      	b.n	2940 <__aeabi_uidiv+0x3c>
    293e:	0a09      	lsrs	r1, r1, #8
    2940:	0bc3      	lsrs	r3, r0, #15
    2942:	428b      	cmp	r3, r1
    2944:	d301      	bcc.n	294a <__aeabi_uidiv+0x46>
    2946:	03cb      	lsls	r3, r1, #15
    2948:	1ac0      	subs	r0, r0, r3
    294a:	4152      	adcs	r2, r2
    294c:	0b83      	lsrs	r3, r0, #14
    294e:	428b      	cmp	r3, r1
    2950:	d301      	bcc.n	2956 <__aeabi_uidiv+0x52>
    2952:	038b      	lsls	r3, r1, #14
    2954:	1ac0      	subs	r0, r0, r3
    2956:	4152      	adcs	r2, r2
    2958:	0b43      	lsrs	r3, r0, #13
    295a:	428b      	cmp	r3, r1
    295c:	d301      	bcc.n	2962 <__aeabi_uidiv+0x5e>
    295e:	034b      	lsls	r3, r1, #13
    2960:	1ac0      	subs	r0, r0, r3
    2962:	4152      	adcs	r2, r2
    2964:	0b03      	lsrs	r3, r0, #12
    2966:	428b      	cmp	r3, r1
    2968:	d301      	bcc.n	296e <__aeabi_uidiv+0x6a>
    296a:	030b      	lsls	r3, r1, #12
    296c:	1ac0      	subs	r0, r0, r3
    296e:	4152      	adcs	r2, r2
    2970:	0ac3      	lsrs	r3, r0, #11
    2972:	428b      	cmp	r3, r1
    2974:	d301      	bcc.n	297a <__aeabi_uidiv+0x76>
    2976:	02cb      	lsls	r3, r1, #11
    2978:	1ac0      	subs	r0, r0, r3
    297a:	4152      	adcs	r2, r2
    297c:	0a83      	lsrs	r3, r0, #10
    297e:	428b      	cmp	r3, r1
    2980:	d301      	bcc.n	2986 <__aeabi_uidiv+0x82>
    2982:	028b      	lsls	r3, r1, #10
    2984:	1ac0      	subs	r0, r0, r3
    2986:	4152      	adcs	r2, r2
    2988:	0a43      	lsrs	r3, r0, #9
    298a:	428b      	cmp	r3, r1
    298c:	d301      	bcc.n	2992 <__aeabi_uidiv+0x8e>
    298e:	024b      	lsls	r3, r1, #9
    2990:	1ac0      	subs	r0, r0, r3
    2992:	4152      	adcs	r2, r2
    2994:	0a03      	lsrs	r3, r0, #8
    2996:	428b      	cmp	r3, r1
    2998:	d301      	bcc.n	299e <__aeabi_uidiv+0x9a>
    299a:	020b      	lsls	r3, r1, #8
    299c:	1ac0      	subs	r0, r0, r3
    299e:	4152      	adcs	r2, r2
    29a0:	d2cd      	bcs.n	293e <__aeabi_uidiv+0x3a>
    29a2:	09c3      	lsrs	r3, r0, #7
    29a4:	428b      	cmp	r3, r1
    29a6:	d301      	bcc.n	29ac <__aeabi_uidiv+0xa8>
    29a8:	01cb      	lsls	r3, r1, #7
    29aa:	1ac0      	subs	r0, r0, r3
    29ac:	4152      	adcs	r2, r2
    29ae:	0983      	lsrs	r3, r0, #6
    29b0:	428b      	cmp	r3, r1
    29b2:	d301      	bcc.n	29b8 <__aeabi_uidiv+0xb4>
    29b4:	018b      	lsls	r3, r1, #6
    29b6:	1ac0      	subs	r0, r0, r3
    29b8:	4152      	adcs	r2, r2
    29ba:	0943      	lsrs	r3, r0, #5
    29bc:	428b      	cmp	r3, r1
    29be:	d301      	bcc.n	29c4 <__aeabi_uidiv+0xc0>
    29c0:	014b      	lsls	r3, r1, #5
    29c2:	1ac0      	subs	r0, r0, r3
    29c4:	4152      	adcs	r2, r2
    29c6:	0903      	lsrs	r3, r0, #4
    29c8:	428b      	cmp	r3, r1
    29ca:	d301      	bcc.n	29d0 <__aeabi_uidiv+0xcc>
    29cc:	010b      	lsls	r3, r1, #4
    29ce:	1ac0      	subs	r0, r0, r3
    29d0:	4152      	adcs	r2, r2
    29d2:	08c3      	lsrs	r3, r0, #3
    29d4:	428b      	cmp	r3, r1
    29d6:	d301      	bcc.n	29dc <__aeabi_uidiv+0xd8>
    29d8:	00cb      	lsls	r3, r1, #3
    29da:	1ac0      	subs	r0, r0, r3
    29dc:	4152      	adcs	r2, r2
    29de:	0883      	lsrs	r3, r0, #2
    29e0:	428b      	cmp	r3, r1
    29e2:	d301      	bcc.n	29e8 <__aeabi_uidiv+0xe4>
    29e4:	008b      	lsls	r3, r1, #2
    29e6:	1ac0      	subs	r0, r0, r3
    29e8:	4152      	adcs	r2, r2
    29ea:	0843      	lsrs	r3, r0, #1
    29ec:	428b      	cmp	r3, r1
    29ee:	d301      	bcc.n	29f4 <__aeabi_uidiv+0xf0>
    29f0:	004b      	lsls	r3, r1, #1
    29f2:	1ac0      	subs	r0, r0, r3
    29f4:	4152      	adcs	r2, r2
    29f6:	1a41      	subs	r1, r0, r1
    29f8:	d200      	bcs.n	29fc <__aeabi_uidiv+0xf8>
    29fa:	4601      	mov	r1, r0
    29fc:	4152      	adcs	r2, r2
    29fe:	4610      	mov	r0, r2
    2a00:	4770      	bx	lr
    2a02:	e7ff      	b.n	2a04 <__aeabi_uidiv+0x100>
    2a04:	b501      	push	{r0, lr}
    2a06:	2000      	movs	r0, #0
    2a08:	f000 f8f0 	bl	2bec <__aeabi_idiv0>
    2a0c:	bd02      	pop	{r1, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)

00002a10 <__aeabi_uidivmod>:
    2a10:	2900      	cmp	r1, #0
    2a12:	d0f7      	beq.n	2a04 <__aeabi_uidiv+0x100>
    2a14:	e776      	b.n	2904 <__aeabi_uidiv>
    2a16:	4770      	bx	lr

00002a18 <__aeabi_idiv>:
    2a18:	4603      	mov	r3, r0
    2a1a:	430b      	orrs	r3, r1
    2a1c:	d47f      	bmi.n	2b1e <__aeabi_idiv+0x106>
    2a1e:	2200      	movs	r2, #0
    2a20:	0843      	lsrs	r3, r0, #1
    2a22:	428b      	cmp	r3, r1
    2a24:	d374      	bcc.n	2b10 <__aeabi_idiv+0xf8>
    2a26:	0903      	lsrs	r3, r0, #4
    2a28:	428b      	cmp	r3, r1
    2a2a:	d35f      	bcc.n	2aec <__aeabi_idiv+0xd4>
    2a2c:	0a03      	lsrs	r3, r0, #8
    2a2e:	428b      	cmp	r3, r1
    2a30:	d344      	bcc.n	2abc <__aeabi_idiv+0xa4>
    2a32:	0b03      	lsrs	r3, r0, #12
    2a34:	428b      	cmp	r3, r1
    2a36:	d328      	bcc.n	2a8a <__aeabi_idiv+0x72>
    2a38:	0c03      	lsrs	r3, r0, #16
    2a3a:	428b      	cmp	r3, r1
    2a3c:	d30d      	bcc.n	2a5a <__aeabi_idiv+0x42>
    2a3e:	22ff      	movs	r2, #255	; 0xff
    2a40:	0209      	lsls	r1, r1, #8
    2a42:	ba12      	rev	r2, r2
    2a44:	0c03      	lsrs	r3, r0, #16
    2a46:	428b      	cmp	r3, r1
    2a48:	d302      	bcc.n	2a50 <__aeabi_idiv+0x38>
    2a4a:	1212      	asrs	r2, r2, #8
    2a4c:	0209      	lsls	r1, r1, #8
    2a4e:	d065      	beq.n	2b1c <__aeabi_idiv+0x104>
    2a50:	0b03      	lsrs	r3, r0, #12
    2a52:	428b      	cmp	r3, r1
    2a54:	d319      	bcc.n	2a8a <__aeabi_idiv+0x72>
    2a56:	e000      	b.n	2a5a <__aeabi_idiv+0x42>
    2a58:	0a09      	lsrs	r1, r1, #8
    2a5a:	0bc3      	lsrs	r3, r0, #15
    2a5c:	428b      	cmp	r3, r1
    2a5e:	d301      	bcc.n	2a64 <__aeabi_idiv+0x4c>
    2a60:	03cb      	lsls	r3, r1, #15
    2a62:	1ac0      	subs	r0, r0, r3
    2a64:	4152      	adcs	r2, r2
    2a66:	0b83      	lsrs	r3, r0, #14
    2a68:	428b      	cmp	r3, r1
    2a6a:	d301      	bcc.n	2a70 <__aeabi_idiv+0x58>
    2a6c:	038b      	lsls	r3, r1, #14
    2a6e:	1ac0      	subs	r0, r0, r3
    2a70:	4152      	adcs	r2, r2
    2a72:	0b43      	lsrs	r3, r0, #13
    2a74:	428b      	cmp	r3, r1
    2a76:	d301      	bcc.n	2a7c <__aeabi_idiv+0x64>
    2a78:	034b      	lsls	r3, r1, #13
    2a7a:	1ac0      	subs	r0, r0, r3
    2a7c:	4152      	adcs	r2, r2
    2a7e:	0b03      	lsrs	r3, r0, #12
    2a80:	428b      	cmp	r3, r1
    2a82:	d301      	bcc.n	2a88 <__aeabi_idiv+0x70>
    2a84:	030b      	lsls	r3, r1, #12
    2a86:	1ac0      	subs	r0, r0, r3
    2a88:	4152      	adcs	r2, r2
    2a8a:	0ac3      	lsrs	r3, r0, #11
    2a8c:	428b      	cmp	r3, r1
    2a8e:	d301      	bcc.n	2a94 <__aeabi_idiv+0x7c>
    2a90:	02cb      	lsls	r3, r1, #11
    2a92:	1ac0      	subs	r0, r0, r3
    2a94:	4152      	adcs	r2, r2
    2a96:	0a83      	lsrs	r3, r0, #10
    2a98:	428b      	cmp	r3, r1
    2a9a:	d301      	bcc.n	2aa0 <__aeabi_idiv+0x88>
    2a9c:	028b      	lsls	r3, r1, #10
    2a9e:	1ac0      	subs	r0, r0, r3
    2aa0:	4152      	adcs	r2, r2
    2aa2:	0a43      	lsrs	r3, r0, #9
    2aa4:	428b      	cmp	r3, r1
    2aa6:	d301      	bcc.n	2aac <__aeabi_idiv+0x94>
    2aa8:	024b      	lsls	r3, r1, #9
    2aaa:	1ac0      	subs	r0, r0, r3
    2aac:	4152      	adcs	r2, r2
    2aae:	0a03      	lsrs	r3, r0, #8
    2ab0:	428b      	cmp	r3, r1
    2ab2:	d301      	bcc.n	2ab8 <__aeabi_idiv+0xa0>
    2ab4:	020b      	lsls	r3, r1, #8
    2ab6:	1ac0      	subs	r0, r0, r3
    2ab8:	4152      	adcs	r2, r2
    2aba:	d2cd      	bcs.n	2a58 <__aeabi_idiv+0x40>
    2abc:	09c3      	lsrs	r3, r0, #7
    2abe:	428b      	cmp	r3, r1
    2ac0:	d301      	bcc.n	2ac6 <__aeabi_idiv+0xae>
    2ac2:	01cb      	lsls	r3, r1, #7
    2ac4:	1ac0      	subs	r0, r0, r3
    2ac6:	4152      	adcs	r2, r2
    2ac8:	0983      	lsrs	r3, r0, #6
    2aca:	428b      	cmp	r3, r1
    2acc:	d301      	bcc.n	2ad2 <__aeabi_idiv+0xba>
    2ace:	018b      	lsls	r3, r1, #6
    2ad0:	1ac0      	subs	r0, r0, r3
    2ad2:	4152      	adcs	r2, r2
    2ad4:	0943      	lsrs	r3, r0, #5
    2ad6:	428b      	cmp	r3, r1
    2ad8:	d301      	bcc.n	2ade <__aeabi_idiv+0xc6>
    2ada:	014b      	lsls	r3, r1, #5
    2adc:	1ac0      	subs	r0, r0, r3
    2ade:	4152      	adcs	r2, r2
    2ae0:	0903      	lsrs	r3, r0, #4
    2ae2:	428b      	cmp	r3, r1
    2ae4:	d301      	bcc.n	2aea <__aeabi_idiv+0xd2>
    2ae6:	010b      	lsls	r3, r1, #4
    2ae8:	1ac0      	subs	r0, r0, r3
    2aea:	4152      	adcs	r2, r2
    2aec:	08c3      	lsrs	r3, r0, #3
    2aee:	428b      	cmp	r3, r1
    2af0:	d301      	bcc.n	2af6 <__aeabi_idiv+0xde>
    2af2:	00cb      	lsls	r3, r1, #3
    2af4:	1ac0      	subs	r0, r0, r3
    2af6:	4152      	adcs	r2, r2
    2af8:	0883      	lsrs	r3, r0, #2
    2afa:	428b      	cmp	r3, r1
    2afc:	d301      	bcc.n	2b02 <__aeabi_idiv+0xea>
    2afe:	008b      	lsls	r3, r1, #2
    2b00:	1ac0      	subs	r0, r0, r3
    2b02:	4152      	adcs	r2, r2
    2b04:	0843      	lsrs	r3, r0, #1
    2b06:	428b      	cmp	r3, r1
    2b08:	d301      	bcc.n	2b0e <__aeabi_idiv+0xf6>
    2b0a:	004b      	lsls	r3, r1, #1
    2b0c:	1ac0      	subs	r0, r0, r3
    2b0e:	4152      	adcs	r2, r2
    2b10:	1a41      	subs	r1, r0, r1
    2b12:	d200      	bcs.n	2b16 <__aeabi_idiv+0xfe>
    2b14:	4601      	mov	r1, r0
    2b16:	4152      	adcs	r2, r2
    2b18:	4610      	mov	r0, r2
    2b1a:	4770      	bx	lr
    2b1c:	e05d      	b.n	2bda <__aeabi_idiv+0x1c2>
    2b1e:	0fca      	lsrs	r2, r1, #31
    2b20:	d000      	beq.n	2b24 <__aeabi_idiv+0x10c>
    2b22:	4249      	negs	r1, r1
    2b24:	1003      	asrs	r3, r0, #32
    2b26:	d300      	bcc.n	2b2a <__aeabi_idiv+0x112>
    2b28:	4240      	negs	r0, r0
    2b2a:	4053      	eors	r3, r2
    2b2c:	2200      	movs	r2, #0
    2b2e:	469c      	mov	ip, r3
    2b30:	0903      	lsrs	r3, r0, #4
    2b32:	428b      	cmp	r3, r1
    2b34:	d32d      	bcc.n	2b92 <__aeabi_idiv+0x17a>
    2b36:	0a03      	lsrs	r3, r0, #8
    2b38:	428b      	cmp	r3, r1
    2b3a:	d312      	bcc.n	2b62 <__aeabi_idiv+0x14a>
    2b3c:	22fc      	movs	r2, #252	; 0xfc
    2b3e:	0189      	lsls	r1, r1, #6
    2b40:	ba12      	rev	r2, r2
    2b42:	0a03      	lsrs	r3, r0, #8
    2b44:	428b      	cmp	r3, r1
    2b46:	d30c      	bcc.n	2b62 <__aeabi_idiv+0x14a>
    2b48:	0189      	lsls	r1, r1, #6
    2b4a:	1192      	asrs	r2, r2, #6
    2b4c:	428b      	cmp	r3, r1
    2b4e:	d308      	bcc.n	2b62 <__aeabi_idiv+0x14a>
    2b50:	0189      	lsls	r1, r1, #6
    2b52:	1192      	asrs	r2, r2, #6
    2b54:	428b      	cmp	r3, r1
    2b56:	d304      	bcc.n	2b62 <__aeabi_idiv+0x14a>
    2b58:	0189      	lsls	r1, r1, #6
    2b5a:	d03a      	beq.n	2bd2 <__aeabi_idiv+0x1ba>
    2b5c:	1192      	asrs	r2, r2, #6
    2b5e:	e000      	b.n	2b62 <__aeabi_idiv+0x14a>
    2b60:	0989      	lsrs	r1, r1, #6
    2b62:	09c3      	lsrs	r3, r0, #7
    2b64:	428b      	cmp	r3, r1
    2b66:	d301      	bcc.n	2b6c <__aeabi_idiv+0x154>
    2b68:	01cb      	lsls	r3, r1, #7
    2b6a:	1ac0      	subs	r0, r0, r3
    2b6c:	4152      	adcs	r2, r2
    2b6e:	0983      	lsrs	r3, r0, #6
    2b70:	428b      	cmp	r3, r1
    2b72:	d301      	bcc.n	2b78 <__aeabi_idiv+0x160>
    2b74:	018b      	lsls	r3, r1, #6
    2b76:	1ac0      	subs	r0, r0, r3
    2b78:	4152      	adcs	r2, r2
    2b7a:	0943      	lsrs	r3, r0, #5
    2b7c:	428b      	cmp	r3, r1
    2b7e:	d301      	bcc.n	2b84 <__aeabi_idiv+0x16c>
    2b80:	014b      	lsls	r3, r1, #5
    2b82:	1ac0      	subs	r0, r0, r3
    2b84:	4152      	adcs	r2, r2
    2b86:	0903      	lsrs	r3, r0, #4
    2b88:	428b      	cmp	r3, r1
    2b8a:	d301      	bcc.n	2b90 <__aeabi_idiv+0x178>
    2b8c:	010b      	lsls	r3, r1, #4
    2b8e:	1ac0      	subs	r0, r0, r3
    2b90:	4152      	adcs	r2, r2
    2b92:	08c3      	lsrs	r3, r0, #3
    2b94:	428b      	cmp	r3, r1
    2b96:	d301      	bcc.n	2b9c <__aeabi_idiv+0x184>
    2b98:	00cb      	lsls	r3, r1, #3
    2b9a:	1ac0      	subs	r0, r0, r3
    2b9c:	4152      	adcs	r2, r2
    2b9e:	0883      	lsrs	r3, r0, #2
    2ba0:	428b      	cmp	r3, r1
    2ba2:	d301      	bcc.n	2ba8 <__aeabi_idiv+0x190>
    2ba4:	008b      	lsls	r3, r1, #2
    2ba6:	1ac0      	subs	r0, r0, r3
    2ba8:	4152      	adcs	r2, r2
    2baa:	d2d9      	bcs.n	2b60 <__aeabi_idiv+0x148>
    2bac:	0843      	lsrs	r3, r0, #1
    2bae:	428b      	cmp	r3, r1
    2bb0:	d301      	bcc.n	2bb6 <__aeabi_idiv+0x19e>
    2bb2:	004b      	lsls	r3, r1, #1
    2bb4:	1ac0      	subs	r0, r0, r3
    2bb6:	4152      	adcs	r2, r2
    2bb8:	1a41      	subs	r1, r0, r1
    2bba:	d200      	bcs.n	2bbe <__aeabi_idiv+0x1a6>
    2bbc:	4601      	mov	r1, r0
    2bbe:	4663      	mov	r3, ip
    2bc0:	4152      	adcs	r2, r2
    2bc2:	105b      	asrs	r3, r3, #1
    2bc4:	4610      	mov	r0, r2
    2bc6:	d301      	bcc.n	2bcc <__aeabi_idiv+0x1b4>
    2bc8:	4240      	negs	r0, r0
    2bca:	2b00      	cmp	r3, #0
    2bcc:	d500      	bpl.n	2bd0 <__aeabi_idiv+0x1b8>
    2bce:	4249      	negs	r1, r1
    2bd0:	4770      	bx	lr
    2bd2:	4663      	mov	r3, ip
    2bd4:	105b      	asrs	r3, r3, #1
    2bd6:	d300      	bcc.n	2bda <__aeabi_idiv+0x1c2>
    2bd8:	4240      	negs	r0, r0
    2bda:	b501      	push	{r0, lr}
    2bdc:	2000      	movs	r0, #0
    2bde:	f000 f805 	bl	2bec <__aeabi_idiv0>
    2be2:	bd02      	pop	{r1, pc}

00002be4 <__aeabi_idivmod>:
    2be4:	2900      	cmp	r1, #0
    2be6:	d0f8      	beq.n	2bda <__aeabi_idiv+0x1c2>
    2be8:	e716      	b.n	2a18 <__aeabi_idiv>
    2bea:	4770      	bx	lr

00002bec <__aeabi_idiv0>:
    2bec:	4770      	bx	lr
    2bee:	46c0      	nop			; (mov r8, r8)

00002bf0 <__cxa_atexit>:
    2bf0:	b570      	push	{r4, r5, r6, lr}
    2bf2:	4c05      	ldr	r4, [pc, #20]	; (2c08 <__cxa_atexit+0x18>)
    2bf4:	0005      	movs	r5, r0
    2bf6:	0013      	movs	r3, r2
    2bf8:	1e20      	subs	r0, r4, #0
    2bfa:	d004      	beq.n	2c06 <__cxa_atexit+0x16>
    2bfc:	000a      	movs	r2, r1
    2bfe:	2002      	movs	r0, #2
    2c00:	0029      	movs	r1, r5
    2c02:	e000      	b.n	2c06 <__cxa_atexit+0x16>
    2c04:	bf00      	nop
    2c06:	bd70      	pop	{r4, r5, r6, pc}
    2c08:	00000000 	.word	0x00000000

00002c0c <__libc_init_array>:
    2c0c:	4b0e      	ldr	r3, [pc, #56]	; (2c48 <__libc_init_array+0x3c>)
    2c0e:	b570      	push	{r4, r5, r6, lr}
    2c10:	2500      	movs	r5, #0
    2c12:	001e      	movs	r6, r3
    2c14:	4c0d      	ldr	r4, [pc, #52]	; (2c4c <__libc_init_array+0x40>)
    2c16:	1ae4      	subs	r4, r4, r3
    2c18:	10a4      	asrs	r4, r4, #2
    2c1a:	42a5      	cmp	r5, r4
    2c1c:	d004      	beq.n	2c28 <__libc_init_array+0x1c>
    2c1e:	00ab      	lsls	r3, r5, #2
    2c20:	58f3      	ldr	r3, [r6, r3]
    2c22:	4798      	blx	r3
    2c24:	3501      	adds	r5, #1
    2c26:	e7f8      	b.n	2c1a <__libc_init_array+0xe>
    2c28:	f000 f900 	bl	2e2c <_init>
    2c2c:	4b08      	ldr	r3, [pc, #32]	; (2c50 <__libc_init_array+0x44>)
    2c2e:	2500      	movs	r5, #0
    2c30:	001e      	movs	r6, r3
    2c32:	4c08      	ldr	r4, [pc, #32]	; (2c54 <__libc_init_array+0x48>)
    2c34:	1ae4      	subs	r4, r4, r3
    2c36:	10a4      	asrs	r4, r4, #2
    2c38:	42a5      	cmp	r5, r4
    2c3a:	d004      	beq.n	2c46 <__libc_init_array+0x3a>
    2c3c:	00ab      	lsls	r3, r5, #2
    2c3e:	58f3      	ldr	r3, [r6, r3]
    2c40:	4798      	blx	r3
    2c42:	3501      	adds	r5, #1
    2c44:	e7f8      	b.n	2c38 <__libc_init_array+0x2c>
    2c46:	bd70      	pop	{r4, r5, r6, pc}
    2c48:	200000f8 	.word	0x200000f8
    2c4c:	200000f8 	.word	0x200000f8
    2c50:	200000f8 	.word	0x200000f8
    2c54:	20000110 	.word	0x20000110

00002c58 <malloc>:
    2c58:	b510      	push	{r4, lr}
    2c5a:	4b03      	ldr	r3, [pc, #12]	; (2c68 <malloc+0x10>)
    2c5c:	0001      	movs	r1, r0
    2c5e:	6818      	ldr	r0, [r3, #0]
    2c60:	f000 f866 	bl	2d30 <_malloc_r>
    2c64:	bd10      	pop	{r4, pc}
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	200000f4 	.word	0x200000f4

00002c6c <free>:
    2c6c:	b510      	push	{r4, lr}
    2c6e:	4b03      	ldr	r3, [pc, #12]	; (2c7c <free+0x10>)
    2c70:	0001      	movs	r1, r0
    2c72:	6818      	ldr	r0, [r3, #0]
    2c74:	f000 f816 	bl	2ca4 <_free_r>
    2c78:	bd10      	pop	{r4, pc}
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	200000f4 	.word	0x200000f4

00002c80 <memcpy>:
    2c80:	2300      	movs	r3, #0
    2c82:	b510      	push	{r4, lr}
    2c84:	429a      	cmp	r2, r3
    2c86:	d003      	beq.n	2c90 <memcpy+0x10>
    2c88:	5ccc      	ldrb	r4, [r1, r3]
    2c8a:	54c4      	strb	r4, [r0, r3]
    2c8c:	3301      	adds	r3, #1
    2c8e:	e7f9      	b.n	2c84 <memcpy+0x4>
    2c90:	bd10      	pop	{r4, pc}

00002c92 <memset>:
    2c92:	0003      	movs	r3, r0
    2c94:	1882      	adds	r2, r0, r2
    2c96:	4293      	cmp	r3, r2
    2c98:	d002      	beq.n	2ca0 <memset+0xe>
    2c9a:	7019      	strb	r1, [r3, #0]
    2c9c:	3301      	adds	r3, #1
    2c9e:	e7fa      	b.n	2c96 <memset+0x4>
    2ca0:	4770      	bx	lr
	...

00002ca4 <_free_r>:
    2ca4:	b530      	push	{r4, r5, lr}
    2ca6:	2900      	cmp	r1, #0
    2ca8:	d03e      	beq.n	2d28 <_free_r+0x84>
    2caa:	3904      	subs	r1, #4
    2cac:	680b      	ldr	r3, [r1, #0]
    2cae:	2b00      	cmp	r3, #0
    2cb0:	da00      	bge.n	2cb4 <_free_r+0x10>
    2cb2:	18c9      	adds	r1, r1, r3
    2cb4:	4a1d      	ldr	r2, [pc, #116]	; (2d2c <_free_r+0x88>)
    2cb6:	6813      	ldr	r3, [r2, #0]
    2cb8:	0014      	movs	r4, r2
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d102      	bne.n	2cc4 <_free_r+0x20>
    2cbe:	604b      	str	r3, [r1, #4]
    2cc0:	6011      	str	r1, [r2, #0]
    2cc2:	e031      	b.n	2d28 <_free_r+0x84>
    2cc4:	428b      	cmp	r3, r1
    2cc6:	d90d      	bls.n	2ce4 <_free_r+0x40>
    2cc8:	680a      	ldr	r2, [r1, #0]
    2cca:	1888      	adds	r0, r1, r2
    2ccc:	4283      	cmp	r3, r0
    2cce:	d103      	bne.n	2cd8 <_free_r+0x34>
    2cd0:	6818      	ldr	r0, [r3, #0]
    2cd2:	685b      	ldr	r3, [r3, #4]
    2cd4:	1882      	adds	r2, r0, r2
    2cd6:	600a      	str	r2, [r1, #0]
    2cd8:	604b      	str	r3, [r1, #4]
    2cda:	6021      	str	r1, [r4, #0]
    2cdc:	e024      	b.n	2d28 <_free_r+0x84>
    2cde:	428a      	cmp	r2, r1
    2ce0:	d803      	bhi.n	2cea <_free_r+0x46>
    2ce2:	0013      	movs	r3, r2
    2ce4:	685a      	ldr	r2, [r3, #4]
    2ce6:	2a00      	cmp	r2, #0
    2ce8:	d1f9      	bne.n	2cde <_free_r+0x3a>
    2cea:	681d      	ldr	r5, [r3, #0]
    2cec:	195c      	adds	r4, r3, r5
    2cee:	428c      	cmp	r4, r1
    2cf0:	d10b      	bne.n	2d0a <_free_r+0x66>
    2cf2:	6809      	ldr	r1, [r1, #0]
    2cf4:	1869      	adds	r1, r5, r1
    2cf6:	1858      	adds	r0, r3, r1
    2cf8:	6019      	str	r1, [r3, #0]
    2cfa:	4282      	cmp	r2, r0
    2cfc:	d114      	bne.n	2d28 <_free_r+0x84>
    2cfe:	6810      	ldr	r0, [r2, #0]
    2d00:	6852      	ldr	r2, [r2, #4]
    2d02:	1841      	adds	r1, r0, r1
    2d04:	6019      	str	r1, [r3, #0]
    2d06:	605a      	str	r2, [r3, #4]
    2d08:	e00e      	b.n	2d28 <_free_r+0x84>
    2d0a:	428c      	cmp	r4, r1
    2d0c:	d902      	bls.n	2d14 <_free_r+0x70>
    2d0e:	230c      	movs	r3, #12
    2d10:	6003      	str	r3, [r0, #0]
    2d12:	e009      	b.n	2d28 <_free_r+0x84>
    2d14:	6808      	ldr	r0, [r1, #0]
    2d16:	180c      	adds	r4, r1, r0
    2d18:	42a2      	cmp	r2, r4
    2d1a:	d103      	bne.n	2d24 <_free_r+0x80>
    2d1c:	6814      	ldr	r4, [r2, #0]
    2d1e:	6852      	ldr	r2, [r2, #4]
    2d20:	1820      	adds	r0, r4, r0
    2d22:	6008      	str	r0, [r1, #0]
    2d24:	604a      	str	r2, [r1, #4]
    2d26:	6059      	str	r1, [r3, #4]
    2d28:	bd30      	pop	{r4, r5, pc}
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	20000d90 	.word	0x20000d90

00002d30 <_malloc_r>:
    2d30:	2303      	movs	r3, #3
    2d32:	b570      	push	{r4, r5, r6, lr}
    2d34:	1ccd      	adds	r5, r1, #3
    2d36:	439d      	bics	r5, r3
    2d38:	3508      	adds	r5, #8
    2d3a:	0006      	movs	r6, r0
    2d3c:	2d0c      	cmp	r5, #12
    2d3e:	d201      	bcs.n	2d44 <_malloc_r+0x14>
    2d40:	250c      	movs	r5, #12
    2d42:	e005      	b.n	2d50 <_malloc_r+0x20>
    2d44:	2d00      	cmp	r5, #0
    2d46:	da03      	bge.n	2d50 <_malloc_r+0x20>
    2d48:	230c      	movs	r3, #12
    2d4a:	2000      	movs	r0, #0
    2d4c:	6033      	str	r3, [r6, #0]
    2d4e:	e040      	b.n	2dd2 <_malloc_r+0xa2>
    2d50:	42a9      	cmp	r1, r5
    2d52:	d8f9      	bhi.n	2d48 <_malloc_r+0x18>
    2d54:	4b1f      	ldr	r3, [pc, #124]	; (2dd4 <_malloc_r+0xa4>)
    2d56:	681c      	ldr	r4, [r3, #0]
    2d58:	001a      	movs	r2, r3
    2d5a:	0021      	movs	r1, r4
    2d5c:	2900      	cmp	r1, #0
    2d5e:	d013      	beq.n	2d88 <_malloc_r+0x58>
    2d60:	680b      	ldr	r3, [r1, #0]
    2d62:	1b5b      	subs	r3, r3, r5
    2d64:	d40d      	bmi.n	2d82 <_malloc_r+0x52>
    2d66:	2b0b      	cmp	r3, #11
    2d68:	d902      	bls.n	2d70 <_malloc_r+0x40>
    2d6a:	600b      	str	r3, [r1, #0]
    2d6c:	18cc      	adds	r4, r1, r3
    2d6e:	e01e      	b.n	2dae <_malloc_r+0x7e>
    2d70:	428c      	cmp	r4, r1
    2d72:	d102      	bne.n	2d7a <_malloc_r+0x4a>
    2d74:	6863      	ldr	r3, [r4, #4]
    2d76:	6013      	str	r3, [r2, #0]
    2d78:	e01a      	b.n	2db0 <_malloc_r+0x80>
    2d7a:	684b      	ldr	r3, [r1, #4]
    2d7c:	6063      	str	r3, [r4, #4]
    2d7e:	000c      	movs	r4, r1
    2d80:	e016      	b.n	2db0 <_malloc_r+0x80>
    2d82:	000c      	movs	r4, r1
    2d84:	6849      	ldr	r1, [r1, #4]
    2d86:	e7e9      	b.n	2d5c <_malloc_r+0x2c>
    2d88:	4c13      	ldr	r4, [pc, #76]	; (2dd8 <_malloc_r+0xa8>)
    2d8a:	6823      	ldr	r3, [r4, #0]
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d103      	bne.n	2d98 <_malloc_r+0x68>
    2d90:	0030      	movs	r0, r6
    2d92:	f000 f823 	bl	2ddc <_sbrk_r>
    2d96:	6020      	str	r0, [r4, #0]
    2d98:	0029      	movs	r1, r5
    2d9a:	0030      	movs	r0, r6
    2d9c:	f000 f81e 	bl	2ddc <_sbrk_r>
    2da0:	1c43      	adds	r3, r0, #1
    2da2:	d0d1      	beq.n	2d48 <_malloc_r+0x18>
    2da4:	2303      	movs	r3, #3
    2da6:	1cc4      	adds	r4, r0, #3
    2da8:	439c      	bics	r4, r3
    2daa:	42a0      	cmp	r0, r4
    2dac:	d10a      	bne.n	2dc4 <_malloc_r+0x94>
    2dae:	6025      	str	r5, [r4, #0]
    2db0:	0020      	movs	r0, r4
    2db2:	2207      	movs	r2, #7
    2db4:	300b      	adds	r0, #11
    2db6:	1d23      	adds	r3, r4, #4
    2db8:	4390      	bics	r0, r2
    2dba:	1ac3      	subs	r3, r0, r3
    2dbc:	d009      	beq.n	2dd2 <_malloc_r+0xa2>
    2dbe:	425a      	negs	r2, r3
    2dc0:	50e2      	str	r2, [r4, r3]
    2dc2:	e006      	b.n	2dd2 <_malloc_r+0xa2>
    2dc4:	1a21      	subs	r1, r4, r0
    2dc6:	0030      	movs	r0, r6
    2dc8:	f000 f808 	bl	2ddc <_sbrk_r>
    2dcc:	1c43      	adds	r3, r0, #1
    2dce:	d1ee      	bne.n	2dae <_malloc_r+0x7e>
    2dd0:	e7ba      	b.n	2d48 <_malloc_r+0x18>
    2dd2:	bd70      	pop	{r4, r5, r6, pc}
    2dd4:	20000d90 	.word	0x20000d90
    2dd8:	20000d8c 	.word	0x20000d8c

00002ddc <_sbrk_r>:
    2ddc:	2300      	movs	r3, #0
    2dde:	b570      	push	{r4, r5, r6, lr}
    2de0:	4c06      	ldr	r4, [pc, #24]	; (2dfc <_sbrk_r+0x20>)
    2de2:	0005      	movs	r5, r0
    2de4:	0008      	movs	r0, r1
    2de6:	6023      	str	r3, [r4, #0]
    2de8:	f000 f812 	bl	2e10 <_sbrk>
    2dec:	1c43      	adds	r3, r0, #1
    2dee:	d103      	bne.n	2df8 <_sbrk_r+0x1c>
    2df0:	6823      	ldr	r3, [r4, #0]
    2df2:	2b00      	cmp	r3, #0
    2df4:	d000      	beq.n	2df8 <_sbrk_r+0x1c>
    2df6:	602b      	str	r3, [r5, #0]
    2df8:	bd70      	pop	{r4, r5, r6, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	20000d98 	.word	0x20000d98

00002e00 <strlen>:
    2e00:	2300      	movs	r3, #0
    2e02:	5cc2      	ldrb	r2, [r0, r3]
    2e04:	3301      	adds	r3, #1
    2e06:	2a00      	cmp	r2, #0
    2e08:	d1fb      	bne.n	2e02 <strlen+0x2>
    2e0a:	1e58      	subs	r0, r3, #1
    2e0c:	4770      	bx	lr
	...

00002e10 <_sbrk>:
    2e10:	4a04      	ldr	r2, [pc, #16]	; (2e24 <_sbrk+0x14>)
    2e12:	6813      	ldr	r3, [r2, #0]
    2e14:	2b00      	cmp	r3, #0
    2e16:	d003      	beq.n	2e20 <_sbrk+0x10>
    2e18:	1818      	adds	r0, r3, r0
    2e1a:	6010      	str	r0, [r2, #0]
    2e1c:	0018      	movs	r0, r3
    2e1e:	4770      	bx	lr
    2e20:	4b01      	ldr	r3, [pc, #4]	; (2e28 <_sbrk+0x18>)
    2e22:	e7f9      	b.n	2e18 <_sbrk+0x8>
    2e24:	20000d94 	.word	0x20000d94
    2e28:	20000d9c 	.word	0x20000d9c

00002e2c <_init>:
    2e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e32:	bc08      	pop	{r3}
    2e34:	469e      	mov	lr, r3
    2e36:	4770      	bx	lr

00002e38 <_fini>:
    2e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e3e:	bc08      	pop	{r3}
    2e40:	469e      	mov	lr, r3
    2e42:	4770      	bx	lr

00002e44 <_ZTV16APA102ControllerILh6ELh9EL6EOrder136ELh4EE>:
	...
    2e4c:	07c1 0000 0813 0000 0459 0000 0119 0000     ........Y.......
    2e5c:	0115 0000 0139 0000 0645 0000 7265 6f72     ....9...E...erro
    2e6c:	0072 0a0d 6e00 6e61 6f00 6676 2e00 6900     r....nan.ovf...i
    2e7c:	666e 0000                                   nf..

00002e80 <_ZTV7Serial_>:
	...
    2e88:	0bf9 0000 0c25 0000 0c0d 0000 0c41 0000     ....%.......A...
    2e98:	0c65 0000 0c19 0000 0bf5 0000               e...........

00002ea4 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    2eac:	0f31 0000 0ff5 0000 0e6d 0000               1.......m...

00002eb8 <_ZL19STRING_MANUFACTURER>:
    2eb8:	6441 6661 7572 7469 0000                    Adafruit..

00002ec2 <_ZL15STRING_LANGUAGE>:
    2ec2:	0304 0409                                   ....

00002ec6 <_ZL21USB_DeviceDescriptorB>:
    2ec6:	0112 0200 02ef 4001 239a 800b 0100 0201     .......@.#......
    2ed6:	0103                                        ..

00002ed8 <_ZL14STRING_PRODUCT>:
    2ed8:	6546 7461 6568 2072 304d 0000               Feather M0..

00002ee4 <g_APinDescription>:
    2ee4:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    2ef4:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    2f04:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    2f14:	0000 0000 000e 0000 0008 0000 0004 0000     ................
    2f24:	00ff ffff ffff 000e 0000 0000 0009 0000     ................
    2f34:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    2f44:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    2f54:	00ff 0000 0000 0010 0000 0000 000f 0000     ................
    2f64:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    2f74:	0000 0000 0014 0000 0005 0000 002c 0000     ............,...
    2f84:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    2f94:	0008 0000 0004 0000 00ff ffff ffff 0005     ................
    2fa4:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    2fb4:	0006 0100 0100 0006 0000 0000 0007 0000     ................
    2fc4:	0004 0000 001c 0000 0007 0101 0101 0007     ................
    2fd4:	0000 0000 0012 0000 0004 0000 001c 0000     ................
    2fe4:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    2ff4:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    3004:	0000 0000 0013 0000 0005 0000 002c 0000     ............,...
    3014:	00ff 0003 0003 0003 0000 0000 0011 0000     ................
    3024:	0004 0000 001c 0000 00ff 0201 0201 0001     ................
    3034:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    3044:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    3054:	0001 0000 0018 0000 0002 0400 0400 0008     ................
    3064:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    3074:	0003 0401 0401 0009 0000 0000 0004 0000     ................
    3084:	0001 0000 0000 0000 0004 ffff ffff 0004     ................
    3094:	0000 0000 0005 0000 0001 0000 0000 0000     ................
    30a4:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    30b4:	0001 0000 0000 0000 000a ffff ffff 0002     ................
    30c4:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    30d4:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    30e4:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    30f4:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    3104:	00ff ffff ffff 000c 0001 0000 000a 0000     ................
    3114:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    3124:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    3134:	00ff ffff ffff 000b 0001 0000 0003 0000     ................
    3144:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    3154:	0000 0000 001b 0000 000b 0000 0004 0000     ................
    3164:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    3174:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    3184:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    3194:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    31a4:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    31b4:	0001 0000 0016 0000 0003 0000 0000 0000     ................
    31c4:	00ff ffff ffff 00ff 0001 0000 0017 0000     ................
    31d4:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    31e4:	0000 0000 0016 0000 0002 0000 0000 0000     ................
    31f4:	00ff ffff ffff 00ff 0000 0000 0017 0000     ................
    3204:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    3214:	0000 0000 0013 0000 0002 0000 0000 0000     ................
    3224:	00ff ffff ffff 00ff 0000 0000 0010 0000     ................
    3234:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    3244:	0000 0000 0012 0000 0002 0000 0000 0000     ................
    3254:	00ff ffff ffff 00ff 0000 0000 0011 0000     ................
    3264:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    3274:	0000 0000 000d 0000 0004 0000 000c 0000     ................
    3284:	00ff 0001 ffff 000d 0000 0000 0015 0000     ................
    3294:	0005 0000 000c 0000 00ff 0003 ffff 00ff     ................
    32a4:	0000 0000 0006 0000 0004 0000 000c 0000     ................
    32b4:	00ff 0100 ffff 00ff 0000 0000 0007 0000     ................
    32c4:	0004 0000 000c 0000 00ff 0101 ffff 00ff     ................
    32d4:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    32e4:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    32f4:	0001 0000 0002 0000 0014 ffff ffff 0002     ................
    3304:	0000 0000 0006 0000 0001 0000 0002 0000     ................
    3314:	0006 0100 0100 0006 0000 0000 0007 0000     ................
    3324:	0001 0000 0002 0000 0007 0101 0101 0007     ................

00003334 <_ZTV4Uart>:
	...
    333c:	2631 0000 0989 0000 2613 0000 2627 0000     1&.......&..'&..
    334c:	261d 0000 2609 0000 22e9 0000 230d 0000     .&...&..."...#..
    335c:	25e5 0000 270d 0000 25f5 0000 25e1 0000     .%...'...%...%..
    336c:	0043 0000                                   C...

00003370 <__EH_FRAME_BEGIN__>:
    3370:	0000 0000                                   ....
